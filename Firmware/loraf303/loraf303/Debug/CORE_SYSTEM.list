
CORE_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e70  080180b0  080180b0  000280b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f20  08019f20  00030380  2**0
                  CONTENTS
  4 .ARM          00000008  08019f20  08019f20  00029f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f28  08019f28  00030380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019f28  08019f28  00029f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f2c  08019f2c  00029f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  08019f30  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030380  2**0
                  CONTENTS
 10 .bss          00000b38  20000380  20000380  00030380  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000eb8  20000eb8  00030380  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022812  00000000  00000000  000303f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d76  00000000  00000000  00052c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e30  00000000  00000000  00057980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017a6  00000000  00000000  000597b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026a36  00000000  00000000  0005af56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026ca8  00000000  00000000  0008198c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df713  00000000  00000000  000a8634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009990  00000000  00000000  00187d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001916d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000380 	.word	0x20000380
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08018098 	.word	0x08018098

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000384 	.word	0x20000384
 80001dc:	08018098 	.word	0x08018098

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <HMC5883L_WriteRegister>:
#include "math.h"
extern I2C_HandleTypeDef hi2c1;


// Function to write a byte to a register on the HMC5883L module
void HMC5883L_WriteRegister(uint8_t regAddr, uint8_t data) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af04      	add	r7, sp, #16
 8001006:	4603      	mov	r3, r0
 8001008:	460a      	mov	r2, r1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, HMC5883L_DEFAULT_ADDRESS, regAddr, 1, &data, 1, HAL_MAX_DELAY);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	b29a      	uxth	r2, r3
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2301      	movs	r3, #1
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	1dbb      	adds	r3, r7, #6
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	213c      	movs	r1, #60	; 0x3c
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <HMC5883L_WriteRegister+0x34>)
 8001028:	f006 fa18 	bl	800745c <HAL_I2C_Mem_Write>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000718 	.word	0x20000718

08001038 <HMC5883L_ReadRegisters>:

////Function to read multiple bytes from consecutive registers on the HMC5883L module
//void HMC5883L_ReadRegisters(uint8_t regAddr, uint8_t *buffer, uint16_t count) {
//    HAL_I2C_Mem_Read(&hi2c2, HMC5883L_DEFAULT_ADDRESS, regAddr, 1, buffer, count, HAL_MAX_DELAY);
//}
int16_t HMC5883L_ReadRegisters(uint8_t regAddr) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af04      	add	r7, sp, #16
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	int16_t value;
    uint8_t vha[2];
    HAL_I2C_Mem_Read(&hi2c1, HMC5883L_DEFAULT_ADDRESS, regAddr, 1, vha, 2, HAL_MAX_DELAY);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	b29a      	uxth	r2, r3
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2302      	movs	r3, #2
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	213c      	movs	r1, #60	; 0x3c
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <HMC5883L_ReadRegisters+0x44>)
 800105c:	f006 fb12 	bl	8007684 <HAL_I2C_Mem_Read>
    value = vha[0] << 8 | vha[1];
 8001060:	7b3b      	ldrb	r3, [r7, #12]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	81fb      	strh	r3, [r7, #14]

    return value;
 800106e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000718 	.word	0x20000718

08001080 <HMC5883L_Init>:

// Function to initialize the HMC5883L module
void HMC5883L_Init(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
    // Configure the module's settings
    // For example, set the measurement mode, output rate, etc.
    // Write the appropriate values to the corresponding registers

    // Set the Configuration Register A (0x00)
    uint8_t configA = 0x10; // Configurations: 75 Hz output rate,
 8001086:	2310      	movs	r3, #16
 8001088:	71fb      	strb	r3, [r7, #7]
    HMC5883L_WriteRegister(HMC5883L_REG_CONFIG_A, configA);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4619      	mov	r1, r3
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff ffb6 	bl	8001000 <HMC5883L_WriteRegister>

    // Set the Configuration Register B (0x01)
    uint8_t configB = 0x20; // Gain = 1.3 Ga
 8001094:	2320      	movs	r3, #32
 8001096:	71bb      	strb	r3, [r7, #6]
    HMC5883L_WriteRegister(HMC5883L_REG_CONFIG_B, configB);
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	4619      	mov	r1, r3
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff ffaf 	bl	8001000 <HMC5883L_WriteRegister>

    // Set the Mode Register (0x02)
    uint8_t mode = 0x00; // Continuous measurement mode
 80010a2:	2300      	movs	r3, #0
 80010a4:	717b      	strb	r3, [r7, #5]
    HMC5883L_WriteRegister(HMC5883L_REG_MODE, mode);
 80010a6:	797b      	ldrb	r3, [r7, #5]
 80010a8:	4619      	mov	r1, r3
 80010aa:	2002      	movs	r0, #2
 80010ac:	f7ff ffa8 	bl	8001000 <HMC5883L_WriteRegister>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HMC5883L_ReadMagneticField>:

// Function to read the magnetic field data from the HMC5883L module
void HMC5883L_ReadMagneticField(HMC5883L *hmc5883l){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
//	HMC5883L_ReadRegisters(HMC5883L_REG_OUT_X_M, buffer, 6);
//	// Convert the raw data to signed 16-bit integers
//	hmc5883l->XAxis = (int16_t)((buffer[0] << 8) | buffer[1]);
//	hmc5883l->YAxis = (int16_t)((buffer[2] << 8) | buffer[3]);
//	hmc5883l->ZAxis = (int16_t)((buffer[4] << 8) | buffer[5]);
	hmc5883l->XAxis = HMC5883L_ReadRegisters(HMC5883L_REG_OUT_X_M);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f7ff ffb9 	bl	8001038 <HMC5883L_ReadRegisters>
 80010c6:	4603      	mov	r3, r0
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	edc3 7a00 	vstr	s15, [r3]
	hmc5883l->YAxis = HMC5883L_ReadRegisters(HMC5883L_REG_OUT_Y_M);
 80010d6:	2007      	movs	r0, #7
 80010d8:	f7ff ffae 	bl	8001038 <HMC5883L_ReadRegisters>
 80010dc:	4603      	mov	r3, r0
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	edc3 7a01 	vstr	s15, [r3, #4]
	hmc5883l->ZAxis = HMC5883L_ReadRegisters(HMC5883L_REG_OUT_Z_M);
 80010ec:	2005      	movs	r0, #5
 80010ee:	f7ff ffa3 	bl	8001038 <HMC5883L_ReadRegisters>
 80010f2:	4603      	mov	r3, r0
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HMC5883L_Calibration>:


void HMC5883L_Calibration(HMC5883L *hmc5883l){
 800110a:	b580      	push	{r7, lr}
 800110c:	b08c      	sub	sp, #48	; 0x30
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
	int32_t x_offset = 0, y_offset = 0, z_offset = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
	int32_t x_max = INT32_MIN, y_max = INT32_MIN, z_max = INT32_MIN;
 800111e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001124:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
 800112a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t x_min = INT32_MAX, y_min = INT32_MAX, z_min = INT32_MAX;
 8001130:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001134:	623b      	str	r3, [r7, #32]
 8001136:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001140:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<1000;i++){
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	e086      	b.n	8001256 <HMC5883L_Calibration+0x14c>
		    HMC5883L_ReadMagneticField(hmc5883l);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffb5 	bl	80010b8 <HMC5883L_ReadMagneticField>
	        //Update data max and min
			if(hmc5883l->XAxis < x_min) x_min = hmc5883l->XAxis;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	d507      	bpl.n	8001178 <HMC5883L_Calibration+0x6e>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001172:	ee17 3a90 	vmov	r3, s15
 8001176:	623b      	str	r3, [r7, #32]
			if(hmc5883l->XAxis > x_max) x_max = hmc5883l->XAxis;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001190:	dd07      	ble.n	80011a2 <HMC5883L_Calibration+0x98>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119c:	ee17 3a90 	vmov	r3, s15
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(hmc5883l->YAxis < y_min) y_min = hmc5883l->YAxis;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d507      	bpl.n	80011cc <HMC5883L_Calibration+0xc2>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c6:	ee17 3a90 	vmov	r3, s15
 80011ca:	61fb      	str	r3, [r7, #28]
			if(hmc5883l->YAxis > y_max) y_max = hmc5883l->YAxis;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80011d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	dd07      	ble.n	80011f6 <HMC5883L_Calibration+0xec>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f0:	ee17 3a90 	vmov	r3, s15
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
			if(hmc5883l->ZAxis < z_min) x_min = hmc5883l->ZAxis;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001206:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d507      	bpl.n	8001220 <HMC5883L_Calibration+0x116>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	edd3 7a02 	vldr	s15, [r3, #8]
 8001216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121a:	ee17 3a90 	vmov	r3, s15
 800121e:	623b      	str	r3, [r7, #32]
			if(hmc5883l->ZAxis > z_max) z_max = hmc5883l->ZAxis;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	ed93 7a02 	vldr	s14, [r3, #8]
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	dd07      	ble.n	800124a <HMC5883L_Calibration+0x140>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001244:	ee17 3a90 	vmov	r3, s15
 8001248:	627b      	str	r3, [r7, #36]	; 0x24

			HAL_Delay(10);
 800124a:	200a      	movs	r0, #10
 800124c:	f004 fae2 	bl	8005814 <HAL_Delay>
	for(int i=0;i<1000;i++){
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	3301      	adds	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800125c:	f6ff af74 	blt.w	8001148 <HMC5883L_Calibration+0x3e>
	}
	//Calculate offset from min and max
	x_offset = (x_max + x_min) / 2;
 8001260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	4413      	add	r3, r2
 8001266:	0fda      	lsrs	r2, r3, #31
 8001268:	4413      	add	r3, r2
 800126a:	105b      	asrs	r3, r3, #1
 800126c:	617b      	str	r3, [r7, #20]
	y_offset = (y_max + y_min) / 2;
 800126e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	4413      	add	r3, r2
 8001274:	0fda      	lsrs	r2, r3, #31
 8001276:	4413      	add	r3, r2
 8001278:	105b      	asrs	r3, r3, #1
 800127a:	613b      	str	r3, [r7, #16]
	z_offset = (z_max + z_min) / 2;
 800127c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	4413      	add	r3, r2
 8001282:	0fda      	lsrs	r2, r3, #31
 8001284:	4413      	add	r3, r2
 8001286:	105b      	asrs	r3, r3, #1
 8001288:	60fb      	str	r3, [r7, #12]

	//Finally
	 hmc5883l->XAxis  -= x_offset;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	ed93 7a00 	vldr	s14, [r3]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	edc3 7a00 	vstr	s15, [r3]
	 hmc5883l->YAxis -= y_offset;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	edc3 7a01 	vstr	s15, [r3, #4]
     hmc5883l->ZAxis -= z_offset;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80012d8:	bf00      	nop
 80012da:	3730      	adds	r7, #48	; 0x30
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <MPU6050_Init>:





uint8_t MPU6050_Init(void){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af04      	add	r7, sp, #16
	uint8_t check,data;
	//check device ID WHO_AM_I
	HAL_I2C_Mem_Read(&hi2c1,MPU6050_ADDR , WHO_AM_I_REG,1, &check, 1 , i2c_timeout);
 80012e6:	2364      	movs	r3, #100	; 0x64
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2275      	movs	r2, #117	; 0x75
 80012f6:	21d0      	movs	r1, #208	; 0xd0
 80012f8:	4822      	ldr	r0, [pc, #136]	; (8001384 <MPU6050_Init+0xa4>)
 80012fa:	f006 f9c3 	bl	8007684 <HAL_I2C_Mem_Read>
	if (check == 104)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b68      	cmp	r3, #104	; 0x68
 8001302:	d139      	bne.n	8001378 <MPU6050_Init+0x98>
		{
			//Power management register write all 0's to wake up sensor
			data = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, i2c_timeout);
 8001308:	2364      	movs	r3, #100	; 0x64
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2301      	movs	r3, #1
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	1dbb      	adds	r3, r7, #6
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	226b      	movs	r2, #107	; 0x6b
 8001318:	21d0      	movs	r1, #208	; 0xd0
 800131a:	481a      	ldr	r0, [pc, #104]	; (8001384 <MPU6050_Init+0xa4>)
 800131c:	f006 f89e 	bl	800745c <HAL_I2C_Mem_Write>
			//Set data rate of 1KHz by writing SMPRT_DIV register
			data = 0x07;
 8001320:	2307      	movs	r3, #7
 8001322:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, i2c_timeout);
 8001324:	2364      	movs	r3, #100	; 0x64
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	2301      	movs	r3, #1
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	1dbb      	adds	r3, r7, #6
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	2219      	movs	r2, #25
 8001334:	21d0      	movs	r1, #208	; 0xd0
 8001336:	4813      	ldr	r0, [pc, #76]	; (8001384 <MPU6050_Init+0xa4>)
 8001338:	f006 f890 	bl	800745c <HAL_I2C_Mem_Write>
			//Writing both register with 0 to set full scale range
			data = 0x00;
 800133c:	2300      	movs	r3, #0
 800133e:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, i2c_timeout);
 8001340:	2364      	movs	r3, #100	; 0x64
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	2301      	movs	r3, #1
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	1dbb      	adds	r3, r7, #6
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	221c      	movs	r2, #28
 8001350:	21d0      	movs	r1, #208	; 0xd0
 8001352:	480c      	ldr	r0, [pc, #48]	; (8001384 <MPU6050_Init+0xa4>)
 8001354:	f006 f882 	bl	800745c <HAL_I2C_Mem_Write>

			data = 0x00;
 8001358:	2300      	movs	r3, #0
 800135a:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, i2c_timeout);
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	1dbb      	adds	r3, r7, #6
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	221b      	movs	r2, #27
 800136c:	21d0      	movs	r1, #208	; 0xd0
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MPU6050_Init+0xa4>)
 8001370:	f006 f874 	bl	800745c <HAL_I2C_Mem_Write>
			return 0;
 8001374:	2300      	movs	r3, #0
 8001376:	e000      	b.n	800137a <MPU6050_Init+0x9a>
		}
	return 1;
 8001378:	2301      	movs	r3, #1
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000718 	.word	0x20000718

08001388 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel (MPU6050 *mpu6050)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af04      	add	r7, sp, #16
 800138e:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];

	 // Read 6 BYTES of data starting from ACCEL_XOUT_H register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	2306      	movs	r3, #6
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2301      	movs	r3, #1
 80013a0:	223b      	movs	r2, #59	; 0x3b
 80013a2:	21d0      	movs	r1, #208	; 0xd0
 80013a4:	482a      	ldr	r0, [pc, #168]	; (8001450 <MPU6050_Read_Accel+0xc8>)
 80013a6:	f006 f96d 	bl	8007684 <HAL_I2C_Mem_Read>
	//Adding 2 BYTES into 16 bit integer
	mpu6050->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80013aa:	7a3b      	ldrb	r3, [r7, #8]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	7a7b      	ldrb	r3, [r7, #9]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	801a      	strh	r2, [r3, #0]
	mpu6050->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80013bc:	7abb      	ldrb	r3, [r7, #10]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	7afb      	ldrb	r3, [r7, #11]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	805a      	strh	r2, [r3, #2]
	mpu6050->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80013ce:	7b3b      	ldrb	r3, [r7, #12]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	7b7b      	ldrb	r3, [r7, #13]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21a      	sxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	809a      	strh	r2, [r3, #4]

	mpu6050->Ax = mpu6050->Accel_X_RAW/16384.0;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8a4 	bl	8000534 <__aeabi_i2d>
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MPU6050_Read_Accel+0xcc>)
 80013f2:	f7ff fa33 	bl	800085c <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mpu6050->Ay = mpu6050->Accel_Y_RAW/16384.0;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f894 	bl	8000534 <__aeabi_i2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MPU6050_Read_Accel+0xcc>)
 8001412:	f7ff fa23 	bl	800085c <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mpu6050->Az = mpu6050->Accel_Z_RAW/Accel_Z_corrector;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f884 	bl	8000534 <__aeabi_i2d>
 800142c:	a306      	add	r3, pc, #24	; (adr r3, 8001448 <MPU6050_Read_Accel+0xc0>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff fa13 	bl	800085c <__aeabi_ddiv>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	00000000 	.word	0x00000000
 800144c:	40cc2900 	.word	0x40cc2900
 8001450:	20000718 	.word	0x20000718
 8001454:	40d00000 	.word	0x40d00000

08001458 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (MPU6050 *mpu6050)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af04      	add	r7, sp, #16
 800145e:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];
	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	2306      	movs	r3, #6
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2301      	movs	r3, #1
 8001470:	2243      	movs	r2, #67	; 0x43
 8001472:	21d0      	movs	r1, #208	; 0xd0
 8001474:	482a      	ldr	r0, [pc, #168]	; (8001520 <MPU6050_Read_Gyro+0xc8>)
 8001476:	f006 f905 	bl	8007684 <HAL_I2C_Mem_Read>
	mpu6050->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800147a:	7a3b      	ldrb	r3, [r7, #8]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b21a      	sxth	r2, r3
 8001480:	7a7b      	ldrb	r3, [r7, #9]
 8001482:	b21b      	sxth	r3, r3
 8001484:	4313      	orrs	r3, r2
 8001486:	b21a      	sxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	841a      	strh	r2, [r3, #32]
	mpu6050->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800148c:	7abb      	ldrb	r3, [r7, #10]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	7afb      	ldrb	r3, [r7, #11]
 8001494:	b21b      	sxth	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	845a      	strh	r2, [r3, #34]	; 0x22
	mpu6050->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800149e:	7b3b      	ldrb	r3, [r7, #12]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	7b7b      	ldrb	r3, [r7, #13]
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	849a      	strh	r2, [r3, #36]	; 0x24
	mpu6050->Gx = mpu6050->Gyro_X_RAW/131.0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f83c 	bl	8000534 <__aeabi_i2d>
 80014bc:	a316      	add	r3, pc, #88	; (adr r3, 8001518 <MPU6050_Read_Gyro+0xc0>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f9cb 	bl	800085c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mpu6050->Gy = mpu6050->Gyro_Y_RAW/131.0;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f82c 	bl	8000534 <__aeabi_i2d>
 80014dc:	a30e      	add	r3, pc, #56	; (adr r3, 8001518 <MPU6050_Read_Gyro+0xc0>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff f9bb 	bl	800085c <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	mpu6050->Gz = mpu6050->Gyro_Z_RAW/131.0;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f81c 	bl	8000534 <__aeabi_i2d>
 80014fc:	a306      	add	r3, pc, #24	; (adr r3, 8001518 <MPU6050_Read_Gyro+0xc0>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff f9ab 	bl	800085c <__aeabi_ddiv>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	00000000 	.word	0x00000000
 800151c:	40606000 	.word	0x40606000
 8001520:	20000718 	.word	0x20000718
 8001524:	00000000 	.word	0x00000000

08001528 <MPU6050_Read_All>:


void MPU6050_Read_All(MPU6050 *mpu6050, MPU6050Error *error , HMC5883L *hmc5883l){
 8001528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800152c:	b096      	sub	sp, #88	; 0x58
 800152e:	af04      	add	r7, sp, #16
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[14];
		  int16_t temp;
		 // Read 14 BYTES of data starting from ACCEL_XOUT_H register
		  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001536:	2364      	movs	r3, #100	; 0x64
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	230e      	movs	r3, #14
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	223b      	movs	r2, #59	; 0x3b
 8001548:	21d0      	movs	r1, #208	; 0xd0
 800154a:	48bf      	ldr	r0, [pc, #764]	; (8001848 <MPU6050_Read_All+0x320>)
 800154c:	f006 f89a 	bl	8007684 <HAL_I2C_Mem_Read>
		  mpu6050->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001550:	7c3b      	ldrb	r3, [r7, #16]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7c7b      	ldrb	r3, [r7, #17]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21a      	sxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	801a      	strh	r2, [r3, #0]
		  mpu6050->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001562:	7cbb      	ldrb	r3, [r7, #18]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	7cfb      	ldrb	r3, [r7, #19]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	805a      	strh	r2, [r3, #2]
		  mpu6050->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001574:	7d3b      	ldrb	r3, [r7, #20]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7d7b      	ldrb	r3, [r7, #21]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21a      	sxth	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	809a      	strh	r2, [r3, #4]
		  temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001586:	7dbb      	ldrb	r3, [r7, #22]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	87fb      	strh	r3, [r7, #62]	; 0x3e
		  mpu6050->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001594:	7e3b      	ldrb	r3, [r7, #24]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	7e7b      	ldrb	r3, [r7, #25]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	841a      	strh	r2, [r3, #32]
		  mpu6050->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80015a6:	7ebb      	ldrb	r3, [r7, #26]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	7efb      	ldrb	r3, [r7, #27]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	845a      	strh	r2, [r3, #34]	; 0x22
		  mpu6050->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80015b8:	7f3b      	ldrb	r3, [r7, #28]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	7f7b      	ldrb	r3, [r7, #29]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	849a      	strh	r2, [r3, #36]	; 0x24
		  mpu6050->Ax = mpu6050->Accel_X_RAW / 16384.0;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffaf 	bl	8000534 <__aeabi_i2d>
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	4b9c      	ldr	r3, [pc, #624]	; (800184c <MPU6050_Read_All+0x324>)
 80015dc:	f7ff f93e 	bl	800085c <__aeabi_ddiv>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  mpu6050->Ay = mpu6050->Accel_Y_RAW / 16384.0;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff9f 	bl	8000534 <__aeabi_i2d>
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b94      	ldr	r3, [pc, #592]	; (800184c <MPU6050_Read_All+0x324>)
 80015fc:	f7ff f92e 	bl	800085c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	68f9      	ldr	r1, [r7, #12]
 8001606:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  mpu6050->Az = mpu6050->Accel_Z_RAW / 16384.0;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff8f 	bl	8000534 <__aeabi_i2d>
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b8c      	ldr	r3, [pc, #560]	; (800184c <MPU6050_Read_All+0x324>)
 800161c:	f7ff f91e 	bl	800085c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	68f9      	ldr	r1, [r7, #12]
 8001626:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  mpu6050->Temperature =(float)(temp/(float)340.0+(float)36.53);
 800162a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001636:	eddf 6a86 	vldr	s13, [pc, #536]	; 8001850 <MPU6050_Read_All+0x328>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001854 <MPU6050_Read_All+0x32c>
 8001642:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		  mpu6050->Gx = mpu6050->Gyro_X_RAW / 131.0;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff6e 	bl	8000534 <__aeabi_i2d>
 8001658:	a375      	add	r3, pc, #468	; (adr r3, 8001830 <MPU6050_Read_All+0x308>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff f8fd 	bl	800085c <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	68f9      	ldr	r1, [r7, #12]
 8001668:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		  mpu6050->Gy = mpu6050->Gyro_Y_RAW / 131.0;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff5e 	bl	8000534 <__aeabi_i2d>
 8001678:	a36d      	add	r3, pc, #436	; (adr r3, 8001830 <MPU6050_Read_All+0x308>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7ff f8ed 	bl	800085c <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	68f9      	ldr	r1, [r7, #12]
 8001688:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		  mpu6050->Gz = mpu6050->Gyro_Z_RAW / 131.0;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff4e 	bl	8000534 <__aeabi_i2d>
 8001698:	a365      	add	r3, pc, #404	; (adr r3, 8001830 <MPU6050_Read_All+0x308>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7ff f8dd 	bl	800085c <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38




	  double dt = (double)(HAL_GetTick() - previousTime)/1000;
 80016ac:	f004 f8a6 	bl	80057fc <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b69      	ldr	r3, [pc, #420]	; (8001858 <MPU6050_Read_All+0x330>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff2b 	bl	8000514 <__aeabi_ui2d>
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b66      	ldr	r3, [pc, #408]	; (800185c <MPU6050_Read_All+0x334>)
 80016c4:	f7ff f8ca 	bl	800085c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	  previousTime = HAL_GetTick();
 80016d0:	f004 f894 	bl	80057fc <HAL_GetTick>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a60      	ldr	r2, [pc, #384]	; (8001858 <MPU6050_Read_All+0x330>)
 80016d8:	6013      	str	r3, [r2, #0]

	  accAngleX = (atan2(-mpu6050->Ay,mpu6050->Az)*RAD_TO_DEG) - error->ErrorAccX;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016e0:	4614      	mov	r4, r2
 80016e2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	ed93 7b06 	vldr	d7, [r3, #24]
 80016ec:	eeb0 1a47 	vmov.f32	s2, s14
 80016f0:	eef0 1a67 	vmov.f32	s3, s15
 80016f4:	ec45 4b10 	vmov	d0, r4, r5
 80016f8:	f014 f96a 	bl	80159d0 <atan2>
 80016fc:	ec51 0b10 	vmov	r0, r1, d0
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b56      	ldr	r3, [pc, #344]	; (8001860 <MPU6050_Read_All+0x338>)
 8001706:	f7fe ff7f 	bl	8000608 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	a349      	add	r3, pc, #292	; (adr r3, 8001838 <MPU6050_Read_All+0x310>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7ff f8a0 	bl	800085c <__aeabi_ddiv>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4614      	mov	r4, r2
 8001722:	461d      	mov	r5, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff15 	bl	8000558 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe fdaf 	bl	8000298 <__aeabi_dsub>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4949      	ldr	r1, [pc, #292]	; (8001864 <MPU6050_Read_All+0x33c>)
 8001740:	e9c1 2300 	strd	r2, r3, [r1]
	  accAngleY = (atan2(-mpu6050->Ax,sqrt(pow(mpu6050->Az,2)+pow(mpu6050->Ay,2)))*RAD_TO_DEG) - error->ErrorAccY;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800174a:	4690      	mov	r8, r2
 800174c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	ed93 7b06 	vldr	d7, [r3, #24]
 8001756:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8001840 <MPU6050_Read_All+0x318>
 800175a:	eeb0 0a47 	vmov.f32	s0, s14
 800175e:	eef0 0a67 	vmov.f32	s1, s15
 8001762:	f014 f965 	bl	8015a30 <pow>
 8001766:	ec55 4b10 	vmov	r4, r5, d0
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001770:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001840 <MPU6050_Read_All+0x318>
 8001774:	eeb0 0a47 	vmov.f32	s0, s14
 8001778:	eef0 0a67 	vmov.f32	s1, s15
 800177c:	f014 f958 	bl	8015a30 <pow>
 8001780:	ec53 2b10 	vmov	r2, r3, d0
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7fe fd88 	bl	800029c <__adddf3>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	ec43 2b17 	vmov	d7, r2, r3
 8001794:	eeb0 0a47 	vmov.f32	s0, s14
 8001798:	eef0 0a67 	vmov.f32	s1, s15
 800179c:	f014 f9b8 	bl	8015b10 <sqrt>
 80017a0:	eeb0 7a40 	vmov.f32	s14, s0
 80017a4:	eef0 7a60 	vmov.f32	s15, s1
 80017a8:	eeb0 1a47 	vmov.f32	s2, s14
 80017ac:	eef0 1a67 	vmov.f32	s3, s15
 80017b0:	ec49 8b10 	vmov	d0, r8, r9
 80017b4:	f014 f90c 	bl	80159d0 <atan2>
 80017b8:	ec51 0b10 	vmov	r0, r1, d0
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <MPU6050_Read_All+0x338>)
 80017c2:	f7fe ff21 	bl	8000608 <__aeabi_dmul>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	a31a      	add	r3, pc, #104	; (adr r3, 8001838 <MPU6050_Read_All+0x310>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7ff f842 	bl	800085c <__aeabi_ddiv>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4614      	mov	r4, r2
 80017de:	461d      	mov	r5, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe feb7 	bl	8000558 <__aeabi_f2d>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f7fe fd51 	bl	8000298 <__aeabi_dsub>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	491b      	ldr	r1, [pc, #108]	; (8001868 <MPU6050_Read_All+0x340>)
 80017fc:	e9c1 2300 	strd	r2, r3, [r1]


	  mpu6050->Gx -= error->ErrorGyroX;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fea4 	bl	8000558 <__aeabi_f2d>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4620      	mov	r0, r4
 8001816:	4629      	mov	r1, r5
 8001818:	f7fe fd3e 	bl	8000298 <__aeabi_dsub>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  mpu6050->Gy -= error->ErrorGyroY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	e01d      	b.n	800186c <MPU6050_Read_All+0x344>
 8001830:	00000000 	.word	0x00000000
 8001834:	40606000 	.word	0x40606000
 8001838:	54442d18 	.word	0x54442d18
 800183c:	400921fb 	.word	0x400921fb
 8001840:	00000000 	.word	0x00000000
 8001844:	40000000 	.word	0x40000000
 8001848:	20000718 	.word	0x20000718
 800184c:	40d00000 	.word	0x40d00000
 8001850:	43aa0000 	.word	0x43aa0000
 8001854:	42121eb8 	.word	0x42121eb8
 8001858:	2000039c 	.word	0x2000039c
 800185c:	408f4000 	.word	0x408f4000
 8001860:	40668000 	.word	0x40668000
 8001864:	200003a8 	.word	0x200003a8
 8001868:	200003b0 	.word	0x200003b0
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe72 	bl	8000558 <__aeabi_f2d>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4620      	mov	r0, r4
 800187a:	4629      	mov	r1, r5
 800187c:	f7fe fd0c 	bl	8000298 <__aeabi_dsub>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	68f9      	ldr	r1, [r7, #12]
 8001886:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	  mpu6050->Gz -= error->ErrorGyroZ;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe5f 	bl	8000558 <__aeabi_f2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7fe fcf9 	bl	8000298 <__aeabi_dsub>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	68f9      	ldr	r1, [r7, #12]
 80018ac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	  mpu6050->Angle[0] = Kalman_Angle(&KalmanX, accAngleX, mpu6050->Gx, dt);
 80018b0:	4bd7      	ldr	r3, [pc, #860]	; (8001c10 <MPU6050_Read_All+0x6e8>)
 80018b2:	ed93 7b00 	vldr	d7, [r3]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80018bc:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 80018c0:	eeb0 1a46 	vmov.f32	s2, s12
 80018c4:	eef0 1a66 	vmov.f32	s3, s13
 80018c8:	eeb0 0a47 	vmov.f32	s0, s14
 80018cc:	eef0 0a67 	vmov.f32	s1, s15
 80018d0:	48d0      	ldr	r0, [pc, #832]	; (8001c14 <MPU6050_Read_All+0x6ec>)
 80018d2:	f000 f9c9 	bl	8001c68 <Kalman_Angle>
 80018d6:	ec53 2b10 	vmov	r2, r3, d0
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f7ff f98b 	bl	8000bf8 <__aeabi_d2f>
 80018e2:	4602      	mov	r2, r0
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	651a      	str	r2, [r3, #80]	; 0x50
	  mpu6050->Angle[1] = Kalman_Angle(&KalmanY, accAngleY, mpu6050->Gy, dt);
 80018e8:	4bcb      	ldr	r3, [pc, #812]	; (8001c18 <MPU6050_Read_All+0x6f0>)
 80018ea:	ed93 7b00 	vldr	d7, [r3]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80018f4:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 80018f8:	eeb0 1a46 	vmov.f32	s2, s12
 80018fc:	eef0 1a66 	vmov.f32	s3, s13
 8001900:	eeb0 0a47 	vmov.f32	s0, s14
 8001904:	eef0 0a67 	vmov.f32	s1, s15
 8001908:	48c4      	ldr	r0, [pc, #784]	; (8001c1c <MPU6050_Read_All+0x6f4>)
 800190a:	f000 f9ad 	bl	8001c68 <Kalman_Angle>
 800190e:	ec53 2b10 	vmov	r2, r3, d0
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f7ff f96f 	bl	8000bf8 <__aeabi_d2f>
 800191a:	4602      	mov	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
	  double magx = hmc5883l->XAxis*sin( mpu6050->Angle[0]*DEG_TO_RAD)-hmc5883l->YAxis*cos( mpu6050->Angle[0]*DEG_TO_RAD);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe17 	bl	8000558 <__aeabi_f2d>
 800192a:	4604      	mov	r4, r0
 800192c:	460d      	mov	r5, r1
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fe10 	bl	8000558 <__aeabi_f2d>
 8001938:	a3b3      	add	r3, pc, #716	; (adr r3, 8001c08 <MPU6050_Read_All+0x6e0>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fe63 	bl	8000608 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	4bb4      	ldr	r3, [pc, #720]	; (8001c20 <MPU6050_Read_All+0x6f8>)
 8001950:	f7fe ff84 	bl	800085c <__aeabi_ddiv>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	ec43 2b17 	vmov	d7, r2, r3
 800195c:	eeb0 0a47 	vmov.f32	s0, s14
 8001960:	eef0 0a67 	vmov.f32	s1, s15
 8001964:	f014 f954 	bl	8015c10 <sin>
 8001968:	ec53 2b10 	vmov	r2, r3, d0
 800196c:	4620      	mov	r0, r4
 800196e:	4629      	mov	r1, r5
 8001970:	f7fe fe4a 	bl	8000608 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4690      	mov	r8, r2
 800197a:	4699      	mov	r9, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fde9 	bl	8000558 <__aeabi_f2d>
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fde2 	bl	8000558 <__aeabi_f2d>
 8001994:	a39c      	add	r3, pc, #624	; (adr r3, 8001c08 <MPU6050_Read_All+0x6e0>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe fe35 	bl	8000608 <__aeabi_dmul>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b9d      	ldr	r3, [pc, #628]	; (8001c20 <MPU6050_Read_All+0x6f8>)
 80019ac:	f7fe ff56 	bl	800085c <__aeabi_ddiv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	ec43 2b17 	vmov	d7, r2, r3
 80019b8:	eeb0 0a47 	vmov.f32	s0, s14
 80019bc:	eef0 0a67 	vmov.f32	s1, s15
 80019c0:	f014 f8d2 	bl	8015b68 <cos>
 80019c4:	ec53 2b10 	vmov	r2, r3, d0
 80019c8:	4620      	mov	r0, r4
 80019ca:	4629      	mov	r1, r5
 80019cc:	f7fe fe1c 	bl	8000608 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4640      	mov	r0, r8
 80019d6:	4649      	mov	r1, r9
 80019d8:	f7fe fc5e 	bl	8000298 <__aeabi_dsub>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  double magy = hmc5883l->XAxis*cos(mpu6050->Angle[1]*DEG_TO_RAD)+ hmc5883l->YAxis*sin(mpu6050->Angle[1]*DEG_TO_RAD)*sin(mpu6050->Angle[0]*DEG_TO_RAD)+hmc5883l->ZAxis*sin(mpu6050->Angle[1]*DEG_TO_RAD)*cos(mpu6050->Angle[0]*DEG_TO_RAD);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdb5 	bl	8000558 <__aeabi_f2d>
 80019ee:	4604      	mov	r4, r0
 80019f0:	460d      	mov	r5, r1
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fdae 	bl	8000558 <__aeabi_f2d>
 80019fc:	a382      	add	r3, pc, #520	; (adr r3, 8001c08 <MPU6050_Read_All+0x6e0>)
 80019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a02:	f7fe fe01 	bl	8000608 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4b83      	ldr	r3, [pc, #524]	; (8001c20 <MPU6050_Read_All+0x6f8>)
 8001a14:	f7fe ff22 	bl	800085c <__aeabi_ddiv>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	ec43 2b17 	vmov	d7, r2, r3
 8001a20:	eeb0 0a47 	vmov.f32	s0, s14
 8001a24:	eef0 0a67 	vmov.f32	s1, s15
 8001a28:	f014 f89e 	bl	8015b68 <cos>
 8001a2c:	ec53 2b10 	vmov	r2, r3, d0
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	f7fe fde8 	bl	8000608 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4690      	mov	r8, r2
 8001a3e:	4699      	mov	r9, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd87 	bl	8000558 <__aeabi_f2d>
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	460d      	mov	r5, r1
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd80 	bl	8000558 <__aeabi_f2d>
 8001a58:	a36b      	add	r3, pc, #428	; (adr r3, 8001c08 <MPU6050_Read_All+0x6e0>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fdd3 	bl	8000608 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	4b6c      	ldr	r3, [pc, #432]	; (8001c20 <MPU6050_Read_All+0x6f8>)
 8001a70:	f7fe fef4 	bl	800085c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	ec43 2b17 	vmov	d7, r2, r3
 8001a7c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a80:	eef0 0a67 	vmov.f32	s1, s15
 8001a84:	f014 f8c4 	bl	8015c10 <sin>
 8001a88:	ec53 2b10 	vmov	r2, r3, d0
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4629      	mov	r1, r5
 8001a90:	f7fe fdba 	bl	8000608 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4614      	mov	r4, r2
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fd59 	bl	8000558 <__aeabi_f2d>
 8001aa6:	a358      	add	r3, pc, #352	; (adr r3, 8001c08 <MPU6050_Read_All+0x6e0>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fdac 	bl	8000608 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <MPU6050_Read_All+0x6f8>)
 8001abe:	f7fe fecd 	bl	800085c <__aeabi_ddiv>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	ec43 2b17 	vmov	d7, r2, r3
 8001aca:	eeb0 0a47 	vmov.f32	s0, s14
 8001ace:	eef0 0a67 	vmov.f32	s1, s15
 8001ad2:	f014 f89d 	bl	8015c10 <sin>
 8001ad6:	ec53 2b10 	vmov	r2, r3, d0
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fd93 	bl	8000608 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	4649      	mov	r1, r9
 8001aea:	f7fe fbd7 	bl	800029c <__adddf3>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4690      	mov	r8, r2
 8001af4:	4699      	mov	r9, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd2c 	bl	8000558 <__aeabi_f2d>
 8001b00:	4604      	mov	r4, r0
 8001b02:	460d      	mov	r5, r1
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd25 	bl	8000558 <__aeabi_f2d>
 8001b0e:	a33e      	add	r3, pc, #248	; (adr r3, 8001c08 <MPU6050_Read_All+0x6e0>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd78 	bl	8000608 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <MPU6050_Read_All+0x6f8>)
 8001b26:	f7fe fe99 	bl	800085c <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	ec43 2b17 	vmov	d7, r2, r3
 8001b32:	eeb0 0a47 	vmov.f32	s0, s14
 8001b36:	eef0 0a67 	vmov.f32	s1, s15
 8001b3a:	f014 f869 	bl	8015c10 <sin>
 8001b3e:	ec53 2b10 	vmov	r2, r3, d0
 8001b42:	4620      	mov	r0, r4
 8001b44:	4629      	mov	r1, r5
 8001b46:	f7fe fd5f 	bl	8000608 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4614      	mov	r4, r2
 8001b50:	461d      	mov	r5, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fcfe 	bl	8000558 <__aeabi_f2d>
 8001b5c:	a32a      	add	r3, pc, #168	; (adr r3, 8001c08 <MPU6050_Read_All+0x6e0>)
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	f7fe fd51 	bl	8000608 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <MPU6050_Read_All+0x6f8>)
 8001b74:	f7fe fe72 	bl	800085c <__aeabi_ddiv>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	ec43 2b17 	vmov	d7, r2, r3
 8001b80:	eeb0 0a47 	vmov.f32	s0, s14
 8001b84:	eef0 0a67 	vmov.f32	s1, s15
 8001b88:	f013 ffee 	bl	8015b68 <cos>
 8001b8c:	ec53 2b10 	vmov	r2, r3, d0
 8001b90:	4620      	mov	r0, r4
 8001b92:	4629      	mov	r1, r5
 8001b94:	f7fe fd38 	bl	8000608 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4640      	mov	r0, r8
 8001b9e:	4649      	mov	r1, r9
 8001ba0:	f7fe fb7c 	bl	800029c <__adddf3>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	e9c7 2308 	strd	r2, r3, [r7, #32]

	  double heading = atan2(magx,magy)*RAD_TO_DEG;
 8001bac:	ed97 1b08 	vldr	d1, [r7, #32]
 8001bb0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001bb4:	f013 ff0c 	bl	80159d0 <atan2>
 8001bb8:	ec51 0b10 	vmov	r0, r1, d0
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <MPU6050_Read_All+0x6f8>)
 8001bc2:	f7fe fd21 	bl	8000608 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	a30e      	add	r3, pc, #56	; (adr r3, 8001c08 <MPU6050_Read_All+0x6e0>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fe42 	bl	800085c <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  // Adjust heading to be in the range [0, 360]
	  if(heading < 0) {
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001bec:	f7fe ff7e 	bl	8000aec <__aeabi_dcmplt>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01e      	beq.n	8001c34 <MPU6050_Read_All+0x70c>
	      heading += 360;
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <MPU6050_Read_All+0x6fc>)
 8001bfc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c00:	e012      	b.n	8001c28 <MPU6050_Read_All+0x700>
 8001c02:	bf00      	nop
 8001c04:	f3af 8000 	nop.w
 8001c08:	54442d18 	.word	0x54442d18
 8001c0c:	400921fb 	.word	0x400921fb
 8001c10:	200003a8 	.word	0x200003a8
 8001c14:	20000000 	.word	0x20000000
 8001c18:	200003b0 	.word	0x200003b0
 8001c1c:	20000048 	.word	0x20000048
 8001c20:	40668000 	.word	0x40668000
 8001c24:	40768000 	.word	0x40768000
 8001c28:	f7fe fb38 	bl	800029c <__adddf3>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  }
	  heading = 360 - heading;
 8001c34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c38:	f04f 0000 	mov.w	r0, #0
 8001c3c:	4909      	ldr	r1, [pc, #36]	; (8001c64 <MPU6050_Read_All+0x73c>)
 8001c3e:	f7fe fb2b 	bl	8000298 <__aeabi_dsub>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  mpu6050->Angle[2] = heading;
 8001c4a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c4e:	f7fe ffd3 	bl	8000bf8 <__aeabi_d2f>
 8001c52:	4602      	mov	r2, r0
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	659a      	str	r2, [r3, #88]	; 0x58

}
 8001c58:	bf00      	nop
 8001c5a:	3748      	adds	r7, #72	; 0x48
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c62:	bf00      	nop
 8001c64:	40768000 	.word	0x40768000

08001c68 <Kalman_Angle>:

double Kalman_Angle(KalmanFilter *kalman ,double newAngle, double newRate, double dt){
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b098      	sub	sp, #96	; 0x60
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	61f8      	str	r0, [r7, #28]
 8001c70:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c74:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c78:	ed87 2b00 	vstr	d2, [r7]
	double rate = newRate - kalman->bias;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c86:	f7fe fb07 	bl	8000298 <__aeabi_dsub>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	kalman->angle += dt*rate;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001c98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ca0:	f7fe fcb2 	bl	8000608 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4629      	mov	r1, r5
 8001cac:	f7fe faf6 	bl	800029c <__adddf3>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	69f9      	ldr	r1, [r7, #28]
 8001cb6:	e9c1 2306 	strd	r2, r3, [r1, #24]

	kalman->P[0][0] += dt*(dt*kalman->P[1][1] -kalman->P[0][1]-kalman->P[1][0]+kalman->Q_angle);
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cca:	f7fe fc9d 	bl	8000608 <__aeabi_dmul>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001cdc:	f7fe fadc 	bl	8000298 <__aeabi_dsub>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001cee:	f7fe fad3 	bl	8000298 <__aeabi_dsub>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f7fe facc 	bl	800029c <__adddf3>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d10:	f7fe fc7a 	bl	8000608 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4620      	mov	r0, r4
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	f7fe fabe 	bl	800029c <__adddf3>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	69f9      	ldr	r1, [r7, #28]
 8001d26:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->P[0][1] -= dt * kalman->P[1][1];
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d3a:	f7fe fc65 	bl	8000608 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4620      	mov	r0, r4
 8001d44:	4629      	mov	r1, r5
 8001d46:	f7fe faa7 	bl	8000298 <__aeabi_dsub>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	69f9      	ldr	r1, [r7, #28]
 8001d50:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->P[1][0] -= dt * kalman->P[1][1];
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d64:	f7fe fc50 	bl	8000608 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	4629      	mov	r1, r5
 8001d70:	f7fe fa92 	bl	8000298 <__aeabi_dsub>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	69f9      	ldr	r1, [r7, #28]
 8001d7a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	kalman->P[1][1] += kalman->Q_bias * dt;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d8e:	f7fe fc3b 	bl	8000608 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4620      	mov	r0, r4
 8001d98:	4629      	mov	r1, r5
 8001d9a:	f7fe fa7f 	bl	800029c <__adddf3>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	69f9      	ldr	r1, [r7, #28]
 8001da4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	//Kalman Gain Kn(Độ lợi)
	double S1 = kalman->P[0][0] + kalman->R_measure;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001db4:	f7fe fa72 	bl	800029c <__adddf3>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double S2 = kalman->P[1][0] + kalman->R_measure;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001dcc:	f7fe fa66 	bl	800029c <__adddf3>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double K[2];
	K[0] = kalman->P[0][0] / S1;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001dde:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001de2:	f7fe fd3b 	bl	800085c <__aeabi_ddiv>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	e9c7 2308 	strd	r2, r3, [r7, #32]
	K[1] = kalman->P[1][0] / S2;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001df4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001df8:	f7fe fd30 	bl	800085c <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double y = newAngle - kalman->angle;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e0e:	f7fe fa43 	bl	8000298 <__aeabi_dsub>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    //Multiplying K[0] for the difference y
    //we take the value that controlling to update estimate angle
	kalman->angle += K[0] * y;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001e20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e28:	f7fe fbee 	bl	8000608 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4620      	mov	r0, r4
 8001e32:	4629      	mov	r1, r5
 8001e34:	f7fe fa32 	bl	800029c <__adddf3>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	69f9      	ldr	r1, [r7, #28]
 8001e3e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->bias += K[1] * y;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001e48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e50:	f7fe fbda 	bl	8000608 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4620      	mov	r0, r4
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	f7fe fa1e 	bl	800029c <__adddf3>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	69f9      	ldr	r1, [r7, #28]
 8001e66:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = kalman->P[0][0];
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e70:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double P01_temp = kalman->P[0][1];
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	kalman->P[0][0] -= K[0] * P00_temp;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001e84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e8c:	f7fe fbbc 	bl	8000608 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4620      	mov	r0, r4
 8001e96:	4629      	mov	r1, r5
 8001e98:	f7fe f9fe 	bl	8000298 <__aeabi_dsub>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	69f9      	ldr	r1, [r7, #28]
 8001ea2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->P[0][1] -= K[0] * P01_temp;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001eac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001eb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001eb4:	f7fe fba8 	bl	8000608 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe f9ea 	bl	8000298 <__aeabi_dsub>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	69f9      	ldr	r1, [r7, #28]
 8001eca:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->P[1][0] -= K[1] * P00_temp;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001ed4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001edc:	f7fe fb94 	bl	8000608 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe f9d6 	bl	8000298 <__aeabi_dsub>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	69f9      	ldr	r1, [r7, #28]
 8001ef2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	kalman->P[1][1] -= K[1] * P01_temp;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001efc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f04:	f7fe fb80 	bl	8000608 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	4629      	mov	r1, r5
 8001f10:	f7fe f9c2 	bl	8000298 <__aeabi_dsub>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	69f9      	ldr	r1, [r7, #28]
 8001f1a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


	return kalman->angle;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f24:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f28:	eeb0 0a47 	vmov.f32	s0, s14
 8001f2c:	eef0 0a67 	vmov.f32	s1, s15
 8001f30:	3760      	adds	r7, #96	; 0x60
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001f38 <MPU6050_Calibration>:
	velocityX += mpu6050->Ax*dt;
	posX += velocityX*dt;
	return posX;
}

void MPU6050_Calibration(MPU6050 *mpu6050,MPU6050Error *error){
 8001f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]

	    c=0;
 8001f44:	4b9c      	ldr	r3, [pc, #624]	; (80021b8 <MPU6050_Calibration+0x280>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
	    while(c<200){
 8001f4a:	e0a5      	b.n	8002098 <MPU6050_Calibration+0x160>
	    	      MPU6050_Read_Accel(mpu6050);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fa1b 	bl	8001388 <MPU6050_Read_Accel>
	    	      HAL_Delay(1);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f003 fc5e 	bl	8005814 <HAL_Delay>
	    	      error->ErrorAccX += (atan2(-mpu6050->Ay,mpu6050->Az)*RAD_TO_DEG);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f5e:	4690      	mov	r8, r2
 8001f60:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	ed93 7b06 	vldr	d7, [r3, #24]
 8001f6a:	eeb0 1a47 	vmov.f32	s2, s14
 8001f6e:	eef0 1a67 	vmov.f32	s3, s15
 8001f72:	ec49 8b10 	vmov	d0, r8, r9
 8001f76:	f013 fd2b 	bl	80159d0 <atan2>
 8001f7a:	ec51 0b10 	vmov	r0, r1, d0
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	4b8e      	ldr	r3, [pc, #568]	; (80021bc <MPU6050_Calibration+0x284>)
 8001f84:	f7fe fb40 	bl	8000608 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	a385      	add	r3, pc, #532	; (adr r3, 80021a8 <MPU6050_Calibration+0x270>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	f7fe fc61 	bl	800085c <__aeabi_ddiv>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4614      	mov	r4, r2
 8001fa0:	461d      	mov	r5, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fad6 	bl	8000558 <__aeabi_f2d>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	f7fe f972 	bl	800029c <__adddf3>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f7fe fe1a 	bl	8000bf8 <__aeabi_d2f>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	60da      	str	r2, [r3, #12]
	    	      error->ErrorAccY += (atan2(-mpu6050->Ax,sqrt(pow(mpu6050->Az,2)+pow(mpu6050->Ay,2)))*RAD_TO_DEG);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001fd0:	4692      	mov	sl, r2
 8001fd2:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	ed93 7b06 	vldr	d7, [r3, #24]
 8001fdc:	ed9f 1b74 	vldr	d1, [pc, #464]	; 80021b0 <MPU6050_Calibration+0x278>
 8001fe0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fe4:	eef0 0a67 	vmov.f32	s1, s15
 8001fe8:	f013 fd22 	bl	8015a30 <pow>
 8001fec:	ec55 4b10 	vmov	r4, r5, d0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	ed93 7b04 	vldr	d7, [r3, #16]
 8001ff6:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 80021b0 <MPU6050_Calibration+0x278>
 8001ffa:	eeb0 0a47 	vmov.f32	s0, s14
 8001ffe:	eef0 0a67 	vmov.f32	s1, s15
 8002002:	f013 fd15 	bl	8015a30 <pow>
 8002006:	ec53 2b10 	vmov	r2, r3, d0
 800200a:	4620      	mov	r0, r4
 800200c:	4629      	mov	r1, r5
 800200e:	f7fe f945 	bl	800029c <__adddf3>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	ec43 2b17 	vmov	d7, r2, r3
 800201a:	eeb0 0a47 	vmov.f32	s0, s14
 800201e:	eef0 0a67 	vmov.f32	s1, s15
 8002022:	f013 fd75 	bl	8015b10 <sqrt>
 8002026:	eeb0 7a40 	vmov.f32	s14, s0
 800202a:	eef0 7a60 	vmov.f32	s15, s1
 800202e:	eeb0 1a47 	vmov.f32	s2, s14
 8002032:	eef0 1a67 	vmov.f32	s3, s15
 8002036:	ec4b ab10 	vmov	d0, sl, fp
 800203a:	f013 fcc9 	bl	80159d0 <atan2>
 800203e:	ec51 0b10 	vmov	r0, r1, d0
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <MPU6050_Calibration+0x284>)
 8002048:	f7fe fade 	bl	8000608 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	a354      	add	r3, pc, #336	; (adr r3, 80021a8 <MPU6050_Calibration+0x270>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	f7fe fbff 	bl	800085c <__aeabi_ddiv>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4614      	mov	r4, r2
 8002064:	461d      	mov	r5, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fa74 	bl	8000558 <__aeabi_f2d>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4620      	mov	r0, r4
 8002076:	4629      	mov	r1, r5
 8002078:	f7fe f910 	bl	800029c <__adddf3>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe fdb8 	bl	8000bf8 <__aeabi_d2f>
 8002088:	4602      	mov	r2, r0
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	611a      	str	r2, [r3, #16]
	    	      c++;
 800208e:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <MPU6050_Calibration+0x280>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	4a48      	ldr	r2, [pc, #288]	; (80021b8 <MPU6050_Calibration+0x280>)
 8002096:	6013      	str	r3, [r2, #0]
	    while(c<200){
 8002098:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <MPU6050_Calibration+0x280>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2bc7      	cmp	r3, #199	; 0xc7
 800209e:	f77f af55 	ble.w	8001f4c <MPU6050_Calibration+0x14>
	    }
	    error->ErrorAccX = error->ErrorAccX /200;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80020a8:	eddf 6a45 	vldr	s13, [pc, #276]	; 80021c0 <MPU6050_Calibration+0x288>
 80020ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	edc3 7a03 	vstr	s15, [r3, #12]
	    error->ErrorAccY = error->ErrorAccY /200;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	ed93 7a04 	vldr	s14, [r3, #16]
 80020bc:	eddf 6a40 	vldr	s13, [pc, #256]	; 80021c0 <MPU6050_Calibration+0x288>
 80020c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	edc3 7a04 	vstr	s15, [r3, #16]

	    c =0;
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <MPU6050_Calibration+0x280>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
	    while(c<200){
 80020d0:	e043      	b.n	800215a <MPU6050_Calibration+0x222>
	      MPU6050_Read_Gyro(mpu6050);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff f9c0 	bl	8001458 <MPU6050_Read_Gyro>
	      HAL_Delay(1);
 80020d8:	2001      	movs	r0, #1
 80020da:	f003 fb9b 	bl	8005814 <HAL_Delay>
	      error->ErrorGyroX += mpu6050->Gx;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fa38 	bl	8000558 <__aeabi_f2d>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80020ee:	f7fe f8d5 	bl	800029c <__adddf3>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fd7d 	bl	8000bf8 <__aeabi_d2f>
 80020fe:	4602      	mov	r2, r0
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	601a      	str	r2, [r3, #0]
	      error->ErrorGyroY += mpu6050->Gy;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fa25 	bl	8000558 <__aeabi_f2d>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002114:	f7fe f8c2 	bl	800029c <__adddf3>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	f7fe fd6a 	bl	8000bf8 <__aeabi_d2f>
 8002124:	4602      	mov	r2, r0
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	605a      	str	r2, [r3, #4]
	      error->ErrorGyroZ += mpu6050->Gz;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fa12 	bl	8000558 <__aeabi_f2d>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800213a:	f7fe f8af 	bl	800029c <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fd57 	bl	8000bf8 <__aeabi_d2f>
 800214a:	4602      	mov	r2, r0
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	609a      	str	r2, [r3, #8]
	      c++;
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <MPU6050_Calibration+0x280>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <MPU6050_Calibration+0x280>)
 8002158:	6013      	str	r3, [r2, #0]
	    while(c<200){
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <MPU6050_Calibration+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2bc7      	cmp	r3, #199	; 0xc7
 8002160:	ddb7      	ble.n	80020d2 <MPU6050_Calibration+0x19a>
	    }
	    error->ErrorGyroX = error->ErrorGyroX /200;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	ed93 7a00 	vldr	s14, [r3]
 8002168:	eddf 6a15 	vldr	s13, [pc, #84]	; 80021c0 <MPU6050_Calibration+0x288>
 800216c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	edc3 7a00 	vstr	s15, [r3]
	    error->ErrorGyroY = error->ErrorGyroY /200;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	ed93 7a01 	vldr	s14, [r3, #4]
 800217c:	eddf 6a10 	vldr	s13, [pc, #64]	; 80021c0 <MPU6050_Calibration+0x288>
 8002180:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	edc3 7a01 	vstr	s15, [r3, #4]
	    error->ErrorGyroZ = error->ErrorGyroZ /200;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002190:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80021c0 <MPU6050_Calibration+0x288>
 8002194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021a8:	54442d18 	.word	0x54442d18
 80021ac:	400921fb 	.word	0x400921fb
 80021b0:	00000000 	.word	0x00000000
 80021b4:	40000000 	.word	0x40000000
 80021b8:	200003a0 	.word	0x200003a0
 80021bc:	40668000 	.word	0x40668000
 80021c0:	43480000 	.word	0x43480000
 80021c4:	00000000 	.word	0x00000000

080021c8 <Haversine_Distance>:
#define DEGTORAD M_PI / 180
#define RADTODEG 180/M_PI



double Haversine_Distance(Coordinate coordinate1, Coordinate coordinate2) {
 80021c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021cc:	ed2d 8b02 	vpush	{d8}
 80021d0:	b092      	sub	sp, #72	; 0x48
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	eeb0 4a40 	vmov.f32	s8, s0
 80021d8:	eef0 4a60 	vmov.f32	s9, s1
 80021dc:	eeb0 5a41 	vmov.f32	s10, s2
 80021e0:	eef0 5a61 	vmov.f32	s11, s3
 80021e4:	eeb0 6a42 	vmov.f32	s12, s4
 80021e8:	eef0 6a62 	vmov.f32	s13, s5
 80021ec:	eeb0 7a43 	vmov.f32	s14, s6
 80021f0:	eef0 7a63 	vmov.f32	s15, s7
 80021f4:	ed87 4b04 	vstr	d4, [r7, #16]
 80021f8:	ed87 5b06 	vstr	d5, [r7, #24]
 80021fc:	ed87 6b00 	vstr	d6, [r7]
 8002200:	ed87 7b02 	vstr	d7, [r7, #8]

	double lat1 = coordinate1.latitude * DEGTORAD;
 8002204:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002208:	a39b      	add	r3, pc, #620	; (adr r3, 8002478 <Haversine_Distance+0x2b0>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f7fe f9fb 	bl	8000608 <__aeabi_dmul>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b9a      	ldr	r3, [pc, #616]	; (8002488 <Haversine_Distance+0x2c0>)
 8002220:	f7fe fb1c 	bl	800085c <__aeabi_ddiv>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double lon1 = coordinate1.longitude * DEGTORAD;
 800222c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002230:	a391      	add	r3, pc, #580	; (adr r3, 8002478 <Haversine_Distance+0x2b0>)
 8002232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002236:	f7fe f9e7 	bl	8000608 <__aeabi_dmul>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	4b90      	ldr	r3, [pc, #576]	; (8002488 <Haversine_Distance+0x2c0>)
 8002248:	f7fe fb08 	bl	800085c <__aeabi_ddiv>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double lat2 = coordinate2.latitude * DEGTORAD;
 8002254:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002258:	a387      	add	r3, pc, #540	; (adr r3, 8002478 <Haversine_Distance+0x2b0>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	f7fe f9d3 	bl	8000608 <__aeabi_dmul>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4b86      	ldr	r3, [pc, #536]	; (8002488 <Haversine_Distance+0x2c0>)
 8002270:	f7fe faf4 	bl	800085c <__aeabi_ddiv>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double lon2 = coordinate2.longitude * DEGTORAD;
 800227c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002280:	a37d      	add	r3, pc, #500	; (adr r3, 8002478 <Haversine_Distance+0x2b0>)
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	f7fe f9bf 	bl	8000608 <__aeabi_dmul>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	4b7c      	ldr	r3, [pc, #496]	; (8002488 <Haversine_Distance+0x2c0>)
 8002298:	f7fe fae0 	bl	800085c <__aeabi_ddiv>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double a = sin((lat2 - lat1) / 2) * sin((lat2 - lat1) / 2) + cos(lat1) * cos(lat2) * sin((lon2 - lon1) / 2) * sin((lon2 - lon1) / 2);
 80022a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80022ac:	f7fd fff4 	bl	8000298 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022c0:	f7fe facc 	bl	800085c <__aeabi_ddiv>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	ec43 2b17 	vmov	d7, r2, r3
 80022cc:	eeb0 0a47 	vmov.f32	s0, s14
 80022d0:	eef0 0a67 	vmov.f32	s1, s15
 80022d4:	f013 fc9c 	bl	8015c10 <sin>
 80022d8:	ec55 4b10 	vmov	r4, r5, d0
 80022dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80022e4:	f7fd ffd8 	bl	8000298 <__aeabi_dsub>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022f8:	f7fe fab0 	bl	800085c <__aeabi_ddiv>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	ec43 2b17 	vmov	d7, r2, r3
 8002304:	eeb0 0a47 	vmov.f32	s0, s14
 8002308:	eef0 0a67 	vmov.f32	s1, s15
 800230c:	f013 fc80 	bl	8015c10 <sin>
 8002310:	ec53 2b10 	vmov	r2, r3, d0
 8002314:	4620      	mov	r0, r4
 8002316:	4629      	mov	r1, r5
 8002318:	f7fe f976 	bl	8000608 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4614      	mov	r4, r2
 8002322:	461d      	mov	r5, r3
 8002324:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002328:	f013 fc1e 	bl	8015b68 <cos>
 800232c:	ec59 8b10 	vmov	r8, r9, d0
 8002330:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8002334:	f013 fc18 	bl	8015b68 <cos>
 8002338:	ec53 2b10 	vmov	r2, r3, d0
 800233c:	4640      	mov	r0, r8
 800233e:	4649      	mov	r1, r9
 8002340:	f7fe f962 	bl	8000608 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4690      	mov	r8, r2
 800234a:	4699      	mov	r9, r3
 800234c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002350:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002354:	f7fd ffa0 	bl	8000298 <__aeabi_dsub>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002368:	f7fe fa78 	bl	800085c <__aeabi_ddiv>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	ec43 2b17 	vmov	d7, r2, r3
 8002374:	eeb0 0a47 	vmov.f32	s0, s14
 8002378:	eef0 0a67 	vmov.f32	s1, s15
 800237c:	f013 fc48 	bl	8015c10 <sin>
 8002380:	ec53 2b10 	vmov	r2, r3, d0
 8002384:	4640      	mov	r0, r8
 8002386:	4649      	mov	r1, r9
 8002388:	f7fe f93e 	bl	8000608 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4690      	mov	r8, r2
 8002392:	4699      	mov	r9, r3
 8002394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002398:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800239c:	f7fd ff7c 	bl	8000298 <__aeabi_dsub>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023b0:	f7fe fa54 	bl	800085c <__aeabi_ddiv>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	ec43 2b17 	vmov	d7, r2, r3
 80023bc:	eeb0 0a47 	vmov.f32	s0, s14
 80023c0:	eef0 0a67 	vmov.f32	s1, s15
 80023c4:	f013 fc24 	bl	8015c10 <sin>
 80023c8:	ec53 2b10 	vmov	r2, r3, d0
 80023cc:	4640      	mov	r0, r8
 80023ce:	4649      	mov	r1, r9
 80023d0:	f7fe f91a 	bl	8000608 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f7fd ff5e 	bl	800029c <__adddf3>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return (2.0 * Radius * atan2(sqrt(a), sqrt(1.0 - a))*1000.0);
 80023e8:	ed97 0b08 	vldr	d0, [r7, #32]
 80023ec:	f013 fb90 	bl	8015b10 <sqrt>
 80023f0:	eeb0 8a40 	vmov.f32	s16, s0
 80023f4:	eef0 8a60 	vmov.f32	s17, s1
 80023f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023fc:	f04f 0000 	mov.w	r0, #0
 8002400:	4922      	ldr	r1, [pc, #136]	; (800248c <Haversine_Distance+0x2c4>)
 8002402:	f7fd ff49 	bl	8000298 <__aeabi_dsub>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	ec43 2b17 	vmov	d7, r2, r3
 800240e:	eeb0 0a47 	vmov.f32	s0, s14
 8002412:	eef0 0a67 	vmov.f32	s1, s15
 8002416:	f013 fb7b 	bl	8015b10 <sqrt>
 800241a:	eeb0 7a40 	vmov.f32	s14, s0
 800241e:	eef0 7a60 	vmov.f32	s15, s1
 8002422:	eeb0 1a47 	vmov.f32	s2, s14
 8002426:	eef0 1a67 	vmov.f32	s3, s15
 800242a:	eeb0 0a48 	vmov.f32	s0, s16
 800242e:	eef0 0a68 	vmov.f32	s1, s17
 8002432:	f013 facd 	bl	80159d0 <atan2>
 8002436:	ec51 0b10 	vmov	r0, r1, d0
 800243a:	a311      	add	r3, pc, #68	; (adr r3, 8002480 <Haversine_Distance+0x2b8>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f7fe f8e2 	bl	8000608 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <Haversine_Distance+0x2c8>)
 8002452:	f7fe f8d9 	bl	8000608 <__aeabi_dmul>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	ec43 2b17 	vmov	d7, r2, r3


}
 800245e:	eeb0 0a47 	vmov.f32	s0, s14
 8002462:	eef0 0a67 	vmov.f32	s1, s15
 8002466:	3748      	adds	r7, #72	; 0x48
 8002468:	46bd      	mov	sp, r7
 800246a:	ecbd 8b02 	vpop	{d8}
 800246e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002472:	bf00      	nop
 8002474:	f3af 8000 	nop.w
 8002478:	54442d18 	.word	0x54442d18
 800247c:	400921fb 	.word	0x400921fb
 8002480:	00000000 	.word	0x00000000
 8002484:	40c8e300 	.word	0x40c8e300
 8002488:	40668000 	.word	0x40668000
 800248c:	3ff00000 	.word	0x3ff00000
 8002490:	408f4000 	.word	0x408f4000
 8002494:	00000000 	.word	0x00000000

08002498 <Azimuth_Angle>:

//Hàm tính toán góc hợp bởi phương bắc và một đoạn thẳng nối 2 điểm tọa độ
/*Azimuth là góc giữa hướng Bắc (định cố định) và hướng của một đối tượng hoặc vị trí cụ thể,
 * khi nhìn từ một điểm gốc.*/
double Azimuth_Angle(Coordinate coordinate1, Coordinate coordinate2){
 8002498:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800249c:	b094      	sub	sp, #80	; 0x50
 800249e:	af00      	add	r7, sp, #0
 80024a0:	eeb0 4a40 	vmov.f32	s8, s0
 80024a4:	eef0 4a60 	vmov.f32	s9, s1
 80024a8:	eeb0 5a41 	vmov.f32	s10, s2
 80024ac:	eef0 5a61 	vmov.f32	s11, s3
 80024b0:	eeb0 6a42 	vmov.f32	s12, s4
 80024b4:	eef0 6a62 	vmov.f32	s13, s5
 80024b8:	eeb0 7a43 	vmov.f32	s14, s6
 80024bc:	eef0 7a63 	vmov.f32	s15, s7
 80024c0:	ed87 4b04 	vstr	d4, [r7, #16]
 80024c4:	ed87 5b06 	vstr	d5, [r7, #24]
 80024c8:	ed87 6b00 	vstr	d6, [r7]
 80024cc:	ed87 7b02 	vstr	d7, [r7, #8]

	//double deltaLongitude = (coordinate2.longitude - coordinate1.longitude) * DEGTORAD;
	double lat1 = coordinate1.latitude * DEGTORAD;
 80024d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024d4:	a36c      	add	r3, pc, #432	; (adr r3, 8002688 <Azimuth_Angle+0x1f0>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe f895 	bl	8000608 <__aeabi_dmul>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	4b69      	ldr	r3, [pc, #420]	; (8002690 <Azimuth_Angle+0x1f8>)
 80024ec:	f7fe f9b6 	bl	800085c <__aeabi_ddiv>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double lon1 = coordinate1.longitude * DEGTORAD;
 80024f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024fc:	a362      	add	r3, pc, #392	; (adr r3, 8002688 <Azimuth_Angle+0x1f0>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fe f881 	bl	8000608 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <Azimuth_Angle+0x1f8>)
 8002514:	f7fe f9a2 	bl	800085c <__aeabi_ddiv>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double lat2 = coordinate2.latitude * DEGTORAD;
 8002520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002524:	a358      	add	r3, pc, #352	; (adr r3, 8002688 <Azimuth_Angle+0x1f0>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe f86d 	bl	8000608 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	4b55      	ldr	r3, [pc, #340]	; (8002690 <Azimuth_Angle+0x1f8>)
 800253c:	f7fe f98e 	bl	800085c <__aeabi_ddiv>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double lon2 = coordinate2.longitude * DEGTORAD;
 8002548:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800254c:	a34e      	add	r3, pc, #312	; (adr r3, 8002688 <Azimuth_Angle+0x1f0>)
 800254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002552:	f7fe f859 	bl	8000608 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <Azimuth_Angle+0x1f8>)
 8002564:	f7fe f97a 	bl	800085c <__aeabi_ddiv>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double deltaLongitude = sin(lon2 - lon1)*cos(lat2);
 8002570:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002574:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002578:	f7fd fe8e 	bl	8000298 <__aeabi_dsub>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	ec43 2b17 	vmov	d7, r2, r3
 8002584:	eeb0 0a47 	vmov.f32	s0, s14
 8002588:	eef0 0a67 	vmov.f32	s1, s15
 800258c:	f013 fb40 	bl	8015c10 <sin>
 8002590:	ec55 4b10 	vmov	r4, r5, d0
 8002594:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002598:	f013 fae6 	bl	8015b68 <cos>
 800259c:	ec53 2b10 	vmov	r2, r3, d0
 80025a0:	4620      	mov	r0, r4
 80025a2:	4629      	mov	r1, r5
 80025a4:	f7fe f830 	bl	8000608 <__aeabi_dmul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double deltaLatitude = cos(lat1)*sin(lat2)-sin(lat1)*cos(lat2)*cos(lon2 - lon1);
 80025b0:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80025b4:	f013 fad8 	bl	8015b68 <cos>
 80025b8:	ec55 4b10 	vmov	r4, r5, d0
 80025bc:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80025c0:	f013 fb26 	bl	8015c10 <sin>
 80025c4:	ec53 2b10 	vmov	r2, r3, d0
 80025c8:	4620      	mov	r0, r4
 80025ca:	4629      	mov	r1, r5
 80025cc:	f7fe f81c 	bl	8000608 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4614      	mov	r4, r2
 80025d6:	461d      	mov	r5, r3
 80025d8:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80025dc:	f013 fb18 	bl	8015c10 <sin>
 80025e0:	ec59 8b10 	vmov	r8, r9, d0
 80025e4:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80025e8:	f013 fabe 	bl	8015b68 <cos>
 80025ec:	ec53 2b10 	vmov	r2, r3, d0
 80025f0:	4640      	mov	r0, r8
 80025f2:	4649      	mov	r1, r9
 80025f4:	f7fe f808 	bl	8000608 <__aeabi_dmul>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4690      	mov	r8, r2
 80025fe:	4699      	mov	r9, r3
 8002600:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002604:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002608:	f7fd fe46 	bl	8000298 <__aeabi_dsub>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	ec43 2b17 	vmov	d7, r2, r3
 8002614:	eeb0 0a47 	vmov.f32	s0, s14
 8002618:	eef0 0a67 	vmov.f32	s1, s15
 800261c:	f013 faa4 	bl	8015b68 <cos>
 8002620:	ec53 2b10 	vmov	r2, r3, d0
 8002624:	4640      	mov	r0, r8
 8002626:	4649      	mov	r1, r9
 8002628:	f7fd ffee 	bl	8000608 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd fe30 	bl	8000298 <__aeabi_dsub>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return atan2(deltaLongitude,deltaLatitude)*RADTODEG;
 8002640:	ed97 1b08 	vldr	d1, [r7, #32]
 8002644:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8002648:	f013 f9c2 	bl	80159d0 <atan2>
 800264c:	ec51 0b10 	vmov	r0, r1, d0
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <Azimuth_Angle+0x1f8>)
 8002656:	f7fd ffd7 	bl	8000608 <__aeabi_dmul>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	a309      	add	r3, pc, #36	; (adr r3, 8002688 <Azimuth_Angle+0x1f0>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f7fe f8f8 	bl	800085c <__aeabi_ddiv>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	ec43 2b17 	vmov	d7, r2, r3

	//return atan2(sin(deltaLongitude)*cos(lat2), cos(lat1)*sin(lat2)-sin(lat1)*cos(lat2)*cos(deltaLongitude)) * RADTODEG; //return in degree
}
 8002674:	eeb0 0a47 	vmov.f32	s0, s14
 8002678:	eef0 0a67 	vmov.f32	s1, s15
 800267c:	3750      	adds	r7, #80	; 0x50
 800267e:	46bd      	mov	sp, r7
 8002680:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002684:	f3af 8000 	nop.w
 8002688:	54442d18 	.word	0x54442d18
 800268c:	400921fb 	.word	0x400921fb
 8002690:	40668000 	.word	0x40668000

08002694 <convertRange360>:

float convertRange360(double deg) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	ed87 0b00 	vstr	d0, [r7]
	if(deg < 0)
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026aa:	f7fe fa1f 	bl	8000aec <__aeabi_dcmplt>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00e      	beq.n	80026d2 <convertRange360+0x3e>
		return deg+360;
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <convertRange360+0x58>)
 80026ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026be:	f7fd fded 	bl	800029c <__adddf3>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	f7fe fa95 	bl	8000bf8 <__aeabi_d2f>
 80026ce:	4603      	mov	r3, r0
 80026d0:	e004      	b.n	80026dc <convertRange360+0x48>
	return deg;
 80026d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026d6:	f7fe fa8f 	bl	8000bf8 <__aeabi_d2f>
 80026da:	4603      	mov	r3, r0
}
 80026dc:	ee07 3a90 	vmov	s15, r3
 80026e0:	eeb0 0a67 	vmov.f32	s0, s15
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40768000 	.word	0x40768000

080026f0 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3371      	adds	r3, #113	; 0x71
 8002708:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800270a:	e002      	b.n	8002712 <prv_parse_number+0x22>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <prv_parse_number+0x30>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b20      	cmp	r3, #32
 800271e:	d0f5      	beq.n	800270c <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b2d      	cmp	r3, #45	; 0x2d
 8002726:	d104      	bne.n	8002732 <prv_parse_number+0x42>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <prv_parse_number+0x44>
 8002732:	2300      	movs	r3, #0
 8002734:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8002736:	e00d      	b.n	8002754 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	461a      	mov	r2, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	3b30      	subs	r3, #48	; 0x30
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	3301      	adds	r3, #1
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <prv_parse_number+0x7a>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b2f      	cmp	r3, #47	; 0x2f
 8002760:	d903      	bls.n	800276a <prv_parse_number+0x7a>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b39      	cmp	r3, #57	; 0x39
 8002768:	d9e6      	bls.n	8002738 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800276a:	7afb      	ldrb	r3, [r7, #11]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <prv_parse_number+0x86>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	425b      	negs	r3, r3
 8002774:	e000      	b.n	8002778 <prv_parse_number+0x88>
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d106      	bne.n	80027a2 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3371      	adds	r3, #113	; 0x71
 8002798:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800279a:	e002      	b.n	80027a2 <prv_parse_float_number+0x1e>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <prv_parse_float_number+0x2c>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d0f5      	beq.n	800279c <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 80027b0:	2100      	movs	r1, #0
 80027b2:	6838      	ldr	r0, [r7, #0]
 80027b4:	f010 feb8 	bl	8013528 <strtod>
 80027b8:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80027bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027c0:	ec43 2b17 	vmov	d7, r2, r3
}
 80027c4:	eeb0 0a47 	vmov.f32	s0, s14
 80027c8:	eef0 0a67 	vmov.f32	s1, s15
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 80027dc:	2100      	movs	r1, #0
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffd0 	bl	8002784 <prv_parse_float_number>
 80027e4:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 80027e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027ec:	f7fe f9bc 	bl	8000b68 <__aeabi_d2iz>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <prv_parse_lat_long+0x94>)
 80027f4:	fb82 1203 	smull	r1, r2, r2, r3
 80027f8:	1152      	asrs	r2, r2, #5
 80027fa:	17db      	asrs	r3, r3, #31
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fe98 	bl	8000534 <__aeabi_i2d>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <prv_parse_lat_long+0x98>)
 8002812:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002816:	f7fd fef7 	bl	8000608 <__aeabi_dmul>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002822:	f7fd fd39 	bl	8000298 <__aeabi_dsub>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <prv_parse_lat_long+0x9c>)
 8002834:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002838:	f7fe f810 	bl	800085c <__aeabi_ddiv>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002844:	f7fd fd2a 	bl	800029c <__adddf3>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8002850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002854:	ec43 2b17 	vmov	d7, r2, r3
}
 8002858:	eeb0 0a47 	vmov.f32	s0, s14
 800285c:	eef0 0a67 	vmov.f32	s1, s15
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	51eb851f 	.word	0x51eb851f
 800286c:	40590000 	.word	0x40590000
 8002870:	404e0000 	.word	0x404e0000

08002874 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8002874:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002884:	2900      	cmp	r1, #0
 8002886:	d169      	bne.n	800295c <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3371      	adds	r3, #113	; 0x71
 800288c:	2206      	movs	r2, #6
 800288e:	49ba      	ldr	r1, [pc, #744]	; (8002b78 <prv_parse_term+0x304>)
 8002890:	4618      	mov	r0, r3
 8002892:	f011 f88d 	bl	80139b0 <strncmp>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <prv_parse_term+0x3c>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3371      	adds	r3, #113	; 0x71
 80028a0:	2206      	movs	r2, #6
 80028a2:	49b6      	ldr	r1, [pc, #728]	; (8002b7c <prv_parse_term+0x308>)
 80028a4:	4618      	mov	r0, r3
 80028a6:	f011 f883 	bl	80139b0 <strncmp>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d104      	bne.n	80028ba <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80028b8:	e04e      	b.n	8002958 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3371      	adds	r3, #113	; 0x71
 80028be:	2206      	movs	r2, #6
 80028c0:	49af      	ldr	r1, [pc, #700]	; (8002b80 <prv_parse_term+0x30c>)
 80028c2:	4618      	mov	r0, r3
 80028c4:	f011 f874 	bl	80139b0 <strncmp>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <prv_parse_term+0x6e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3371      	adds	r3, #113	; 0x71
 80028d2:	2206      	movs	r2, #6
 80028d4:	49ab      	ldr	r1, [pc, #684]	; (8002b84 <prv_parse_term+0x310>)
 80028d6:	4618      	mov	r0, r3
 80028d8:	f011 f86a 	bl	80139b0 <strncmp>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d104      	bne.n	80028ec <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80028ea:	e035      	b.n	8002958 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3371      	adds	r3, #113	; 0x71
 80028f0:	2206      	movs	r2, #6
 80028f2:	49a5      	ldr	r1, [pc, #660]	; (8002b88 <prv_parse_term+0x314>)
 80028f4:	4618      	mov	r0, r3
 80028f6:	f011 f85b 	bl	80139b0 <strncmp>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <prv_parse_term+0xa0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3371      	adds	r3, #113	; 0x71
 8002904:	2206      	movs	r2, #6
 8002906:	49a1      	ldr	r1, [pc, #644]	; (8002b8c <prv_parse_term+0x318>)
 8002908:	4618      	mov	r0, r3
 800290a:	f011 f851 	bl	80139b0 <strncmp>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d104      	bne.n	800291e <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2203      	movs	r2, #3
 8002918:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800291c:	e01c      	b.n	8002958 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3371      	adds	r3, #113	; 0x71
 8002922:	2206      	movs	r2, #6
 8002924:	499a      	ldr	r1, [pc, #616]	; (8002b90 <prv_parse_term+0x31c>)
 8002926:	4618      	mov	r0, r3
 8002928:	f011 f842 	bl	80139b0 <strncmp>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <prv_parse_term+0xd2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3371      	adds	r3, #113	; 0x71
 8002936:	2206      	movs	r2, #6
 8002938:	4996      	ldr	r1, [pc, #600]	; (8002b94 <prv_parse_term+0x320>)
 800293a:	4618      	mov	r0, r3
 800293c:	f011 f838 	bl	80139b0 <strncmp>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d104      	bne.n	8002950 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2204      	movs	r2, #4
 800294a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800294e:	e003      	b.n	8002958 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8002958:	2301      	movs	r3, #1
 800295a:	e231      	b.n	8002dc0 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002962:	2900      	cmp	r1, #0
 8002964:	f000 822b 	beq.w	8002dbe <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800296e:	2901      	cmp	r1, #1
 8002970:	f040 80c9 	bne.w	8002b06 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800297a:	3b01      	subs	r3, #1
 800297c:	2b0a      	cmp	r3, #10
 800297e:	f200 8213 	bhi.w	8002da8 <prv_parse_term+0x534>
 8002982:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <prv_parse_term+0x114>)
 8002984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002988:	080029b5 	.word	0x080029b5
 800298c:	08002a2f 	.word	0x08002a2f
 8002990:	08002a45 	.word	0x08002a45
 8002994:	08002a6f 	.word	0x08002a6f
 8002998:	08002a85 	.word	0x08002a85
 800299c:	08002aaf 	.word	0x08002aaf
 80029a0:	08002ac3 	.word	0x08002ac3
 80029a4:	08002da9 	.word	0x08002da9
 80029a8:	08002ad7 	.word	0x08002ad7
 80029ac:	08002da9 	.word	0x08002da9
 80029b0:	08002aef 	.word	0x08002aef
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80029ba:	3b30      	subs	r3, #48	; 0x30
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	0092      	lsls	r2, r2, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80029ce:	4413      	add	r3, r2
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3b30      	subs	r3, #48	; 0x30
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80029e2:	3b30      	subs	r3, #48	; 0x30
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	0092      	lsls	r2, r2, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029f6:	4413      	add	r3, r2
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	3b30      	subs	r3, #48	; 0x30
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002a0a:	3b30      	subs	r3, #48	; 0x30
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	0092      	lsls	r2, r2, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002a1e:	4413      	add	r3, r2
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	3b30      	subs	r3, #48	; 0x30
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8002a2c:	e1c7      	b.n	8002dbe <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fed0 	bl	80027d4 <prv_parse_lat_long>
 8002a34:	eeb0 7a40 	vmov.f32	s14, s0
 8002a38:	eef0 7a60 	vmov.f32	s15, s1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8002a42:	e1bc      	b.n	8002dbe <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a4a:	2b53      	cmp	r3, #83	; 0x53
 8002a4c:	d005      	beq.n	8002a5a <prv_parse_term+0x1e6>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a54:	2b73      	cmp	r3, #115	; 0x73
 8002a56:	f040 81a9 	bne.w	8002dac <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002a60:	4690      	mov	r8, r2
 8002a62:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8002a6c:	e19e      	b.n	8002dac <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff feb0 	bl	80027d4 <prv_parse_lat_long>
 8002a74:	eeb0 7a40 	vmov.f32	s14, s0
 8002a78:	eef0 7a60 	vmov.f32	s15, s1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002a82:	e19c      	b.n	8002dbe <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a8a:	2b57      	cmp	r3, #87	; 0x57
 8002a8c:	d005      	beq.n	8002a9a <prv_parse_term+0x226>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a94:	2b77      	cmp	r3, #119	; 0x77
 8002a96:	f040 818b 	bne.w	8002db0 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8002aac:	e180      	b.n	8002db0 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8002aae:	2100      	movs	r1, #0
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff fe1d 	bl	80026f0 <prv_parse_number>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8002ac0:	e17d      	b.n	8002dbe <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff fe13 	bl	80026f0 <prv_parse_number>
 8002aca:	4603      	mov	r3, r0
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8002ad4:	e173      	b.n	8002dbe <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff fe53 	bl	8002784 <prv_parse_float_number>
 8002ade:	eeb0 7a40 	vmov.f32	s14, s0
 8002ae2:	eef0 7a60 	vmov.f32	s15, s1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002aec:	e167      	b.n	8002dbe <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8002aee:	2100      	movs	r1, #0
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff fe47 	bl	8002784 <prv_parse_float_number>
 8002af6:	eeb0 7a40 	vmov.f32	s14, s0
 8002afa:	eef0 7a60 	vmov.f32	s15, s1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002b04:	e15b      	b.n	8002dbe <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002b0c:	2902      	cmp	r1, #2
 8002b0e:	f040 8083 	bne.w	8002c18 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002b18:	3b02      	subs	r3, #2
 8002b1a:	2b0f      	cmp	r3, #15
 8002b1c:	d860      	bhi.n	8002be0 <prv_parse_term+0x36c>
 8002b1e:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <prv_parse_term+0x2b0>)
 8002b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b24:	08002b65 	.word	0x08002b65
 8002b28:	08002be1 	.word	0x08002be1
 8002b2c:	08002be1 	.word	0x08002be1
 8002b30:	08002be1 	.word	0x08002be1
 8002b34:	08002be1 	.word	0x08002be1
 8002b38:	08002be1 	.word	0x08002be1
 8002b3c:	08002be1 	.word	0x08002be1
 8002b40:	08002be1 	.word	0x08002be1
 8002b44:	08002be1 	.word	0x08002be1
 8002b48:	08002be1 	.word	0x08002be1
 8002b4c:	08002be1 	.word	0x08002be1
 8002b50:	08002be1 	.word	0x08002be1
 8002b54:	08002be1 	.word	0x08002be1
 8002b58:	08002b99 	.word	0x08002b99
 8002b5c:	08002bb1 	.word	0x08002bb1
 8002b60:	08002bc9 	.word	0x08002bc9
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8002b64:	2100      	movs	r1, #0
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fdc2 	bl	80026f0 <prv_parse_number>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 8002b76:	e122      	b.n	8002dbe <prv_parse_term+0x54a>
 8002b78:	080180b0 	.word	0x080180b0
 8002b7c:	080180b8 	.word	0x080180b8
 8002b80:	080180c0 	.word	0x080180c0
 8002b84:	080180c8 	.word	0x080180c8
 8002b88:	080180d0 	.word	0x080180d0
 8002b8c:	080180d8 	.word	0x080180d8
 8002b90:	080180e0 	.word	0x080180e0
 8002b94:	080180e8 	.word	0x080180e8
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8002b98:	2100      	movs	r1, #0
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fdf2 	bl	8002784 <prv_parse_float_number>
 8002ba0:	eeb0 7a40 	vmov.f32	s14, s0
 8002ba4:	eef0 7a60 	vmov.f32	s15, s1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002bae:	e106      	b.n	8002dbe <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fde6 	bl	8002784 <prv_parse_float_number>
 8002bb8:	eeb0 7a40 	vmov.f32	s14, s0
 8002bbc:	eef0 7a60 	vmov.f32	s15, s1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8002bc6:	e0fa      	b.n	8002dbe <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8002bc8:	2100      	movs	r1, #0
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff fdda 	bl	8002784 <prv_parse_float_number>
 8002bd0:	eeb0 7a40 	vmov.f32	s14, s0
 8002bd4:	eef0 7a60 	vmov.f32	s15, s1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002bde:	e0ee      	b.n	8002dbe <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	f240 80e4 	bls.w	8002db4 <prv_parse_term+0x540>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002bf2:	2b0e      	cmp	r3, #14
 8002bf4:	f200 80de 	bhi.w	8002db4 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff fd78 	bl	80026f0 <prv_parse_number>
 8002c00:	4602      	mov	r2, r0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002c08:	3b03      	subs	r3, #3
 8002c0a:	b2d1      	uxtb	r1, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	460a      	mov	r2, r1
 8002c12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8002c16:	e0cd      	b.n	8002db4 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002c1e:	2903      	cmp	r1, #3
 8002c20:	d11b      	bne.n	8002c5a <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d002      	beq.n	8002c32 <prv_parse_term+0x3be>
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d00a      	beq.n	8002c46 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8002c30:	e0c5      	b.n	8002dbe <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8002c32:	2100      	movs	r1, #0
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff fd5b 	bl	80026f0 <prv_parse_number>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8002c44:	e0bb      	b.n	8002dbe <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8002c46:	2100      	movs	r1, #0
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff fd51 	bl	80026f0 <prv_parse_number>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002c58:	e0b1      	b.n	8002dbe <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002c60:	2904      	cmp	r1, #4
 8002c62:	f040 80ac 	bne.w	8002dbe <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002c6c:	3902      	subs	r1, #2
 8002c6e:	2909      	cmp	r1, #9
 8002c70:	f200 80a2 	bhi.w	8002db8 <prv_parse_term+0x544>
 8002c74:	a001      	add	r0, pc, #4	; (adr r0, 8002c7c <prv_parse_term+0x408>)
 8002c76:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002c7a:	bf00      	nop
 8002c7c:	08002ca5 	.word	0x08002ca5
 8002c80:	08002db9 	.word	0x08002db9
 8002c84:	08002db9 	.word	0x08002db9
 8002c88:	08002db9 	.word	0x08002db9
 8002c8c:	08002db9 	.word	0x08002db9
 8002c90:	08002cbf 	.word	0x08002cbf
 8002c94:	08002cd7 	.word	0x08002cd7
 8002c98:	08002cef 	.word	0x08002cef
 8002c9c:	08002d69 	.word	0x08002d69
 8002ca0:	08002d81 	.word	0x08002d81
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002caa:	2b41      	cmp	r3, #65	; 0x41
 8002cac:	bf0c      	ite	eq
 8002cae:	2301      	moveq	r3, #1
 8002cb0:	2300      	movne	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002cbc:	e07f      	b.n	8002dbe <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff fd5f 	bl	8002784 <prv_parse_float_number>
 8002cc6:	eeb0 7a40 	vmov.f32	s14, s0
 8002cca:	eef0 7a60 	vmov.f32	s15, s1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002cd4:	e073      	b.n	8002dbe <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff fd53 	bl	8002784 <prv_parse_float_number>
 8002cde:	eeb0 7a40 	vmov.f32	s14, s0
 8002ce2:	eef0 7a60 	vmov.f32	s15, s1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002cec:	e067      	b.n	8002dbe <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002cf4:	3b30      	subs	r3, #48	; 0x30
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002d08:	4413      	add	r3, r2
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	3b30      	subs	r3, #48	; 0x30
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002d1c:	3b30      	subs	r3, #48	; 0x30
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	0092      	lsls	r2, r2, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d30:	4413      	add	r3, r2
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	3b30      	subs	r3, #48	; 0x30
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002d44:	3b30      	subs	r3, #48	; 0x30
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	0092      	lsls	r2, r2, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002d58:	4413      	add	r3, r2
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	3b30      	subs	r3, #48	; 0x30
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8002d66:	e02a      	b.n	8002dbe <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8002d68:	2100      	movs	r1, #0
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fd0a 	bl	8002784 <prv_parse_float_number>
 8002d70:	eeb0 7a40 	vmov.f32	s14, s0
 8002d74:	eef0 7a60 	vmov.f32	s15, s1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002d7e:	e01e      	b.n	8002dbe <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002d86:	2957      	cmp	r1, #87	; 0x57
 8002d88:	d004      	beq.n	8002d94 <prv_parse_term+0x520>
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002d90:	2977      	cmp	r1, #119	; 0x77
 8002d92:	d113      	bne.n	8002dbc <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8002da6:	e009      	b.n	8002dbc <prv_parse_term+0x548>
                break;
 8002da8:	bf00      	nop
 8002daa:	e008      	b.n	8002dbe <prv_parse_term+0x54a>
                break;
 8002dac:	bf00      	nop
 8002dae:	e006      	b.n	8002dbe <prv_parse_term+0x54a>
                break;
 8002db0:	bf00      	nop
 8002db2:	e004      	b.n	8002dbe <prv_parse_term+0x54a>
                break;
 8002db4:	bf00      	nop
 8002db6:	e002      	b.n	8002dbe <prv_parse_term+0x54a>
            default:
                break;
 8002db8:	bf00      	nop
 8002dba:	e000      	b.n	8002dbe <prv_parse_term+0x54a>
                break;
 8002dbc:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8002dbe:	2301      	movs	r3, #1
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dca:	bf00      	nop

08002dcc <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002dda:	2b2f      	cmp	r3, #47	; 0x2f
 8002ddc:	d90d      	bls.n	8002dfa <prv_check_crc+0x2e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002de4:	2b39      	cmp	r3, #57	; 0x39
 8002de6:	d808      	bhi.n	8002dfa <prv_check_crc+0x2e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002dee:	3b30      	subs	r3, #48	; 0x30
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	b25a      	sxtb	r2, r3
 8002df8:	e026      	b.n	8002e48 <prv_check_crc+0x7c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002e00:	2b60      	cmp	r3, #96	; 0x60
 8002e02:	d90d      	bls.n	8002e20 <prv_check_crc+0x54>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002e0a:	2b7a      	cmp	r3, #122	; 0x7a
 8002e0c:	d808      	bhi.n	8002e20 <prv_check_crc+0x54>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002e14:	3b57      	subs	r3, #87	; 0x57
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	b25a      	sxtb	r2, r3
 8002e1e:	e013      	b.n	8002e48 <prv_check_crc+0x7c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d90d      	bls.n	8002e46 <prv_check_crc+0x7a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002e30:	2b5a      	cmp	r3, #90	; 0x5a
 8002e32:	d808      	bhi.n	8002e46 <prv_check_crc+0x7a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002e3a:	3b37      	subs	r3, #55	; 0x37
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	b25a      	sxtb	r2, r3
 8002e44:	e000      	b.n	8002e48 <prv_check_crc+0x7c>
 8002e46:	2200      	movs	r2, #0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e4e:	2b2f      	cmp	r3, #47	; 0x2f
 8002e50:	d90c      	bls.n	8002e6c <prv_check_crc+0xa0>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e58:	2b39      	cmp	r3, #57	; 0x39
 8002e5a:	d807      	bhi.n	8002e6c <prv_check_crc+0xa0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e62:	b25b      	sxtb	r3, r3
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	e028      	b.n	8002ebe <prv_check_crc+0xf2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e72:	2b60      	cmp	r3, #96	; 0x60
 8002e74:	d90e      	bls.n	8002e94 <prv_check_crc+0xc8>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e7c:	2b7a      	cmp	r3, #122	; 0x7a
 8002e7e:	d809      	bhi.n	8002e94 <prv_check_crc+0xc8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e86:	3b57      	subs	r3, #87	; 0x57
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	b25b      	sxtb	r3, r3
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	e014      	b.n	8002ebe <prv_check_crc+0xf2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d90e      	bls.n	8002ebc <prv_check_crc+0xf0>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002ea4:	2b5a      	cmp	r3, #90	; 0x5a
 8002ea6:	d809      	bhi.n	8002ebc <prv_check_crc+0xf0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002eae:	3b37      	subs	r3, #55	; 0x37
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	b25b      	sxtb	r3, r3
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	e000      	b.n	8002ebe <prv_check_crc+0xf2>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d136      	bne.n	8002f62 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f60:	e061      	b.n	8003026 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d121      	bne.n	8002fb0 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	33a1      	adds	r3, #161	; 0xa1
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f010 fd86 	bl	8013aba <memcpy>
 8002fae:	e03a      	b.n	8003026 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d106      	bne.n	8002fc8 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8002fc6:	e02e      	b.n	8003026 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d129      	bne.n	8003026 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8003026:	2301      	movs	r3, #1
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8003038:	22b0      	movs	r2, #176	; 0xb0
 800303a:	2100      	movs	r1, #0
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f010 fcaf 	bl	80139a0 <memset>
    return 1;
 8003042:	2301      	movs	r3, #1
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 800305c:	e0ad      	b.n	80031ba <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b24      	cmp	r3, #36	; 0x24
 8003064:	d128      	bne.n	80030b8 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3370      	adds	r3, #112	; 0x70
 800306a:	2240      	movs	r2, #64	; 0x40
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f010 fc96 	bl	80139a0 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800307a:	2b0b      	cmp	r3, #11
 800307c:	f200 8097 	bhi.w	80031ae <lwgps_process+0x162>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003086:	4619      	mov	r1, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	440b      	add	r3, r1
 8003090:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800309a:	3301      	adds	r3, #1
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80030b6:	e07a      	b.n	80031ae <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b2c      	cmp	r3, #44	; 0x2c
 80030be:	d11d      	bne.n	80030fc <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7ff fbd7 	bl	8002874 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	4053      	eors	r3, r2
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80030f0:	3301      	adds	r3, #1
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80030fa:	e058      	b.n	80031ae <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b2a      	cmp	r3, #42	; 0x2a
 8003102:	d117      	bne.n	8003134 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff fbb5 	bl	8002874 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003128:	3301      	adds	r3, #1
 800312a:	b2da      	uxtb	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8003132:	e03c      	b.n	80031ae <lwgps_process+0x162>
        } else if (*d == '\r') {
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b0d      	cmp	r3, #13
 800313a:	d109      	bne.n	8003150 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff fe45 	bl	8002dcc <prv_check_crc>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d032      	beq.n	80031ae <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff feca 	bl	8002ee2 <prv_copy_from_tmp_memory>
 800314e:	e02e      	b.n	80031ae <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	4053      	eors	r3, r2
 8003166:	b2da      	uxtb	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003174:	2b0b      	cmp	r3, #11
 8003176:	d81a      	bhi.n	80031ae <lwgps_process+0x162>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800317e:	4619      	mov	r1, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	440b      	add	r3, r1
 8003188:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003192:	3301      	adds	r3, #1
 8003194:	b2da      	uxtb	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80031a2:	461a      	mov	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	3301      	adds	r3, #1
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f47f af4e 	bne.w	800305e <lwgps_process+0x12>
        }
    }
    return 1;
 80031c2:	2301      	movs	r3, #1
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	0000      	movs	r0, r0
	...

080031d0 <lwgps_to_speed>:
 * \param[in]       sik: Speed in knots, received from GPS NMEA statement
 * \param[in]       ts: Target speed to convert to from knots
 * \return          Speed calculated from knots
 */
lwgps_float_t
lwgps_to_speed(lwgps_float_t sik, lwgps_speed_t ts) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	ed87 0b02 	vstr	d0, [r7, #8]
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
    switch (ts) {
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	2b0e      	cmp	r3, #14
 80031e2:	f200 80b0 	bhi.w	8003346 <lwgps_to_speed+0x176>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <lwgps_to_speed+0x1c>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003229 	.word	0x08003229
 80031f0:	0800323d 	.word	0x0800323d
 80031f4:	08003251 	.word	0x08003251
 80031f8:	08003265 	.word	0x08003265
 80031fc:	08003279 	.word	0x08003279
 8003200:	0800328d 	.word	0x0800328d
 8003204:	080032a1 	.word	0x080032a1
 8003208:	080032b5 	.word	0x080032b5
 800320c:	080032c9 	.word	0x080032c9
 8003210:	080032dd 	.word	0x080032dd
 8003214:	080032f1 	.word	0x080032f1
 8003218:	08003305 	.word	0x08003305
 800321c:	08003319 	.word	0x08003319
 8003220:	0800332d 	.word	0x0800332d
 8003224:	08003341 	.word	0x08003341
        case lwgps_speed_kps:
            return FLT(sik * FLT(0.000514));
 8003228:	a356      	add	r3, pc, #344	; (adr r3, 8003384 <lwgps_to_speed+0x1b4>)
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003232:	f7fd f9e9 	bl	8000608 <__aeabi_dmul>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	e088      	b.n	800334e <lwgps_to_speed+0x17e>
        case lwgps_speed_kph:
            return FLT(sik * FLT(1.852));
 800323c:	a353      	add	r3, pc, #332	; (adr r3, 800338c <lwgps_to_speed+0x1bc>)
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003246:	f7fd f9df 	bl	8000608 <__aeabi_dmul>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	e07e      	b.n	800334e <lwgps_to_speed+0x17e>
        case lwgps_speed_mps:
            return FLT(sik * FLT(0.5144));
 8003250:	a350      	add	r3, pc, #320	; (adr r3, 8003394 <lwgps_to_speed+0x1c4>)
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800325a:	f7fd f9d5 	bl	8000608 <__aeabi_dmul>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	e074      	b.n	800334e <lwgps_to_speed+0x17e>
        case lwgps_speed_mpm:
            return FLT(sik * FLT(30.87));
 8003264:	a34d      	add	r3, pc, #308	; (adr r3, 800339c <lwgps_to_speed+0x1cc>)
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800326e:	f7fd f9cb 	bl	8000608 <__aeabi_dmul>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	e06a      	b.n	800334e <lwgps_to_speed+0x17e>

        case lwgps_speed_mips:
            return FLT(sik * FLT(0.0003197));
 8003278:	a34a      	add	r3, pc, #296	; (adr r3, 80033a4 <lwgps_to_speed+0x1d4>)
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003282:	f7fd f9c1 	bl	8000608 <__aeabi_dmul>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	e060      	b.n	800334e <lwgps_to_speed+0x17e>
        case lwgps_speed_mph:
            return FLT(sik * FLT(1.151));
 800328c:	a347      	add	r3, pc, #284	; (adr r3, 80033ac <lwgps_to_speed+0x1dc>)
 800328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003296:	f7fd f9b7 	bl	8000608 <__aeabi_dmul>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	e056      	b.n	800334e <lwgps_to_speed+0x17e>
        case lwgps_speed_fps:
            return FLT(sik * FLT(1.688));
 80032a0:	a344      	add	r3, pc, #272	; (adr r3, 80033b4 <lwgps_to_speed+0x1e4>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032aa:	f7fd f9ad 	bl	8000608 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	e04c      	b.n	800334e <lwgps_to_speed+0x17e>
        case lwgps_speed_fpm:
            return FLT(sik * FLT(101.3));
 80032b4:	a341      	add	r3, pc, #260	; (adr r3, 80033bc <lwgps_to_speed+0x1ec>)
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032be:	f7fd f9a3 	bl	8000608 <__aeabi_dmul>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	e042      	b.n	800334e <lwgps_to_speed+0x17e>

        case lwgps_speed_mpk:
            return FLT(sik * FLT(32.4));
 80032c8:	a33e      	add	r3, pc, #248	; (adr r3, 80033c4 <lwgps_to_speed+0x1f4>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032d2:	f7fd f999 	bl	8000608 <__aeabi_dmul>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	e038      	b.n	800334e <lwgps_to_speed+0x17e>
        case lwgps_speed_spk:
            return FLT(sik * FLT(1944.0));
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	4b27      	ldr	r3, [pc, #156]	; (8003380 <lwgps_to_speed+0x1b0>)
 80032e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032e6:	f7fd f98f 	bl	8000608 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	e02e      	b.n	800334e <lwgps_to_speed+0x17e>
        case lwgps_speed_sp100m:
            return FLT(sik * FLT(194.4));
 80032f0:	a31b      	add	r3, pc, #108	; (adr r3, 8003360 <lwgps_to_speed+0x190>)
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032fa:	f7fd f985 	bl	8000608 <__aeabi_dmul>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	e024      	b.n	800334e <lwgps_to_speed+0x17e>
        case lwgps_speed_mipm:
            return FLT(sik * FLT(52.14));
 8003304:	a318      	add	r3, pc, #96	; (adr r3, 8003368 <lwgps_to_speed+0x198>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800330e:	f7fd f97b 	bl	8000608 <__aeabi_dmul>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	e01a      	b.n	800334e <lwgps_to_speed+0x17e>
        case lwgps_speed_spm:
            return FLT(sik * FLT(3128.0));
 8003318:	a315      	add	r3, pc, #84	; (adr r3, 8003370 <lwgps_to_speed+0x1a0>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003322:	f7fd f971 	bl	8000608 <__aeabi_dmul>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	e010      	b.n	800334e <lwgps_to_speed+0x17e>
        case lwgps_speed_sp100y:
            return FLT(sik * FLT(177.7));
 800332c:	a312      	add	r3, pc, #72	; (adr r3, 8003378 <lwgps_to_speed+0x1a8>)
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003336:	f7fd f967 	bl	8000608 <__aeabi_dmul>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	e006      	b.n	800334e <lwgps_to_speed+0x17e>

        case lwgps_speed_smph:
            return FLT(sik * FLT(1.0));
 8003340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003344:	e003      	b.n	800334e <lwgps_to_speed+0x17e>
        default:
            return 0;
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
    }
}
 800334e:	ec43 2b17 	vmov	d7, r2, r3
 8003352:	eeb0 0a47 	vmov.f32	s0, s14
 8003356:	eef0 0a67 	vmov.f32	s1, s15
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	cccccccd 	.word	0xcccccccd
 8003364:	40684ccc 	.word	0x40684ccc
 8003368:	851eb852 	.word	0x851eb852
 800336c:	404a11eb 	.word	0x404a11eb
 8003370:	00000000 	.word	0x00000000
 8003374:	40a87000 	.word	0x40a87000
 8003378:	66666666 	.word	0x66666666
 800337c:	40663666 	.word	0x40663666
 8003380:	409e6000 	.word	0x409e6000
 8003384:	9856a37b 	.word	0x9856a37b
 8003388:	3f40d7be 	.word	0x3f40d7be
 800338c:	c083126f 	.word	0xc083126f
 8003390:	3ffda1ca 	.word	0x3ffda1ca
 8003394:	fd21ff2e 	.word	0xfd21ff2e
 8003398:	3fe075f6 	.word	0x3fe075f6
 800339c:	51eb851f 	.word	0x51eb851f
 80033a0:	403edeb8 	.word	0x403edeb8
 80033a4:	0b666590 	.word	0x0b666590
 80033a8:	3f34f3ad 	.word	0x3f34f3ad
 80033ac:	f9db22d1 	.word	0xf9db22d1
 80033b0:	3ff26a7e 	.word	0x3ff26a7e
 80033b4:	49ba5e35 	.word	0x49ba5e35
 80033b8:	3ffb020c 	.word	0x3ffb020c
 80033bc:	33333333 	.word	0x33333333
 80033c0:	40595333 	.word	0x40595333
 80033c4:	33333333 	.word	0x33333333
 80033c8:	40403333 	.word	0x40403333

080033cc <HAL_UART_RxCpltCallback>:
static void MX_SPI1_Init(void);
static void MX_TIM8_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) {
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a17      	ldr	r2, [pc, #92]	; (8003434 <HAL_UART_RxCpltCallback+0x68>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d127      	bne.n	800342c <HAL_UART_RxCpltCallback+0x60>
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80033dc:	4b16      	ldr	r3, [pc, #88]	; (8003438 <HAL_UART_RxCpltCallback+0x6c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b0a      	cmp	r3, #10
 80033e2:	d010      	beq.n	8003406 <HAL_UART_RxCpltCallback+0x3a>
 80033e4:	4b15      	ldr	r3, [pc, #84]	; (800343c <HAL_UART_RxCpltCallback+0x70>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	b25b      	sxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	db0b      	blt.n	8003406 <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_UART_RxCpltCallback+0x70>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	b2d1      	uxtb	r1, r2
 80033f6:	4a11      	ldr	r2, [pc, #68]	; (800343c <HAL_UART_RxCpltCallback+0x70>)
 80033f8:	7011      	strb	r1, [r2, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <HAL_UART_RxCpltCallback+0x6c>)
 80033fe:	7819      	ldrb	r1, [r3, #0]
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_UART_RxCpltCallback+0x74>)
 8003402:	5499      	strb	r1, [r3, r2]
 8003404:	e00d      	b.n	8003422 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index+1);
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_UART_RxCpltCallback+0x70>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	3301      	adds	r3, #1
 800340c:	461a      	mov	r2, r3
 800340e:	490c      	ldr	r1, [pc, #48]	; (8003440 <HAL_UART_RxCpltCallback+0x74>)
 8003410:	480c      	ldr	r0, [pc, #48]	; (8003444 <HAL_UART_RxCpltCallback+0x78>)
 8003412:	f7ff fe1b 	bl	800304c <lwgps_process>
			rx_index = 0;
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <HAL_UART_RxCpltCallback+0x70>)
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_UART_RxCpltCallback+0x6c>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8003422:	2201      	movs	r2, #1
 8003424:	4904      	ldr	r1, [pc, #16]	; (8003438 <HAL_UART_RxCpltCallback+0x6c>)
 8003426:	4803      	ldr	r0, [pc, #12]	; (8003434 <HAL_UART_RxCpltCallback+0x68>)
 8003428:	f008 fda2 	bl	800bf70 <HAL_UART_Receive_IT>
	}
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	200009f4 	.word	0x200009f4
 8003438:	2000066d 	.word	0x2000066d
 800343c:	2000066c 	.word	0x2000066c
 8003440:	200005ec 	.word	0x200005ec
 8003444:	20000458 	.word	0x20000458

08003448 <os_getArtEui>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void os_getArtEui (uint8_t* buf) {
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
    memcpy(buf, APPEUI, 8);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4906      	ldr	r1, [pc, #24]	; (800346c <os_getArtEui+0x24>)
 8003454:	461a      	mov	r2, r3
 8003456:	460b      	mov	r3, r1
 8003458:	cb03      	ldmia	r3!, {r0, r1}
 800345a:	6010      	str	r0, [r2, #0]
 800345c:	6051      	str	r1, [r2, #4]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	080186d0 	.word	0x080186d0

08003470 <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui (uint8_t* buf) {
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVEUI, 8);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4906      	ldr	r1, [pc, #24]	; (8003494 <os_getDevEui+0x24>)
 800347c:	461a      	mov	r2, r3
 800347e:	460b      	mov	r3, r1
 8003480:	cb03      	ldmia	r3!, {r0, r1}
 8003482:	6010      	str	r0, [r2, #0]
 8003484:	6051      	str	r1, [r2, #4]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	080186d8 	.word	0x080186d8

08003498 <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey (uint8_t* buf) {
 8003498:	b4b0      	push	{r4, r5, r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVKEY, 16);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a06      	ldr	r2, [pc, #24]	; (80034bc <os_getDevKey+0x24>)
 80034a4:	461c      	mov	r4, r3
 80034a6:	4615      	mov	r5, r2
 80034a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034aa:	6020      	str	r0, [r4, #0]
 80034ac:	6061      	str	r1, [r4, #4]
 80034ae:	60a2      	str	r2, [r4, #8]
 80034b0:	60e3      	str	r3, [r4, #12]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bcb0      	pop	{r4, r5, r7}
 80034ba:	4770      	bx	lr
 80034bc:	080186e0 	.word	0x080186e0

080034c0 <do_send>:

#define TX_TIMEOUT 60
static uint8_t data[24];
static osjob_t sendjob;

void do_send(osjob_t* j){
 80034c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c4:	b092      	sub	sp, #72	; 0x48
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
	ostime_t tm = os_getTime();
 80034ca:	f00d ff9d 	bl	8011408 <os_getTime>
 80034ce:	6438      	str	r0, [r7, #64]	; 0x40
		printf("Call %s %lums\n", __func__, (unsigned long)osticks2ms(tm));
 80034d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d2:	2200      	movs	r2, #0
 80034d4:	4698      	mov	r8, r3
 80034d6:	4691      	mov	r9, r2
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	f04f 0000 	mov.w	r0, #0
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	0159      	lsls	r1, r3, #5
 80034e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ea:	0150      	lsls	r0, r2, #5
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	ebb2 0408 	subs.w	r4, r2, r8
 80034f4:	eb63 0509 	sbc.w	r5, r3, r9
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	00ab      	lsls	r3, r5, #2
 8003502:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003506:	00a2      	lsls	r2, r4, #2
 8003508:	4614      	mov	r4, r2
 800350a:	461d      	mov	r5, r3
 800350c:	eb14 0a08 	adds.w	sl, r4, r8
 8003510:	eb45 0b09 	adc.w	fp, r5, r9
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003520:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003528:	4692      	mov	sl, r2
 800352a:	469b      	mov	fp, r3
 800352c:	4650      	mov	r0, sl
 800352e:	4659      	mov	r1, fp
 8003530:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	f7fd fbae 	bl	8000c98 <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	461a      	mov	r2, r3
 8003544:	4992      	ldr	r1, [pc, #584]	; (8003790 <do_send+0x2d0>)
 8003546:	4893      	ldr	r0, [pc, #588]	; (8003794 <do_send+0x2d4>)
 8003548:	f00e ff34 	bl	80123b4 <printf>

		if (!(LMIC.opmode & OP_TXRXPEND)) {
 800354c:	4b92      	ldr	r3, [pc, #584]	; (8003798 <do_send+0x2d8>)
 800354e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 8106 	bne.w	8003768 <do_send+0x2a8>

			double lat_float = currentGPS.latitude * 1000000.0;
 800355c:	4b8f      	ldr	r3, [pc, #572]	; (800379c <do_send+0x2dc>)
 800355e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003562:	a389      	add	r3, pc, #548	; (adr r3, 8003788 <do_send+0x2c8>)
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	f7fd f84e 	bl	8000608 <__aeabi_dmul>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			double lon_float = currentGPS.longitude * 1000000.0;
 8003574:	4b89      	ldr	r3, [pc, #548]	; (800379c <do_send+0x2dc>)
 8003576:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800357a:	a383      	add	r3, pc, #524	; (adr r3, 8003788 <do_send+0x2c8>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f7fd f842 	bl	8000608 <__aeabi_dmul>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

			 lat_int = (int32_t)lat_float; // Integer part of latitude
 800358c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003590:	f7fd faea 	bl	8000b68 <__aeabi_d2iz>
 8003594:	4603      	mov	r3, r0
 8003596:	4a82      	ldr	r2, [pc, #520]	; (80037a0 <do_send+0x2e0>)
 8003598:	6013      	str	r3, [r2, #0]
			 int32_t lon_int = (int32_t)lon_float; // Integer part of longitude
 800359a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800359e:	f7fd fae3 	bl	8000b68 <__aeabi_d2iz>
 80035a2:	4603      	mov	r3, r0
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c

			// Calculate fractional parts for latitude and longitude with 10 decimal places
			double lat_fractional_double = (lat_float - lat_int)*1000.0;
 80035a6:	4b7e      	ldr	r3, [pc, #504]	; (80037a0 <do_send+0x2e0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fc ffc2 	bl	8000534 <__aeabi_i2d>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80035b8:	f7fc fe6e 	bl	8000298 <__aeabi_dsub>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	4b76      	ldr	r3, [pc, #472]	; (80037a4 <do_send+0x2e4>)
 80035ca:	f7fd f81d 	bl	8000608 <__aeabi_dmul>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
			double lon_fractional_double = (lon_float - lon_int) * 1000.0;
 80035d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035d8:	f7fc ffac 	bl	8000534 <__aeabi_i2d>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80035e4:	f7fc fe58 	bl	8000298 <__aeabi_dsub>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4610      	mov	r0, r2
 80035ee:	4619      	mov	r1, r3
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	4b6b      	ldr	r3, [pc, #428]	; (80037a4 <do_send+0x2e4>)
 80035f6:	f7fd f807 	bl	8000608 <__aeabi_dmul>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	e9c7 2306 	strd	r2, r3, [r7, #24]

			// Round the fractional parts to integers
			 lat_fractional = (int32_t)(lat_fractional_double ); // Round to the nearest integer
 8003602:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003606:	f7fd faaf 	bl	8000b68 <__aeabi_d2iz>
 800360a:	4603      	mov	r3, r0
 800360c:	4a66      	ldr	r2, [pc, #408]	; (80037a8 <do_send+0x2e8>)
 800360e:	6013      	str	r3, [r2, #0]
			int32_t lon_fractional = (int32_t)(lon_fractional_double ); // Round to the nearest integer
 8003610:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003614:	f7fd faa8 	bl	8000b68 <__aeabi_d2iz>
 8003618:	4603      	mov	r3, r0
 800361a:	617b      	str	r3, [r7, #20]

			//Convert speed and battery percentage to integers for transmission
			int32_t speedInt = (int32_t)(speed * 100); // Multiply by 100 to keep two decimal places
 800361c:	4b63      	ldr	r3, [pc, #396]	; (80037ac <do_send+0x2ec>)
 800361e:	edd3 7a00 	vldr	s15, [r3]
 8003622:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80037b0 <do_send+0x2f0>
 8003626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800362a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800362e:	ee17 3a90 	vmov	r3, s15
 8003632:	613b      	str	r3, [r7, #16]
			int32_t batteryPercentageInt = (int32_t)(battery_voltage * 100); // Multiply by 100 to keep two decimal places
 8003634:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <do_send+0x2f4>)
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80037b0 <do_send+0x2f0>
 800363e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003646:	ee17 3a90 	vmov	r3, s15
 800364a:	60fb      	str	r3, [r7, #12]

			// Now convert integer and fractional parts into bytes
			data[0] = (lat_int >> 24) & 0xFF;
 800364c:	4b54      	ldr	r3, [pc, #336]	; (80037a0 <do_send+0x2e0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0e1b      	lsrs	r3, r3, #24
 8003652:	b2da      	uxtb	r2, r3
 8003654:	4b58      	ldr	r3, [pc, #352]	; (80037b8 <do_send+0x2f8>)
 8003656:	701a      	strb	r2, [r3, #0]
			data[1] = (lat_int >> 16) & 0xFF;
 8003658:	4b51      	ldr	r3, [pc, #324]	; (80037a0 <do_send+0x2e0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	141b      	asrs	r3, r3, #16
 800365e:	b2da      	uxtb	r2, r3
 8003660:	4b55      	ldr	r3, [pc, #340]	; (80037b8 <do_send+0x2f8>)
 8003662:	705a      	strb	r2, [r3, #1]
			data[2] = (lat_int >> 8) & 0xFF;
 8003664:	4b4e      	ldr	r3, [pc, #312]	; (80037a0 <do_send+0x2e0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	121b      	asrs	r3, r3, #8
 800366a:	b2da      	uxtb	r2, r3
 800366c:	4b52      	ldr	r3, [pc, #328]	; (80037b8 <do_send+0x2f8>)
 800366e:	709a      	strb	r2, [r3, #2]
			data[3] = lat_int & 0xFF;
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <do_send+0x2e0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4b50      	ldr	r3, [pc, #320]	; (80037b8 <do_send+0x2f8>)
 8003678:	70da      	strb	r2, [r3, #3]

			data[4] = (lat_fractional >> 24) & 0xFF;
 800367a:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <do_send+0x2e8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	0e1b      	lsrs	r3, r3, #24
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4b4d      	ldr	r3, [pc, #308]	; (80037b8 <do_send+0x2f8>)
 8003684:	711a      	strb	r2, [r3, #4]
			data[5] = (lat_fractional >> 16) & 0xFF;
 8003686:	4b48      	ldr	r3, [pc, #288]	; (80037a8 <do_send+0x2e8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	141b      	asrs	r3, r3, #16
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4b4a      	ldr	r3, [pc, #296]	; (80037b8 <do_send+0x2f8>)
 8003690:	715a      	strb	r2, [r3, #5]
			data[6] = (lat_fractional >> 8) & 0xFF;
 8003692:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <do_send+0x2e8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	121b      	asrs	r3, r3, #8
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <do_send+0x2f8>)
 800369c:	719a      	strb	r2, [r3, #6]
			data[7] = lat_fractional & 0xFF;
 800369e:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <do_send+0x2e8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	4b44      	ldr	r3, [pc, #272]	; (80037b8 <do_send+0x2f8>)
 80036a6:	71da      	strb	r2, [r3, #7]

			data[8] = (lon_int >> 24) & 0xFF;
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	0e1b      	lsrs	r3, r3, #24
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <do_send+0x2f8>)
 80036b0:	721a      	strb	r2, [r3, #8]
			data[9] = (lon_int >> 16) & 0xFF;
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	141b      	asrs	r3, r3, #16
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <do_send+0x2f8>)
 80036ba:	725a      	strb	r2, [r3, #9]
			data[10] = (lon_int >> 8) & 0xFF;
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	121b      	asrs	r3, r3, #8
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <do_send+0x2f8>)
 80036c4:	729a      	strb	r2, [r3, #10]
			data[11] = lon_int & 0xFF;
 80036c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <do_send+0x2f8>)
 80036cc:	72da      	strb	r2, [r3, #11]

			data[12] = (lon_fractional >> 24) & 0xFF;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	0e1b      	lsrs	r3, r3, #24
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	4b38      	ldr	r3, [pc, #224]	; (80037b8 <do_send+0x2f8>)
 80036d6:	731a      	strb	r2, [r3, #12]
			data[13] = (lon_fractional >> 16) & 0xFF;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	141b      	asrs	r3, r3, #16
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <do_send+0x2f8>)
 80036e0:	735a      	strb	r2, [r3, #13]
			data[14] = (lon_fractional >> 8) & 0xFF;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	121b      	asrs	r3, r3, #8
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <do_send+0x2f8>)
 80036ea:	739a      	strb	r2, [r3, #14]
			data[15] = lon_fractional & 0xFF;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <do_send+0x2f8>)
 80036f2:	73da      	strb	r2, [r3, #15]

			data[16] = (speedInt >> 24) & 0xFF;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	0e1b      	lsrs	r3, r3, #24
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <do_send+0x2f8>)
 80036fc:	741a      	strb	r2, [r3, #16]
			data[17] = (speedInt >> 16) & 0xFF;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	141b      	asrs	r3, r3, #16
 8003702:	b2da      	uxtb	r2, r3
 8003704:	4b2c      	ldr	r3, [pc, #176]	; (80037b8 <do_send+0x2f8>)
 8003706:	745a      	strb	r2, [r3, #17]
			data[18] = (speedInt >> 8) & 0xFF;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	121b      	asrs	r3, r3, #8
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <do_send+0x2f8>)
 8003710:	749a      	strb	r2, [r3, #18]
			data[19] = speedInt & 0xFF;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	b2da      	uxtb	r2, r3
 8003716:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <do_send+0x2f8>)
 8003718:	74da      	strb	r2, [r3, #19]

			data[20] = (batteryPercentageInt >> 24) & 0xFF;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	0e1b      	lsrs	r3, r3, #24
 800371e:	b2da      	uxtb	r2, r3
 8003720:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <do_send+0x2f8>)
 8003722:	751a      	strb	r2, [r3, #20]
			data[21] = (batteryPercentageInt >> 16) & 0xFF;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	141b      	asrs	r3, r3, #16
 8003728:	b2da      	uxtb	r2, r3
 800372a:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <do_send+0x2f8>)
 800372c:	755a      	strb	r2, [r3, #21]
			data[22] = (batteryPercentageInt >> 8) & 0xFF;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	121b      	asrs	r3, r3, #8
 8003732:	b2da      	uxtb	r2, r3
 8003734:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <do_send+0x2f8>)
 8003736:	759a      	strb	r2, [r3, #22]
			data[23] = batteryPercentageInt & 0xFF;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <do_send+0x2f8>)
 800373e:	75da      	strb	r2, [r3, #23]

			LMIC_setTxData2(1, data, sizeof(data), 0);
 8003740:	2300      	movs	r3, #0
 8003742:	2218      	movs	r2, #24
 8003744:	491c      	ldr	r1, [pc, #112]	; (80037b8 <do_send+0x2f8>)
 8003746:	2001      	movs	r0, #1
 8003748:	f00d fdb8 	bl	80112bc <LMIC_setTxData2>
			for (int i = 0; i<=sizeof(data); i++) data[i] = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	647b      	str	r3, [r7, #68]	; 0x44
 8003750:	e007      	b.n	8003762 <do_send+0x2a2>
 8003752:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <do_send+0x2f8>)
 8003754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003756:	4413      	add	r3, r2
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800375e:	3301      	adds	r3, #1
 8003760:	647b      	str	r3, [r7, #68]	; 0x44
 8003762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003764:	2b18      	cmp	r3, #24
 8003766:	d9f4      	bls.n	8003752 <do_send+0x292>
		}
		os_setTimedCallback(j, tm+sec2osticks(TX_TIMEOUT), do_send);
 8003768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376a:	f503 13ea 	add.w	r3, r3, #1916928	; 0x1d4000
 800376e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003772:	4a12      	ldr	r2, [pc, #72]	; (80037bc <do_send+0x2fc>)
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f00d fecc 	bl	8011514 <os_setTimedCallback>
}
 800377c:	bf00      	nop
 800377e:	3748      	adds	r7, #72	; 0x48
 8003780:	46bd      	mov	sp, r7
 8003782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003786:	bf00      	nop
 8003788:	00000000 	.word	0x00000000
 800378c:	412e8480 	.word	0x412e8480
 8003790:	08018710 	.word	0x08018710
 8003794:	080180f0 	.word	0x080180f0
 8003798:	20000c04 	.word	0x20000c04
 800379c:	200005c0 	.word	0x200005c0
 80037a0:	200005dc 	.word	0x200005dc
 80037a4:	408f4000 	.word	0x408f4000
 80037a8:	200005e0 	.word	0x200005e0
 80037ac:	20000674 	.word	0x20000674
 80037b0:	42c80000 	.word	0x42c80000
 80037b4:	20000670 	.word	0x20000670
 80037b8:	20000b04 	.word	0x20000b04
 80037bc:	080034c1 	.word	0x080034c1

080037c0 <onEvent>:
void onEvent (ev_t ev) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
    debug_event(ev);
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f00e fee1 	bl	8012594 <debug_event>
    debug_str("\n");
 80037d2:	4862      	ldr	r0, [pc, #392]	; (800395c <onEvent+0x19c>)
 80037d4:	f00e fe52 	bl	801247c <debug_str>
    switch(ev) {
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	3b01      	subs	r3, #1
 80037dc:	2b0e      	cmp	r3, #14
 80037de:	f200 80b4 	bhi.w	800394a <onEvent+0x18a>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <onEvent+0x28>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	08003825 	.word	0x08003825
 80037ec:	0800382d 	.word	0x0800382d
 80037f0:	08003835 	.word	0x08003835
 80037f4:	0800383d 	.word	0x0800383d
 80037f8:	08003845 	.word	0x08003845
 80037fc:	0800384d 	.word	0x0800384d
 8003800:	08003855 	.word	0x08003855
 8003804:	0800385d 	.word	0x0800385d
 8003808:	08003865 	.word	0x08003865
 800380c:	08003885 	.word	0x08003885
 8003810:	080038df 	.word	0x080038df
 8003814:	080038e7 	.word	0x080038e7
 8003818:	080038ef 	.word	0x080038ef
 800381c:	0800393b 	.word	0x0800393b
 8003820:	08003943 	.word	0x08003943
        case EV_SCAN_TIMEOUT:
            debug_str("EV_SCAN_TIMEOUT\n");
 8003824:	484e      	ldr	r0, [pc, #312]	; (8003960 <onEvent+0x1a0>)
 8003826:	f00e fe29 	bl	801247c <debug_str>
            break;
 800382a:	e093      	b.n	8003954 <onEvent+0x194>
        case EV_BEACON_FOUND:
            debug_str("EV_BEACON_FOUND\n");
 800382c:	484d      	ldr	r0, [pc, #308]	; (8003964 <onEvent+0x1a4>)
 800382e:	f00e fe25 	bl	801247c <debug_str>
            break;
 8003832:	e08f      	b.n	8003954 <onEvent+0x194>
        case EV_BEACON_MISSED:
            debug_str("EV_BEACON_MISSED\n");
 8003834:	484c      	ldr	r0, [pc, #304]	; (8003968 <onEvent+0x1a8>)
 8003836:	f00e fe21 	bl	801247c <debug_str>
            break;
 800383a:	e08b      	b.n	8003954 <onEvent+0x194>
        case EV_BEACON_TRACKED:
            debug_str("EV_BEACON_TRACKED\n");
 800383c:	484b      	ldr	r0, [pc, #300]	; (800396c <onEvent+0x1ac>)
 800383e:	f00e fe1d 	bl	801247c <debug_str>
            break;
 8003842:	e087      	b.n	8003954 <onEvent+0x194>
        case EV_JOINING:
            debug_str("EV_JOINING\n");
 8003844:	484a      	ldr	r0, [pc, #296]	; (8003970 <onEvent+0x1b0>)
 8003846:	f00e fe19 	bl	801247c <debug_str>
            break;
 800384a:	e083      	b.n	8003954 <onEvent+0x194>
        case EV_JOINED:
            debug_str("EV_JOINED\n");
 800384c:	4849      	ldr	r0, [pc, #292]	; (8003974 <onEvent+0x1b4>)
 800384e:	f00e fe15 	bl	801247c <debug_str>
            break;
 8003852:	e07f      	b.n	8003954 <onEvent+0x194>
        case EV_RFU1:
            debug_str("EV_RFU1\n");
 8003854:	4848      	ldr	r0, [pc, #288]	; (8003978 <onEvent+0x1b8>)
 8003856:	f00e fe11 	bl	801247c <debug_str>
            break;
 800385a:	e07b      	b.n	8003954 <onEvent+0x194>
        case EV_JOIN_FAILED:
            debug_str("EV_JOIN_FAILED\n");
 800385c:	4847      	ldr	r0, [pc, #284]	; (800397c <onEvent+0x1bc>)
 800385e:	f00e fe0d 	bl	801247c <debug_str>
            break;
 8003862:	e077      	b.n	8003954 <onEvent+0x194>
        case EV_REJOIN_FAILED:
            debug_str("EV_REJOIN_FAILED\n");
 8003864:	4846      	ldr	r0, [pc, #280]	; (8003980 <onEvent+0x1c0>)
 8003866:	f00e fe09 	bl	801247c <debug_str>
            os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);
 800386a:	f00d fdcd 	bl	8011408 <os_getTime>
 800386e:	4603      	mov	r3, r0
 8003870:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 8003874:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003878:	4a42      	ldr	r2, [pc, #264]	; (8003984 <onEvent+0x1c4>)
 800387a:	4619      	mov	r1, r3
 800387c:	4842      	ldr	r0, [pc, #264]	; (8003988 <onEvent+0x1c8>)
 800387e:	f00d fe49 	bl	8011514 <os_setTimedCallback>
            break;
 8003882:	e067      	b.n	8003954 <onEvent+0x194>
        case EV_TXCOMPLETE:
            debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\n");
 8003884:	4841      	ldr	r0, [pc, #260]	; (800398c <onEvent+0x1cc>)
 8003886:	f00e fdf9 	bl	801247c <debug_str>
            if (LMIC.txrxFlags & TXRX_ACK)
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <onEvent+0x1d0>)
 800388c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8003890:	b25b      	sxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	da02      	bge.n	800389c <onEvent+0xdc>
              debug_str("Received ack\n");
 8003896:	483f      	ldr	r0, [pc, #252]	; (8003994 <onEvent+0x1d4>)
 8003898:	f00e fdf0 	bl	801247c <debug_str>
            if (LMIC.dataLen) {
 800389c:	4b3c      	ldr	r3, [pc, #240]	; (8003990 <onEvent+0x1d0>)
 800389e:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00e      	beq.n	80038c4 <onEvent+0x104>
            	a=1;
 80038a6:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <onEvent+0x1d8>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
              debug_str("Received \n");
 80038ac:	483b      	ldr	r0, [pc, #236]	; (800399c <onEvent+0x1dc>)
 80038ae:	f00e fde5 	bl	801247c <debug_str>
              debug_int(LMIC.dataLen);
 80038b2:	4b37      	ldr	r3, [pc, #220]	; (8003990 <onEvent+0x1d0>)
 80038b4:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80038b8:	4618      	mov	r0, r3
 80038ba:	f00e fdb9 	bl	8012430 <debug_int>
              debug_str(" bytes of payload\n");
 80038be:	4838      	ldr	r0, [pc, #224]	; (80039a0 <onEvent+0x1e0>)
 80038c0:	f00e fddc 	bl	801247c <debug_str>
            }

            // Schedule next transmission
            os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);
 80038c4:	f00d fda0 	bl	8011408 <os_getTime>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 80038ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80038d2:	4a2c      	ldr	r2, [pc, #176]	; (8003984 <onEvent+0x1c4>)
 80038d4:	4619      	mov	r1, r3
 80038d6:	482c      	ldr	r0, [pc, #176]	; (8003988 <onEvent+0x1c8>)
 80038d8:	f00d fe1c 	bl	8011514 <os_setTimedCallback>
            break;
 80038dc:	e03a      	b.n	8003954 <onEvent+0x194>
        case EV_LOST_TSYNC:
            debug_str("EV_LOST_TSYNC\n");
 80038de:	4831      	ldr	r0, [pc, #196]	; (80039a4 <onEvent+0x1e4>)
 80038e0:	f00e fdcc 	bl	801247c <debug_str>
            break;
 80038e4:	e036      	b.n	8003954 <onEvent+0x194>
        case EV_RESET:
            debug_str("EV_RESET\n");
 80038e6:	4830      	ldr	r0, [pc, #192]	; (80039a8 <onEvent+0x1e8>)
 80038e8:	f00e fdc8 	bl	801247c <debug_str>
            break;
 80038ec:	e032      	b.n	8003954 <onEvent+0x194>
        case EV_RXCOMPLETE:
            // data received in ping slot
            debug_str("EV_RXCOMPLETE\n");
 80038ee:	482f      	ldr	r0, [pc, #188]	; (80039ac <onEvent+0x1ec>)
 80038f0:	f00e fdc4 	bl	801247c <debug_str>
            if(LMIC.dataLen >0){
 80038f4:	4b26      	ldr	r3, [pc, #152]	; (8003990 <onEvent+0x1d0>)
 80038f6:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d029      	beq.n	8003952 <onEvent+0x192>
          	  result = LMIC.frame[LMIC.dataBeg + 0];
 80038fe:	4b24      	ldr	r3, [pc, #144]	; (8003990 <onEvent+0x1d0>)
 8003900:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8003904:	461a      	mov	r2, r3
 8003906:	4b22      	ldr	r3, [pc, #136]	; (8003990 <onEvent+0x1d0>)
 8003908:	4413      	add	r3, r2
 800390a:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 800390e:	4b28      	ldr	r3, [pc, #160]	; (80039b0 <onEvent+0x1f0>)
 8003910:	701a      	strb	r2, [r3, #0]
            if (result == 1)  {
 8003912:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <onEvent+0x1f0>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d104      	bne.n	8003924 <onEvent+0x164>
          	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800391a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800391e:	4825      	ldr	r0, [pc, #148]	; (80039b4 <onEvent+0x1f4>)
 8003920:	f003 fcda 	bl	80072d8 <HAL_GPIO_TogglePin>
           }
           if (result == 2)  {
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <onEvent+0x1f0>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d112      	bne.n	8003952 <onEvent+0x192>
          	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800392c:	2201      	movs	r2, #1
 800392e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003932:	4820      	ldr	r0, [pc, #128]	; (80039b4 <onEvent+0x1f4>)
 8003934:	f003 fcb8 	bl	80072a8 <HAL_GPIO_WritePin>
           }
           }
            break;
 8003938:	e00b      	b.n	8003952 <onEvent+0x192>
        case EV_LINK_DEAD:
            debug_str("EV_LINK_DEAD\n");
 800393a:	481f      	ldr	r0, [pc, #124]	; (80039b8 <onEvent+0x1f8>)
 800393c:	f00e fd9e 	bl	801247c <debug_str>
            break;
 8003940:	e008      	b.n	8003954 <onEvent+0x194>
        case EV_LINK_ALIVE:
            debug_str("EV_LINK_ALIVE\n");
 8003942:	481e      	ldr	r0, [pc, #120]	; (80039bc <onEvent+0x1fc>)
 8003944:	f00e fd9a 	bl	801247c <debug_str>
            break;
 8003948:	e004      	b.n	8003954 <onEvent+0x194>
         default:
            debug_str("Unknown event\n");
 800394a:	481d      	ldr	r0, [pc, #116]	; (80039c0 <onEvent+0x200>)
 800394c:	f00e fd96 	bl	801247c <debug_str>
            break;
 8003950:	e000      	b.n	8003954 <onEvent+0x194>
            break;
 8003952:	bf00      	nop
    }
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	08018100 	.word	0x08018100
 8003960:	08018104 	.word	0x08018104
 8003964:	08018118 	.word	0x08018118
 8003968:	0801812c 	.word	0x0801812c
 800396c:	08018140 	.word	0x08018140
 8003970:	08018154 	.word	0x08018154
 8003974:	08018160 	.word	0x08018160
 8003978:	0801816c 	.word	0x0801816c
 800397c:	08018178 	.word	0x08018178
 8003980:	08018188 	.word	0x08018188
 8003984:	080034c1 	.word	0x080034c1
 8003988:	20000b1c 	.word	0x20000b1c
 800398c:	0801819c 	.word	0x0801819c
 8003990:	20000c04 	.word	0x20000c04
 8003994:	080181d0 	.word	0x080181d0
 8003998:	2000067c 	.word	0x2000067c
 800399c:	080181e0 	.word	0x080181e0
 80039a0:	080181ec 	.word	0x080181ec
 80039a4:	08018200 	.word	0x08018200
 80039a8:	08018210 	.word	0x08018210
 80039ac:	0801821c 	.word	0x0801821c
 80039b0:	20000680 	.word	0x20000680
 80039b4:	48000800 	.word	0x48000800
 80039b8:	0801822c 	.word	0x0801822c
 80039bc:	0801823c 	.word	0x0801823c
 80039c0:	0801824c 	.word	0x0801824c

080039c4 <initfunc>:

void initfunc(osjob_t* j)
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b08b      	sub	sp, #44	; 0x2c
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	   // Reset the MAC state. Session and pending data transfers will be discarded.
	   LMIC_reset();
 80039cc:	f00d fbfc 	bl	80111c8 <LMIC_reset>
	   LMIC_startJoining();
 80039d0:	f00c ff5a 	bl	8010888 <LMIC_startJoining>
	   // On AVR, these values are stored in flash and only copied to RAM
	   // once. Copy them to a temporary buffer here, LMIC_setSession will
	   // copy them into a buffer of its own again.
	    uint8_t appskey[sizeof(APPSKEY)];
	    uint8_t nwkskey[sizeof(NWKSKEY)];
	    memcpy(appskey, APPSKEY, sizeof(APPSKEY));
 80039d4:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <initfunc+0x6c>)
 80039d6:	f107 0418 	add.w	r4, r7, #24
 80039da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    memcpy(nwkskey, NWKSKEY, sizeof(NWKSKEY));
 80039e0:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <initfunc+0x70>)
 80039e2:	f107 0408 	add.w	r4, r7, #8
 80039e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    LMIC_setSession (0x1, DEVADDR, nwkskey, appskey);
 80039ec:	4912      	ldr	r1, [pc, #72]	; (8003a38 <initfunc+0x74>)
 80039ee:	f107 0318 	add.w	r3, r7, #24
 80039f2:	f107 0208 	add.w	r2, r7, #8
 80039f6:	2001      	movs	r0, #1
 80039f8:	f00d fc92 	bl	8011320 <LMIC_setSession>
	   #elif defined(CFG_us915)
	   // NA-US channels 0-71 are configured automatically
	   // but only one group of 8 should (a subband) should be active
	   // TTN recommends the second sub band, 1 in a zero based count.
	   // https://github.com/TheThingsNetwork/gateway-conf/blob/master/US-global_conf.json
	   LMIC_selectSubBand(1);
 80039fc:	2001      	movs	r0, #1
 80039fe:	f00b fa63 	bl	800eec8 <LMIC_selectSubBand>
	  #endif

	   // Disable link check validation
	   LMIC_setLinkCheckMode(0);
 8003a02:	2000      	movs	r0, #0
 8003a04:	f00d fcd2 	bl	80113ac <LMIC_setLinkCheckMode>

	   // TTN uses SF9 for its RX2 window.
	   LMIC.dn2Dr = DR_SF9;
 8003a08:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <initfunc+0x78>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7

	   // Set data rate and transmit power for uplink (note: txpow seems to be ignored by the library)
	   LMIC_setDrTxpow(DR_SF9,14);
 8003a10:	210e      	movs	r1, #14
 8003a12:	2001      	movs	r0, #1
 8003a14:	f00d fbc4 	bl	80111a0 <LMIC_setDrTxpow>
	   os_setTimedCallback(&sendjob, os_getTime(), do_send);
 8003a18:	f00d fcf6 	bl	8011408 <os_getTime>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <initfunc+0x7c>)
 8003a20:	4619      	mov	r1, r3
 8003a22:	4808      	ldr	r0, [pc, #32]	; (8003a44 <initfunc+0x80>)
 8003a24:	f00d fd76 	bl	8011514 <os_setTimedCallback>
	   // Start job

	  // time= HAL_GetTick();
}
 8003a28:	bf00      	nop
 8003a2a:	372c      	adds	r7, #44	; 0x2c
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd90      	pop	{r4, r7, pc}
 8003a30:	08018700 	.word	0x08018700
 8003a34:	080186f0 	.word	0x080186f0
 8003a38:	27fd1b80 	.word	0x27fd1b80
 8003a3c:	20000c04 	.word	0x20000c04
 8003a40:	080034c1 	.word	0x080034c1
 8003a44:	20000b1c 	.word	0x20000b1c

08003a48 <UpdateGPS>:



// Hàm cập nhật giá trị GPS bằng cách làm trung bình các mẫu
void UpdateGPS(double new_latitude, double new_longitude) {
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b08b      	sub	sp, #44	; 0x2c
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	ed87 0b02 	vstr	d0, [r7, #8]
 8003a52:	ed87 1b00 	vstr	d1, [r7]

    // Lưu giá trị mới vào mảng mẫu
    latitude_samples[sample_index] = new_latitude;
 8003a56:	4b3d      	ldr	r3, [pc, #244]	; (8003b4c <UpdateGPS+0x104>)
 8003a58:	681c      	ldr	r4, [r3, #0]
 8003a5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a5e:	f7fd f8cb 	bl	8000bf8 <__aeabi_d2f>
 8003a62:	4602      	mov	r2, r0
 8003a64:	493a      	ldr	r1, [pc, #232]	; (8003b50 <UpdateGPS+0x108>)
 8003a66:	00a3      	lsls	r3, r4, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	601a      	str	r2, [r3, #0]
    longitude_samples[sample_index] = new_longitude;
 8003a6c:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <UpdateGPS+0x104>)
 8003a6e:	681c      	ldr	r4, [r3, #0]
 8003a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a74:	f7fd f8c0 	bl	8000bf8 <__aeabi_d2f>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4936      	ldr	r1, [pc, #216]	; (8003b54 <UpdateGPS+0x10c>)
 8003a7c:	00a3      	lsls	r3, r4, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	601a      	str	r2, [r3, #0]

    // Tăng chỉ số mẫu
    sample_index = (sample_index + 1) % NUM_SAMPLES;
 8003a82:	4b32      	ldr	r3, [pc, #200]	; (8003b4c <UpdateGPS+0x104>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	1c59      	adds	r1, r3, #1
 8003a88:	4b33      	ldr	r3, [pc, #204]	; (8003b58 <UpdateGPS+0x110>)
 8003a8a:	fb83 2301 	smull	r2, r3, r3, r1
 8003a8e:	10da      	asrs	r2, r3, #3
 8003a90:	17cb      	asrs	r3, r1, #31
 8003a92:	1ad2      	subs	r2, r2, r3
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	1aca      	subs	r2, r1, r3
 8003a9e:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <UpdateGPS+0x104>)
 8003aa0:	601a      	str	r2, [r3, #0]

    // Tính giá trị trung bình từ các mẫu
    double sum_latitude = 0.0f;
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double sum_longitude = 0.0f;
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	e026      	b.n	8003b0e <UpdateGPS+0xc6>
        sum_latitude += latitude_samples[i];
 8003ac0:	4a23      	ldr	r2, [pc, #140]	; (8003b50 <UpdateGPS+0x108>)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fc fd44 	bl	8000558 <__aeabi_f2d>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003ad8:	f7fc fbe0 	bl	800029c <__adddf3>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sum_longitude += longitude_samples[i];
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <UpdateGPS+0x10c>)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fc fd32 	bl	8000558 <__aeabi_f2d>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003afc:	f7fc fbce 	bl	800029c <__adddf3>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b13      	cmp	r3, #19
 8003b12:	ddd5      	ble.n	8003ac0 <UpdateGPS+0x78>
    }

    // Cập nhật giá trị GPS bằng giá trị trung bình
    currentGPS.latitude = sum_latitude / NUM_SAMPLES;
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <UpdateGPS+0x114>)
 8003b1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003b1e:	f7fc fe9d 	bl	800085c <__aeabi_ddiv>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	490e      	ldr	r1, [pc, #56]	; (8003b60 <UpdateGPS+0x118>)
 8003b28:	e9c1 2300 	strd	r2, r3, [r1]
    currentGPS.longitude = sum_longitude / NUM_SAMPLES;
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <UpdateGPS+0x114>)
 8003b32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b36:	f7fc fe91 	bl	800085c <__aeabi_ddiv>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4908      	ldr	r1, [pc, #32]	; (8003b60 <UpdateGPS+0x118>)
 8003b40:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 8003b44:	bf00      	nop
 8003b46:	372c      	adds	r7, #44	; 0x2c
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd90      	pop	{r4, r7, pc}
 8003b4c:	200005a8 	.word	0x200005a8
 8003b50:	20000508 	.word	0x20000508
 8003b54:	20000558 	.word	0x20000558
 8003b58:	66666667 	.word	0x66666667
 8003b5c:	40340000 	.word	0x40340000
 8003b60:	200005c0 	.word	0x200005c0

08003b64 <initializeStartPointGPS>:



/*Function save Start GPS at the first time TURN ON SYSTEM*/
void initializeStartPointGPS(Coordinate current){
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	eeb0 6a40 	vmov.f32	s12, s0
 8003b6e:	eef0 6a60 	vmov.f32	s13, s1
 8003b72:	eeb0 7a41 	vmov.f32	s14, s2
 8003b76:	eef0 7a61 	vmov.f32	s15, s3
 8003b7a:	ed87 6b00 	vstr	d6, [r7]
 8003b7e:	ed87 7b02 	vstr	d7, [r7, #8]
	if (current.latitude != 0 && isStartSaved <= 250) {
 8003b82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	f7fc ffa3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d000      	beq.n	8003b9a <initializeStartPointGPS+0x36>
		startGPS = current;
		isStartSaved++;
	}
}
 8003b98:	e00f      	b.n	8003bba <initializeStartPointGPS+0x56>
	if (current.latitude != 0 && isStartSaved <= 250) {
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <initializeStartPointGPS+0x60>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2bfa      	cmp	r3, #250	; 0xfa
 8003ba0:	d80b      	bhi.n	8003bba <initializeStartPointGPS+0x56>
		startGPS = current;
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <initializeStartPointGPS+0x64>)
 8003ba4:	461c      	mov	r4, r3
 8003ba6:	463b      	mov	r3, r7
 8003ba8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003baa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		isStartSaved++;
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <initializeStartPointGPS+0x60>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <initializeStartPointGPS+0x60>)
 8003bb8:	701a      	strb	r2, [r3, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd90      	pop	{r4, r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200005d0 	.word	0x200005d0
 8003bc8:	200005b0 	.word	0x200005b0

08003bcc <calculateAngleOfSystem>:
	}
}


/*Function calculation angle of system depend on X-Y-Z Axis*/
void calculateAngleOfSystem(){
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
	HMC5883L_ReadMagneticField(&hmc5883l);
 8003bd0:	4815      	ldr	r0, [pc, #84]	; (8003c28 <calculateAngleOfSystem+0x5c>)
 8003bd2:	f7fd fa71 	bl	80010b8 <HMC5883L_ReadMagneticField>
    MPU6050_Read_All(&mpu6050, &mpu6050error,&hmc5883l);
 8003bd6:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <calculateAngleOfSystem+0x5c>)
 8003bd8:	4914      	ldr	r1, [pc, #80]	; (8003c2c <calculateAngleOfSystem+0x60>)
 8003bda:	4815      	ldr	r0, [pc, #84]	; (8003c30 <calculateAngleOfSystem+0x64>)
 8003bdc:	f7fd fca4 	bl	8001528 <MPU6050_Read_All>
    Gz = mpu6050.Gz;
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <calculateAngleOfSystem+0x64>)
 8003be2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003be6:	4610      	mov	r0, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	f7fd f805 	bl	8000bf8 <__aeabi_d2f>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4a10      	ldr	r2, [pc, #64]	; (8003c34 <calculateAngleOfSystem+0x68>)
 8003bf2:	6013      	str	r3, [r2, #0]
    //Current angle of robot
    currentAngle = round(mpu6050.Angle[2]);
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <calculateAngleOfSystem+0x64>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fc fcad 	bl	8000558 <__aeabi_f2d>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	ec43 2b10 	vmov	d0, r2, r3
 8003c06:	f012 f941 	bl	8015e8c <round>
 8003c0a:	ec53 2b10 	vmov	r2, r3, d0
 8003c0e:	4610      	mov	r0, r2
 8003c10:	4619      	mov	r1, r3
 8003c12:	f7fc fff1 	bl	8000bf8 <__aeabi_d2f>
 8003c16:	4603      	mov	r3, r0
 8003c18:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <calculateAngleOfSystem+0x6c>)
 8003c1a:	6013      	str	r3, [r2, #0]
    HAL_Delay(1);
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f001 fdf9 	bl	8005814 <HAL_Delay>

}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000438 	.word	0x20000438
 8003c2c:	20000418 	.word	0x20000418
 8003c30:	200003b8 	.word	0x200003b8
 8003c34:	20000450 	.word	0x20000450
 8003c38:	20000430 	.word	0x20000430

08003c3c <findAngleForFirstPhase>:

}


/*Function to find target angle (Angle of shorsted path)*/
void findAngleForFirstPhase(){
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0

	targetAngle = round(convertRange360(Azimuth_Angle(startGPS, targetGPS)));
 8003c40:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <findAngleForFirstPhase+0x7c>)
 8003c42:	ed93 4b00 	vldr	d4, [r3]
 8003c46:	ed93 5b02 	vldr	d5, [r3, #8]
 8003c4a:	4b1c      	ldr	r3, [pc, #112]	; (8003cbc <findAngleForFirstPhase+0x80>)
 8003c4c:	ed93 6b00 	vldr	d6, [r3]
 8003c50:	ed93 7b02 	vldr	d7, [r3, #8]
 8003c54:	eeb0 2a44 	vmov.f32	s4, s8
 8003c58:	eef0 2a64 	vmov.f32	s5, s9
 8003c5c:	eeb0 3a45 	vmov.f32	s6, s10
 8003c60:	eef0 3a65 	vmov.f32	s7, s11
 8003c64:	eeb0 0a46 	vmov.f32	s0, s12
 8003c68:	eef0 0a66 	vmov.f32	s1, s13
 8003c6c:	eeb0 1a47 	vmov.f32	s2, s14
 8003c70:	eef0 1a67 	vmov.f32	s3, s15
 8003c74:	f7fe fc10 	bl	8002498 <Azimuth_Angle>
 8003c78:	eeb0 7a40 	vmov.f32	s14, s0
 8003c7c:	eef0 7a60 	vmov.f32	s15, s1
 8003c80:	eeb0 0a47 	vmov.f32	s0, s14
 8003c84:	eef0 0a67 	vmov.f32	s1, s15
 8003c88:	f7fe fd04 	bl	8002694 <convertRange360>
 8003c8c:	ee10 3a10 	vmov	r3, s0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fc fc61 	bl	8000558 <__aeabi_f2d>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	ec43 2b10 	vmov	d0, r2, r3
 8003c9e:	f012 f8f5 	bl	8015e8c <round>
 8003ca2:	ec53 2b10 	vmov	r2, r3, d0
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f7fc ffa5 	bl	8000bf8 <__aeabi_d2f>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4a03      	ldr	r2, [pc, #12]	; (8003cc0 <findAngleForFirstPhase+0x84>)
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000090 	.word	0x20000090
 8003cbc:	200005b0 	.word	0x200005b0
 8003cc0:	20000434 	.word	0x20000434

08003cc4 <calculateBatteryPercentage>:

/* Function to calculate battery percentage*/
float calculateBatteryPercentage(uint16_t adcValue) {
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	80fb      	strh	r3, [r7, #6]
    uint16_t ADC_min = 2444*(3.37/6.7);
 8003cce:	f240 43cd 	movw	r3, #1229	; 0x4cd
 8003cd2:	817b      	strh	r3, [r7, #10]
    uint16_t ADC_max = 4095;
 8003cd4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003cd8:	813b      	strh	r3, [r7, #8]


    float batteryPercentage = ((float)(adcValue - ADC_min) / (float)(ADC_max - ADC_min)) * 100.0f;
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	897b      	ldrh	r3, [r7, #10]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	ee07 3a90 	vmov	s15, r3
 8003ce4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ce8:	893a      	ldrh	r2, [r7, #8]
 8003cea:	897b      	ldrh	r3, [r7, #10]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cfa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003d48 <calculateBatteryPercentage+0x84>
 8003cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d02:	edc7 7a03 	vstr	s15, [r7, #12]

    if (batteryPercentage > 100.0f) {
 8003d06:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d0a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003d48 <calculateBatteryPercentage+0x84>
 8003d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d16:	dd02      	ble.n	8003d1e <calculateBatteryPercentage+0x5a>
        batteryPercentage = 100.0f;
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <calculateBatteryPercentage+0x88>)
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e009      	b.n	8003d32 <calculateBatteryPercentage+0x6e>
    } else if (batteryPercentage < 0.0f) {
 8003d1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2a:	d502      	bpl.n	8003d32 <calculateBatteryPercentage+0x6e>
        batteryPercentage = 0.0f;
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
    }

    return batteryPercentage;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	ee07 3a90 	vmov	s15, r3
}
 8003d38:	eeb0 0a67 	vmov.f32	s0, s15
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	42c80000 	.word	0x42c80000
 8003d4c:	42c80000 	.word	0x42c80000

08003d50 <processingBatteryPercentage>:

/* Function to read ADC value for Battery Percentage*/
void processingBatteryPercentage(){
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, &ADC_value, 1);
 8003d54:	2201      	movs	r2, #1
 8003d56:	4912      	ldr	r1, [pc, #72]	; (8003da0 <processingBatteryPercentage+0x50>)
 8003d58:	4812      	ldr	r0, [pc, #72]	; (8003da4 <processingBatteryPercentage+0x54>)
 8003d5a:	f001 ffb7 	bl	8005ccc <HAL_ADC_Start_DMA>
	speed = lwgps_to_speed(gps.speed, lwgps_speed_mps);
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <processingBatteryPercentage+0x58>)
 8003d60:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8003d64:	2002      	movs	r0, #2
 8003d66:	eeb0 0a47 	vmov.f32	s0, s14
 8003d6a:	eef0 0a67 	vmov.f32	s1, s15
 8003d6e:	f7ff fa2f 	bl	80031d0 <lwgps_to_speed>
 8003d72:	ec53 2b10 	vmov	r2, r3, d0
 8003d76:	4610      	mov	r0, r2
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f7fc ff3d 	bl	8000bf8 <__aeabi_d2f>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <processingBatteryPercentage+0x5c>)
 8003d82:	6013      	str	r3, [r2, #0]
	battery_voltage = calculateBatteryPercentage(ADC_value);
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <processingBatteryPercentage+0x50>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ff9a 	bl	8003cc4 <calculateBatteryPercentage>
 8003d90:	eef0 7a40 	vmov.f32	s15, s0
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <processingBatteryPercentage+0x60>)
 8003d96:	edc3 7a00 	vstr	s15, [r3]
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000678 	.word	0x20000678
 8003da4:	20000684 	.word	0x20000684
 8003da8:	20000458 	.word	0x20000458
 8003dac:	20000674 	.word	0x20000674
 8003db0:	20000670 	.word	0x20000670

08003db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003dba:	f001 fcc5 	bl	8005748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003dbe:	f000 f90f 	bl	8003fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dc2:	f000 fd11 	bl	80047e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003dc6:	f000 fce9 	bl	800479c <MX_DMA_Init>
  MX_SPI2_Init();
 8003dca:	f000 fa61 	bl	8004290 <MX_SPI2_Init>
  MX_TIM4_Init();
 8003dce:	f000 fba1 	bl	8004514 <MX_TIM4_Init>
  MX_TIM7_Init();
 8003dd2:	f000 fbf7 	bl	80045c4 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8003dd6:	f000 fc81 	bl	80046dc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003dda:	f000 f9df 	bl	800419c <MX_I2C1_Init>
  MX_TIM2_Init();
 8003dde:	f000 fa95 	bl	800430c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003de2:	f000 fcab 	bl	800473c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8003de6:	f000 fb13 	bl	8004410 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003dea:	f000 f967 	bl	80040bc <MX_ADC1_Init>
  MX_SPI1_Init();
 8003dee:	f000 fa15 	bl	800421c <MX_SPI1_Init>
  MX_TIM8_Init();
 8003df2:	f000 fc1f 	bl	8004634 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  /*------------PWM Motor Init-----------*/
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003df6:	2100      	movs	r1, #0
 8003df8:	4862      	ldr	r0, [pc, #392]	; (8003f84 <main+0x1d0>)
 8003dfa:	f006 fe27 	bl	800aa4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003dfe:	2104      	movs	r1, #4
 8003e00:	4860      	ldr	r0, [pc, #384]	; (8003f84 <main+0x1d0>)
 8003e02:	f006 fe23 	bl	800aa4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003e06:	2100      	movs	r1, #0
 8003e08:	485f      	ldr	r0, [pc, #380]	; (8003f88 <main+0x1d4>)
 8003e0a:	f006 fe1f 	bl	800aa4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003e0e:	2104      	movs	r1, #4
 8003e10:	485d      	ldr	r0, [pc, #372]	; (8003f88 <main+0x1d4>)
 8003e12:	f006 fe1b 	bl	800aa4c <HAL_TIM_PWM_Start>
  /*------------------------------ -------*/


  /*-----------Robot GPS Init-------------*/
  lwgps_init(&gps);
 8003e16:	485d      	ldr	r0, [pc, #372]	; (8003f8c <main+0x1d8>)
 8003e18:	f7ff f90a 	bl	8003030 <lwgps_init>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	495c      	ldr	r1, [pc, #368]	; (8003f90 <main+0x1dc>)
 8003e20:	485c      	ldr	r0, [pc, #368]	; (8003f94 <main+0x1e0>)
 8003e22:	f008 f8a5 	bl	800bf70 <HAL_UART_Receive_IT>
  /*--------------------------------------*/

  /*---------------9DOF Init------------------*/
  MPU6050_Init();
 8003e26:	f7fd fa5b 	bl	80012e0 <MPU6050_Init>
  MPU6050_Calibration(&mpu6050, &mpu6050error);
 8003e2a:	495b      	ldr	r1, [pc, #364]	; (8003f98 <main+0x1e4>)
 8003e2c:	485b      	ldr	r0, [pc, #364]	; (8003f9c <main+0x1e8>)
 8003e2e:	f7fe f883 	bl	8001f38 <MPU6050_Calibration>
  HAL_Delay(20);
 8003e32:	2014      	movs	r0, #20
 8003e34:	f001 fcee 	bl	8005814 <HAL_Delay>
  HMC5883L_Init();
 8003e38:	f7fd f922 	bl	8001080 <HMC5883L_Init>
  HMC5883L_Calibration(&hmc5883l);
 8003e3c:	4858      	ldr	r0, [pc, #352]	; (8003fa0 <main+0x1ec>)
 8003e3e:	f7fd f964 	bl	800110a <HMC5883L_Calibration>
   // HAL_SPI_Receive_DMA(&hspi1, &RxBuffer, 1);
   /*-------------------------------------*/


  /*----------LORA Init------------*/
  HAL_TIM_Base_Start_IT(&htim4);    // <-----------  change to your setup
 8003e42:	4858      	ldr	r0, [pc, #352]	; (8003fa4 <main+0x1f0>)
 8003e44:	f006 fcda 	bl	800a7fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);    // <-----------  change to your setup
 8003e48:	4857      	ldr	r0, [pc, #348]	; (8003fa8 <main+0x1f4>)
 8003e4a:	f006 fcd7 	bl	800a7fc <HAL_TIM_Base_Start_IT>
  __HAL_SPI_ENABLE(&hspi2);      	// <-----------  change to your setup
 8003e4e:	4b57      	ldr	r3, [pc, #348]	; (8003fac <main+0x1f8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4b55      	ldr	r3, [pc, #340]	; (8003fac <main+0x1f8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	osjob_t initjob;
	os_init();
 8003e5e:	f00d fac1 	bl	80113e4 <os_init>
	initfunc(&initjob);
 8003e62:	1d3b      	adds	r3, r7, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fdad 	bl	80039c4 <initfunc>
	do_send(&sendjob);
 8003e6a:	4851      	ldr	r0, [pc, #324]	; (8003fb0 <main+0x1fc>)
 8003e6c:	f7ff fb28 	bl	80034c0 <do_send>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /*-----Basic Update Position and Angle of system-----*/
	   UpdateGPS(gps.latitude, gps.longitude);
 8003e70:	4b46      	ldr	r3, [pc, #280]	; (8003f8c <main+0x1d8>)
 8003e72:	ed93 7b00 	vldr	d7, [r3]
 8003e76:	4b45      	ldr	r3, [pc, #276]	; (8003f8c <main+0x1d8>)
 8003e78:	ed93 6b02 	vldr	d6, [r3, #8]
 8003e7c:	eeb0 1a46 	vmov.f32	s2, s12
 8003e80:	eef0 1a66 	vmov.f32	s3, s13
 8003e84:	eeb0 0a47 	vmov.f32	s0, s14
 8003e88:	eef0 0a67 	vmov.f32	s1, s15
 8003e8c:	f7ff fddc 	bl	8003a48 <UpdateGPS>
	   calculateAngleOfSystem();
 8003e90:	f7ff fe9c 	bl	8003bcc <calculateAngleOfSystem>
	   processingBatteryPercentage();
 8003e94:	f7ff ff5c 	bl	8003d50 <processingBatteryPercentage>
	  /*---------------------------------------------------*/


	   if(sizeof(markers) != 0){
		   if(RxBuffer == 'a'){
 8003e98:	4b46      	ldr	r3, [pc, #280]	; (8003fb4 <main+0x200>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b61      	cmp	r3, #97	; 0x61
 8003e9e:	d105      	bne.n	8003eac <main+0xf8>
			   TURN_LEFT();
 8003ea0:	f000 fd86 	bl	80049b0 <TURN_LEFT>
		   	   		tmp = "left";
 8003ea4:	4b44      	ldr	r3, [pc, #272]	; (8003fb8 <main+0x204>)
 8003ea6:	4a45      	ldr	r2, [pc, #276]	; (8003fbc <main+0x208>)
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e067      	b.n	8003f7c <main+0x1c8>
		   }	else if(RxBuffer == 'b'){
 8003eac:	4b41      	ldr	r3, [pc, #260]	; (8003fb4 <main+0x200>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b62      	cmp	r3, #98	; 0x62
 8003eb2:	d105      	bne.n	8003ec0 <main+0x10c>
			   TURN_RIGHT();
 8003eb4:	f000 fd5a 	bl	800496c <TURN_RIGHT>
		   	   		tmp = "right";
 8003eb8:	4b3f      	ldr	r3, [pc, #252]	; (8003fb8 <main+0x204>)
 8003eba:	4a41      	ldr	r2, [pc, #260]	; (8003fc0 <main+0x20c>)
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e05d      	b.n	8003f7c <main+0x1c8>
		   } 	else if(RxBuffer == 'c'){
 8003ec0:	4b3c      	ldr	r3, [pc, #240]	; (8003fb4 <main+0x200>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b63      	cmp	r3, #99	; 0x63
 8003ec6:	d105      	bne.n	8003ed4 <main+0x120>
			   	   driving();
 8003ec8:	f000 ff98 	bl	8004dfc <driving>
					tmp = "straight";
 8003ecc:	4b3a      	ldr	r3, [pc, #232]	; (8003fb8 <main+0x204>)
 8003ece:	4a3d      	ldr	r2, [pc, #244]	; (8003fc4 <main+0x210>)
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e053      	b.n	8003f7c <main+0x1c8>
		   }else {
			   STOP();
 8003ed4:	f000 fd0c 	bl	80048f0 <STOP>
			   initializeStartPointGPS(currentGPS);
 8003ed8:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <main+0x214>)
 8003eda:	ed93 6b00 	vldr	d6, [r3]
 8003ede:	ed93 7b02 	vldr	d7, [r3, #8]
 8003ee2:	eeb0 0a46 	vmov.f32	s0, s12
 8003ee6:	eef0 0a66 	vmov.f32	s1, s13
 8003eea:	eeb0 1a47 	vmov.f32	s2, s14
 8003eee:	eef0 1a67 	vmov.f32	s3, s15
 8003ef2:	f7ff fe37 	bl	8003b64 <initializeStartPointGPS>
			   	  	 HAL_Delay(10);
 8003ef6:	200a      	movs	r0, #10
 8003ef8:	f001 fc8c 	bl	8005814 <HAL_Delay>
			   	  	 /*-----------------------Chặng - I-----------------------*/
			   	  //	 targetGPS = (gridIdx < 0) ? markers[0] : gridList[gridIdx];
			   	  	 targetGPS =gridList[gridIdx];
 8003efc:	4b33      	ldr	r3, [pc, #204]	; (8003fcc <main+0x218>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4933      	ldr	r1, [pc, #204]	; (8003fd0 <main+0x21c>)
 8003f02:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <main+0x220>)
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	4413      	add	r3, r2
 8003f08:	460c      	mov	r4, r1
 8003f0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			   	  	 firstDistance = Haversine_Distance(startGPS, targetGPS);
 8003f10:	4b2f      	ldr	r3, [pc, #188]	; (8003fd0 <main+0x21c>)
 8003f12:	ed93 4b00 	vldr	d4, [r3]
 8003f16:	ed93 5b02 	vldr	d5, [r3, #8]
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <main+0x224>)
 8003f1c:	ed93 6b00 	vldr	d6, [r3]
 8003f20:	ed93 7b02 	vldr	d7, [r3, #8]
 8003f24:	eeb0 2a44 	vmov.f32	s4, s8
 8003f28:	eef0 2a64 	vmov.f32	s5, s9
 8003f2c:	eeb0 3a45 	vmov.f32	s6, s10
 8003f30:	eef0 3a65 	vmov.f32	s7, s11
 8003f34:	eeb0 0a46 	vmov.f32	s0, s12
 8003f38:	eef0 0a66 	vmov.f32	s1, s13
 8003f3c:	eeb0 1a47 	vmov.f32	s2, s14
 8003f40:	eef0 1a67 	vmov.f32	s3, s15
 8003f44:	f7fe f940 	bl	80021c8 <Haversine_Distance>
 8003f48:	ec53 2b10 	vmov	r2, r3, d0
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f7fc fe52 	bl	8000bf8 <__aeabi_d2f>
 8003f54:	4603      	mov	r3, r0
 8003f56:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <main+0x228>)
 8003f58:	6013      	str	r3, [r2, #0]
			   	  	 findAngleForFirstPhase();
 8003f5a:	f7ff fe6f 	bl	8003c3c <findAngleForFirstPhase>
			   	  	 arrivePoint(targetGPS);
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <main+0x21c>)
 8003f60:	ed93 6b00 	vldr	d6, [r3]
 8003f64:	ed93 7b02 	vldr	d7, [r3, #8]
 8003f68:	eeb0 0a46 	vmov.f32	s0, s12
 8003f6c:	eef0 0a66 	vmov.f32	s1, s13
 8003f70:	eeb0 1a47 	vmov.f32	s2, s14
 8003f74:	eef0 1a67 	vmov.f32	s3, s15
 8003f78:	f000 fd3c 	bl	80049f4 <arrivePoint>
		  rotate();
	  }


	  /*----LoRa send data---*/
	  os_runloop_once();
 8003f7c:	f00d fb0c 	bl	8011598 <os_runloop_once>
	   UpdateGPS(gps.latitude, gps.longitude);
 8003f80:	e776      	b.n	8003e70 <main+0xbc>
 8003f82:	bf00      	nop
 8003f84:	20000878 	.word	0x20000878
 8003f88:	200008c4 	.word	0x200008c4
 8003f8c:	20000458 	.word	0x20000458
 8003f90:	2000066d 	.word	0x2000066d
 8003f94:	200009f4 	.word	0x200009f4
 8003f98:	20000418 	.word	0x20000418
 8003f9c:	200003b8 	.word	0x200003b8
 8003fa0:	20000438 	.word	0x20000438
 8003fa4:	20000910 	.word	0x20000910
 8003fa8:	2000095c 	.word	0x2000095c
 8003fac:	200007d0 	.word	0x200007d0
 8003fb0:	20000b1c 	.word	0x20000b1c
 8003fb4:	200005e4 	.word	0x200005e4
 8003fb8:	200005e8 	.word	0x200005e8
 8003fbc:	0801825c 	.word	0x0801825c
 8003fc0:	08018264 	.word	0x08018264
 8003fc4:	0801826c 	.word	0x0801826c
 8003fc8:	200005c0 	.word	0x200005c0
 8003fcc:	200005d4 	.word	0x200005d4
 8003fd0:	20000090 	.word	0x20000090
 8003fd4:	200000a0 	.word	0x200000a0
 8003fd8:	200005b0 	.word	0x200005b0
 8003fdc:	200005d8 	.word	0x200005d8

08003fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b0a6      	sub	sp, #152	; 0x98
 8003fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fe6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003fea:	2228      	movs	r2, #40	; 0x28
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f00f fcd6 	bl	80139a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ff4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004004:	1d3b      	adds	r3, r7, #4
 8004006:	2258      	movs	r2, #88	; 0x58
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f00f fcc8 	bl	80139a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004010:	2302      	movs	r3, #2
 8004012:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004014:	2301      	movs	r3, #1
 8004016:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004018:	2310      	movs	r3, #16
 800401a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800401e:	2302      	movs	r3, #2
 8004020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004028:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800402c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004030:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8004034:	2301      	movs	r3, #1
 8004036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800403a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800403e:	4618      	mov	r0, r3
 8004040:	f003 ffa6 	bl	8007f90 <HAL_RCC_OscConfig>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800404a:	f000 fc4b 	bl	80048e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800404e:	230f      	movs	r3, #15
 8004050:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004052:	2302      	movs	r3, #2
 8004054:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004056:	2300      	movs	r3, #0
 8004058:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800405a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004060:	2300      	movs	r3, #0
 8004062:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004064:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f004 ffe4 	bl	8009038 <HAL_RCC_ClockConfig>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004076:	f000 fc35 	bl	80048e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <SystemClock_Config+0xd8>)
 800407c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8004086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800408c:	2300      	movs	r3, #0
 800408e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8004090:	2300      	movs	r3, #0
 8004092:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8004094:	2300      	movs	r3, #0
 8004096:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8004098:	2300      	movs	r3, #0
 800409a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800409c:	1d3b      	adds	r3, r7, #4
 800409e:	4618      	mov	r0, r3
 80040a0:	f005 fa00 	bl	80094a4 <HAL_RCCEx_PeriphCLKConfig>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <SystemClock_Config+0xce>
  {
    Error_Handler();
 80040aa:	f000 fc1b 	bl	80048e4 <Error_Handler>
  }
}
 80040ae:	bf00      	nop
 80040b0:	3798      	adds	r7, #152	; 0x98
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	003020a3 	.word	0x003020a3

080040bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	; 0x28
 80040c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80040c2:	f107 031c 	add.w	r3, r7, #28
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	611a      	str	r2, [r3, #16]
 80040dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80040de:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <MX_ADC1_Init+0xdc>)
 80040e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80040e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80040e6:	4b2c      	ldr	r3, [pc, #176]	; (8004198 <MX_ADC1_Init+0xdc>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040ec:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <MX_ADC1_Init+0xdc>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80040f2:	4b29      	ldr	r3, [pc, #164]	; (8004198 <MX_ADC1_Init+0xdc>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80040f8:	4b27      	ldr	r3, [pc, #156]	; (8004198 <MX_ADC1_Init+0xdc>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040fe:	4b26      	ldr	r3, [pc, #152]	; (8004198 <MX_ADC1_Init+0xdc>)
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <MX_ADC1_Init+0xdc>)
 8004108:	2200      	movs	r2, #0
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800410c:	4b22      	ldr	r3, [pc, #136]	; (8004198 <MX_ADC1_Init+0xdc>)
 800410e:	2201      	movs	r2, #1
 8004110:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004112:	4b21      	ldr	r3, [pc, #132]	; (8004198 <MX_ADC1_Init+0xdc>)
 8004114:	2200      	movs	r2, #0
 8004116:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004118:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <MX_ADC1_Init+0xdc>)
 800411a:	2201      	movs	r2, #1
 800411c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800411e:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <MX_ADC1_Init+0xdc>)
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <MX_ADC1_Init+0xdc>)
 8004128:	2204      	movs	r2, #4
 800412a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800412c:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <MX_ADC1_Init+0xdc>)
 800412e:	2200      	movs	r2, #0
 8004130:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <MX_ADC1_Init+0xdc>)
 8004134:	2200      	movs	r2, #0
 8004136:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004138:	4817      	ldr	r0, [pc, #92]	; (8004198 <MX_ADC1_Init+0xdc>)
 800413a:	f001 fbcd 	bl	80058d8 <HAL_ADC_Init>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8004144:	f000 fbce 	bl	80048e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800414c:	f107 031c 	add.w	r3, r7, #28
 8004150:	4619      	mov	r1, r3
 8004152:	4811      	ldr	r0, [pc, #68]	; (8004198 <MX_ADC1_Init+0xdc>)
 8004154:	f002 f9c0 	bl	80064d8 <HAL_ADCEx_MultiModeConfigChannel>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800415e:	f000 fbc1 	bl	80048e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004162:	2308      	movs	r3, #8
 8004164:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004166:	2301      	movs	r3, #1
 8004168:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4806      	ldr	r0, [pc, #24]	; (8004198 <MX_ADC1_Init+0xdc>)
 8004180:	f001 fec0 	bl	8005f04 <HAL_ADC_ConfigChannel>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800418a:	f000 fbab 	bl	80048e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800418e:	bf00      	nop
 8004190:	3728      	adds	r7, #40	; 0x28
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000684 	.word	0x20000684

0800419c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041a0:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <MX_I2C1_Init+0x74>)
 80041a2:	4a1c      	ldr	r2, [pc, #112]	; (8004214 <MX_I2C1_Init+0x78>)
 80041a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80041a6:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <MX_I2C1_Init+0x74>)
 80041a8:	4a1b      	ldr	r2, [pc, #108]	; (8004218 <MX_I2C1_Init+0x7c>)
 80041aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041ac:	4b18      	ldr	r3, [pc, #96]	; (8004210 <MX_I2C1_Init+0x74>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041b2:	4b17      	ldr	r3, [pc, #92]	; (8004210 <MX_I2C1_Init+0x74>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041b8:	4b15      	ldr	r3, [pc, #84]	; (8004210 <MX_I2C1_Init+0x74>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80041be:	4b14      	ldr	r3, [pc, #80]	; (8004210 <MX_I2C1_Init+0x74>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80041c4:	4b12      	ldr	r3, [pc, #72]	; (8004210 <MX_I2C1_Init+0x74>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041ca:	4b11      	ldr	r3, [pc, #68]	; (8004210 <MX_I2C1_Init+0x74>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041d0:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <MX_I2C1_Init+0x74>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041d6:	480e      	ldr	r0, [pc, #56]	; (8004210 <MX_I2C1_Init+0x74>)
 80041d8:	f003 f8b0 	bl	800733c <HAL_I2C_Init>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80041e2:	f000 fb7f 	bl	80048e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80041e6:	2100      	movs	r1, #0
 80041e8:	4809      	ldr	r0, [pc, #36]	; (8004210 <MX_I2C1_Init+0x74>)
 80041ea:	f003 fe1d 	bl	8007e28 <HAL_I2CEx_ConfigAnalogFilter>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80041f4:	f000 fb76 	bl	80048e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80041f8:	2100      	movs	r1, #0
 80041fa:	4805      	ldr	r0, [pc, #20]	; (8004210 <MX_I2C1_Init+0x74>)
 80041fc:	f003 fe5f 	bl	8007ebe <HAL_I2CEx_ConfigDigitalFilter>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004206:	f000 fb6d 	bl	80048e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800420a:	bf00      	nop
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000718 	.word	0x20000718
 8004214:	40005400 	.word	0x40005400
 8004218:	2000090e 	.word	0x2000090e

0800421c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <MX_SPI1_Init+0x6c>)
 8004222:	4a1a      	ldr	r2, [pc, #104]	; (800428c <MX_SPI1_Init+0x70>)
 8004224:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8004226:	4b18      	ldr	r3, [pc, #96]	; (8004288 <MX_SPI1_Init+0x6c>)
 8004228:	2200      	movs	r2, #0
 800422a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800422c:	4b16      	ldr	r3, [pc, #88]	; (8004288 <MX_SPI1_Init+0x6c>)
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004232:	4b15      	ldr	r3, [pc, #84]	; (8004288 <MX_SPI1_Init+0x6c>)
 8004234:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004238:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800423a:	4b13      	ldr	r3, [pc, #76]	; (8004288 <MX_SPI1_Init+0x6c>)
 800423c:	2200      	movs	r2, #0
 800423e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004240:	4b11      	ldr	r3, [pc, #68]	; (8004288 <MX_SPI1_Init+0x6c>)
 8004242:	2200      	movs	r2, #0
 8004244:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <MX_SPI1_Init+0x6c>)
 8004248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800424c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800424e:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <MX_SPI1_Init+0x6c>)
 8004250:	2200      	movs	r2, #0
 8004252:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <MX_SPI1_Init+0x6c>)
 8004256:	2200      	movs	r2, #0
 8004258:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425a:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <MX_SPI1_Init+0x6c>)
 800425c:	2200      	movs	r2, #0
 800425e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <MX_SPI1_Init+0x6c>)
 8004262:	2207      	movs	r2, #7
 8004264:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <MX_SPI1_Init+0x6c>)
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <MX_SPI1_Init+0x6c>)
 800426e:	2200      	movs	r2, #0
 8004270:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004272:	4805      	ldr	r0, [pc, #20]	; (8004288 <MX_SPI1_Init+0x6c>)
 8004274:	f005 fb34 	bl	80098e0 <HAL_SPI_Init>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800427e:	f000 fb31 	bl	80048e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004282:	bf00      	nop
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	2000076c 	.word	0x2000076c
 800428c:	40013000 	.word	0x40013000

08004290 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004294:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <MX_SPI2_Init+0x74>)
 8004296:	4a1c      	ldr	r2, [pc, #112]	; (8004308 <MX_SPI2_Init+0x78>)
 8004298:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800429a:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <MX_SPI2_Init+0x74>)
 800429c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80042a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80042a2:	4b18      	ldr	r3, [pc, #96]	; (8004304 <MX_SPI2_Init+0x74>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80042a8:	4b16      	ldr	r3, [pc, #88]	; (8004304 <MX_SPI2_Init+0x74>)
 80042aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80042ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042b0:	4b14      	ldr	r3, [pc, #80]	; (8004304 <MX_SPI2_Init+0x74>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042b6:	4b13      	ldr	r3, [pc, #76]	; (8004304 <MX_SPI2_Init+0x74>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80042bc:	4b11      	ldr	r3, [pc, #68]	; (8004304 <MX_SPI2_Init+0x74>)
 80042be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <MX_SPI2_Init+0x74>)
 80042c6:	2228      	movs	r2, #40	; 0x28
 80042c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042ca:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <MX_SPI2_Init+0x74>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <MX_SPI2_Init+0x74>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <MX_SPI2_Init+0x74>)
 80042d8:	2200      	movs	r2, #0
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <MX_SPI2_Init+0x74>)
 80042de:	2207      	movs	r2, #7
 80042e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <MX_SPI2_Init+0x74>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <MX_SPI2_Init+0x74>)
 80042ea:	2208      	movs	r2, #8
 80042ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80042ee:	4805      	ldr	r0, [pc, #20]	; (8004304 <MX_SPI2_Init+0x74>)
 80042f0:	f005 faf6 	bl	80098e0 <HAL_SPI_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80042fa:	f000 faf3 	bl	80048e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200007d0 	.word	0x200007d0
 8004308:	40003800 	.word	0x40003800

0800430c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08e      	sub	sp, #56	; 0x38
 8004310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004320:	f107 031c 	add.w	r3, r7, #28
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800432c:	463b      	mov	r3, r7
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	605a      	str	r2, [r3, #4]
 8004334:	609a      	str	r2, [r3, #8]
 8004336:	60da      	str	r2, [r3, #12]
 8004338:	611a      	str	r2, [r3, #16]
 800433a:	615a      	str	r2, [r3, #20]
 800433c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800433e:	4b33      	ldr	r3, [pc, #204]	; (800440c <MX_TIM2_Init+0x100>)
 8004340:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004344:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8004346:	4b31      	ldr	r3, [pc, #196]	; (800440c <MX_TIM2_Init+0x100>)
 8004348:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800434c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800434e:	4b2f      	ldr	r3, [pc, #188]	; (800440c <MX_TIM2_Init+0x100>)
 8004350:	2200      	movs	r2, #0
 8004352:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8004354:	4b2d      	ldr	r3, [pc, #180]	; (800440c <MX_TIM2_Init+0x100>)
 8004356:	22c7      	movs	r2, #199	; 0xc7
 8004358:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800435a:	4b2c      	ldr	r3, [pc, #176]	; (800440c <MX_TIM2_Init+0x100>)
 800435c:	2200      	movs	r2, #0
 800435e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004360:	4b2a      	ldr	r3, [pc, #168]	; (800440c <MX_TIM2_Init+0x100>)
 8004362:	2200      	movs	r2, #0
 8004364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004366:	4829      	ldr	r0, [pc, #164]	; (800440c <MX_TIM2_Init+0x100>)
 8004368:	f006 f9f0 	bl	800a74c <HAL_TIM_Base_Init>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004372:	f000 fab7 	bl	80048e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800437a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800437c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004380:	4619      	mov	r1, r3
 8004382:	4822      	ldr	r0, [pc, #136]	; (800440c <MX_TIM2_Init+0x100>)
 8004384:	f006 ff1c 	bl	800b1c0 <HAL_TIM_ConfigClockSource>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800438e:	f000 faa9 	bl	80048e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004392:	481e      	ldr	r0, [pc, #120]	; (800440c <MX_TIM2_Init+0x100>)
 8004394:	f006 faf9 	bl	800a98a <HAL_TIM_PWM_Init>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800439e:	f000 faa1 	bl	80048e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043aa:	f107 031c 	add.w	r3, r7, #28
 80043ae:	4619      	mov	r1, r3
 80043b0:	4816      	ldr	r0, [pc, #88]	; (800440c <MX_TIM2_Init+0x100>)
 80043b2:	f007 fc5b 	bl	800bc6c <HAL_TIMEx_MasterConfigSynchronization>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80043bc:	f000 fa92 	bl	80048e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043c0:	2360      	movs	r3, #96	; 0x60
 80043c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043d0:	463b      	mov	r3, r7
 80043d2:	2200      	movs	r2, #0
 80043d4:	4619      	mov	r1, r3
 80043d6:	480d      	ldr	r0, [pc, #52]	; (800440c <MX_TIM2_Init+0x100>)
 80043d8:	f006 fdde 	bl	800af98 <HAL_TIM_PWM_ConfigChannel>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80043e2:	f000 fa7f 	bl	80048e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80043e6:	463b      	mov	r3, r7
 80043e8:	2204      	movs	r2, #4
 80043ea:	4619      	mov	r1, r3
 80043ec:	4807      	ldr	r0, [pc, #28]	; (800440c <MX_TIM2_Init+0x100>)
 80043ee:	f006 fdd3 	bl	800af98 <HAL_TIM_PWM_ConfigChannel>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80043f8:	f000 fa74 	bl	80048e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80043fc:	4803      	ldr	r0, [pc, #12]	; (800440c <MX_TIM2_Init+0x100>)
 80043fe:	f000 ff47 	bl	8005290 <HAL_TIM_MspPostInit>

}
 8004402:	bf00      	nop
 8004404:	3738      	adds	r7, #56	; 0x38
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000878 	.word	0x20000878

08004410 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08e      	sub	sp, #56	; 0x38
 8004414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	609a      	str	r2, [r3, #8]
 8004422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004424:	f107 031c 	add.w	r3, r7, #28
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004430:	463b      	mov	r3, r7
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	605a      	str	r2, [r3, #4]
 8004438:	609a      	str	r2, [r3, #8]
 800443a:	60da      	str	r2, [r3, #12]
 800443c:	611a      	str	r2, [r3, #16]
 800443e:	615a      	str	r2, [r3, #20]
 8004440:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004442:	4b32      	ldr	r3, [pc, #200]	; (800450c <MX_TIM3_Init+0xfc>)
 8004444:	4a32      	ldr	r2, [pc, #200]	; (8004510 <MX_TIM3_Init+0x100>)
 8004446:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8004448:	4b30      	ldr	r3, [pc, #192]	; (800450c <MX_TIM3_Init+0xfc>)
 800444a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800444e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004450:	4b2e      	ldr	r3, [pc, #184]	; (800450c <MX_TIM3_Init+0xfc>)
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8004456:	4b2d      	ldr	r3, [pc, #180]	; (800450c <MX_TIM3_Init+0xfc>)
 8004458:	22c7      	movs	r2, #199	; 0xc7
 800445a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800445c:	4b2b      	ldr	r3, [pc, #172]	; (800450c <MX_TIM3_Init+0xfc>)
 800445e:	2200      	movs	r2, #0
 8004460:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <MX_TIM3_Init+0xfc>)
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004468:	4828      	ldr	r0, [pc, #160]	; (800450c <MX_TIM3_Init+0xfc>)
 800446a:	f006 f96f 	bl	800a74c <HAL_TIM_Base_Init>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004474:	f000 fa36 	bl	80048e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800447c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800447e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004482:	4619      	mov	r1, r3
 8004484:	4821      	ldr	r0, [pc, #132]	; (800450c <MX_TIM3_Init+0xfc>)
 8004486:	f006 fe9b 	bl	800b1c0 <HAL_TIM_ConfigClockSource>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004490:	f000 fa28 	bl	80048e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004494:	481d      	ldr	r0, [pc, #116]	; (800450c <MX_TIM3_Init+0xfc>)
 8004496:	f006 fa78 	bl	800a98a <HAL_TIM_PWM_Init>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80044a0:	f000 fa20 	bl	80048e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044a8:	2300      	movs	r3, #0
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044ac:	f107 031c 	add.w	r3, r7, #28
 80044b0:	4619      	mov	r1, r3
 80044b2:	4816      	ldr	r0, [pc, #88]	; (800450c <MX_TIM3_Init+0xfc>)
 80044b4:	f007 fbda 	bl	800bc6c <HAL_TIMEx_MasterConfigSynchronization>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80044be:	f000 fa11 	bl	80048e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044c2:	2360      	movs	r3, #96	; 0x60
 80044c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044d2:	463b      	mov	r3, r7
 80044d4:	2200      	movs	r2, #0
 80044d6:	4619      	mov	r1, r3
 80044d8:	480c      	ldr	r0, [pc, #48]	; (800450c <MX_TIM3_Init+0xfc>)
 80044da:	f006 fd5d 	bl	800af98 <HAL_TIM_PWM_ConfigChannel>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80044e4:	f000 f9fe 	bl	80048e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80044e8:	463b      	mov	r3, r7
 80044ea:	2204      	movs	r2, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4807      	ldr	r0, [pc, #28]	; (800450c <MX_TIM3_Init+0xfc>)
 80044f0:	f006 fd52 	bl	800af98 <HAL_TIM_PWM_ConfigChannel>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80044fa:	f000 f9f3 	bl	80048e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80044fe:	4803      	ldr	r0, [pc, #12]	; (800450c <MX_TIM3_Init+0xfc>)
 8004500:	f000 fec6 	bl	8005290 <HAL_TIM_MspPostInit>

}
 8004504:	bf00      	nop
 8004506:	3738      	adds	r7, #56	; 0x38
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	200008c4 	.word	0x200008c4
 8004510:	40000400 	.word	0x40000400

08004514 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800451a:	f107 031c 	add.w	r3, r7, #28
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004526:	463b      	mov	r3, r7
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]
 8004534:	615a      	str	r2, [r3, #20]
 8004536:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004538:	4b20      	ldr	r3, [pc, #128]	; (80045bc <MX_TIM4_Init+0xa8>)
 800453a:	4a21      	ldr	r2, [pc, #132]	; (80045c0 <MX_TIM4_Init+0xac>)
 800453c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 244-1;
 800453e:	4b1f      	ldr	r3, [pc, #124]	; (80045bc <MX_TIM4_Init+0xa8>)
 8004540:	22f3      	movs	r2, #243	; 0xf3
 8004542:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004544:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <MX_TIM4_Init+0xa8>)
 8004546:	2200      	movs	r2, #0
 8004548:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000-1;
 800454a:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <MX_TIM4_Init+0xa8>)
 800454c:	f247 522f 	movw	r2, #29999	; 0x752f
 8004550:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004552:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <MX_TIM4_Init+0xa8>)
 8004554:	2200      	movs	r2, #0
 8004556:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004558:	4b18      	ldr	r3, [pc, #96]	; (80045bc <MX_TIM4_Init+0xa8>)
 800455a:	2200      	movs	r2, #0
 800455c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800455e:	4817      	ldr	r0, [pc, #92]	; (80045bc <MX_TIM4_Init+0xa8>)
 8004560:	f006 f9bc 	bl	800a8dc <HAL_TIM_OC_Init>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800456a:	f000 f9bb 	bl	80048e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004572:	2300      	movs	r3, #0
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004576:	f107 031c 	add.w	r3, r7, #28
 800457a:	4619      	mov	r1, r3
 800457c:	480f      	ldr	r0, [pc, #60]	; (80045bc <MX_TIM4_Init+0xa8>)
 800457e:	f007 fb75 	bl	800bc6c <HAL_TIMEx_MasterConfigSynchronization>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8004588:	f000 f9ac 	bl	80048e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800458c:	2300      	movs	r3, #0
 800458e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004594:	2300      	movs	r3, #0
 8004596:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800459c:	463b      	mov	r3, r7
 800459e:	2200      	movs	r2, #0
 80045a0:	4619      	mov	r1, r3
 80045a2:	4806      	ldr	r0, [pc, #24]	; (80045bc <MX_TIM4_Init+0xa8>)
 80045a4:	f006 fc7e 	bl	800aea4 <HAL_TIM_OC_ConfigChannel>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80045ae:	f000 f999 	bl	80048e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80045b2:	bf00      	nop
 80045b4:	3728      	adds	r7, #40	; 0x28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000910 	.word	0x20000910
 80045c0:	40000800 	.word	0x40000800

080045c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045ca:	1d3b      	adds	r3, r7, #4
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80045d4:	4b15      	ldr	r3, [pc, #84]	; (800462c <MX_TIM7_Init+0x68>)
 80045d6:	4a16      	ldr	r2, [pc, #88]	; (8004630 <MX_TIM7_Init+0x6c>)
 80045d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1221-1;
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <MX_TIM7_Init+0x68>)
 80045dc:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80045e0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <MX_TIM7_Init+0x68>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535-1;
 80045e8:	4b10      	ldr	r3, [pc, #64]	; (800462c <MX_TIM7_Init+0x68>)
 80045ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80045ee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045f0:	4b0e      	ldr	r3, [pc, #56]	; (800462c <MX_TIM7_Init+0x68>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80045f6:	480d      	ldr	r0, [pc, #52]	; (800462c <MX_TIM7_Init+0x68>)
 80045f8:	f006 f8a8 	bl	800a74c <HAL_TIM_Base_Init>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004602:	f000 f96f 	bl	80048e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800460e:	1d3b      	adds	r3, r7, #4
 8004610:	4619      	mov	r1, r3
 8004612:	4806      	ldr	r0, [pc, #24]	; (800462c <MX_TIM7_Init+0x68>)
 8004614:	f007 fb2a 	bl	800bc6c <HAL_TIMEx_MasterConfigSynchronization>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800461e:	f000 f961 	bl	80048e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	2000095c 	.word	0x2000095c
 8004630:	40001400 	.word	0x40001400

08004634 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800463a:	f107 0310 	add.w	r3, r7, #16
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	609a      	str	r2, [r3, #8]
 8004646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004652:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <MX_TIM8_Init+0xa0>)
 8004654:	4a20      	ldr	r2, [pc, #128]	; (80046d8 <MX_TIM8_Init+0xa4>)
 8004656:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1249;
 8004658:	4b1e      	ldr	r3, [pc, #120]	; (80046d4 <MX_TIM8_Init+0xa0>)
 800465a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800465e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004660:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <MX_TIM8_Init+0xa0>)
 8004662:	2200      	movs	r2, #0
 8004664:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 8004666:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <MX_TIM8_Init+0xa0>)
 8004668:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800466c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800466e:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <MX_TIM8_Init+0xa0>)
 8004670:	2200      	movs	r2, #0
 8004672:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004674:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <MX_TIM8_Init+0xa0>)
 8004676:	2200      	movs	r2, #0
 8004678:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800467a:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <MX_TIM8_Init+0xa0>)
 800467c:	2200      	movs	r2, #0
 800467e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004680:	4814      	ldr	r0, [pc, #80]	; (80046d4 <MX_TIM8_Init+0xa0>)
 8004682:	f006 f863 	bl	800a74c <HAL_TIM_Base_Init>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 800468c:	f000 f92a 	bl	80048e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004694:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004696:	f107 0310 	add.w	r3, r7, #16
 800469a:	4619      	mov	r1, r3
 800469c:	480d      	ldr	r0, [pc, #52]	; (80046d4 <MX_TIM8_Init+0xa0>)
 800469e:	f006 fd8f 	bl	800b1c0 <HAL_TIM_ConfigClockSource>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80046a8:	f000 f91c 	bl	80048e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046ac:	2300      	movs	r3, #0
 80046ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80046b8:	1d3b      	adds	r3, r7, #4
 80046ba:	4619      	mov	r1, r3
 80046bc:	4805      	ldr	r0, [pc, #20]	; (80046d4 <MX_TIM8_Init+0xa0>)
 80046be:	f007 fad5 	bl	800bc6c <HAL_TIMEx_MasterConfigSynchronization>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80046c8:	f000 f90c 	bl	80048e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80046cc:	bf00      	nop
 80046ce:	3720      	adds	r7, #32
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	200009a8 	.word	0x200009a8
 80046d8:	40013400 	.word	0x40013400

080046dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80046e0:	4b14      	ldr	r3, [pc, #80]	; (8004734 <MX_USART1_UART_Init+0x58>)
 80046e2:	4a15      	ldr	r2, [pc, #84]	; (8004738 <MX_USART1_UART_Init+0x5c>)
 80046e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80046e6:	4b13      	ldr	r3, [pc, #76]	; (8004734 <MX_USART1_UART_Init+0x58>)
 80046e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80046ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <MX_USART1_UART_Init+0x58>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <MX_USART1_UART_Init+0x58>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80046fa:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <MX_USART1_UART_Init+0x58>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <MX_USART1_UART_Init+0x58>)
 8004702:	220c      	movs	r2, #12
 8004704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <MX_USART1_UART_Init+0x58>)
 8004708:	2200      	movs	r2, #0
 800470a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800470c:	4b09      	ldr	r3, [pc, #36]	; (8004734 <MX_USART1_UART_Init+0x58>)
 800470e:	2200      	movs	r2, #0
 8004710:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004712:	4b08      	ldr	r3, [pc, #32]	; (8004734 <MX_USART1_UART_Init+0x58>)
 8004714:	2200      	movs	r2, #0
 8004716:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004718:	4b06      	ldr	r3, [pc, #24]	; (8004734 <MX_USART1_UART_Init+0x58>)
 800471a:	2200      	movs	r2, #0
 800471c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800471e:	4805      	ldr	r0, [pc, #20]	; (8004734 <MX_USART1_UART_Init+0x58>)
 8004720:	f007 fb4e 	bl	800bdc0 <HAL_UART_Init>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800472a:	f000 f8db 	bl	80048e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800472e:	bf00      	nop
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	200009f4 	.word	0x200009f4
 8004738:	40013800 	.word	0x40013800

0800473c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004740:	4b14      	ldr	r3, [pc, #80]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004742:	4a15      	ldr	r2, [pc, #84]	; (8004798 <MX_USART2_UART_Init+0x5c>)
 8004744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004746:	4b13      	ldr	r3, [pc, #76]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800474c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004750:	2200      	movs	r2, #0
 8004752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004756:	2200      	movs	r2, #0
 8004758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800475a:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <MX_USART2_UART_Init+0x58>)
 800475c:	2200      	movs	r2, #0
 800475e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004760:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004762:	220c      	movs	r2, #12
 8004764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004768:	2200      	movs	r2, #0
 800476a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <MX_USART2_UART_Init+0x58>)
 800476e:	2200      	movs	r2, #0
 8004770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004772:	4b08      	ldr	r3, [pc, #32]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004774:	2200      	movs	r2, #0
 8004776:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <MX_USART2_UART_Init+0x58>)
 800477a:	2200      	movs	r2, #0
 800477c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800477e:	4805      	ldr	r0, [pc, #20]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004780:	f007 fb1e 	bl	800bdc0 <HAL_UART_Init>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800478a:	f000 f8ab 	bl	80048e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800478e:	bf00      	nop
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000a7c 	.word	0x20000a7c
 8004798:	40004400 	.word	0x40004400

0800479c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <MX_DMA_Init+0x48>)
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4a0f      	ldr	r2, [pc, #60]	; (80047e4 <MX_DMA_Init+0x48>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	6153      	str	r3, [r2, #20]
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <MX_DMA_Init+0x48>)
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	607b      	str	r3, [r7, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80047ba:	2200      	movs	r2, #0
 80047bc:	2100      	movs	r1, #0
 80047be:	200b      	movs	r0, #11
 80047c0:	f002 f987 	bl	8006ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80047c4:	200b      	movs	r0, #11
 80047c6:	f002 f9a0 	bl	8006b0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80047ca:	2200      	movs	r2, #0
 80047cc:	2100      	movs	r1, #0
 80047ce:	200c      	movs	r0, #12
 80047d0:	f002 f97f 	bl	8006ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80047d4:	200c      	movs	r0, #12
 80047d6:	f002 f998 	bl	8006b0a <HAL_NVIC_EnableIRQ>

}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000

080047e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ee:	f107 0314 	add.w	r3, r7, #20
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	609a      	str	r2, [r3, #8]
 80047fa:	60da      	str	r2, [r3, #12]
 80047fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <MX_GPIO_Init+0xf4>)
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	4a36      	ldr	r2, [pc, #216]	; (80048dc <MX_GPIO_Init+0xf4>)
 8004804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004808:	6153      	str	r3, [r2, #20]
 800480a:	4b34      	ldr	r3, [pc, #208]	; (80048dc <MX_GPIO_Init+0xf4>)
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004816:	4b31      	ldr	r3, [pc, #196]	; (80048dc <MX_GPIO_Init+0xf4>)
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	4a30      	ldr	r2, [pc, #192]	; (80048dc <MX_GPIO_Init+0xf4>)
 800481c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004820:	6153      	str	r3, [r2, #20]
 8004822:	4b2e      	ldr	r3, [pc, #184]	; (80048dc <MX_GPIO_Init+0xf4>)
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800482e:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <MX_GPIO_Init+0xf4>)
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	4a2a      	ldr	r2, [pc, #168]	; (80048dc <MX_GPIO_Init+0xf4>)
 8004834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004838:	6153      	str	r3, [r2, #20]
 800483a:	4b28      	ldr	r3, [pc, #160]	; (80048dc <MX_GPIO_Init+0xf4>)
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004846:	4b25      	ldr	r3, [pc, #148]	; (80048dc <MX_GPIO_Init+0xf4>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	4a24      	ldr	r2, [pc, #144]	; (80048dc <MX_GPIO_Init+0xf4>)
 800484c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004850:	6153      	str	r3, [r2, #20]
 8004852:	4b22      	ldr	r3, [pc, #136]	; (80048dc <MX_GPIO_Init+0xf4>)
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485a:	607b      	str	r3, [r7, #4]
 800485c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|lora_NSS_PIN_Pin|lora_Reset_PIN_Pin, GPIO_PIN_RESET);
 800485e:	2200      	movs	r2, #0
 8004860:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8004864:	481e      	ldr	r0, [pc, #120]	; (80048e0 <MX_GPIO_Init+0xf8>)
 8004866:	f002 fd1f 	bl	80072a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 lora_NSS_PIN_Pin lora_Reset_PIN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|lora_NSS_PIN_Pin|lora_Reset_PIN_Pin;
 800486a:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800486e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004870:	2301      	movs	r3, #1
 8004872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004878:	2300      	movs	r3, #0
 800487a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800487c:	f107 0314 	add.w	r3, r7, #20
 8004880:	4619      	mov	r1, r3
 8004882:	4817      	ldr	r0, [pc, #92]	; (80048e0 <MX_GPIO_Init+0xf8>)
 8004884:	f002 fb86 	bl	8006f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : lora_DIO1_PIN_Pin lora_DIO2_PIN_Pin lora_DIO0_PIN_Pin */
  GPIO_InitStruct.Pin = lora_DIO1_PIN_Pin|lora_DIO2_PIN_Pin|lora_DIO0_PIN_Pin;
 8004888:	2383      	movs	r3, #131	; 0x83
 800488a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800488c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004896:	f107 0314 	add.w	r3, r7, #20
 800489a:	4619      	mov	r1, r3
 800489c:	4810      	ldr	r0, [pc, #64]	; (80048e0 <MX_GPIO_Init+0xf8>)
 800489e:	f002 fb79 	bl	8006f94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80048a2:	2200      	movs	r2, #0
 80048a4:	2100      	movs	r1, #0
 80048a6:	2006      	movs	r0, #6
 80048a8:	f002 f913 	bl	8006ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80048ac:	2006      	movs	r0, #6
 80048ae:	f002 f92c 	bl	8006b0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80048b2:	2200      	movs	r2, #0
 80048b4:	2100      	movs	r1, #0
 80048b6:	2007      	movs	r0, #7
 80048b8:	f002 f90b 	bl	8006ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80048bc:	2007      	movs	r0, #7
 80048be:	f002 f924 	bl	8006b0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80048c2:	2200      	movs	r2, #0
 80048c4:	2100      	movs	r1, #0
 80048c6:	2017      	movs	r0, #23
 80048c8:	f002 f903 	bl	8006ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80048cc:	2017      	movs	r0, #23
 80048ce:	f002 f91c 	bl	8006b0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80048d2:	bf00      	nop
 80048d4:	3728      	adds	r7, #40	; 0x28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
 80048e0:	48000800 	.word	0x48000800

080048e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048e8:	b672      	cpsid	i
}
 80048ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048ec:	e7fe      	b.n	80048ec <Error_Handler+0x8>
	...

080048f0 <STOP>:
float travelledDis_live;
float counterClockwiseTurn_live;
float clockwiseTurn_live;


void STOP(){
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
	// Motor Left
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // (PA0 - LPWM)
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <STOP+0x30>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2200      	movs	r2, #0
 80048fa:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); // (PA1 - RPWM)
 80048fc:	4b08      	ldr	r3, [pc, #32]	; (8004920 <STOP+0x30>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2200      	movs	r2, #0
 8004902:	639a      	str	r2, [r3, #56]	; 0x38
	// Motor Right (PB4 - LPWM)
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); // (PB4 - LPWM)
 8004904:	4b07      	ldr	r3, [pc, #28]	; (8004924 <STOP+0x34>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2200      	movs	r2, #0
 800490a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // (PB5 - RPWM)
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <STOP+0x34>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2200      	movs	r2, #0
 8004912:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000878 	.word	0x20000878
 8004924:	200008c4 	.word	0x200008c4

08004928 <GO_FORWARD>:

void GO_FORWARD(){
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
	// Both tiến
	// Motor Left
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // (PA0 - LPWM)
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <GO_FORWARD+0x34>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2200      	movs	r2, #0
 8004932:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, leftSpeedValue); // (PA1 - RPWM)
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <GO_FORWARD+0x38>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	4b08      	ldr	r3, [pc, #32]	; (800495c <GO_FORWARD+0x34>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	639a      	str	r2, [r3, #56]	; 0x38
	// Motor Right (PB4 - LPWM)
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); // (PB4 - LPWM)
 800493e:	4b09      	ldr	r3, [pc, #36]	; (8004964 <GO_FORWARD+0x3c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2200      	movs	r2, #0
 8004944:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, rightSpeedValue); // (PB5 - RPWM)
 8004946:	4b08      	ldr	r3, [pc, #32]	; (8004968 <GO_FORWARD+0x40>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <GO_FORWARD+0x3c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004950:	bf00      	nop
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000878 	.word	0x20000878
 8004960:	20000140 	.word	0x20000140
 8004964:	200008c4 	.word	0x200008c4
 8004968:	20000144 	.word	0x20000144

0800496c <TURN_RIGHT>:

void TURN_RIGHT(){
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
	// Motor Left đi tới
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // (PA0 - LPWM)
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <TURN_RIGHT+0x34>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, leftSpeedValue); // (PA1 - RPWM)
 8004978:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <TURN_RIGHT+0x38>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <TURN_RIGHT+0x34>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
	// Motor Right (PB4 - LPWM) đi lùi
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, rightSpeedValue); // (PB4 - LPWM)
 8004982:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <TURN_RIGHT+0x3c>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <TURN_RIGHT+0x40>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // (PB5 - RPWM)
 800498c:	4b07      	ldr	r3, [pc, #28]	; (80049ac <TURN_RIGHT+0x40>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2200      	movs	r2, #0
 8004992:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20000878 	.word	0x20000878
 80049a4:	20000140 	.word	0x20000140
 80049a8:	20000144 	.word	0x20000144
 80049ac:	200008c4 	.word	0x200008c4

080049b0 <TURN_LEFT>:

void TURN_LEFT(){
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
	// Motor Left lùi
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, leftSpeedValue); // (PA0 - LPWM)
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <TURN_LEFT+0x34>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <TURN_LEFT+0x38>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); // (PA1 - RPWM)
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <TURN_LEFT+0x38>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2200      	movs	r2, #0
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38
	// Motor Right (PB4 - LPWM) tiến
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); // (PB4 - LPWM)
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <TURN_LEFT+0x3c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, rightSpeedValue); // (PB5 - RPWM)
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <TURN_LEFT+0x40>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <TURN_LEFT+0x3c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80049d8:	bf00      	nop
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000140 	.word	0x20000140
 80049e8:	20000878 	.word	0x20000878
 80049ec:	200008c4 	.word	0x200008c4
 80049f0:	20000144 	.word	0x20000144

080049f4 <arrivePoint>:


// Sau khi quay đúng góc trực diện về phía điểm cần đến -> thực hiện đi thẳng tới điểm đó
// Yêu cầu phải send từ app về 4 coordinates của bounding box và grid list

void arrivePoint() {
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
	// PHẢI CẦN HÀM SAU KHI ĐỢI CURRENT GPS ổn định -> lưu startPoint lần đầu tiên (initializeStartPointGPS(currentGPS) đã làm)
	// targetAngle = round(convertRange360(azimuthAngle(startGPS, targetPos))); // get target angle value
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80049fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049fe:	483c      	ldr	r0, [pc, #240]	; (8004af0 <arrivePoint+0xfc>)
 8004a00:	f002 fc6a 	bl	80072d8 <HAL_GPIO_TogglePin>
	deltaAngle = currentAngle - targetAngle;
 8004a04:	4b3b      	ldr	r3, [pc, #236]	; (8004af4 <arrivePoint+0x100>)
 8004a06:	ed93 7a00 	vldr	s14, [r3]
 8004a0a:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <arrivePoint+0x104>)
 8004a0c:	edd3 7a00 	vldr	s15, [r3]
 8004a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a14:	ee17 0a90 	vmov	r0, s15
 8004a18:	f7fb fd9e 	bl	8000558 <__aeabi_f2d>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4936      	ldr	r1, [pc, #216]	; (8004afc <arrivePoint+0x108>)
 8004a22:	e9c1 2300 	strd	r2, r3, [r1]
	if(abs(deltaAngle) > 3) // Nếu chưa xoay qua đúng hướng -> thực hiện xoay đến khi đúng
 8004a26:	4b35      	ldr	r3, [pc, #212]	; (8004afc <arrivePoint+0x108>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4619      	mov	r1, r3
 8004a30:	f7fc f89a 	bl	8000b68 <__aeabi_d2iz>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bfb8      	it	lt
 8004a3a:	425b      	neglt	r3, r3
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	dd0c      	ble.n	8004a5a <arrivePoint+0x66>
		determineTurnDirection(currentAngle, targetAngle);
 8004a40:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <arrivePoint+0x100>)
 8004a42:	edd3 7a00 	vldr	s15, [r3]
 8004a46:	4b2c      	ldr	r3, [pc, #176]	; (8004af8 <arrivePoint+0x104>)
 8004a48:	ed93 7a00 	vldr	s14, [r3]
 8004a4c:	eef0 0a47 	vmov.f32	s1, s14
 8004a50:	eeb0 0a67 	vmov.f32	s0, s15
 8004a54:	f000 f860 	bl	8004b18 <determineTurnDirection>
				// Thực hiện đi thẳng đến khi đạt 1 khoảng distance -> đã đến targetPosition
				driving();

			}
		}
}
 8004a58:	e045      	b.n	8004ae6 <arrivePoint+0xf2>
			float distance = Haversine_Distance(currentGPS, targetGPS); // Nhưng grid distance là constant
 8004a5a:	4b29      	ldr	r3, [pc, #164]	; (8004b00 <arrivePoint+0x10c>)
 8004a5c:	ed93 4b00 	vldr	d4, [r3]
 8004a60:	ed93 5b02 	vldr	d5, [r3, #8]
 8004a64:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <arrivePoint+0x110>)
 8004a66:	ed93 6b00 	vldr	d6, [r3]
 8004a6a:	ed93 7b02 	vldr	d7, [r3, #8]
 8004a6e:	eeb0 2a44 	vmov.f32	s4, s8
 8004a72:	eef0 2a64 	vmov.f32	s5, s9
 8004a76:	eeb0 3a45 	vmov.f32	s6, s10
 8004a7a:	eef0 3a65 	vmov.f32	s7, s11
 8004a7e:	eeb0 0a46 	vmov.f32	s0, s12
 8004a82:	eef0 0a66 	vmov.f32	s1, s13
 8004a86:	eeb0 1a47 	vmov.f32	s2, s14
 8004a8a:	eef0 1a67 	vmov.f32	s3, s15
 8004a8e:	f7fd fb9b 	bl	80021c8 <Haversine_Distance>
 8004a92:	ec53 2b10 	vmov	r2, r3, d0
 8004a96:	4610      	mov	r0, r2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f7fc f8ad 	bl	8000bf8 <__aeabi_d2f>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	607b      	str	r3, [r7, #4]
			distance_live = distance; // watch live expression
 8004aa2:	4a19      	ldr	r2, [pc, #100]	; (8004b08 <arrivePoint+0x114>)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6013      	str	r3, [r2, #0]
			if(distance <= 2) { // đã đến target position
 8004aa8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab8:	d813      	bhi.n	8004ae2 <arrivePoint+0xee>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8004aba:	2200      	movs	r2, #0
 8004abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ac0:	480b      	ldr	r0, [pc, #44]	; (8004af0 <arrivePoint+0xfc>)
 8004ac2:	f002 fbf1 	bl	80072a8 <HAL_GPIO_WritePin>
				STOP(); // dừng lại để thực hiện chỉnh lại góc nếu lệch -> tiếp tục đi đến vị trí tiếp theo
 8004ac6:	f7ff ff13 	bl	80048f0 <STOP>
				startGPS = targetGPS; // update vị trí hiện tại để tiếp tục tính khoảng cách -> đi tiếp
 8004aca:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <arrivePoint+0x118>)
 8004acc:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <arrivePoint+0x10c>)
 8004ace:	4614      	mov	r4, r2
 8004ad0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ad2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				gridIdx++; // cho robot biết điểm grid cần đến tiếp theo
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <arrivePoint+0x11c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3301      	adds	r3, #1
 8004adc:	4a0c      	ldr	r2, [pc, #48]	; (8004b10 <arrivePoint+0x11c>)
 8004ade:	6013      	str	r3, [r2, #0]
}
 8004ae0:	e001      	b.n	8004ae6 <arrivePoint+0xf2>
				driving();
 8004ae2:	f000 f98b 	bl	8004dfc <driving>
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd90      	pop	{r4, r7, pc}
 8004aee:	bf00      	nop
 8004af0:	48000800 	.word	0x48000800
 8004af4:	20000430 	.word	0x20000430
 8004af8:	20000434 	.word	0x20000434
 8004afc:	20000b28 	.word	0x20000b28
 8004b00:	20000090 	.word	0x20000090
 8004b04:	200005c0 	.word	0x200005c0
 8004b08:	20000b30 	.word	0x20000b30
 8004b0c:	200005b0 	.word	0x200005b0
 8004b10:	200005d4 	.word	0x200005d4
 8004b14:	00000000 	.word	0x00000000

08004b18 <determineTurnDirection>:

/*-------Fuction to determine the best navigation to turn depend on Angle-------*/
void determineTurnDirection(float currentAngle, float targetAngle) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004b22:	edc7 0a00 	vstr	s1, [r7]
    // Calculate angle to excute best turn
	// Clock Wise Turn from currentAngle to targetAngle
    float clockwiseTurn = fmod(targetAngle - currentAngle + 360.0, 360.0);
 8004b26:	ed97 7a00 	vldr	s14, [r7]
 8004b2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b32:	ee17 0a90 	vmov	r0, s15
 8004b36:	f7fb fd0f 	bl	8000558 <__aeabi_f2d>
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	4b5a      	ldr	r3, [pc, #360]	; (8004ca8 <determineTurnDirection+0x190>)
 8004b40:	f7fb fbac 	bl	800029c <__adddf3>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	ec43 2b17 	vmov	d7, r2, r3
 8004b4c:	ed9f 1b54 	vldr	d1, [pc, #336]	; 8004ca0 <determineTurnDirection+0x188>
 8004b50:	eeb0 0a47 	vmov.f32	s0, s14
 8004b54:	eef0 0a67 	vmov.f32	s1, s15
 8004b58:	f010 ff3c 	bl	80159d4 <fmod>
 8004b5c:	ec53 2b10 	vmov	r2, r3, d0
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	f7fc f848 	bl	8000bf8 <__aeabi_d2f>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	61bb      	str	r3, [r7, #24]
    // Counter Clock Wise Turn from currentAngle to targetAngle
    float counterClockwiseTurn = fmod(currentAngle - targetAngle + 360.0, 360.0);
 8004b6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b70:	edd7 7a00 	vldr	s15, [r7]
 8004b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b78:	ee17 0a90 	vmov	r0, s15
 8004b7c:	f7fb fcec 	bl	8000558 <__aeabi_f2d>
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	4b48      	ldr	r3, [pc, #288]	; (8004ca8 <determineTurnDirection+0x190>)
 8004b86:	f7fb fb89 	bl	800029c <__adddf3>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	ec43 2b17 	vmov	d7, r2, r3
 8004b92:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8004ca0 <determineTurnDirection+0x188>
 8004b96:	eeb0 0a47 	vmov.f32	s0, s14
 8004b9a:	eef0 0a67 	vmov.f32	s1, s15
 8004b9e:	f010 ff19 	bl	80159d4 <fmod>
 8004ba2:	ec53 2b10 	vmov	r2, r3, d0
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f7fc f825 	bl	8000bf8 <__aeabi_d2f>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	617b      	str	r3, [r7, #20]
    counterClockwiseTurn_live = counterClockwiseTurn;
 8004bb2:	4a3e      	ldr	r2, [pc, #248]	; (8004cac <determineTurnDirection+0x194>)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	6013      	str	r3, [r2, #0]
    clockwiseTurn_live = clockwiseTurn;
 8004bb8:	4a3d      	ldr	r2, [pc, #244]	; (8004cb0 <determineTurnDirection+0x198>)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	6013      	str	r3, [r2, #0]
    /*---------Calculation needed speed angle depend on angle change----------*/
    /*Khởi tạo biến giám sát tốc độ dưạ trên quay quanh trục Z
     *Tăng tốc độ quay của hệ thống khi nhận biết góc còn khoảng nhỏ
     */
    int targetGyroZ = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]

    if(abs(deltaAngle)>10){
 8004bc2:	4b3c      	ldr	r3, [pc, #240]	; (8004cb4 <determineTurnDirection+0x19c>)
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f7fb ffcc 	bl	8000b68 <__aeabi_d2iz>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bfb8      	it	lt
 8004bd6:	425b      	neglt	r3, r3
 8004bd8:	2b0a      	cmp	r3, #10
 8004bda:	dd0d      	ble.n	8004bf8 <determineTurnDirection+0xe0>
		targetGyroZ = 2* abs(deltaAngle);
 8004bdc:	4b35      	ldr	r3, [pc, #212]	; (8004cb4 <determineTurnDirection+0x19c>)
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	4610      	mov	r0, r2
 8004be4:	4619      	mov	r1, r3
 8004be6:	f7fb ffbf 	bl	8000b68 <__aeabi_d2iz>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bfb8      	it	lt
 8004bf0:	425b      	neglt	r3, r3
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e001      	b.n	8004bfc <determineTurnDirection+0xe4>
	} else{
		targetGyroZ =20;
 8004bf8:	2314      	movs	r3, #20
 8004bfa:	61fb      	str	r3, [r7, #28]
	}
	// Tính toán lỗi và lấy 50% giá trị lỗi để tăng tốc
	float error = targetGyroZ - abs(Gz);
 8004bfc:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <determineTurnDirection+0x1a0>)
 8004bfe:	edd3 7a00 	vldr	s15, [r3]
 8004c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c06:	ee17 3a90 	vmov	r3, s15
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bfb8      	it	lt
 8004c0e:	425b      	neglt	r3, r3
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	ee07 3a90 	vmov	s15, r3
 8004c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c1c:	edc7 7a04 	vstr	s15, [r7, #16]
	float adjustment = 0.5 * error;
 8004c20:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c2c:	edc7 7a03 	vstr	s15, [r7, #12]
    /*-------------------------------------------------------------------------*/

    if (clockwiseTurn < counterClockwiseTurn) {
 8004c30:	ed97 7a06 	vldr	s14, [r7, #24]
 8004c34:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c40:	d514      	bpl.n	8004c6c <determineTurnDirection+0x154>
    	rightSpeedValue = changeSpeed(rightSpeedValue, -1 + adjustment);
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <determineTurnDirection+0x1a4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c56:	ee17 1a90 	vmov	r1, s15
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f830 	bl	8004cc0 <changeSpeed>
 8004c60:	4603      	mov	r3, r0
 8004c62:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <determineTurnDirection+0x1a4>)
 8004c64:	6013      	str	r3, [r2, #0]
        TURN_RIGHT();
 8004c66:	f7ff fe81 	bl	800496c <TURN_RIGHT>

        //Nếu cả hai góc quay đều bằng nhau, có thể rẽ theo bất kỳ hướng nào
        rightSpeedValue = changeSpeed(rightSpeedValue, +1 + adjustment);
    	TURN_LEFT();
    }
}
 8004c6a:	e013      	b.n	8004c94 <determineTurnDirection+0x17c>
        rightSpeedValue = changeSpeed(rightSpeedValue, +1 + adjustment);
 8004c6c:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <determineTurnDirection+0x1a4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c80:	ee17 1a90 	vmov	r1, s15
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 f81b 	bl	8004cc0 <changeSpeed>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4a0b      	ldr	r2, [pc, #44]	; (8004cbc <determineTurnDirection+0x1a4>)
 8004c8e:	6013      	str	r3, [r2, #0]
    	TURN_LEFT();
 8004c90:	f7ff fe8e 	bl	80049b0 <TURN_LEFT>
}
 8004c94:	bf00      	nop
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	f3af 8000 	nop.w
 8004ca0:	00000000 	.word	0x00000000
 8004ca4:	40768000 	.word	0x40768000
 8004ca8:	40768000 	.word	0x40768000
 8004cac:	20000b34 	.word	0x20000b34
 8004cb0:	20000b38 	.word	0x20000b38
 8004cb4:	20000b28 	.word	0x20000b28
 8004cb8:	20000450 	.word	0x20000450
 8004cbc:	20000144 	.word	0x20000144

08004cc0 <changeSpeed>:

	}
}

/*Hàm đẩy giá trị tốc độ cơ lên 1 bậc */
int changeSpeed(int motorSpeed, int increase){
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
	motorSpeed += increase;
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	4413      	add	r3, r2
 8004cd0:	607b      	str	r3, [r7, #4]
	if(motorSpeed >maxSpeedRight){
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <changeSpeed+0x44>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	dd03      	ble.n	8004ce4 <changeSpeed+0x24>
		motorSpeed = maxSpeedRight;
 8004cdc:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <changeSpeed+0x44>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	607b      	str	r3, [r7, #4]
 8004ce2:	e007      	b.n	8004cf4 <changeSpeed+0x34>
	}else if(motorSpeed <minSpeedRight){
 8004ce4:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <changeSpeed+0x48>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	da02      	bge.n	8004cf4 <changeSpeed+0x34>
		motorSpeed = minSpeedRight ;
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <changeSpeed+0x48>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	607b      	str	r3, [r7, #4]
	}
	return motorSpeed;
 8004cf4:	687b      	ldr	r3, [r7, #4]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000148 	.word	0x20000148
 8004d08:	2000014c 	.word	0x2000014c

08004d0c <controlSpeed>:

/*Hàm điều chỉnh tốc độ hai bên động cơ*/
void controlSpeed(){
 8004d0c:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
 8004d10:	af00      	add	r7, sp, #0
	deltaAngle = currentAngle - targetAngle;
 8004d12:	4b35      	ldr	r3, [pc, #212]	; (8004de8 <controlSpeed+0xdc>)
 8004d14:	ed93 7a00 	vldr	s14, [r3]
 8004d18:	4b34      	ldr	r3, [pc, #208]	; (8004dec <controlSpeed+0xe0>)
 8004d1a:	edd3 7a00 	vldr	s15, [r3]
 8004d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d22:	ee17 0a90 	vmov	r0, s15
 8004d26:	f7fb fc17 	bl	8000558 <__aeabi_f2d>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4930      	ldr	r1, [pc, #192]	; (8004df0 <controlSpeed+0xe4>)
 8004d30:	e9c1 2300 	strd	r2, r3, [r1]
	if(deltaAngle >=2){
 8004d34:	4b2e      	ldr	r3, [pc, #184]	; (8004df0 <controlSpeed+0xe4>)
 8004d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d42:	f7fb fee7 	bl	8000b14 <__aeabi_dcmpge>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01a      	beq.n	8004d82 <controlSpeed+0x76>
		rightSpeedValue = changeSpeed(rightSpeedValue,round(-deltaAngle));
 8004d4c:	4b29      	ldr	r3, [pc, #164]	; (8004df4 <controlSpeed+0xe8>)
 8004d4e:	681c      	ldr	r4, [r3, #0]
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <controlSpeed+0xe4>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	4690      	mov	r8, r2
 8004d58:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004d5c:	ec49 8b10 	vmov	d0, r8, r9
 8004d60:	f011 f894 	bl	8015e8c <round>
 8004d64:	ec53 2b10 	vmov	r2, r3, d0
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f7fb fefc 	bl	8000b68 <__aeabi_d2iz>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4619      	mov	r1, r3
 8004d74:	4620      	mov	r0, r4
 8004d76:	f7ff ffa3 	bl	8004cc0 <changeSpeed>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <controlSpeed+0xe8>)
 8004d7e:	6013      	str	r3, [r2, #0]
		rightSpeedValue = changeSpeed(rightSpeedValue, abs(round(deltaAngle)));
	}else{
		leftSpeedValue = LEFT_SPEED;
		rightSpeedValue = RIGHT_SPEED;
	}
}
 8004d80:	e02e      	b.n	8004de0 <controlSpeed+0xd4>
	}else if(deltaAngle <=-2){
 8004d82:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <controlSpeed+0xe4>)
 8004d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8004d90:	f7fb feb6 	bl	8000b00 <__aeabi_dcmple>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d01c      	beq.n	8004dd4 <controlSpeed+0xc8>
		rightSpeedValue = changeSpeed(rightSpeedValue, abs(round(deltaAngle)));
 8004d9a:	4b16      	ldr	r3, [pc, #88]	; (8004df4 <controlSpeed+0xe8>)
 8004d9c:	681c      	ldr	r4, [r3, #0]
 8004d9e:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <controlSpeed+0xe4>)
 8004da0:	ed93 7b00 	vldr	d7, [r3]
 8004da4:	eeb0 0a47 	vmov.f32	s0, s14
 8004da8:	eef0 0a67 	vmov.f32	s1, s15
 8004dac:	f011 f86e 	bl	8015e8c <round>
 8004db0:	ec53 2b10 	vmov	r2, r3, d0
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	f7fb fed6 	bl	8000b68 <__aeabi_d2iz>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfb8      	it	lt
 8004dc2:	425b      	neglt	r3, r3
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f7ff ff7a 	bl	8004cc0 <changeSpeed>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4a09      	ldr	r2, [pc, #36]	; (8004df4 <controlSpeed+0xe8>)
 8004dd0:	6013      	str	r3, [r2, #0]
}
 8004dd2:	e005      	b.n	8004de0 <controlSpeed+0xd4>
		leftSpeedValue = LEFT_SPEED;
 8004dd4:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <controlSpeed+0xec>)
 8004dd6:	2218      	movs	r2, #24
 8004dd8:	601a      	str	r2, [r3, #0]
		rightSpeedValue = RIGHT_SPEED;
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <controlSpeed+0xe8>)
 8004ddc:	221d      	movs	r2, #29
 8004dde:	601a      	str	r2, [r3, #0]
}
 8004de0:	bf00      	nop
 8004de2:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
 8004de6:	bf00      	nop
 8004de8:	20000430 	.word	0x20000430
 8004dec:	20000434 	.word	0x20000434
 8004df0:	20000b28 	.word	0x20000b28
 8004df4:	20000144 	.word	0x20000144
 8004df8:	20000140 	.word	0x20000140

08004dfc <driving>:

/*Hàm thực hiện di chuyển đi thẳng kèm theo điều kiện kiểm tra độ lệch*/
void driving(){
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
	deltaAngle = currentAngle - targetAngle;
 8004e00:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <driving+0x58>)
 8004e02:	ed93 7a00 	vldr	s14, [r3]
 8004e06:	4b14      	ldr	r3, [pc, #80]	; (8004e58 <driving+0x5c>)
 8004e08:	edd3 7a00 	vldr	s15, [r3]
 8004e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e10:	ee17 0a90 	vmov	r0, s15
 8004e14:	f7fb fba0 	bl	8000558 <__aeabi_f2d>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	490f      	ldr	r1, [pc, #60]	; (8004e5c <driving+0x60>)
 8004e1e:	e9c1 2300 	strd	r2, r3, [r1]
	GO_FORWARD();
 8004e22:	f7ff fd81 	bl	8004928 <GO_FORWARD>
	if(deltaAngle != 0){
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <driving+0x60>)
 8004e28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	f7fb fe50 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d000      	beq.n	8004e40 <driving+0x44>
		controlSpeed();
		leftSpeedValue = LEFT_SPEED;
		GO_FORWARD();
	}

}
 8004e3e:	e006      	b.n	8004e4e <driving+0x52>
		controlSpeed();
 8004e40:	f7ff ff64 	bl	8004d0c <controlSpeed>
		leftSpeedValue = LEFT_SPEED;
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <driving+0x64>)
 8004e46:	2218      	movs	r2, #24
 8004e48:	601a      	str	r2, [r3, #0]
		GO_FORWARD();
 8004e4a:	f7ff fd6d 	bl	8004928 <GO_FORWARD>
}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000430 	.word	0x20000430
 8004e58:	20000434 	.word	0x20000434
 8004e5c:	20000b28 	.word	0x20000b28
 8004e60:	20000140 	.word	0x20000140

08004e64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <HAL_MspInit+0x44>)
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ea8 <HAL_MspInit+0x44>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	6193      	str	r3, [r2, #24]
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <HAL_MspInit+0x44>)
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	607b      	str	r3, [r7, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e82:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <HAL_MspInit+0x44>)
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <HAL_MspInit+0x44>)
 8004e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	61d3      	str	r3, [r2, #28]
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_MspInit+0x44>)
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004e9a:	2007      	movs	r0, #7
 8004e9c:	f001 fe0e 	bl	8006abc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ea0:	bf00      	nop
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40021000 	.word	0x40021000

08004eac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb4:	f107 0314 	add.w	r3, r7, #20
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	60da      	str	r2, [r3, #12]
 8004ec2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ecc:	d14b      	bne.n	8004f66 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004ece:	4b28      	ldr	r3, [pc, #160]	; (8004f70 <HAL_ADC_MspInit+0xc4>)
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	4a27      	ldr	r2, [pc, #156]	; (8004f70 <HAL_ADC_MspInit+0xc4>)
 8004ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	6153      	str	r3, [r2, #20]
 8004eda:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <HAL_ADC_MspInit+0xc4>)
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ee6:	4b22      	ldr	r3, [pc, #136]	; (8004f70 <HAL_ADC_MspInit+0xc4>)
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	4a21      	ldr	r2, [pc, #132]	; (8004f70 <HAL_ADC_MspInit+0xc4>)
 8004eec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ef0:	6153      	str	r3, [r2, #20]
 8004ef2:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <HAL_ADC_MspInit+0xc4>)
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004efe:	2304      	movs	r3, #4
 8004f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f02:	2303      	movs	r3, #3
 8004f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f0a:	f107 0314 	add.w	r3, r7, #20
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4818      	ldr	r0, [pc, #96]	; (8004f74 <HAL_ADC_MspInit+0xc8>)
 8004f12:	f002 f83f 	bl	8006f94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004f16:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <HAL_ADC_MspInit+0xcc>)
 8004f18:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <HAL_ADC_MspInit+0xd0>)
 8004f1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f1c:	4b16      	ldr	r3, [pc, #88]	; (8004f78 <HAL_ADC_MspInit+0xcc>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <HAL_ADC_MspInit+0xcc>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004f28:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_ADC_MspInit+0xcc>)
 8004f2a:	2280      	movs	r2, #128	; 0x80
 8004f2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <HAL_ADC_MspInit+0xcc>)
 8004f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_ADC_MspInit+0xcc>)
 8004f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004f3e:	4b0e      	ldr	r3, [pc, #56]	; (8004f78 <HAL_ADC_MspInit+0xcc>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_ADC_MspInit+0xcc>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004f4a:	480b      	ldr	r0, [pc, #44]	; (8004f78 <HAL_ADC_MspInit+0xcc>)
 8004f4c:	f001 fdf7 	bl	8006b3e <HAL_DMA_Init>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8004f56:	f7ff fcc5 	bl	80048e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a06      	ldr	r2, [pc, #24]	; (8004f78 <HAL_ADC_MspInit+0xcc>)
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
 8004f60:	4a05      	ldr	r2, [pc, #20]	; (8004f78 <HAL_ADC_MspInit+0xcc>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004f66:	bf00      	nop
 8004f68:	3728      	adds	r7, #40	; 0x28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40021000 	.word	0x40021000
 8004f74:	48000800 	.word	0x48000800
 8004f78:	200006d4 	.word	0x200006d4
 8004f7c:	40020008 	.word	0x40020008

08004f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <HAL_I2C_MspInit+0xb8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d145      	bne.n	800502e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fa2:	4b26      	ldr	r3, [pc, #152]	; (800503c <HAL_I2C_MspInit+0xbc>)
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	4a25      	ldr	r2, [pc, #148]	; (800503c <HAL_I2C_MspInit+0xbc>)
 8004fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fac:	6153      	str	r3, [r2, #20]
 8004fae:	4b23      	ldr	r3, [pc, #140]	; (800503c <HAL_I2C_MspInit+0xbc>)
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fba:	4b20      	ldr	r3, [pc, #128]	; (800503c <HAL_I2C_MspInit+0xbc>)
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	4a1f      	ldr	r2, [pc, #124]	; (800503c <HAL_I2C_MspInit+0xbc>)
 8004fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc4:	6153      	str	r3, [r2, #20]
 8004fc6:	4b1d      	ldr	r3, [pc, #116]	; (800503c <HAL_I2C_MspInit+0xbc>)
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fd8:	2312      	movs	r3, #18
 8004fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fe8:	f107 0314 	add.w	r3, r7, #20
 8004fec:	4619      	mov	r1, r3
 8004fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff2:	f001 ffcf 	bl	8006f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ffa:	2312      	movs	r3, #18
 8004ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005002:	2303      	movs	r3, #3
 8005004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005006:	2304      	movs	r3, #4
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800500a:	f107 0314 	add.w	r3, r7, #20
 800500e:	4619      	mov	r1, r3
 8005010:	480b      	ldr	r0, [pc, #44]	; (8005040 <HAL_I2C_MspInit+0xc0>)
 8005012:	f001 ffbf 	bl	8006f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005016:	4b09      	ldr	r3, [pc, #36]	; (800503c <HAL_I2C_MspInit+0xbc>)
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	4a08      	ldr	r2, [pc, #32]	; (800503c <HAL_I2C_MspInit+0xbc>)
 800501c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005020:	61d3      	str	r3, [r2, #28]
 8005022:	4b06      	ldr	r3, [pc, #24]	; (800503c <HAL_I2C_MspInit+0xbc>)
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800502e:	bf00      	nop
 8005030:	3728      	adds	r7, #40	; 0x28
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40005400 	.word	0x40005400
 800503c:	40021000 	.word	0x40021000
 8005040:	48000400 	.word	0x48000400

08005044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08c      	sub	sp, #48	; 0x30
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800504c:	f107 031c 	add.w	r3, r7, #28
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	60da      	str	r2, [r3, #12]
 800505a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a42      	ldr	r2, [pc, #264]	; (800516c <HAL_SPI_MspInit+0x128>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d14f      	bne.n	8005106 <HAL_SPI_MspInit+0xc2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005066:	4b42      	ldr	r3, [pc, #264]	; (8005170 <HAL_SPI_MspInit+0x12c>)
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	4a41      	ldr	r2, [pc, #260]	; (8005170 <HAL_SPI_MspInit+0x12c>)
 800506c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005070:	6193      	str	r3, [r2, #24]
 8005072:	4b3f      	ldr	r3, [pc, #252]	; (8005170 <HAL_SPI_MspInit+0x12c>)
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800507e:	4b3c      	ldr	r3, [pc, #240]	; (8005170 <HAL_SPI_MspInit+0x12c>)
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	4a3b      	ldr	r2, [pc, #236]	; (8005170 <HAL_SPI_MspInit+0x12c>)
 8005084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005088:	6153      	str	r3, [r2, #20]
 800508a:	4b39      	ldr	r3, [pc, #228]	; (8005170 <HAL_SPI_MspInit+0x12c>)
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005096:	2338      	movs	r3, #56	; 0x38
 8005098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509a:	2302      	movs	r3, #2
 800509c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050a2:	2303      	movs	r3, #3
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80050a6:	2305      	movs	r3, #5
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050aa:	f107 031c 	add.w	r3, r7, #28
 80050ae:	4619      	mov	r1, r3
 80050b0:	4830      	ldr	r0, [pc, #192]	; (8005174 <HAL_SPI_MspInit+0x130>)
 80050b2:	f001 ff6f 	bl	8006f94 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80050b6:	4b30      	ldr	r3, [pc, #192]	; (8005178 <HAL_SPI_MspInit+0x134>)
 80050b8:	4a30      	ldr	r2, [pc, #192]	; (800517c <HAL_SPI_MspInit+0x138>)
 80050ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050bc:	4b2e      	ldr	r3, [pc, #184]	; (8005178 <HAL_SPI_MspInit+0x134>)
 80050be:	2200      	movs	r2, #0
 80050c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050c2:	4b2d      	ldr	r3, [pc, #180]	; (8005178 <HAL_SPI_MspInit+0x134>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050c8:	4b2b      	ldr	r3, [pc, #172]	; (8005178 <HAL_SPI_MspInit+0x134>)
 80050ca:	2280      	movs	r2, #128	; 0x80
 80050cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050ce:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <HAL_SPI_MspInit+0x134>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050d4:	4b28      	ldr	r3, [pc, #160]	; (8005178 <HAL_SPI_MspInit+0x134>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80050da:	4b27      	ldr	r3, [pc, #156]	; (8005178 <HAL_SPI_MspInit+0x134>)
 80050dc:	2220      	movs	r2, #32
 80050de:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80050e0:	4b25      	ldr	r3, [pc, #148]	; (8005178 <HAL_SPI_MspInit+0x134>)
 80050e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80050e8:	4823      	ldr	r0, [pc, #140]	; (8005178 <HAL_SPI_MspInit+0x134>)
 80050ea:	f001 fd28 	bl	8006b3e <HAL_DMA_Init>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 80050f4:	f7ff fbf6 	bl	80048e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a1f      	ldr	r2, [pc, #124]	; (8005178 <HAL_SPI_MspInit+0x134>)
 80050fc:	659a      	str	r2, [r3, #88]	; 0x58
 80050fe:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <HAL_SPI_MspInit+0x134>)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005104:	e02d      	b.n	8005162 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI2)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <HAL_SPI_MspInit+0x13c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d128      	bne.n	8005162 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005110:	4b17      	ldr	r3, [pc, #92]	; (8005170 <HAL_SPI_MspInit+0x12c>)
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	4a16      	ldr	r2, [pc, #88]	; (8005170 <HAL_SPI_MspInit+0x12c>)
 8005116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800511a:	61d3      	str	r3, [r2, #28]
 800511c:	4b14      	ldr	r3, [pc, #80]	; (8005170 <HAL_SPI_MspInit+0x12c>)
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <HAL_SPI_MspInit+0x12c>)
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	4a10      	ldr	r2, [pc, #64]	; (8005170 <HAL_SPI_MspInit+0x12c>)
 800512e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005132:	6153      	str	r3, [r2, #20]
 8005134:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <HAL_SPI_MspInit+0x12c>)
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005140:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005146:	2302      	movs	r3, #2
 8005148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514a:	2300      	movs	r3, #0
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800514e:	2303      	movs	r3, #3
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005152:	2305      	movs	r3, #5
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005156:	f107 031c 	add.w	r3, r7, #28
 800515a:	4619      	mov	r1, r3
 800515c:	4805      	ldr	r0, [pc, #20]	; (8005174 <HAL_SPI_MspInit+0x130>)
 800515e:	f001 ff19 	bl	8006f94 <HAL_GPIO_Init>
}
 8005162:	bf00      	nop
 8005164:	3730      	adds	r7, #48	; 0x30
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40013000 	.word	0x40013000
 8005170:	40021000 	.word	0x40021000
 8005174:	48000400 	.word	0x48000400
 8005178:	20000834 	.word	0x20000834
 800517c:	4002001c 	.word	0x4002001c
 8005180:	40003800 	.word	0x40003800

08005184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005194:	d10c      	bne.n	80051b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005196:	4b27      	ldr	r3, [pc, #156]	; (8005234 <HAL_TIM_Base_MspInit+0xb0>)
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	4a26      	ldr	r2, [pc, #152]	; (8005234 <HAL_TIM_Base_MspInit+0xb0>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	61d3      	str	r3, [r2, #28]
 80051a2:	4b24      	ldr	r3, [pc, #144]	; (8005234 <HAL_TIM_Base_MspInit+0xb0>)
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80051ae:	e03c      	b.n	800522a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a20      	ldr	r2, [pc, #128]	; (8005238 <HAL_TIM_Base_MspInit+0xb4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d10c      	bne.n	80051d4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051ba:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <HAL_TIM_Base_MspInit+0xb0>)
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	4a1d      	ldr	r2, [pc, #116]	; (8005234 <HAL_TIM_Base_MspInit+0xb0>)
 80051c0:	f043 0302 	orr.w	r3, r3, #2
 80051c4:	61d3      	str	r3, [r2, #28]
 80051c6:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <HAL_TIM_Base_MspInit+0xb0>)
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	693b      	ldr	r3, [r7, #16]
}
 80051d2:	e02a      	b.n	800522a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a18      	ldr	r2, [pc, #96]	; (800523c <HAL_TIM_Base_MspInit+0xb8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d114      	bne.n	8005208 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <HAL_TIM_Base_MspInit+0xb0>)
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	4a14      	ldr	r2, [pc, #80]	; (8005234 <HAL_TIM_Base_MspInit+0xb0>)
 80051e4:	f043 0320 	orr.w	r3, r3, #32
 80051e8:	61d3      	str	r3, [r2, #28]
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <HAL_TIM_Base_MspInit+0xb0>)
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80051f6:	2200      	movs	r2, #0
 80051f8:	2100      	movs	r1, #0
 80051fa:	2037      	movs	r0, #55	; 0x37
 80051fc:	f001 fc69 	bl	8006ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005200:	2037      	movs	r0, #55	; 0x37
 8005202:	f001 fc82 	bl	8006b0a <HAL_NVIC_EnableIRQ>
}
 8005206:	e010      	b.n	800522a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a0c      	ldr	r2, [pc, #48]	; (8005240 <HAL_TIM_Base_MspInit+0xbc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d10b      	bne.n	800522a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <HAL_TIM_Base_MspInit+0xb0>)
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	4a07      	ldr	r2, [pc, #28]	; (8005234 <HAL_TIM_Base_MspInit+0xb0>)
 8005218:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800521c:	6193      	str	r3, [r2, #24]
 800521e:	4b05      	ldr	r3, [pc, #20]	; (8005234 <HAL_TIM_Base_MspInit+0xb0>)
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005226:	60bb      	str	r3, [r7, #8]
 8005228:	68bb      	ldr	r3, [r7, #8]
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000
 8005238:	40000400 	.word	0x40000400
 800523c:	40001400 	.word	0x40001400
 8005240:	40013400 	.word	0x40013400

08005244 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0d      	ldr	r2, [pc, #52]	; (8005288 <HAL_TIM_OC_MspInit+0x44>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d113      	bne.n	800527e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005256:	4b0d      	ldr	r3, [pc, #52]	; (800528c <HAL_TIM_OC_MspInit+0x48>)
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	4a0c      	ldr	r2, [pc, #48]	; (800528c <HAL_TIM_OC_MspInit+0x48>)
 800525c:	f043 0304 	orr.w	r3, r3, #4
 8005260:	61d3      	str	r3, [r2, #28]
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <HAL_TIM_OC_MspInit+0x48>)
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800526e:	2200      	movs	r2, #0
 8005270:	2100      	movs	r1, #0
 8005272:	201e      	movs	r0, #30
 8005274:	f001 fc2d 	bl	8006ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005278:	201e      	movs	r0, #30
 800527a:	f001 fc46 	bl	8006b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800527e:	bf00      	nop
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40000800 	.word	0x40000800
 800528c:	40021000 	.word	0x40021000

08005290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	; 0x28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005298:	f107 0314 	add.w	r3, r7, #20
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	60da      	str	r2, [r3, #12]
 80052a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b0:	d11d      	bne.n	80052ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b2:	4b22      	ldr	r3, [pc, #136]	; (800533c <HAL_TIM_MspPostInit+0xac>)
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	4a21      	ldr	r2, [pc, #132]	; (800533c <HAL_TIM_MspPostInit+0xac>)
 80052b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052bc:	6153      	str	r3, [r2, #20]
 80052be:	4b1f      	ldr	r3, [pc, #124]	; (800533c <HAL_TIM_MspPostInit+0xac>)
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80052ca:	2303      	movs	r3, #3
 80052cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ce:	2302      	movs	r3, #2
 80052d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d6:	2300      	movs	r3, #0
 80052d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80052da:	2301      	movs	r3, #1
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052de:	f107 0314 	add.w	r3, r7, #20
 80052e2:	4619      	mov	r1, r3
 80052e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052e8:	f001 fe54 	bl	8006f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80052ec:	e021      	b.n	8005332 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a13      	ldr	r2, [pc, #76]	; (8005340 <HAL_TIM_MspPostInit+0xb0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d11c      	bne.n	8005332 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052f8:	4b10      	ldr	r3, [pc, #64]	; (800533c <HAL_TIM_MspPostInit+0xac>)
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	4a0f      	ldr	r2, [pc, #60]	; (800533c <HAL_TIM_MspPostInit+0xac>)
 80052fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005302:	6153      	str	r3, [r2, #20]
 8005304:	4b0d      	ldr	r3, [pc, #52]	; (800533c <HAL_TIM_MspPostInit+0xac>)
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005310:	23c0      	movs	r3, #192	; 0xc0
 8005312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005314:	2302      	movs	r3, #2
 8005316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800531c:	2300      	movs	r3, #0
 800531e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005320:	2302      	movs	r3, #2
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005324:	f107 0314 	add.w	r3, r7, #20
 8005328:	4619      	mov	r1, r3
 800532a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800532e:	f001 fe31 	bl	8006f94 <HAL_GPIO_Init>
}
 8005332:	bf00      	nop
 8005334:	3728      	adds	r7, #40	; 0x28
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000
 8005340:	40000400 	.word	0x40000400

08005344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08c      	sub	sp, #48	; 0x30
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800534c:	f107 031c 	add.w	r3, r7, #28
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a36      	ldr	r2, [pc, #216]	; (800543c <HAL_UART_MspInit+0xf8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d130      	bne.n	80053c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005366:	4b36      	ldr	r3, [pc, #216]	; (8005440 <HAL_UART_MspInit+0xfc>)
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	4a35      	ldr	r2, [pc, #212]	; (8005440 <HAL_UART_MspInit+0xfc>)
 800536c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005370:	6193      	str	r3, [r2, #24]
 8005372:	4b33      	ldr	r3, [pc, #204]	; (8005440 <HAL_UART_MspInit+0xfc>)
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800537e:	4b30      	ldr	r3, [pc, #192]	; (8005440 <HAL_UART_MspInit+0xfc>)
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	4a2f      	ldr	r2, [pc, #188]	; (8005440 <HAL_UART_MspInit+0xfc>)
 8005384:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005388:	6153      	str	r3, [r2, #20]
 800538a:	4b2d      	ldr	r3, [pc, #180]	; (8005440 <HAL_UART_MspInit+0xfc>)
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005396:	2330      	movs	r3, #48	; 0x30
 8005398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539a:	2302      	movs	r3, #2
 800539c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053a2:	2303      	movs	r3, #3
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053a6:	2307      	movs	r3, #7
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053aa:	f107 031c 	add.w	r3, r7, #28
 80053ae:	4619      	mov	r1, r3
 80053b0:	4824      	ldr	r0, [pc, #144]	; (8005444 <HAL_UART_MspInit+0x100>)
 80053b2:	f001 fdef 	bl	8006f94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80053b6:	2200      	movs	r2, #0
 80053b8:	2100      	movs	r1, #0
 80053ba:	2025      	movs	r0, #37	; 0x25
 80053bc:	f001 fb89 	bl	8006ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053c0:	2025      	movs	r0, #37	; 0x25
 80053c2:	f001 fba2 	bl	8006b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80053c6:	e035      	b.n	8005434 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <HAL_UART_MspInit+0x104>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d130      	bne.n	8005434 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80053d2:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	4a1a      	ldr	r2, [pc, #104]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053dc:	61d3      	str	r3, [r2, #28]
 80053de:	4b18      	ldr	r3, [pc, #96]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ea:	4b15      	ldr	r3, [pc, #84]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	4a14      	ldr	r2, [pc, #80]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f4:	6153      	str	r3, [r2, #20]
 80053f6:	4b12      	ldr	r3, [pc, #72]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005402:	230c      	movs	r3, #12
 8005404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005406:	2302      	movs	r3, #2
 8005408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540a:	2300      	movs	r3, #0
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800540e:	2303      	movs	r3, #3
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005412:	2307      	movs	r3, #7
 8005414:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005416:	f107 031c 	add.w	r3, r7, #28
 800541a:	4619      	mov	r1, r3
 800541c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005420:	f001 fdb8 	bl	8006f94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005424:	2200      	movs	r2, #0
 8005426:	2100      	movs	r1, #0
 8005428:	2026      	movs	r0, #38	; 0x26
 800542a:	f001 fb52 	bl	8006ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800542e:	2026      	movs	r0, #38	; 0x26
 8005430:	f001 fb6b 	bl	8006b0a <HAL_NVIC_EnableIRQ>
}
 8005434:	bf00      	nop
 8005436:	3730      	adds	r7, #48	; 0x30
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40013800 	.word	0x40013800
 8005440:	40021000 	.word	0x40021000
 8005444:	48000800 	.word	0x48000800
 8005448:	40004400 	.word	0x40004400

0800544c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005450:	e7fe      	b.n	8005450 <NMI_Handler+0x4>

08005452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005452:	b480      	push	{r7}
 8005454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005456:	e7fe      	b.n	8005456 <HardFault_Handler+0x4>

08005458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800545c:	e7fe      	b.n	800545c <MemManage_Handler+0x4>

0800545e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800545e:	b480      	push	{r7}
 8005460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005462:	e7fe      	b.n	8005462 <BusFault_Handler+0x4>

08005464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005468:	e7fe      	b.n	8005468 <UsageFault_Handler+0x4>

0800546a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800546a:	b480      	push	{r7}
 800546c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800546e:	bf00      	nop
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800547c:	bf00      	nop
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005486:	b480      	push	{r7}
 8005488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800548a:	bf00      	nop
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005498:	f000 f99c 	bl	80057d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800549c:	bf00      	nop
 800549e:	bd80      	pop	{r7, pc}

080054a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(lora_DIO1_PIN_Pin);
 80054a4:	2001      	movs	r0, #1
 80054a6:	f001 ff31 	bl	800730c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80054aa:	bf00      	nop
 80054ac:	bd80      	pop	{r7, pc}

080054ae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(lora_DIO2_PIN_Pin);
 80054b2:	2002      	movs	r0, #2
 80054b4:	f001 ff2a 	bl	800730c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80054b8:	bf00      	nop
 80054ba:	bd80      	pop	{r7, pc}

080054bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80054c0:	4802      	ldr	r0, [pc, #8]	; (80054cc <DMA1_Channel1_IRQHandler+0x10>)
 80054c2:	f001 fc59 	bl	8006d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80054c6:	bf00      	nop
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	200006d4 	.word	0x200006d4

080054d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80054d4:	4802      	ldr	r0, [pc, #8]	; (80054e0 <DMA1_Channel2_IRQHandler+0x10>)
 80054d6:	f001 fc4f 	bl	8006d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80054da:	bf00      	nop
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000834 	.word	0x20000834

080054e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(lora_DIO0_PIN_Pin);
 80054e8:	2080      	movs	r0, #128	; 0x80
 80054ea:	f001 ff0f 	bl	800730c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80054ee:	bf00      	nop
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80054f8:	4802      	ldr	r0, [pc, #8]	; (8005504 <TIM4_IRQHandler+0x10>)
 80054fa:	f005 fbb3 	bl	800ac64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80054fe:	bf00      	nop
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000910 	.word	0x20000910

08005508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800550c:	4802      	ldr	r0, [pc, #8]	; (8005518 <USART1_IRQHandler+0x10>)
 800550e:	f006 fd73 	bl	800bff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005512:	bf00      	nop
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	200009f4 	.word	0x200009f4

0800551c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005520:	4802      	ldr	r0, [pc, #8]	; (800552c <USART2_IRQHandler+0x10>)
 8005522:	f006 fd69 	bl	800bff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000a7c 	.word	0x20000a7c

08005530 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005534:	4802      	ldr	r0, [pc, #8]	; (8005540 <TIM7_IRQHandler+0x10>)
 8005536:	f005 fb95 	bl	800ac64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800553a:	bf00      	nop
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	2000095c 	.word	0x2000095c

08005544 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  return 1;
 8005548:	2301      	movs	r3, #1
}
 800554a:	4618      	mov	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <_kill>:

int _kill(int pid, int sig)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800555e:	f00e fa7f 	bl	8013a60 <__errno>
 8005562:	4603      	mov	r3, r0
 8005564:	2216      	movs	r2, #22
 8005566:	601a      	str	r2, [r3, #0]
  return -1;
 8005568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <_exit>:

void _exit (int status)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800557c:	f04f 31ff 	mov.w	r1, #4294967295
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff ffe7 	bl	8005554 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005586:	e7fe      	b.n	8005586 <_exit+0x12>

08005588 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	e00a      	b.n	80055b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800559a:	f3af 8000 	nop.w
 800559e:	4601      	mov	r1, r0
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	60ba      	str	r2, [r7, #8]
 80055a6:	b2ca      	uxtb	r2, r1
 80055a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	3301      	adds	r3, #1
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	dbf0      	blt.n	800559a <_read+0x12>
  }

  return len;
 80055b8:	687b      	ldr	r3, [r7, #4]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b086      	sub	sp, #24
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e009      	b.n	80055e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	60ba      	str	r2, [r7, #8]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	3301      	adds	r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	dbf1      	blt.n	80055d4 <_write+0x12>
  }
  return len;
 80055f0:	687b      	ldr	r3, [r7, #4]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <_close>:

int _close(int file)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005622:	605a      	str	r2, [r3, #4]
  return 0;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <_isatty>:

int _isatty(int file)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800563a:	2301      	movs	r3, #1
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
	...

08005664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800566c:	4a14      	ldr	r2, [pc, #80]	; (80056c0 <_sbrk+0x5c>)
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <_sbrk+0x60>)
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005678:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <_sbrk+0x64>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005680:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <_sbrk+0x64>)
 8005682:	4a12      	ldr	r2, [pc, #72]	; (80056cc <_sbrk+0x68>)
 8005684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005686:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <_sbrk+0x64>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	429a      	cmp	r2, r3
 8005692:	d207      	bcs.n	80056a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005694:	f00e f9e4 	bl	8013a60 <__errno>
 8005698:	4603      	mov	r3, r0
 800569a:	220c      	movs	r2, #12
 800569c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800569e:	f04f 33ff 	mov.w	r3, #4294967295
 80056a2:	e009      	b.n	80056b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056a4:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <_sbrk+0x64>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056aa:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <_sbrk+0x64>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4413      	add	r3, r2
 80056b2:	4a05      	ldr	r2, [pc, #20]	; (80056c8 <_sbrk+0x64>)
 80056b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056b6:	68fb      	ldr	r3, [r7, #12]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20010000 	.word	0x20010000
 80056c4:	00000400 	.word	0x00000400
 80056c8:	20000b3c 	.word	0x20000b3c
 80056cc:	20000eb8 	.word	0x20000eb8

080056d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <SystemInit+0x20>)
 80056d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056da:	4a05      	ldr	r2, [pc, #20]	; (80056f0 <SystemInit+0x20>)
 80056dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000ed00 	.word	0xe000ed00

080056f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80056f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800572c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80056f8:	f7ff ffea 	bl	80056d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056fc:	480c      	ldr	r0, [pc, #48]	; (8005730 <LoopForever+0x6>)
  ldr r1, =_edata
 80056fe:	490d      	ldr	r1, [pc, #52]	; (8005734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005700:	4a0d      	ldr	r2, [pc, #52]	; (8005738 <LoopForever+0xe>)
  movs r3, #0
 8005702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005704:	e002      	b.n	800570c <LoopCopyDataInit>

08005706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800570a:	3304      	adds	r3, #4

0800570c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800570c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800570e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005710:	d3f9      	bcc.n	8005706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005712:	4a0a      	ldr	r2, [pc, #40]	; (800573c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005714:	4c0a      	ldr	r4, [pc, #40]	; (8005740 <LoopForever+0x16>)
  movs r3, #0
 8005716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005718:	e001      	b.n	800571e <LoopFillZerobss>

0800571a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800571a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800571c:	3204      	adds	r2, #4

0800571e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800571e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005720:	d3fb      	bcc.n	800571a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005722:	f00e f9a3 	bl	8013a6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005726:	f7fe fb45 	bl	8003db4 <main>

0800572a <LoopForever>:

LoopForever:
    b LoopForever
 800572a:	e7fe      	b.n	800572a <LoopForever>
	ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800572c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005734:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 8005738:	08019f30 	.word	0x08019f30
  ldr r2, =_sbss
 800573c:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 8005740:	20000eb8 	.word	0x20000eb8

08005744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005744:	e7fe      	b.n	8005744 <ADC1_2_IRQHandler>
	...

08005748 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800574c:	4b08      	ldr	r3, [pc, #32]	; (8005770 <HAL_Init+0x28>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a07      	ldr	r2, [pc, #28]	; (8005770 <HAL_Init+0x28>)
 8005752:	f043 0310 	orr.w	r3, r3, #16
 8005756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005758:	2003      	movs	r0, #3
 800575a:	f001 f9af 	bl	8006abc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800575e:	2000      	movs	r0, #0
 8005760:	f000 f808 	bl	8005774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005764:	f7ff fb7e 	bl	8004e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40022000 	.word	0x40022000

08005774 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800577c:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <HAL_InitTick+0x54>)
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	4b12      	ldr	r3, [pc, #72]	; (80057cc <HAL_InitTick+0x58>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	4619      	mov	r1, r3
 8005786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800578a:	fbb3 f3f1 	udiv	r3, r3, r1
 800578e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005792:	4618      	mov	r0, r3
 8005794:	f001 f9c7 	bl	8006b26 <HAL_SYSTICK_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e00e      	b.n	80057c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b0f      	cmp	r3, #15
 80057a6:	d80a      	bhi.n	80057be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057a8:	2200      	movs	r2, #0
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	f001 f98f 	bl	8006ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057b4:	4a06      	ldr	r2, [pc, #24]	; (80057d0 <HAL_InitTick+0x5c>)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	e000      	b.n	80057c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	20000150 	.word	0x20000150
 80057cc:	20000158 	.word	0x20000158
 80057d0:	20000154 	.word	0x20000154

080057d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057d8:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <HAL_IncTick+0x20>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_IncTick+0x24>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4413      	add	r3, r2
 80057e4:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <HAL_IncTick+0x24>)
 80057e6:	6013      	str	r3, [r2, #0]
}
 80057e8:	bf00      	nop
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000158 	.word	0x20000158
 80057f8:	20000b40 	.word	0x20000b40

080057fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8005800:	4b03      	ldr	r3, [pc, #12]	; (8005810 <HAL_GetTick+0x14>)
 8005802:	681b      	ldr	r3, [r3, #0]
}
 8005804:	4618      	mov	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20000b40 	.word	0x20000b40

08005814 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800581c:	f7ff ffee 	bl	80057fc <HAL_GetTick>
 8005820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582c:	d005      	beq.n	800583a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800582e:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <HAL_Delay+0x44>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800583a:	bf00      	nop
 800583c:	f7ff ffde 	bl	80057fc <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	429a      	cmp	r2, r3
 800584a:	d8f7      	bhi.n	800583c <HAL_Delay+0x28>
  {
  }
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000158 	.word	0x20000158

0800585c <HAL_SuspendTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_SuspendTick+0x1c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a04      	ldr	r2, [pc, #16]	; (8005878 <HAL_SuspendTick+0x1c>)
 8005866:	f023 0302 	bic.w	r3, r3, #2
 800586a:	6013      	str	r3, [r2, #0]
                                                   
}
 800586c:	bf00      	nop
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	e000e010 	.word	0xe000e010

0800587c <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <HAL_ResumeTick+0x1c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a04      	ldr	r2, [pc, #16]	; (8005898 <HAL_ResumeTick+0x1c>)
 8005886:	f043 0302 	orr.w	r3, r3, #2
 800588a:	6013      	str	r3, [r2, #0]
  
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	e000e010 	.word	0xe000e010

0800589c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b09a      	sub	sp, #104	; 0x68
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e1e3      	b.n	8005cc0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b00      	cmp	r3, #0
 8005908:	d176      	bne.n	80059f8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d152      	bne.n	80059b8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff fabd 	bl	8004eac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d13b      	bne.n	80059b8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 ff85 	bl	8006850 <ADC_Disable>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b00      	cmp	r3, #0
 8005956:	d12f      	bne.n	80059b8 <HAL_ADC_Init+0xe0>
 8005958:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800595c:	2b00      	cmp	r3, #0
 800595e:	d12b      	bne.n	80059b8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005968:	f023 0302 	bic.w	r3, r3, #2
 800596c:	f043 0202 	orr.w	r2, r3, #2
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005982:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005992:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005994:	4b92      	ldr	r3, [pc, #584]	; (8005be0 <HAL_ADC_Init+0x308>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a92      	ldr	r2, [pc, #584]	; (8005be4 <HAL_ADC_Init+0x30c>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	0c9a      	lsrs	r2, r3, #18
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80059aa:	e002      	b.n	80059b2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1f9      	bne.n	80059ac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80059d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059d4:	d110      	bne.n	80059f8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f023 0312 	bic.w	r3, r3, #18
 80059de:	f043 0210 	orr.w	r2, r3, #16
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	f043 0201 	orr.w	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f040 8150 	bne.w	8005ca6 <HAL_ADC_Init+0x3ce>
 8005a06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f040 814b 	bne.w	8005ca6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f040 8143 	bne.w	8005ca6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005a28:	f043 0202 	orr.w	r2, r3, #2
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a38:	d004      	beq.n	8005a44 <HAL_ADC_Init+0x16c>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a6a      	ldr	r2, [pc, #424]	; (8005be8 <HAL_ADC_Init+0x310>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d101      	bne.n	8005a48 <HAL_ADC_Init+0x170>
 8005a44:	4b69      	ldr	r3, [pc, #420]	; (8005bec <HAL_ADC_Init+0x314>)
 8005a46:	e000      	b.n	8005a4a <HAL_ADC_Init+0x172>
 8005a48:	4b69      	ldr	r3, [pc, #420]	; (8005bf0 <HAL_ADC_Init+0x318>)
 8005a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a54:	d102      	bne.n	8005a5c <HAL_ADC_Init+0x184>
 8005a56:	4b64      	ldr	r3, [pc, #400]	; (8005be8 <HAL_ADC_Init+0x310>)
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e01a      	b.n	8005a92 <HAL_ADC_Init+0x1ba>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a61      	ldr	r2, [pc, #388]	; (8005be8 <HAL_ADC_Init+0x310>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d103      	bne.n	8005a6e <HAL_ADC_Init+0x196>
 8005a66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	e011      	b.n	8005a92 <HAL_ADC_Init+0x1ba>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a60      	ldr	r2, [pc, #384]	; (8005bf4 <HAL_ADC_Init+0x31c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d102      	bne.n	8005a7e <HAL_ADC_Init+0x1a6>
 8005a78:	4b5f      	ldr	r3, [pc, #380]	; (8005bf8 <HAL_ADC_Init+0x320>)
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	e009      	b.n	8005a92 <HAL_ADC_Init+0x1ba>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a5d      	ldr	r2, [pc, #372]	; (8005bf8 <HAL_ADC_Init+0x320>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d102      	bne.n	8005a8e <HAL_ADC_Init+0x1b6>
 8005a88:	4b5a      	ldr	r3, [pc, #360]	; (8005bf4 <HAL_ADC_Init+0x31c>)
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	e001      	b.n	8005a92 <HAL_ADC_Init+0x1ba>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d108      	bne.n	8005ab2 <HAL_ADC_Init+0x1da>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_ADC_Init+0x1da>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <HAL_ADC_Init+0x1dc>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d11c      	bne.n	8005af2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005ab8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d010      	beq.n	8005ae0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d107      	bne.n	8005ada <HAL_ADC_Init+0x202>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_ADC_Init+0x202>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <HAL_ADC_Init+0x204>
 8005ada:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d108      	bne.n	8005af2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8005ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005af0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	7e5b      	ldrb	r3, [r3, #25]
 8005af6:	035b      	lsls	r3, r3, #13
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005afc:	2a01      	cmp	r2, #1
 8005afe:	d002      	beq.n	8005b06 <HAL_ADC_Init+0x22e>
 8005b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b04:	e000      	b.n	8005b08 <HAL_ADC_Init+0x230>
 8005b06:	2200      	movs	r2, #0
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d11b      	bne.n	8005b5e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	7e5b      	ldrb	r3, [r3, #25]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	3b01      	subs	r3, #1
 8005b34:	045a      	lsls	r2, r3, #17
 8005b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3e:	663b      	str	r3, [r7, #96]	; 0x60
 8005b40:	e00d      	b.n	8005b5e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b4a:	f043 0220 	orr.w	r2, r3, #32
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b56:	f043 0201 	orr.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d054      	beq.n	8005c10 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a22      	ldr	r2, [pc, #136]	; (8005bf4 <HAL_ADC_Init+0x31c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_ADC_Init+0x2a2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a20      	ldr	r2, [pc, #128]	; (8005bf8 <HAL_ADC_Init+0x320>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d140      	bne.n	8005bfc <HAL_ADC_Init+0x324>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8005b82:	d02a      	beq.n	8005bda <HAL_ADC_Init+0x302>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8c:	d022      	beq.n	8005bd4 <HAL_ADC_Init+0x2fc>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005b96:	d01a      	beq.n	8005bce <HAL_ADC_Init+0x2f6>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8005ba0:	d012      	beq.n	8005bc8 <HAL_ADC_Init+0x2f0>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8005baa:	d00a      	beq.n	8005bc2 <HAL_ADC_Init+0x2ea>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8005bb4:	d002      	beq.n	8005bbc <HAL_ADC_Init+0x2e4>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	e023      	b.n	8005c04 <HAL_ADC_Init+0x32c>
 8005bbc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005bc0:	e020      	b.n	8005c04 <HAL_ADC_Init+0x32c>
 8005bc2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005bc6:	e01d      	b.n	8005c04 <HAL_ADC_Init+0x32c>
 8005bc8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005bcc:	e01a      	b.n	8005c04 <HAL_ADC_Init+0x32c>
 8005bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bd2:	e017      	b.n	8005c04 <HAL_ADC_Init+0x32c>
 8005bd4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8005bd8:	e014      	b.n	8005c04 <HAL_ADC_Init+0x32c>
 8005bda:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005bde:	e011      	b.n	8005c04 <HAL_ADC_Init+0x32c>
 8005be0:	20000150 	.word	0x20000150
 8005be4:	431bde83 	.word	0x431bde83
 8005be8:	50000100 	.word	0x50000100
 8005bec:	50000300 	.word	0x50000300
 8005bf0:	50000700 	.word	0x50000700
 8005bf4:	50000400 	.word	0x50000400
 8005bf8:	50000500 	.word	0x50000500
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 030c 	and.w	r3, r3, #12
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d114      	bne.n	8005c48 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6812      	ldr	r2, [r2, #0]
 8005c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c2c:	f023 0302 	bic.w	r3, r3, #2
 8005c30:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	7e1b      	ldrb	r3, [r3, #24]
 8005c36:	039a      	lsls	r2, r3, #14
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	4313      	orrs	r3, r2
 8005c42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c44:	4313      	orrs	r3, r2
 8005c46:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	4b1e      	ldr	r3, [pc, #120]	; (8005cc8 <HAL_ADC_Init+0x3f0>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10c      	bne.n	8005c7e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	f023 010f 	bic.w	r1, r3, #15
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	1e5a      	subs	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c7c:	e007      	b.n	8005c8e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 020f 	bic.w	r2, r2, #15
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	f023 0303 	bic.w	r3, r3, #3
 8005c9c:	f043 0201 	orr.w	r2, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ca4:	e00a      	b.n	8005cbc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f023 0312 	bic.w	r3, r3, #18
 8005cae:	f043 0210 	orr.w	r2, r3, #16
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8005cbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3768      	adds	r7, #104	; 0x68
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	fff0c007 	.word	0xfff0c007

08005ccc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f040 80f7 	bne.w	8005eda <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <HAL_ADC_Start_DMA+0x2e>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	e0f2      	b.n	8005ee0 <HAL_ADC_Start_DMA+0x214>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d0a:	d004      	beq.n	8005d16 <HAL_ADC_Start_DMA+0x4a>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a75      	ldr	r2, [pc, #468]	; (8005ee8 <HAL_ADC_Start_DMA+0x21c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d109      	bne.n	8005d2a <HAL_ADC_Start_DMA+0x5e>
 8005d16:	4b75      	ldr	r3, [pc, #468]	; (8005eec <HAL_ADC_Start_DMA+0x220>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 031f 	and.w	r3, r3, #31
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	e008      	b.n	8005d3c <HAL_ADC_Start_DMA+0x70>
 8005d2a:	4b71      	ldr	r3, [pc, #452]	; (8005ef0 <HAL_ADC_Start_DMA+0x224>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 031f 	and.w	r3, r3, #31
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bf0c      	ite	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	2300      	movne	r3, #0
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80c5 	beq.w	8005ecc <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 fd20 	bl	8006788 <ADC_Enable>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f040 80b7 	bne.w	8005ec2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d70:	d004      	beq.n	8005d7c <HAL_ADC_Start_DMA+0xb0>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a5c      	ldr	r2, [pc, #368]	; (8005ee8 <HAL_ADC_Start_DMA+0x21c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d106      	bne.n	8005d8a <HAL_ADC_Start_DMA+0xbe>
 8005d7c:	4b5b      	ldr	r3, [pc, #364]	; (8005eec <HAL_ADC_Start_DMA+0x220>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 031f 	and.w	r3, r3, #31
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d010      	beq.n	8005daa <HAL_ADC_Start_DMA+0xde>
 8005d88:	e005      	b.n	8005d96 <HAL_ADC_Start_DMA+0xca>
 8005d8a:	4b59      	ldr	r3, [pc, #356]	; (8005ef0 <HAL_ADC_Start_DMA+0x224>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 031f 	and.w	r3, r3, #31
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <HAL_ADC_Start_DMA+0xde>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d9e:	d004      	beq.n	8005daa <HAL_ADC_Start_DMA+0xde>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a53      	ldr	r2, [pc, #332]	; (8005ef4 <HAL_ADC_Start_DMA+0x228>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d115      	bne.n	8005dd6 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d036      	beq.n	8005e32 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005dcc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005dd4:	e02d      	b.n	8005e32 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dea:	d004      	beq.n	8005df6 <HAL_ADC_Start_DMA+0x12a>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a3d      	ldr	r2, [pc, #244]	; (8005ee8 <HAL_ADC_Start_DMA+0x21c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10a      	bne.n	8005e0c <HAL_ADC_Start_DMA+0x140>
 8005df6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bf14      	ite	ne
 8005e04:	2301      	movne	r3, #1
 8005e06:	2300      	moveq	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	e008      	b.n	8005e1e <HAL_ADC_Start_DMA+0x152>
 8005e0c:	4b39      	ldr	r3, [pc, #228]	; (8005ef4 <HAL_ADC_Start_DMA+0x228>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bf14      	ite	ne
 8005e18:	2301      	movne	r3, #1
 8005e1a:	2300      	moveq	r3, #0
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3e:	d106      	bne.n	8005e4e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e44:	f023 0206 	bic.w	r2, r3, #6
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	645a      	str	r2, [r3, #68]	; 0x44
 8005e4c:	e002      	b.n	8005e54 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	4a25      	ldr	r2, [pc, #148]	; (8005ef8 <HAL_ADC_Start_DMA+0x22c>)
 8005e62:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e68:	4a24      	ldr	r2, [pc, #144]	; (8005efc <HAL_ADC_Start_DMA+0x230>)
 8005e6a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	4a23      	ldr	r2, [pc, #140]	; (8005f00 <HAL_ADC_Start_DMA+0x234>)
 8005e72:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	221c      	movs	r2, #28
 8005e7a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0210 	orr.w	r2, r2, #16
 8005e8a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3340      	adds	r3, #64	; 0x40
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f000 fe8e 	bl	8006bcc <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0204 	orr.w	r2, r2, #4
 8005ebe:	609a      	str	r2, [r3, #8]
 8005ec0:	e00d      	b.n	8005ede <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005eca:	e008      	b.n	8005ede <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ed8:	e001      	b.n	8005ede <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005eda:	2302      	movs	r3, #2
 8005edc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	50000100 	.word	0x50000100
 8005eec:	50000300 	.word	0x50000300
 8005ef0:	50000700 	.word	0x50000700
 8005ef4:	50000400 	.word	0x50000400
 8005ef8:	080066bd 	.word	0x080066bd
 8005efc:	08006737 	.word	0x08006737
 8005f00:	08006753 	.word	0x08006753

08005f04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b09b      	sub	sp, #108	; 0x6c
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_ADC_ConfigChannel+0x22>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e2c8      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x5b4>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f040 82ac 	bne.w	8006496 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d81c      	bhi.n	8005f80 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	4613      	mov	r3, r2
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	4413      	add	r3, r2
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	461a      	mov	r2, r3
 8005f5a:	231f      	movs	r3, #31
 8005f5c:	4093      	lsls	r3, r2
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	4019      	ands	r1, r3
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	4413      	add	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	fa00 f203 	lsl.w	r2, r0, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
 8005f7e:	e063      	b.n	8006048 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b09      	cmp	r3, #9
 8005f86:	d81e      	bhi.n	8005fc6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	4413      	add	r3, r2
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	3b1e      	subs	r3, #30
 8005f9c:	221f      	movs	r2, #31
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	4019      	ands	r1, r3
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	4413      	add	r3, r2
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	3b1e      	subs	r3, #30
 8005fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	635a      	str	r2, [r3, #52]	; 0x34
 8005fc4:	e040      	b.n	8006048 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b0e      	cmp	r3, #14
 8005fcc:	d81e      	bhi.n	800600c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	4413      	add	r3, r2
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	3b3c      	subs	r3, #60	; 0x3c
 8005fe2:	221f      	movs	r2, #31
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	4019      	ands	r1, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	4413      	add	r3, r2
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	3b3c      	subs	r3, #60	; 0x3c
 8005ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	639a      	str	r2, [r3, #56]	; 0x38
 800600a:	e01d      	b.n	8006048 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4413      	add	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	3b5a      	subs	r3, #90	; 0x5a
 8006020:	221f      	movs	r2, #31
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	43db      	mvns	r3, r3
 8006028:	4019      	ands	r1, r3
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	4613      	mov	r3, r2
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4413      	add	r3, r2
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	3b5a      	subs	r3, #90	; 0x5a
 800603c:	fa00 f203 	lsl.w	r2, r0, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 030c 	and.w	r3, r3, #12
 8006052:	2b00      	cmp	r3, #0
 8006054:	f040 80e5 	bne.w	8006222 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b09      	cmp	r3, #9
 800605e:	d91c      	bls.n	800609a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6999      	ldr	r1, [r3, #24]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4613      	mov	r3, r2
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	4413      	add	r3, r2
 8006070:	3b1e      	subs	r3, #30
 8006072:	2207      	movs	r2, #7
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	43db      	mvns	r3, r3
 800607a:	4019      	ands	r1, r3
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	6898      	ldr	r0, [r3, #8]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	4413      	add	r3, r2
 800608a:	3b1e      	subs	r3, #30
 800608c:	fa00 f203 	lsl.w	r2, r0, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	619a      	str	r2, [r3, #24]
 8006098:	e019      	b.n	80060ce <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6959      	ldr	r1, [r3, #20]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	4613      	mov	r3, r2
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	4413      	add	r3, r2
 80060aa:	2207      	movs	r2, #7
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	4019      	ands	r1, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	6898      	ldr	r0, [r3, #8]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	4613      	mov	r3, r2
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	4413      	add	r3, r2
 80060c2:	fa00 f203 	lsl.w	r2, r0, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695a      	ldr	r2, [r3, #20]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	08db      	lsrs	r3, r3, #3
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d84f      	bhi.n	8006190 <HAL_ADC_ConfigChannel+0x28c>
 80060f0:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <HAL_ADC_ConfigChannel+0x1f4>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	08006109 	.word	0x08006109
 80060fc:	0800612b 	.word	0x0800612b
 8006100:	0800614d 	.word	0x0800614d
 8006104:	0800616f 	.word	0x0800616f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800610e:	4b99      	ldr	r3, [pc, #612]	; (8006374 <HAL_ADC_ConfigChannel+0x470>)
 8006110:	4013      	ands	r3, r2
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	6812      	ldr	r2, [r2, #0]
 8006116:	0691      	lsls	r1, r2, #26
 8006118:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800611a:	430a      	orrs	r2, r1
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006126:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006128:	e07b      	b.n	8006222 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006130:	4b90      	ldr	r3, [pc, #576]	; (8006374 <HAL_ADC_ConfigChannel+0x470>)
 8006132:	4013      	ands	r3, r2
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	0691      	lsls	r1, r2, #26
 800613a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800613c:	430a      	orrs	r2, r1
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006148:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800614a:	e06a      	b.n	8006222 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006152:	4b88      	ldr	r3, [pc, #544]	; (8006374 <HAL_ADC_ConfigChannel+0x470>)
 8006154:	4013      	ands	r3, r2
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	0691      	lsls	r1, r2, #26
 800615c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800615e:	430a      	orrs	r2, r1
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800616a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800616c:	e059      	b.n	8006222 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006174:	4b7f      	ldr	r3, [pc, #508]	; (8006374 <HAL_ADC_ConfigChannel+0x470>)
 8006176:	4013      	ands	r3, r2
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	0691      	lsls	r1, r2, #26
 800617e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006180:	430a      	orrs	r2, r1
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800618c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800618e:	e048      	b.n	8006222 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006196:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	069b      	lsls	r3, r3, #26
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d107      	bne.n	80061b4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80061b2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	069b      	lsls	r3, r3, #26
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d107      	bne.n	80061d8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80061d6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	069b      	lsls	r3, r3, #26
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d107      	bne.n	80061fc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80061fa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	069b      	lsls	r3, r3, #26
 800620c:	429a      	cmp	r2, r3
 800620e:	d107      	bne.n	8006220 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800621e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8006220:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	2b01      	cmp	r3, #1
 800622e:	d108      	bne.n	8006242 <HAL_ADC_ConfigChannel+0x33e>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_ADC_ConfigChannel+0x33e>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <HAL_ADC_ConfigChannel+0x340>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	f040 8131 	bne.w	80064ac <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d00f      	beq.n	8006272 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2201      	movs	r2, #1
 8006260:	fa02 f303 	lsl.w	r3, r2, r3
 8006264:	43da      	mvns	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	400a      	ands	r2, r1
 800626c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8006270:	e049      	b.n	8006306 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2201      	movs	r2, #1
 8006280:	409a      	lsls	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b09      	cmp	r3, #9
 8006292:	d91c      	bls.n	80062ce <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6999      	ldr	r1, [r3, #24]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4613      	mov	r3, r2
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	4413      	add	r3, r2
 80062a4:	3b1b      	subs	r3, #27
 80062a6:	2207      	movs	r2, #7
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	43db      	mvns	r3, r3
 80062ae:	4019      	ands	r1, r3
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	6898      	ldr	r0, [r3, #8]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4613      	mov	r3, r2
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	4413      	add	r3, r2
 80062be:	3b1b      	subs	r3, #27
 80062c0:	fa00 f203 	lsl.w	r2, r0, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	619a      	str	r2, [r3, #24]
 80062cc:	e01b      	b.n	8006306 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6959      	ldr	r1, [r3, #20]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	4613      	mov	r3, r2
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	4413      	add	r3, r2
 80062e0:	2207      	movs	r2, #7
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	43db      	mvns	r3, r3
 80062e8:	4019      	ands	r1, r3
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6898      	ldr	r0, [r3, #8]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	4613      	mov	r3, r2
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	4413      	add	r3, r2
 80062fa:	fa00 f203 	lsl.w	r2, r0, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800630e:	d004      	beq.n	800631a <HAL_ADC_ConfigChannel+0x416>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a18      	ldr	r2, [pc, #96]	; (8006378 <HAL_ADC_ConfigChannel+0x474>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d101      	bne.n	800631e <HAL_ADC_ConfigChannel+0x41a>
 800631a:	4b18      	ldr	r3, [pc, #96]	; (800637c <HAL_ADC_ConfigChannel+0x478>)
 800631c:	e000      	b.n	8006320 <HAL_ADC_ConfigChannel+0x41c>
 800631e:	4b18      	ldr	r3, [pc, #96]	; (8006380 <HAL_ADC_ConfigChannel+0x47c>)
 8006320:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b10      	cmp	r3, #16
 8006328:	d105      	bne.n	8006336 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800632a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006332:	2b00      	cmp	r3, #0
 8006334:	d015      	beq.n	8006362 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800633a:	2b11      	cmp	r3, #17
 800633c:	d105      	bne.n	800634a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800633e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00b      	beq.n	8006362 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800634e:	2b12      	cmp	r3, #18
 8006350:	f040 80ac 	bne.w	80064ac <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800635c:	2b00      	cmp	r3, #0
 800635e:	f040 80a5 	bne.w	80064ac <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800636a:	d10b      	bne.n	8006384 <HAL_ADC_ConfigChannel+0x480>
 800636c:	4b02      	ldr	r3, [pc, #8]	; (8006378 <HAL_ADC_ConfigChannel+0x474>)
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e023      	b.n	80063ba <HAL_ADC_ConfigChannel+0x4b6>
 8006372:	bf00      	nop
 8006374:	83fff000 	.word	0x83fff000
 8006378:	50000100 	.word	0x50000100
 800637c:	50000300 	.word	0x50000300
 8006380:	50000700 	.word	0x50000700
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a4e      	ldr	r2, [pc, #312]	; (80064c4 <HAL_ADC_ConfigChannel+0x5c0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d103      	bne.n	8006396 <HAL_ADC_ConfigChannel+0x492>
 800638e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	e011      	b.n	80063ba <HAL_ADC_ConfigChannel+0x4b6>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a4b      	ldr	r2, [pc, #300]	; (80064c8 <HAL_ADC_ConfigChannel+0x5c4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d102      	bne.n	80063a6 <HAL_ADC_ConfigChannel+0x4a2>
 80063a0:	4b4a      	ldr	r3, [pc, #296]	; (80064cc <HAL_ADC_ConfigChannel+0x5c8>)
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	e009      	b.n	80063ba <HAL_ADC_ConfigChannel+0x4b6>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a48      	ldr	r2, [pc, #288]	; (80064cc <HAL_ADC_ConfigChannel+0x5c8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d102      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x4b2>
 80063b0:	4b45      	ldr	r3, [pc, #276]	; (80064c8 <HAL_ADC_ConfigChannel+0x5c4>)
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	e001      	b.n	80063ba <HAL_ADC_ConfigChannel+0x4b6>
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f003 0303 	and.w	r3, r3, #3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d108      	bne.n	80063da <HAL_ADC_ConfigChannel+0x4d6>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <HAL_ADC_ConfigChannel+0x4d6>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <HAL_ADC_ConfigChannel+0x4d8>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d150      	bne.n	8006482 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80063e0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d010      	beq.n	8006408 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d107      	bne.n	8006402 <HAL_ADC_ConfigChannel+0x4fe>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_ADC_ConfigChannel+0x4fe>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <HAL_ADC_ConfigChannel+0x500>
 8006402:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006404:	2b00      	cmp	r3, #0
 8006406:	d13c      	bne.n	8006482 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b10      	cmp	r3, #16
 800640e:	d11d      	bne.n	800644c <HAL_ADC_ConfigChannel+0x548>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006418:	d118      	bne.n	800644c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800641a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006424:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006426:	4b2a      	ldr	r3, [pc, #168]	; (80064d0 <HAL_ADC_ConfigChannel+0x5cc>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a2a      	ldr	r2, [pc, #168]	; (80064d4 <HAL_ADC_ConfigChannel+0x5d0>)
 800642c:	fba2 2303 	umull	r2, r3, r2, r3
 8006430:	0c9a      	lsrs	r2, r3, #18
 8006432:	4613      	mov	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800643c:	e002      	b.n	8006444 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	3b01      	subs	r3, #1
 8006442:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f9      	bne.n	800643e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800644a:	e02e      	b.n	80064aa <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b11      	cmp	r3, #17
 8006452:	d10b      	bne.n	800646c <HAL_ADC_ConfigChannel+0x568>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800645c:	d106      	bne.n	800646c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800645e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006468:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800646a:	e01e      	b.n	80064aa <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b12      	cmp	r3, #18
 8006472:	d11a      	bne.n	80064aa <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800647c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006480:	e013      	b.n	80064aa <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f043 0220 	orr.w	r2, r3, #32
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006494:	e00a      	b.n	80064ac <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	f043 0220 	orr.w	r2, r3, #32
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80064a8:	e000      	b.n	80064ac <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80064aa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80064b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	376c      	adds	r7, #108	; 0x6c
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	50000100 	.word	0x50000100
 80064c8:	50000400 	.word	0x50000400
 80064cc:	50000500 	.word	0x50000500
 80064d0:	20000150 	.word	0x20000150
 80064d4:	431bde83 	.word	0x431bde83

080064d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80064d8:	b480      	push	{r7}
 80064da:	b099      	sub	sp, #100	; 0x64
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064f0:	d102      	bne.n	80064f8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80064f2:	4b6d      	ldr	r3, [pc, #436]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80064f4:	60bb      	str	r3, [r7, #8]
 80064f6:	e01a      	b.n	800652e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a6a      	ldr	r2, [pc, #424]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d103      	bne.n	800650a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8006502:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006506:	60bb      	str	r3, [r7, #8]
 8006508:	e011      	b.n	800652e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a67      	ldr	r2, [pc, #412]	; (80066ac <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d102      	bne.n	800651a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006514:	4b66      	ldr	r3, [pc, #408]	; (80066b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006516:	60bb      	str	r3, [r7, #8]
 8006518:	e009      	b.n	800652e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a64      	ldr	r2, [pc, #400]	; (80066b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d102      	bne.n	800652a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006524:	4b61      	ldr	r3, [pc, #388]	; (80066ac <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006526:	60bb      	str	r3, [r7, #8]
 8006528:	e001      	b.n	800652e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e0b0      	b.n	800669a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8006542:	2302      	movs	r3, #2
 8006544:	e0a9      	b.n	800669a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	f040 808d 	bne.w	8006678 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	f040 8086 	bne.w	8006678 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006574:	d004      	beq.n	8006580 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a4b      	ldr	r2, [pc, #300]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d101      	bne.n	8006584 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006580:	4b4c      	ldr	r3, [pc, #304]	; (80066b4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8006582:	e000      	b.n	8006586 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006584:	4b4c      	ldr	r3, [pc, #304]	; (80066b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8006586:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d040      	beq.n	8006612 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	6859      	ldr	r1, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065a2:	035b      	lsls	r3, r3, #13
 80065a4:	430b      	orrs	r3, r1
 80065a6:	431a      	orrs	r2, r3
 80065a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065aa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d108      	bne.n	80065cc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e000      	b.n	80065ce <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80065cc:	2300      	movs	r3, #0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d15c      	bne.n	800668c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d107      	bne.n	80065ee <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80065ee:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d14b      	bne.n	800668c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80065f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80065fc:	f023 030f 	bic.w	r3, r3, #15
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	6811      	ldr	r1, [r2, #0]
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	6892      	ldr	r2, [r2, #8]
 8006608:	430a      	orrs	r2, r1
 800660a:	431a      	orrs	r2, r3
 800660c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800660e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006610:	e03c      	b.n	800668c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800661a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800661c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	2b01      	cmp	r3, #1
 800662a:	d108      	bne.n	800663e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800663e:	2300      	movs	r3, #0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d123      	bne.n	800668c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 0303 	and.w	r3, r3, #3
 800664c:	2b01      	cmp	r3, #1
 800664e:	d107      	bne.n	8006660 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8006660:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006662:	2b00      	cmp	r3, #0
 8006664:	d112      	bne.n	800668c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8006666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800666e:	f023 030f 	bic.w	r3, r3, #15
 8006672:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006674:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006676:	e009      	b.n	800668c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	f043 0220 	orr.w	r2, r3, #32
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800668a:	e000      	b.n	800668e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800668c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006696:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800669a:	4618      	mov	r0, r3
 800669c:	3764      	adds	r7, #100	; 0x64
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	50000100 	.word	0x50000100
 80066ac:	50000400 	.word	0x50000400
 80066b0:	50000500 	.word	0x50000500
 80066b4:	50000300 	.word	0x50000300
 80066b8:	50000700 	.word	0x50000700

080066bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d126      	bne.n	8006724 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d115      	bne.n	800671c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d111      	bne.n	800671c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d105      	bne.n	800671c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	f043 0201 	orr.w	r2, r3, #1
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f7ff f8bd 	bl	800589c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006722:	e004      	b.n	800672e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
}
 800672e:	bf00      	nop
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f7ff f8b3 	bl	80058b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006770:	f043 0204 	orr.w	r2, r3, #4
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff f8a3 	bl	80058c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800677e:	bf00      	nop
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d108      	bne.n	80067b4 <ADC_Enable+0x2c>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <ADC_Enable+0x2c>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <ADC_Enable+0x2e>
 80067b4:	2300      	movs	r3, #0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d143      	bne.n	8006842 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	4b22      	ldr	r3, [pc, #136]	; (800684c <ADC_Enable+0xc4>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00d      	beq.n	80067e4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067cc:	f043 0210 	orr.w	r2, r3, #16
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d8:	f043 0201 	orr.w	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e02f      	b.n	8006844 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689a      	ldr	r2, [r3, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0201 	orr.w	r2, r2, #1
 80067f2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80067f4:	f7ff f802 	bl	80057fc <HAL_GetTick>
 80067f8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80067fa:	e01b      	b.n	8006834 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80067fc:	f7fe fffe 	bl	80057fc <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d914      	bls.n	8006834 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b01      	cmp	r3, #1
 8006816:	d00d      	beq.n	8006834 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	f043 0210 	orr.w	r2, r3, #16
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	f043 0201 	orr.w	r2, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e007      	b.n	8006844 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b01      	cmp	r3, #1
 8006840:	d1dc      	bne.n	80067fc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	8000003f 	.word	0x8000003f

08006850 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	2b01      	cmp	r3, #1
 8006868:	d108      	bne.n	800687c <ADC_Disable+0x2c>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <ADC_Disable+0x2c>
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <ADC_Disable+0x2e>
 800687c:	2300      	movs	r3, #0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d047      	beq.n	8006912 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 030d 	and.w	r3, r3, #13
 800688c:	2b01      	cmp	r3, #1
 800688e:	d10f      	bne.n	80068b0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0202 	orr.w	r2, r2, #2
 800689e:	609a      	str	r2, [r3, #8]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2203      	movs	r2, #3
 80068a6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80068a8:	f7fe ffa8 	bl	80057fc <HAL_GetTick>
 80068ac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80068ae:	e029      	b.n	8006904 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	f043 0210 	orr.w	r2, r3, #16
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c0:	f043 0201 	orr.w	r2, r3, #1
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e023      	b.n	8006914 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80068cc:	f7fe ff96 	bl	80057fc <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d914      	bls.n	8006904 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d10d      	bne.n	8006904 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	f043 0210 	orr.w	r2, r3, #16
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f8:	f043 0201 	orr.w	r2, r3, #1
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e007      	b.n	8006914 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b01      	cmp	r3, #1
 8006910:	d0dc      	beq.n	80068cc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800692c:	4b0c      	ldr	r3, [pc, #48]	; (8006960 <__NVIC_SetPriorityGrouping+0x44>)
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006938:	4013      	ands	r3, r2
 800693a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800694c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800694e:	4a04      	ldr	r2, [pc, #16]	; (8006960 <__NVIC_SetPriorityGrouping+0x44>)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	60d3      	str	r3, [r2, #12]
}
 8006954:	bf00      	nop
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	e000ed00 	.word	0xe000ed00

08006964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006968:	4b04      	ldr	r3, [pc, #16]	; (800697c <__NVIC_GetPriorityGrouping+0x18>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	0a1b      	lsrs	r3, r3, #8
 800696e:	f003 0307 	and.w	r3, r3, #7
}
 8006972:	4618      	mov	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	e000ed00 	.word	0xe000ed00

08006980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800698a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800698e:	2b00      	cmp	r3, #0
 8006990:	db0b      	blt.n	80069aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	f003 021f 	and.w	r2, r3, #31
 8006998:	4907      	ldr	r1, [pc, #28]	; (80069b8 <__NVIC_EnableIRQ+0x38>)
 800699a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	2001      	movs	r0, #1
 80069a2:	fa00 f202 	lsl.w	r2, r0, r2
 80069a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	e000e100 	.word	0xe000e100

080069bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	6039      	str	r1, [r7, #0]
 80069c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	db0a      	blt.n	80069e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	490c      	ldr	r1, [pc, #48]	; (8006a08 <__NVIC_SetPriority+0x4c>)
 80069d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069da:	0112      	lsls	r2, r2, #4
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	440b      	add	r3, r1
 80069e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069e4:	e00a      	b.n	80069fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	4908      	ldr	r1, [pc, #32]	; (8006a0c <__NVIC_SetPriority+0x50>)
 80069ec:	79fb      	ldrb	r3, [r7, #7]
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	3b04      	subs	r3, #4
 80069f4:	0112      	lsls	r2, r2, #4
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	440b      	add	r3, r1
 80069fa:	761a      	strb	r2, [r3, #24]
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	e000e100 	.word	0xe000e100
 8006a0c:	e000ed00 	.word	0xe000ed00

08006a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b089      	sub	sp, #36	; 0x24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	f1c3 0307 	rsb	r3, r3, #7
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	bf28      	it	cs
 8006a2e:	2304      	movcs	r3, #4
 8006a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	3304      	adds	r3, #4
 8006a36:	2b06      	cmp	r3, #6
 8006a38:	d902      	bls.n	8006a40 <NVIC_EncodePriority+0x30>
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	3b03      	subs	r3, #3
 8006a3e:	e000      	b.n	8006a42 <NVIC_EncodePriority+0x32>
 8006a40:	2300      	movs	r3, #0
 8006a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a44:	f04f 32ff 	mov.w	r2, #4294967295
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43da      	mvns	r2, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	401a      	ands	r2, r3
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a58:	f04f 31ff 	mov.w	r1, #4294967295
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a62:	43d9      	mvns	r1, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a68:	4313      	orrs	r3, r2
         );
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3724      	adds	r7, #36	; 0x24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
	...

08006a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a88:	d301      	bcc.n	8006a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e00f      	b.n	8006aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a8e:	4a0a      	ldr	r2, [pc, #40]	; (8006ab8 <SysTick_Config+0x40>)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a96:	210f      	movs	r1, #15
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	f7ff ff8e 	bl	80069bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <SysTick_Config+0x40>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006aa6:	4b04      	ldr	r3, [pc, #16]	; (8006ab8 <SysTick_Config+0x40>)
 8006aa8:	2207      	movs	r2, #7
 8006aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	e000e010 	.word	0xe000e010

08006abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff ff29 	bl	800691c <__NVIC_SetPriorityGrouping>
}
 8006aca:	bf00      	nop
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b086      	sub	sp, #24
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	4603      	mov	r3, r0
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	607a      	str	r2, [r7, #4]
 8006ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ae4:	f7ff ff3e 	bl	8006964 <__NVIC_GetPriorityGrouping>
 8006ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	68b9      	ldr	r1, [r7, #8]
 8006aee:	6978      	ldr	r0, [r7, #20]
 8006af0:	f7ff ff8e 	bl	8006a10 <NVIC_EncodePriority>
 8006af4:	4602      	mov	r2, r0
 8006af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006afa:	4611      	mov	r1, r2
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff ff5d 	bl	80069bc <__NVIC_SetPriority>
}
 8006b02:	bf00      	nop
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	4603      	mov	r3, r0
 8006b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff ff31 	bl	8006980 <__NVIC_EnableIRQ>
}
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff ffa2 	bl	8006a78 <SysTick_Config>
 8006b34:	4603      	mov	r3, r0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e037      	b.n	8006bc4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006b6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006b6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f9b8 	bl	8006f1c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}  
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d101      	bne.n	8006bec <HAL_DMA_Start_IT+0x20>
 8006be8:	2302      	movs	r3, #2
 8006bea:	e04a      	b.n	8006c82 <HAL_DMA_Start_IT+0xb6>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d13a      	bne.n	8006c74 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2202      	movs	r2, #2
 8006c02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0201 	bic.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	68b9      	ldr	r1, [r7, #8]
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f94b 	bl	8006ebe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d008      	beq.n	8006c42 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 020e 	orr.w	r2, r2, #14
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	e00f      	b.n	8006c62 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 020a 	orr.w	r2, r2, #10
 8006c50:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0204 	bic.w	r2, r2, #4
 8006c60:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0201 	orr.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e005      	b.n	8006c80 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006c80:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d008      	beq.n	8006cae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2204      	movs	r2, #4
 8006ca0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e020      	b.n	8006cf0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 020e 	bic.w	r2, r2, #14
 8006cbc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0201 	bic.w	r2, r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8006cdc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d005      	beq.n	8006d1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2204      	movs	r2, #4
 8006d16:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
 8006d1c:	e027      	b.n	8006d6e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 020e 	bic.w	r2, r2, #14
 8006d2c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d46:	2101      	movs	r1, #1
 8006d48:	fa01 f202 	lsl.w	r2, r1, r2
 8006d4c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
    } 
  }
  return status;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	2204      	movs	r2, #4
 8006d96:	409a      	lsls	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d024      	beq.n	8006dea <HAL_DMA_IRQHandler+0x72>
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d01f      	beq.n	8006dea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d107      	bne.n	8006dc8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0204 	bic.w	r2, r2, #4
 8006dc6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd0:	2104      	movs	r1, #4
 8006dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8006dd6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d06a      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006de8:	e065      	b.n	8006eb6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	2202      	movs	r2, #2
 8006df0:	409a      	lsls	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4013      	ands	r3, r2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d02c      	beq.n	8006e54 <HAL_DMA_IRQHandler+0xdc>
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d027      	beq.n	8006e54 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10b      	bne.n	8006e2a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 020a 	bic.w	r2, r2, #10
 8006e20:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e32:	2102      	movs	r1, #2
 8006e34:	fa01 f202 	lsl.w	r2, r1, r2
 8006e38:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d035      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006e52:	e030      	b.n	8006eb6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	2208      	movs	r2, #8
 8006e5a:	409a      	lsls	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d028      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0x13e>
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d023      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 020e 	bic.w	r2, r2, #14
 8006e7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e86:	2101      	movs	r1, #1
 8006e88:	fa01 f202 	lsl.w	r2, r1, r2
 8006e8c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d004      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	4798      	blx	r3
    }
  }
}  
 8006eb4:	e7ff      	b.n	8006eb6 <HAL_DMA_IRQHandler+0x13e>
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8006eda:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b10      	cmp	r3, #16
 8006eea:	d108      	bne.n	8006efe <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006efc:	e007      	b.n	8006f0e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	60da      	str	r2, [r3, #12]
}
 8006f0e:	bf00      	nop
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
	...

08006f1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <DMA_CalcBaseAndBitshift+0x60>)
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d80f      	bhi.n	8006f50 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <DMA_CalcBaseAndBitshift+0x64>)
 8006f38:	4413      	add	r3, r2
 8006f3a:	4a12      	ldr	r2, [pc, #72]	; (8006f84 <DMA_CalcBaseAndBitshift+0x68>)
 8006f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f40:	091b      	lsrs	r3, r3, #4
 8006f42:	009a      	lsls	r2, r3, #2
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a0f      	ldr	r2, [pc, #60]	; (8006f88 <DMA_CalcBaseAndBitshift+0x6c>)
 8006f4c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006f4e:	e00e      	b.n	8006f6e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <DMA_CalcBaseAndBitshift+0x70>)
 8006f58:	4413      	add	r3, r2
 8006f5a:	4a0a      	ldr	r2, [pc, #40]	; (8006f84 <DMA_CalcBaseAndBitshift+0x68>)
 8006f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f60:	091b      	lsrs	r3, r3, #4
 8006f62:	009a      	lsls	r2, r3, #2
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a09      	ldr	r2, [pc, #36]	; (8006f90 <DMA_CalcBaseAndBitshift+0x74>)
 8006f6c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40020407 	.word	0x40020407
 8006f80:	bffdfff8 	.word	0xbffdfff8
 8006f84:	cccccccd 	.word	0xcccccccd
 8006f88:	40020000 	.word	0x40020000
 8006f8c:	bffdfbf8 	.word	0xbffdfbf8
 8006f90:	40020400 	.word	0x40020400

08006f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006fa2:	e160      	b.n	8007266 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	2101      	movs	r1, #1
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 8152 	beq.w	8007260 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f003 0303 	and.w	r3, r3, #3
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d005      	beq.n	8006fd4 <HAL_GPIO_Init+0x40>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f003 0303 	and.w	r3, r3, #3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d130      	bne.n	8007036 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	2203      	movs	r2, #3
 8006fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800700a:	2201      	movs	r2, #1
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	fa02 f303 	lsl.w	r3, r2, r3
 8007012:	43db      	mvns	r3, r3
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4013      	ands	r3, r2
 8007018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	091b      	lsrs	r3, r3, #4
 8007020:	f003 0201 	and.w	r2, r3, #1
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	fa02 f303 	lsl.w	r3, r2, r3
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	2b03      	cmp	r3, #3
 8007040:	d017      	beq.n	8007072 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	2203      	movs	r2, #3
 800704e:	fa02 f303 	lsl.w	r3, r2, r3
 8007052:	43db      	mvns	r3, r3
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	4013      	ands	r3, r2
 8007058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	fa02 f303 	lsl.w	r3, r2, r3
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d123      	bne.n	80070c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	08da      	lsrs	r2, r3, #3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3208      	adds	r2, #8
 8007086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	220f      	movs	r2, #15
 8007096:	fa02 f303 	lsl.w	r3, r2, r3
 800709a:	43db      	mvns	r3, r3
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4013      	ands	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	08da      	lsrs	r2, r3, #3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3208      	adds	r2, #8
 80070c0:	6939      	ldr	r1, [r7, #16]
 80070c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	2203      	movs	r2, #3
 80070d2:	fa02 f303 	lsl.w	r3, r2, r3
 80070d6:	43db      	mvns	r3, r3
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	4013      	ands	r3, r2
 80070dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f003 0203 	and.w	r2, r3, #3
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	fa02 f303 	lsl.w	r3, r2, r3
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 80ac 	beq.w	8007260 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007108:	4b5e      	ldr	r3, [pc, #376]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	4a5d      	ldr	r2, [pc, #372]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 800710e:	f043 0301 	orr.w	r3, r3, #1
 8007112:	6193      	str	r3, [r2, #24]
 8007114:	4b5b      	ldr	r3, [pc, #364]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	60bb      	str	r3, [r7, #8]
 800711e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007120:	4a59      	ldr	r2, [pc, #356]	; (8007288 <HAL_GPIO_Init+0x2f4>)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	089b      	lsrs	r3, r3, #2
 8007126:	3302      	adds	r3, #2
 8007128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	220f      	movs	r2, #15
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	43db      	mvns	r3, r3
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4013      	ands	r3, r2
 8007142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800714a:	d025      	beq.n	8007198 <HAL_GPIO_Init+0x204>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a4f      	ldr	r2, [pc, #316]	; (800728c <HAL_GPIO_Init+0x2f8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d01f      	beq.n	8007194 <HAL_GPIO_Init+0x200>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a4e      	ldr	r2, [pc, #312]	; (8007290 <HAL_GPIO_Init+0x2fc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d019      	beq.n	8007190 <HAL_GPIO_Init+0x1fc>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a4d      	ldr	r2, [pc, #308]	; (8007294 <HAL_GPIO_Init+0x300>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d013      	beq.n	800718c <HAL_GPIO_Init+0x1f8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a4c      	ldr	r2, [pc, #304]	; (8007298 <HAL_GPIO_Init+0x304>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d00d      	beq.n	8007188 <HAL_GPIO_Init+0x1f4>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a4b      	ldr	r2, [pc, #300]	; (800729c <HAL_GPIO_Init+0x308>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d007      	beq.n	8007184 <HAL_GPIO_Init+0x1f0>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a4a      	ldr	r2, [pc, #296]	; (80072a0 <HAL_GPIO_Init+0x30c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d101      	bne.n	8007180 <HAL_GPIO_Init+0x1ec>
 800717c:	2306      	movs	r3, #6
 800717e:	e00c      	b.n	800719a <HAL_GPIO_Init+0x206>
 8007180:	2307      	movs	r3, #7
 8007182:	e00a      	b.n	800719a <HAL_GPIO_Init+0x206>
 8007184:	2305      	movs	r3, #5
 8007186:	e008      	b.n	800719a <HAL_GPIO_Init+0x206>
 8007188:	2304      	movs	r3, #4
 800718a:	e006      	b.n	800719a <HAL_GPIO_Init+0x206>
 800718c:	2303      	movs	r3, #3
 800718e:	e004      	b.n	800719a <HAL_GPIO_Init+0x206>
 8007190:	2302      	movs	r3, #2
 8007192:	e002      	b.n	800719a <HAL_GPIO_Init+0x206>
 8007194:	2301      	movs	r3, #1
 8007196:	e000      	b.n	800719a <HAL_GPIO_Init+0x206>
 8007198:	2300      	movs	r3, #0
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	f002 0203 	and.w	r2, r2, #3
 80071a0:	0092      	lsls	r2, r2, #2
 80071a2:	4093      	lsls	r3, r2
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80071aa:	4937      	ldr	r1, [pc, #220]	; (8007288 <HAL_GPIO_Init+0x2f4>)
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	089b      	lsrs	r3, r3, #2
 80071b0:	3302      	adds	r3, #2
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80071b8:	4b3a      	ldr	r3, [pc, #232]	; (80072a4 <HAL_GPIO_Init+0x310>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	43db      	mvns	r3, r3
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4013      	ands	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4313      	orrs	r3, r2
 80071da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80071dc:	4a31      	ldr	r2, [pc, #196]	; (80072a4 <HAL_GPIO_Init+0x310>)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80071e2:	4b30      	ldr	r3, [pc, #192]	; (80072a4 <HAL_GPIO_Init+0x310>)
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	43db      	mvns	r3, r3
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4013      	ands	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007206:	4a27      	ldr	r2, [pc, #156]	; (80072a4 <HAL_GPIO_Init+0x310>)
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800720c:	4b25      	ldr	r3, [pc, #148]	; (80072a4 <HAL_GPIO_Init+0x310>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	43db      	mvns	r3, r3
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4013      	ands	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007230:	4a1c      	ldr	r2, [pc, #112]	; (80072a4 <HAL_GPIO_Init+0x310>)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007236:	4b1b      	ldr	r3, [pc, #108]	; (80072a4 <HAL_GPIO_Init+0x310>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	43db      	mvns	r3, r3
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4013      	ands	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800725a:	4a12      	ldr	r2, [pc, #72]	; (80072a4 <HAL_GPIO_Init+0x310>)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	3301      	adds	r3, #1
 8007264:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	f47f ae97 	bne.w	8006fa4 <HAL_GPIO_Init+0x10>
  }
}
 8007276:	bf00      	nop
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	40021000 	.word	0x40021000
 8007288:	40010000 	.word	0x40010000
 800728c:	48000400 	.word	0x48000400
 8007290:	48000800 	.word	0x48000800
 8007294:	48000c00 	.word	0x48000c00
 8007298:	48001000 	.word	0x48001000
 800729c:	48001400 	.word	0x48001400
 80072a0:	48001800 	.word	0x48001800
 80072a4:	40010400 	.word	0x40010400

080072a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	807b      	strh	r3, [r7, #2]
 80072b4:	4613      	mov	r3, r2
 80072b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80072b8:	787b      	ldrb	r3, [r7, #1]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80072be:	887a      	ldrh	r2, [r7, #2]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80072c4:	e002      	b.n	80072cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80072c6:	887a      	ldrh	r2, [r7, #2]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80072ea:	887a      	ldrh	r2, [r7, #2]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4013      	ands	r3, r2
 80072f0:	041a      	lsls	r2, r3, #16
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	43d9      	mvns	r1, r3
 80072f6:	887b      	ldrh	r3, [r7, #2]
 80072f8:	400b      	ands	r3, r1
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	619a      	str	r2, [r3, #24]
}
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007316:	4b08      	ldr	r3, [pc, #32]	; (8007338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007318:	695a      	ldr	r2, [r3, #20]
 800731a:	88fb      	ldrh	r3, [r7, #6]
 800731c:	4013      	ands	r3, r2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d006      	beq.n	8007330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007322:	4a05      	ldr	r2, [pc, #20]	; (8007338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007324:	88fb      	ldrh	r3, [r7, #6]
 8007326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007328:	88fb      	ldrh	r3, [r7, #6]
 800732a:	4618      	mov	r0, r3
 800732c:	f00b f986 	bl	801263c <HAL_GPIO_EXTI_Callback>
  }
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	40010400 	.word	0x40010400

0800733c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e081      	b.n	8007452 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d106      	bne.n	8007368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fd fe0c 	bl	8004f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2224      	movs	r2, #36	; 0x24
 800736c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0201 	bic.w	r2, r2, #1
 800737e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800738c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800739c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d107      	bne.n	80073b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073b2:	609a      	str	r2, [r3, #8]
 80073b4:	e006      	b.n	80073c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80073c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d104      	bne.n	80073d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6812      	ldr	r2, [r2, #0]
 80073e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80073e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691a      	ldr	r2, [r3, #16]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	69d9      	ldr	r1, [r3, #28]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a1a      	ldr	r2, [r3, #32]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af02      	add	r7, sp, #8
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	4608      	mov	r0, r1
 8007466:	4611      	mov	r1, r2
 8007468:	461a      	mov	r2, r3
 800746a:	4603      	mov	r3, r0
 800746c:	817b      	strh	r3, [r7, #10]
 800746e:	460b      	mov	r3, r1
 8007470:	813b      	strh	r3, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b20      	cmp	r3, #32
 8007480:	f040 80f9 	bne.w	8007676 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <HAL_I2C_Mem_Write+0x34>
 800748a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	d105      	bne.n	800749c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007496:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e0ed      	b.n	8007678 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d101      	bne.n	80074aa <HAL_I2C_Mem_Write+0x4e>
 80074a6:	2302      	movs	r3, #2
 80074a8:	e0e6      	b.n	8007678 <HAL_I2C_Mem_Write+0x21c>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074b2:	f7fe f9a3 	bl	80057fc <HAL_GetTick>
 80074b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	2319      	movs	r3, #25
 80074be:	2201      	movs	r2, #1
 80074c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fac3 	bl	8007a50 <I2C_WaitOnFlagUntilTimeout>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0d1      	b.n	8007678 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2221      	movs	r2, #33	; 0x21
 80074d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2240      	movs	r2, #64	; 0x40
 80074e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a3a      	ldr	r2, [r7, #32]
 80074ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074fc:	88f8      	ldrh	r0, [r7, #6]
 80074fe:	893a      	ldrh	r2, [r7, #8]
 8007500:	8979      	ldrh	r1, [r7, #10]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	4603      	mov	r3, r0
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f000 f9d3 	bl	80078b8 <I2C_RequestMemoryWrite>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e0a9      	b.n	8007678 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007528:	b29b      	uxth	r3, r3
 800752a:	2bff      	cmp	r3, #255	; 0xff
 800752c:	d90e      	bls.n	800754c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	22ff      	movs	r2, #255	; 0xff
 8007532:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007538:	b2da      	uxtb	r2, r3
 800753a:	8979      	ldrh	r1, [r7, #10]
 800753c:	2300      	movs	r3, #0
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fc3d 	bl	8007dc4 <I2C_TransferConfig>
 800754a:	e00f      	b.n	800756c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755a:	b2da      	uxtb	r2, r3
 800755c:	8979      	ldrh	r1, [r7, #10]
 800755e:	2300      	movs	r3, #0
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fc2c 	bl	8007dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 fabc 	bl	8007aee <I2C_WaitOnTXISFlagUntilTimeout>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e07b      	b.n	8007678 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	781a      	ldrb	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759a:	b29b      	uxth	r3, r3
 800759c:	3b01      	subs	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d034      	beq.n	8007624 <HAL_I2C_Mem_Write+0x1c8>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d130      	bne.n	8007624 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	2200      	movs	r2, #0
 80075ca:	2180      	movs	r1, #128	; 0x80
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fa3f 	bl	8007a50 <I2C_WaitOnFlagUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e04d      	b.n	8007678 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2bff      	cmp	r3, #255	; 0xff
 80075e4:	d90e      	bls.n	8007604 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	22ff      	movs	r2, #255	; 0xff
 80075ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	8979      	ldrh	r1, [r7, #10]
 80075f4:	2300      	movs	r3, #0
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 fbe1 	bl	8007dc4 <I2C_TransferConfig>
 8007602:	e00f      	b.n	8007624 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007612:	b2da      	uxtb	r2, r3
 8007614:	8979      	ldrh	r1, [r7, #10]
 8007616:	2300      	movs	r3, #0
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 fbd0 	bl	8007dc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d19e      	bne.n	800756c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 faa2 	bl	8007b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e01a      	b.n	8007678 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2220      	movs	r2, #32
 8007648:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6859      	ldr	r1, [r3, #4]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	4b0a      	ldr	r3, [pc, #40]	; (8007680 <HAL_I2C_Mem_Write+0x224>)
 8007656:	400b      	ands	r3, r1
 8007658:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2220      	movs	r2, #32
 800765e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	e000      	b.n	8007678 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007676:	2302      	movs	r3, #2
  }
}
 8007678:	4618      	mov	r0, r3
 800767a:	3718      	adds	r7, #24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	fe00e800 	.word	0xfe00e800

08007684 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af02      	add	r7, sp, #8
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	4608      	mov	r0, r1
 800768e:	4611      	mov	r1, r2
 8007690:	461a      	mov	r2, r3
 8007692:	4603      	mov	r3, r0
 8007694:	817b      	strh	r3, [r7, #10]
 8007696:	460b      	mov	r3, r1
 8007698:	813b      	strh	r3, [r7, #8]
 800769a:	4613      	mov	r3, r2
 800769c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	f040 80fd 	bne.w	80078a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_I2C_Mem_Read+0x34>
 80076b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d105      	bne.n	80076c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e0f1      	b.n	80078a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d101      	bne.n	80076d2 <HAL_I2C_Mem_Read+0x4e>
 80076ce:	2302      	movs	r3, #2
 80076d0:	e0ea      	b.n	80078a8 <HAL_I2C_Mem_Read+0x224>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076da:	f7fe f88f 	bl	80057fc <HAL_GetTick>
 80076de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	2319      	movs	r3, #25
 80076e6:	2201      	movs	r2, #1
 80076e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f9af 	bl	8007a50 <I2C_WaitOnFlagUntilTimeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e0d5      	b.n	80078a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2222      	movs	r2, #34	; 0x22
 8007700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2240      	movs	r2, #64	; 0x40
 8007708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a3a      	ldr	r2, [r7, #32]
 8007716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800771c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007724:	88f8      	ldrh	r0, [r7, #6]
 8007726:	893a      	ldrh	r2, [r7, #8]
 8007728:	8979      	ldrh	r1, [r7, #10]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	4603      	mov	r3, r0
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 f913 	bl	8007960 <I2C_RequestMemoryRead>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e0ad      	b.n	80078a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	2bff      	cmp	r3, #255	; 0xff
 8007754:	d90e      	bls.n	8007774 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	22ff      	movs	r2, #255	; 0xff
 800775a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007760:	b2da      	uxtb	r2, r3
 8007762:	8979      	ldrh	r1, [r7, #10]
 8007764:	4b52      	ldr	r3, [pc, #328]	; (80078b0 <HAL_I2C_Mem_Read+0x22c>)
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fb29 	bl	8007dc4 <I2C_TransferConfig>
 8007772:	e00f      	b.n	8007794 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007778:	b29a      	uxth	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007782:	b2da      	uxtb	r2, r3
 8007784:	8979      	ldrh	r1, [r7, #10]
 8007786:	4b4a      	ldr	r3, [pc, #296]	; (80078b0 <HAL_I2C_Mem_Read+0x22c>)
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 fb18 	bl	8007dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	2200      	movs	r2, #0
 800779c:	2104      	movs	r1, #4
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 f956 	bl	8007a50 <I2C_WaitOnFlagUntilTimeout>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e07c      	b.n	80078a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	b2d2      	uxtb	r2, r2
 80077ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ca:	3b01      	subs	r3, #1
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d034      	beq.n	8007854 <HAL_I2C_Mem_Read+0x1d0>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d130      	bne.n	8007854 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	2200      	movs	r2, #0
 80077fa:	2180      	movs	r1, #128	; 0x80
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f927 	bl	8007a50 <I2C_WaitOnFlagUntilTimeout>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e04d      	b.n	80078a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007810:	b29b      	uxth	r3, r3
 8007812:	2bff      	cmp	r3, #255	; 0xff
 8007814:	d90e      	bls.n	8007834 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	22ff      	movs	r2, #255	; 0xff
 800781a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007820:	b2da      	uxtb	r2, r3
 8007822:	8979      	ldrh	r1, [r7, #10]
 8007824:	2300      	movs	r3, #0
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 fac9 	bl	8007dc4 <I2C_TransferConfig>
 8007832:	e00f      	b.n	8007854 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007838:	b29a      	uxth	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007842:	b2da      	uxtb	r2, r3
 8007844:	8979      	ldrh	r1, [r7, #10]
 8007846:	2300      	movs	r3, #0
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 fab8 	bl	8007dc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d19a      	bne.n	8007794 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 f98a 	bl	8007b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e01a      	b.n	80078a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2220      	movs	r2, #32
 8007878:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6859      	ldr	r1, [r3, #4]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <HAL_I2C_Mem_Read+0x230>)
 8007886:	400b      	ands	r3, r1
 8007888:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2220      	movs	r2, #32
 800788e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	e000      	b.n	80078a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80078a6:	2302      	movs	r3, #2
  }
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	80002400 	.word	0x80002400
 80078b4:	fe00e800 	.word	0xfe00e800

080078b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af02      	add	r7, sp, #8
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	4608      	mov	r0, r1
 80078c2:	4611      	mov	r1, r2
 80078c4:	461a      	mov	r2, r3
 80078c6:	4603      	mov	r3, r0
 80078c8:	817b      	strh	r3, [r7, #10]
 80078ca:	460b      	mov	r3, r1
 80078cc:	813b      	strh	r3, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	8979      	ldrh	r1, [r7, #10]
 80078d8:	4b20      	ldr	r3, [pc, #128]	; (800795c <I2C_RequestMemoryWrite+0xa4>)
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fa6f 	bl	8007dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078e6:	69fa      	ldr	r2, [r7, #28]
 80078e8:	69b9      	ldr	r1, [r7, #24]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 f8ff 	bl	8007aee <I2C_WaitOnTXISFlagUntilTimeout>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e02c      	b.n	8007954 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078fa:	88fb      	ldrh	r3, [r7, #6]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d105      	bne.n	800790c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007900:	893b      	ldrh	r3, [r7, #8]
 8007902:	b2da      	uxtb	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	629a      	str	r2, [r3, #40]	; 0x28
 800790a:	e015      	b.n	8007938 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800790c:	893b      	ldrh	r3, [r7, #8]
 800790e:	0a1b      	lsrs	r3, r3, #8
 8007910:	b29b      	uxth	r3, r3
 8007912:	b2da      	uxtb	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800791a:	69fa      	ldr	r2, [r7, #28]
 800791c:	69b9      	ldr	r1, [r7, #24]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 f8e5 	bl	8007aee <I2C_WaitOnTXISFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e012      	b.n	8007954 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800792e:	893b      	ldrh	r3, [r7, #8]
 8007930:	b2da      	uxtb	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	2200      	movs	r2, #0
 8007940:	2180      	movs	r1, #128	; 0x80
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 f884 	bl	8007a50 <I2C_WaitOnFlagUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e000      	b.n	8007954 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	80002000 	.word	0x80002000

08007960 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af02      	add	r7, sp, #8
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	4608      	mov	r0, r1
 800796a:	4611      	mov	r1, r2
 800796c:	461a      	mov	r2, r3
 800796e:	4603      	mov	r3, r0
 8007970:	817b      	strh	r3, [r7, #10]
 8007972:	460b      	mov	r3, r1
 8007974:	813b      	strh	r3, [r7, #8]
 8007976:	4613      	mov	r3, r2
 8007978:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	b2da      	uxtb	r2, r3
 800797e:	8979      	ldrh	r1, [r7, #10]
 8007980:	4b20      	ldr	r3, [pc, #128]	; (8007a04 <I2C_RequestMemoryRead+0xa4>)
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	2300      	movs	r3, #0
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 fa1c 	bl	8007dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	69b9      	ldr	r1, [r7, #24]
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 f8ac 	bl	8007aee <I2C_WaitOnTXISFlagUntilTimeout>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e02c      	b.n	80079fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079a0:	88fb      	ldrh	r3, [r7, #6]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d105      	bne.n	80079b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079a6:	893b      	ldrh	r3, [r7, #8]
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	629a      	str	r2, [r3, #40]	; 0x28
 80079b0:	e015      	b.n	80079de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80079b2:	893b      	ldrh	r3, [r7, #8]
 80079b4:	0a1b      	lsrs	r3, r3, #8
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079c0:	69fa      	ldr	r2, [r7, #28]
 80079c2:	69b9      	ldr	r1, [r7, #24]
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 f892 	bl	8007aee <I2C_WaitOnTXISFlagUntilTimeout>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e012      	b.n	80079fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079d4:	893b      	ldrh	r3, [r7, #8]
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	2200      	movs	r2, #0
 80079e6:	2140      	movs	r1, #64	; 0x40
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f831 	bl	8007a50 <I2C_WaitOnFlagUntilTimeout>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	80002000 	.word	0x80002000

08007a08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d103      	bne.n	8007a26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d007      	beq.n	8007a44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699a      	ldr	r2, [r3, #24]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0201 	orr.w	r2, r2, #1
 8007a42:	619a      	str	r2, [r3, #24]
  }
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a60:	e031      	b.n	8007ac6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d02d      	beq.n	8007ac6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6a:	f7fd fec7 	bl	80057fc <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d302      	bcc.n	8007a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d122      	bne.n	8007ac6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	bf0c      	ite	eq
 8007a90:	2301      	moveq	r3, #1
 8007a92:	2300      	movne	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	461a      	mov	r2, r3
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d113      	bne.n	8007ac6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa2:	f043 0220 	orr.w	r2, r3, #32
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e00f      	b.n	8007ae6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699a      	ldr	r2, [r3, #24]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	bf0c      	ite	eq
 8007ad6:	2301      	moveq	r3, #1
 8007ad8:	2300      	movne	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	461a      	mov	r2, r3
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d0be      	beq.n	8007a62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007afa:	e033      	b.n	8007b64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f87f 	bl	8007c04 <I2C_IsErrorOccurred>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e031      	b.n	8007b74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d025      	beq.n	8007b64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b18:	f7fd fe70 	bl	80057fc <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d302      	bcc.n	8007b2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d11a      	bne.n	8007b64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d013      	beq.n	8007b64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b40:	f043 0220 	orr.w	r2, r3, #32
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e007      	b.n	8007b74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d1c4      	bne.n	8007afc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b88:	e02f      	b.n	8007bea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 f838 	bl	8007c04 <I2C_IsErrorOccurred>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e02d      	b.n	8007bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b9e:	f7fd fe2d 	bl	80057fc <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d302      	bcc.n	8007bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d11a      	bne.n	8007bea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	d013      	beq.n	8007bea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc6:	f043 0220 	orr.w	r2, r3, #32
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e007      	b.n	8007bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	d1c8      	bne.n	8007b8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08a      	sub	sp, #40	; 0x28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	f003 0310 	and.w	r3, r3, #16
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d068      	beq.n	8007d02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2210      	movs	r2, #16
 8007c36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c38:	e049      	b.n	8007cce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c40:	d045      	beq.n	8007cce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c42:	f7fd fddb 	bl	80057fc <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d302      	bcc.n	8007c58 <I2C_IsErrorOccurred+0x54>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d13a      	bne.n	8007cce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c7a:	d121      	bne.n	8007cc0 <I2C_IsErrorOccurred+0xbc>
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c82:	d01d      	beq.n	8007cc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007c84:	7cfb      	ldrb	r3, [r7, #19]
 8007c86:	2b20      	cmp	r3, #32
 8007c88:	d01a      	beq.n	8007cc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007c9a:	f7fd fdaf 	bl	80057fc <HAL_GetTick>
 8007c9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ca0:	e00e      	b.n	8007cc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007ca2:	f7fd fdab 	bl	80057fc <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b19      	cmp	r3, #25
 8007cae:	d907      	bls.n	8007cc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	f043 0320 	orr.w	r3, r3, #32
 8007cb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007cbe:	e006      	b.n	8007cce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	d1e9      	bne.n	8007ca2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	f003 0320 	and.w	r3, r3, #32
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d003      	beq.n	8007ce4 <I2C_IsErrorOccurred+0xe0>
 8007cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d0aa      	beq.n	8007c3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d103      	bne.n	8007cf4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	f043 0304 	orr.w	r3, r3, #4
 8007cfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	f043 0301 	orr.w	r3, r3, #1
 8007d1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00b      	beq.n	8007d4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	f043 0308 	orr.w	r3, r3, #8
 8007d3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	f043 0302 	orr.w	r3, r3, #2
 8007d5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01c      	beq.n	8007db2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff fe45 	bl	8007a08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6859      	ldr	r1, [r3, #4]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <I2C_IsErrorOccurred+0x1bc>)
 8007d8a:	400b      	ands	r3, r1
 8007d8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	431a      	orrs	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3728      	adds	r7, #40	; 0x28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	fe00e800 	.word	0xfe00e800

08007dc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	607b      	str	r3, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	817b      	strh	r3, [r7, #10]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007dd6:	897b      	ldrh	r3, [r7, #10]
 8007dd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ddc:	7a7b      	ldrb	r3, [r7, #9]
 8007dde:	041b      	lsls	r3, r3, #16
 8007de0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007de4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007df2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	0d5b      	lsrs	r3, r3, #21
 8007dfe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007e02:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <I2C_TransferConfig+0x60>)
 8007e04:	430b      	orrs	r3, r1
 8007e06:	43db      	mvns	r3, r3
 8007e08:	ea02 0103 	and.w	r1, r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007e16:	bf00      	nop
 8007e18:	371c      	adds	r7, #28
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	03ff63ff 	.word	0x03ff63ff

08007e28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	d138      	bne.n	8007eb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d101      	bne.n	8007e4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e032      	b.n	8007eb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2224      	movs	r2, #36	; 0x24
 8007e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0201 	bic.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6819      	ldr	r1, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0201 	orr.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	e000      	b.n	8007eb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007eb0:	2302      	movs	r3, #2
  }
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b085      	sub	sp, #20
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	d139      	bne.n	8007f48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e033      	b.n	8007f4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2224      	movs	r2, #36	; 0x24
 8007eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0201 	bic.w	r2, r2, #1
 8007f00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	021b      	lsls	r3, r3, #8
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0201 	orr.w	r2, r2, #1
 8007f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	e000      	b.n	8007f4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f48:	2302      	movs	r3, #2
  }
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
	...

08007f58 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8007f64:	4b09      	ldr	r3, [pc, #36]	; (8007f8c <HAL_PWR_EnterSLEEPMode+0x34>)
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	4a08      	ldr	r2, [pc, #32]	; (8007f8c <HAL_PWR_EnterSLEEPMode+0x34>)
 8007f6a:	f023 0304 	bic.w	r3, r3, #4
 8007f6e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007f76:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8007f78:	e002      	b.n	8007f80 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8007f7a:	bf40      	sev
    __WFE();
 8007f7c:	bf20      	wfe
    __WFE();
 8007f7e:	bf20      	wfe
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	e000ed00 	.word	0xe000ed00

08007f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007fa0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d102      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f001 b83a 	b.w	800902a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 816f 	beq.w	80082aa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007fcc:	4bb5      	ldr	r3, [pc, #724]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f003 030c 	and.w	r3, r3, #12
 8007fd4:	2b04      	cmp	r3, #4
 8007fd6:	d00c      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007fd8:	4bb2      	ldr	r3, [pc, #712]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f003 030c 	and.w	r3, r3, #12
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d15c      	bne.n	800809e <HAL_RCC_OscConfig+0x10e>
 8007fe4:	4baf      	ldr	r3, [pc, #700]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff0:	d155      	bne.n	800809e <HAL_RCC_OscConfig+0x10e>
 8007ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ff6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ffa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007ffe:	fa93 f3a3 	rbit	r3, r3
 8008002:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008006:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800800a:	fab3 f383 	clz	r3, r3
 800800e:	b2db      	uxtb	r3, r3
 8008010:	095b      	lsrs	r3, r3, #5
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b01      	cmp	r3, #1
 800801c:	d102      	bne.n	8008024 <HAL_RCC_OscConfig+0x94>
 800801e:	4ba1      	ldr	r3, [pc, #644]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	e015      	b.n	8008050 <HAL_RCC_OscConfig+0xc0>
 8008024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008028:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800802c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008030:	fa93 f3a3 	rbit	r3, r3
 8008034:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800803c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008040:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008044:	fa93 f3a3 	rbit	r3, r3
 8008048:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800804c:	4b95      	ldr	r3, [pc, #596]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008054:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8008058:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800805c:	fa92 f2a2 	rbit	r2, r2
 8008060:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8008064:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008068:	fab2 f282 	clz	r2, r2
 800806c:	b2d2      	uxtb	r2, r2
 800806e:	f042 0220 	orr.w	r2, r2, #32
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	f002 021f 	and.w	r2, r2, #31
 8008078:	2101      	movs	r1, #1
 800807a:	fa01 f202 	lsl.w	r2, r1, r2
 800807e:	4013      	ands	r3, r2
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 8111 	beq.w	80082a8 <HAL_RCC_OscConfig+0x318>
 8008086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800808a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	f040 8108 	bne.w	80082a8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	f000 bfc6 	b.w	800902a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800809e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ae:	d106      	bne.n	80080be <HAL_RCC_OscConfig+0x12e>
 80080b0:	4b7c      	ldr	r3, [pc, #496]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a7b      	ldr	r2, [pc, #492]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 80080b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	e036      	b.n	800812c <HAL_RCC_OscConfig+0x19c>
 80080be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10c      	bne.n	80080e8 <HAL_RCC_OscConfig+0x158>
 80080ce:	4b75      	ldr	r3, [pc, #468]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a74      	ldr	r2, [pc, #464]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 80080d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	4b72      	ldr	r3, [pc, #456]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a71      	ldr	r2, [pc, #452]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 80080e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	e021      	b.n	800812c <HAL_RCC_OscConfig+0x19c>
 80080e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080f8:	d10c      	bne.n	8008114 <HAL_RCC_OscConfig+0x184>
 80080fa:	4b6a      	ldr	r3, [pc, #424]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a69      	ldr	r2, [pc, #420]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 8008100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	4b67      	ldr	r3, [pc, #412]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a66      	ldr	r2, [pc, #408]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 800810c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	e00b      	b.n	800812c <HAL_RCC_OscConfig+0x19c>
 8008114:	4b63      	ldr	r3, [pc, #396]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a62      	ldr	r2, [pc, #392]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 800811a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	4b60      	ldr	r3, [pc, #384]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a5f      	ldr	r2, [pc, #380]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 8008126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800812a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800812c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008130:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d059      	beq.n	80081f0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800813c:	f7fd fb5e 	bl	80057fc <HAL_GetTick>
 8008140:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008144:	e00a      	b.n	800815c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008146:	f7fd fb59 	bl	80057fc <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b64      	cmp	r3, #100	; 0x64
 8008154:	d902      	bls.n	800815c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	f000 bf67 	b.w	800902a <HAL_RCC_OscConfig+0x109a>
 800815c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008160:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008164:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008168:	fa93 f3a3 	rbit	r3, r3
 800816c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8008170:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008174:	fab3 f383 	clz	r3, r3
 8008178:	b2db      	uxtb	r3, r3
 800817a:	095b      	lsrs	r3, r3, #5
 800817c:	b2db      	uxtb	r3, r3
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b01      	cmp	r3, #1
 8008186:	d102      	bne.n	800818e <HAL_RCC_OscConfig+0x1fe>
 8008188:	4b46      	ldr	r3, [pc, #280]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	e015      	b.n	80081ba <HAL_RCC_OscConfig+0x22a>
 800818e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008192:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008196:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800819a:	fa93 f3a3 	rbit	r3, r3
 800819e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80081a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80081a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80081aa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80081ae:	fa93 f3a3 	rbit	r3, r3
 80081b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80081b6:	4b3b      	ldr	r3, [pc, #236]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80081be:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80081c2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80081c6:	fa92 f2a2 	rbit	r2, r2
 80081ca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80081ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80081d2:	fab2 f282 	clz	r2, r2
 80081d6:	b2d2      	uxtb	r2, r2
 80081d8:	f042 0220 	orr.w	r2, r2, #32
 80081dc:	b2d2      	uxtb	r2, r2
 80081de:	f002 021f 	and.w	r2, r2, #31
 80081e2:	2101      	movs	r1, #1
 80081e4:	fa01 f202 	lsl.w	r2, r1, r2
 80081e8:	4013      	ands	r3, r2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0ab      	beq.n	8008146 <HAL_RCC_OscConfig+0x1b6>
 80081ee:	e05c      	b.n	80082aa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081f0:	f7fd fb04 	bl	80057fc <HAL_GetTick>
 80081f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081f8:	e00a      	b.n	8008210 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081fa:	f7fd faff 	bl	80057fc <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	2b64      	cmp	r3, #100	; 0x64
 8008208:	d902      	bls.n	8008210 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	f000 bf0d 	b.w	800902a <HAL_RCC_OscConfig+0x109a>
 8008210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008214:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008218:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800821c:	fa93 f3a3 	rbit	r3, r3
 8008220:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8008224:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008228:	fab3 f383 	clz	r3, r3
 800822c:	b2db      	uxtb	r3, r3
 800822e:	095b      	lsrs	r3, r3, #5
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f043 0301 	orr.w	r3, r3, #1
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b01      	cmp	r3, #1
 800823a:	d102      	bne.n	8008242 <HAL_RCC_OscConfig+0x2b2>
 800823c:	4b19      	ldr	r3, [pc, #100]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	e015      	b.n	800826e <HAL_RCC_OscConfig+0x2de>
 8008242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008246:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800824a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800824e:	fa93 f3a3 	rbit	r3, r3
 8008252:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008256:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800825a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800825e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008262:	fa93 f3a3 	rbit	r3, r3
 8008266:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800826a:	4b0e      	ldr	r3, [pc, #56]	; (80082a4 <HAL_RCC_OscConfig+0x314>)
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008272:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8008276:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800827a:	fa92 f2a2 	rbit	r2, r2
 800827e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8008282:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8008286:	fab2 f282 	clz	r2, r2
 800828a:	b2d2      	uxtb	r2, r2
 800828c:	f042 0220 	orr.w	r2, r2, #32
 8008290:	b2d2      	uxtb	r2, r2
 8008292:	f002 021f 	and.w	r2, r2, #31
 8008296:	2101      	movs	r1, #1
 8008298:	fa01 f202 	lsl.w	r2, r1, r2
 800829c:	4013      	ands	r3, r2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1ab      	bne.n	80081fa <HAL_RCC_OscConfig+0x26a>
 80082a2:	e002      	b.n	80082aa <HAL_RCC_OscConfig+0x31a>
 80082a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 817f 	beq.w	80085be <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80082c0:	4ba7      	ldr	r3, [pc, #668]	; (8008560 <HAL_RCC_OscConfig+0x5d0>)
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f003 030c 	and.w	r3, r3, #12
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00c      	beq.n	80082e6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80082cc:	4ba4      	ldr	r3, [pc, #656]	; (8008560 <HAL_RCC_OscConfig+0x5d0>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f003 030c 	and.w	r3, r3, #12
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d173      	bne.n	80083c0 <HAL_RCC_OscConfig+0x430>
 80082d8:	4ba1      	ldr	r3, [pc, #644]	; (8008560 <HAL_RCC_OscConfig+0x5d0>)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80082e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082e4:	d16c      	bne.n	80083c0 <HAL_RCC_OscConfig+0x430>
 80082e6:	2302      	movs	r3, #2
 80082e8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80082f0:	fa93 f3a3 	rbit	r3, r3
 80082f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80082f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082fc:	fab3 f383 	clz	r3, r3
 8008300:	b2db      	uxtb	r3, r3
 8008302:	095b      	lsrs	r3, r3, #5
 8008304:	b2db      	uxtb	r3, r3
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b01      	cmp	r3, #1
 800830e:	d102      	bne.n	8008316 <HAL_RCC_OscConfig+0x386>
 8008310:	4b93      	ldr	r3, [pc, #588]	; (8008560 <HAL_RCC_OscConfig+0x5d0>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	e013      	b.n	800833e <HAL_RCC_OscConfig+0x3ae>
 8008316:	2302      	movs	r3, #2
 8008318:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800831c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008320:	fa93 f3a3 	rbit	r3, r3
 8008324:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8008328:	2302      	movs	r3, #2
 800832a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800832e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008332:	fa93 f3a3 	rbit	r3, r3
 8008336:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800833a:	4b89      	ldr	r3, [pc, #548]	; (8008560 <HAL_RCC_OscConfig+0x5d0>)
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	2202      	movs	r2, #2
 8008340:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008344:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008348:	fa92 f2a2 	rbit	r2, r2
 800834c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8008350:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008354:	fab2 f282 	clz	r2, r2
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	f042 0220 	orr.w	r2, r2, #32
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	f002 021f 	and.w	r2, r2, #31
 8008364:	2101      	movs	r1, #1
 8008366:	fa01 f202 	lsl.w	r2, r1, r2
 800836a:	4013      	ands	r3, r2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00a      	beq.n	8008386 <HAL_RCC_OscConfig+0x3f6>
 8008370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008374:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d002      	beq.n	8008386 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	f000 be52 	b.w	800902a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008386:	4b76      	ldr	r3, [pc, #472]	; (8008560 <HAL_RCC_OscConfig+0x5d0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800838e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008392:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	21f8      	movs	r1, #248	; 0xf8
 800839c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083a0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80083a4:	fa91 f1a1 	rbit	r1, r1
 80083a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80083ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80083b0:	fab1 f181 	clz	r1, r1
 80083b4:	b2c9      	uxtb	r1, r1
 80083b6:	408b      	lsls	r3, r1
 80083b8:	4969      	ldr	r1, [pc, #420]	; (8008560 <HAL_RCC_OscConfig+0x5d0>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083be:	e0fe      	b.n	80085be <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 8088 	beq.w	80084e2 <HAL_RCC_OscConfig+0x552>
 80083d2:	2301      	movs	r3, #1
 80083d4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80083dc:	fa93 f3a3 	rbit	r3, r3
 80083e0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80083e4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083e8:	fab3 f383 	clz	r3, r3
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80083f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	461a      	mov	r2, r3
 80083fa:	2301      	movs	r3, #1
 80083fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083fe:	f7fd f9fd 	bl	80057fc <HAL_GetTick>
 8008402:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008406:	e00a      	b.n	800841e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008408:	f7fd f9f8 	bl	80057fc <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d902      	bls.n	800841e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	f000 be06 	b.w	800902a <HAL_RCC_OscConfig+0x109a>
 800841e:	2302      	movs	r3, #2
 8008420:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008424:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008428:	fa93 f3a3 	rbit	r3, r3
 800842c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8008430:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008434:	fab3 f383 	clz	r3, r3
 8008438:	b2db      	uxtb	r3, r3
 800843a:	095b      	lsrs	r3, r3, #5
 800843c:	b2db      	uxtb	r3, r3
 800843e:	f043 0301 	orr.w	r3, r3, #1
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b01      	cmp	r3, #1
 8008446:	d102      	bne.n	800844e <HAL_RCC_OscConfig+0x4be>
 8008448:	4b45      	ldr	r3, [pc, #276]	; (8008560 <HAL_RCC_OscConfig+0x5d0>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	e013      	b.n	8008476 <HAL_RCC_OscConfig+0x4e6>
 800844e:	2302      	movs	r3, #2
 8008450:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008454:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008458:	fa93 f3a3 	rbit	r3, r3
 800845c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008460:	2302      	movs	r3, #2
 8008462:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008466:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800846a:	fa93 f3a3 	rbit	r3, r3
 800846e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008472:	4b3b      	ldr	r3, [pc, #236]	; (8008560 <HAL_RCC_OscConfig+0x5d0>)
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	2202      	movs	r2, #2
 8008478:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800847c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008480:	fa92 f2a2 	rbit	r2, r2
 8008484:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8008488:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800848c:	fab2 f282 	clz	r2, r2
 8008490:	b2d2      	uxtb	r2, r2
 8008492:	f042 0220 	orr.w	r2, r2, #32
 8008496:	b2d2      	uxtb	r2, r2
 8008498:	f002 021f 	and.w	r2, r2, #31
 800849c:	2101      	movs	r1, #1
 800849e:	fa01 f202 	lsl.w	r2, r1, r2
 80084a2:	4013      	ands	r3, r2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0af      	beq.n	8008408 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084a8:	4b2d      	ldr	r3, [pc, #180]	; (8008560 <HAL_RCC_OscConfig+0x5d0>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	21f8      	movs	r1, #248	; 0xf8
 80084be:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084c2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80084c6:	fa91 f1a1 	rbit	r1, r1
 80084ca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80084ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80084d2:	fab1 f181 	clz	r1, r1
 80084d6:	b2c9      	uxtb	r1, r1
 80084d8:	408b      	lsls	r3, r1
 80084da:	4921      	ldr	r1, [pc, #132]	; (8008560 <HAL_RCC_OscConfig+0x5d0>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	600b      	str	r3, [r1, #0]
 80084e0:	e06d      	b.n	80085be <HAL_RCC_OscConfig+0x62e>
 80084e2:	2301      	movs	r3, #1
 80084e4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80084ec:	fa93 f3a3 	rbit	r3, r3
 80084f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80084f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084f8:	fab3 f383 	clz	r3, r3
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008502:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	461a      	mov	r2, r3
 800850a:	2300      	movs	r3, #0
 800850c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800850e:	f7fd f975 	bl	80057fc <HAL_GetTick>
 8008512:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008516:	e00a      	b.n	800852e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008518:	f7fd f970 	bl	80057fc <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	d902      	bls.n	800852e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	f000 bd7e 	b.w	800902a <HAL_RCC_OscConfig+0x109a>
 800852e:	2302      	movs	r3, #2
 8008530:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008534:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008538:	fa93 f3a3 	rbit	r3, r3
 800853c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8008540:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008544:	fab3 f383 	clz	r3, r3
 8008548:	b2db      	uxtb	r3, r3
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	b2db      	uxtb	r3, r3
 800854e:	f043 0301 	orr.w	r3, r3, #1
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b01      	cmp	r3, #1
 8008556:	d105      	bne.n	8008564 <HAL_RCC_OscConfig+0x5d4>
 8008558:	4b01      	ldr	r3, [pc, #4]	; (8008560 <HAL_RCC_OscConfig+0x5d0>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	e016      	b.n	800858c <HAL_RCC_OscConfig+0x5fc>
 800855e:	bf00      	nop
 8008560:	40021000 	.word	0x40021000
 8008564:	2302      	movs	r3, #2
 8008566:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800856a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856e:	fa93 f3a3 	rbit	r3, r3
 8008572:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008576:	2302      	movs	r3, #2
 8008578:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800857c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008580:	fa93 f3a3 	rbit	r3, r3
 8008584:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008588:	4bbf      	ldr	r3, [pc, #764]	; (8008888 <HAL_RCC_OscConfig+0x8f8>)
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	2202      	movs	r2, #2
 800858e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008592:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008596:	fa92 f2a2 	rbit	r2, r2
 800859a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800859e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80085a2:	fab2 f282 	clz	r2, r2
 80085a6:	b2d2      	uxtb	r2, r2
 80085a8:	f042 0220 	orr.w	r2, r2, #32
 80085ac:	b2d2      	uxtb	r2, r2
 80085ae:	f002 021f 	and.w	r2, r2, #31
 80085b2:	2101      	movs	r1, #1
 80085b4:	fa01 f202 	lsl.w	r2, r1, r2
 80085b8:	4013      	ands	r3, r2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1ac      	bne.n	8008518 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 8113 	beq.w	80087fa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80085d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d07c      	beq.n	80086de <HAL_RCC_OscConfig+0x74e>
 80085e4:	2301      	movs	r3, #1
 80085e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ee:	fa93 f3a3 	rbit	r3, r3
 80085f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80085f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085fa:	fab3 f383 	clz	r3, r3
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	461a      	mov	r2, r3
 8008602:	4ba2      	ldr	r3, [pc, #648]	; (800888c <HAL_RCC_OscConfig+0x8fc>)
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	461a      	mov	r2, r3
 800860a:	2301      	movs	r3, #1
 800860c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800860e:	f7fd f8f5 	bl	80057fc <HAL_GetTick>
 8008612:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008616:	e00a      	b.n	800862e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008618:	f7fd f8f0 	bl	80057fc <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b02      	cmp	r3, #2
 8008626:	d902      	bls.n	800862e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	f000 bcfe 	b.w	800902a <HAL_RCC_OscConfig+0x109a>
 800862e:	2302      	movs	r3, #2
 8008630:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008638:	fa93 f2a3 	rbit	r2, r3
 800863c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008640:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800864a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800864e:	2202      	movs	r2, #2
 8008650:	601a      	str	r2, [r3, #0]
 8008652:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	fa93 f2a3 	rbit	r2, r3
 8008660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800866e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008672:	2202      	movs	r2, #2
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800867a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	fa93 f2a3 	rbit	r2, r3
 8008684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008688:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800868c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800868e:	4b7e      	ldr	r3, [pc, #504]	; (8008888 <HAL_RCC_OscConfig+0x8f8>)
 8008690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008696:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800869a:	2102      	movs	r1, #2
 800869c:	6019      	str	r1, [r3, #0]
 800869e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	fa93 f1a3 	rbit	r1, r3
 80086ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80086b4:	6019      	str	r1, [r3, #0]
  return result;
 80086b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086ba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	fab3 f383 	clz	r3, r3
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	f003 031f 	and.w	r3, r3, #31
 80086d0:	2101      	movs	r1, #1
 80086d2:	fa01 f303 	lsl.w	r3, r1, r3
 80086d6:	4013      	ands	r3, r2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d09d      	beq.n	8008618 <HAL_RCC_OscConfig+0x688>
 80086dc:	e08d      	b.n	80087fa <HAL_RCC_OscConfig+0x86a>
 80086de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80086e6:	2201      	movs	r2, #1
 80086e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	fa93 f2a3 	rbit	r2, r3
 80086f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008700:	601a      	str	r2, [r3, #0]
  return result;
 8008702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008706:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800870a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800870c:	fab3 f383 	clz	r3, r3
 8008710:	b2db      	uxtb	r3, r3
 8008712:	461a      	mov	r2, r3
 8008714:	4b5d      	ldr	r3, [pc, #372]	; (800888c <HAL_RCC_OscConfig+0x8fc>)
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	461a      	mov	r2, r3
 800871c:	2300      	movs	r3, #0
 800871e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008720:	f7fd f86c 	bl	80057fc <HAL_GetTick>
 8008724:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008728:	e00a      	b.n	8008740 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800872a:	f7fd f867 	bl	80057fc <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d902      	bls.n	8008740 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	f000 bc75 	b.w	800902a <HAL_RCC_OscConfig+0x109a>
 8008740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008744:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008748:	2202      	movs	r2, #2
 800874a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800874c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008750:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	fa93 f2a3 	rbit	r2, r3
 800875a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800875e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800876c:	2202      	movs	r2, #2
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008774:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	fa93 f2a3 	rbit	r2, r3
 800877e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800878c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008790:	2202      	movs	r2, #2
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008798:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	fa93 f2a3 	rbit	r2, r3
 80087a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80087aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087ac:	4b36      	ldr	r3, [pc, #216]	; (8008888 <HAL_RCC_OscConfig+0x8f8>)
 80087ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80087b8:	2102      	movs	r1, #2
 80087ba:	6019      	str	r1, [r3, #0]
 80087bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	fa93 f1a3 	rbit	r1, r3
 80087ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087ce:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80087d2:	6019      	str	r1, [r3, #0]
  return result;
 80087d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	fab3 f383 	clz	r3, r3
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	f003 031f 	and.w	r3, r3, #31
 80087ee:	2101      	movs	r1, #1
 80087f0:	fa01 f303 	lsl.w	r3, r1, r3
 80087f4:	4013      	ands	r3, r2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d197      	bne.n	800872a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0304 	and.w	r3, r3, #4
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 81a5 	beq.w	8008b5a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008810:	2300      	movs	r3, #0
 8008812:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008816:	4b1c      	ldr	r3, [pc, #112]	; (8008888 <HAL_RCC_OscConfig+0x8f8>)
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d116      	bne.n	8008850 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008822:	4b19      	ldr	r3, [pc, #100]	; (8008888 <HAL_RCC_OscConfig+0x8f8>)
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	4a18      	ldr	r2, [pc, #96]	; (8008888 <HAL_RCC_OscConfig+0x8f8>)
 8008828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800882c:	61d3      	str	r3, [r2, #28]
 800882e:	4b16      	ldr	r3, [pc, #88]	; (8008888 <HAL_RCC_OscConfig+0x8f8>)
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8008836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800883a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008848:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800884a:	2301      	movs	r3, #1
 800884c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008850:	4b0f      	ldr	r3, [pc, #60]	; (8008890 <HAL_RCC_OscConfig+0x900>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008858:	2b00      	cmp	r3, #0
 800885a:	d121      	bne.n	80088a0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800885c:	4b0c      	ldr	r3, [pc, #48]	; (8008890 <HAL_RCC_OscConfig+0x900>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a0b      	ldr	r2, [pc, #44]	; (8008890 <HAL_RCC_OscConfig+0x900>)
 8008862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008866:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008868:	f7fc ffc8 	bl	80057fc <HAL_GetTick>
 800886c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008870:	e010      	b.n	8008894 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008872:	f7fc ffc3 	bl	80057fc <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	2b64      	cmp	r3, #100	; 0x64
 8008880:	d908      	bls.n	8008894 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e3d1      	b.n	800902a <HAL_RCC_OscConfig+0x109a>
 8008886:	bf00      	nop
 8008888:	40021000 	.word	0x40021000
 800888c:	10908120 	.word	0x10908120
 8008890:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008894:	4b8d      	ldr	r3, [pc, #564]	; (8008acc <HAL_RCC_OscConfig+0xb3c>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800889c:	2b00      	cmp	r3, #0
 800889e:	d0e8      	beq.n	8008872 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d106      	bne.n	80088be <HAL_RCC_OscConfig+0x92e>
 80088b0:	4b87      	ldr	r3, [pc, #540]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	4a86      	ldr	r2, [pc, #536]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 80088b6:	f043 0301 	orr.w	r3, r3, #1
 80088ba:	6213      	str	r3, [r2, #32]
 80088bc:	e035      	b.n	800892a <HAL_RCC_OscConfig+0x99a>
 80088be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10c      	bne.n	80088e8 <HAL_RCC_OscConfig+0x958>
 80088ce:	4b80      	ldr	r3, [pc, #512]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	4a7f      	ldr	r2, [pc, #508]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 80088d4:	f023 0301 	bic.w	r3, r3, #1
 80088d8:	6213      	str	r3, [r2, #32]
 80088da:	4b7d      	ldr	r3, [pc, #500]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	4a7c      	ldr	r2, [pc, #496]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 80088e0:	f023 0304 	bic.w	r3, r3, #4
 80088e4:	6213      	str	r3, [r2, #32]
 80088e6:	e020      	b.n	800892a <HAL_RCC_OscConfig+0x99a>
 80088e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2b05      	cmp	r3, #5
 80088f6:	d10c      	bne.n	8008912 <HAL_RCC_OscConfig+0x982>
 80088f8:	4b75      	ldr	r3, [pc, #468]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	4a74      	ldr	r2, [pc, #464]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 80088fe:	f043 0304 	orr.w	r3, r3, #4
 8008902:	6213      	str	r3, [r2, #32]
 8008904:	4b72      	ldr	r3, [pc, #456]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	4a71      	ldr	r2, [pc, #452]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 800890a:	f043 0301 	orr.w	r3, r3, #1
 800890e:	6213      	str	r3, [r2, #32]
 8008910:	e00b      	b.n	800892a <HAL_RCC_OscConfig+0x99a>
 8008912:	4b6f      	ldr	r3, [pc, #444]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	4a6e      	ldr	r2, [pc, #440]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 8008918:	f023 0301 	bic.w	r3, r3, #1
 800891c:	6213      	str	r3, [r2, #32]
 800891e:	4b6c      	ldr	r3, [pc, #432]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	4a6b      	ldr	r2, [pc, #428]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 8008924:	f023 0304 	bic.w	r3, r3, #4
 8008928:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800892a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800892e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8081 	beq.w	8008a3e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800893c:	f7fc ff5e 	bl	80057fc <HAL_GetTick>
 8008940:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008944:	e00b      	b.n	800895e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008946:	f7fc ff59 	bl	80057fc <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	f241 3288 	movw	r2, #5000	; 0x1388
 8008956:	4293      	cmp	r3, r2
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e365      	b.n	800902a <HAL_RCC_OscConfig+0x109a>
 800895e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008962:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008966:	2202      	movs	r2, #2
 8008968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800896a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800896e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	fa93 f2a3 	rbit	r2, r3
 8008978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800897c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008986:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800898a:	2202      	movs	r2, #2
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008992:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	fa93 f2a3 	rbit	r2, r3
 800899c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80089a4:	601a      	str	r2, [r3, #0]
  return result;
 80089a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089aa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80089ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089b0:	fab3 f383 	clz	r3, r3
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	095b      	lsrs	r3, r3, #5
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	f043 0302 	orr.w	r3, r3, #2
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d102      	bne.n	80089ca <HAL_RCC_OscConfig+0xa3a>
 80089c4:	4b42      	ldr	r3, [pc, #264]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	e013      	b.n	80089f2 <HAL_RCC_OscConfig+0xa62>
 80089ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80089d2:	2202      	movs	r2, #2
 80089d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	fa93 f2a3 	rbit	r2, r3
 80089e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089e8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	4b38      	ldr	r3, [pc, #224]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80089f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80089fa:	2102      	movs	r1, #2
 80089fc:	6011      	str	r1, [r2, #0]
 80089fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008a02:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8008a06:	6812      	ldr	r2, [r2, #0]
 8008a08:	fa92 f1a2 	rbit	r1, r2
 8008a0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008a10:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8008a14:	6011      	str	r1, [r2, #0]
  return result;
 8008a16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008a1a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8008a1e:	6812      	ldr	r2, [r2, #0]
 8008a20:	fab2 f282 	clz	r2, r2
 8008a24:	b2d2      	uxtb	r2, r2
 8008a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a2a:	b2d2      	uxtb	r2, r2
 8008a2c:	f002 021f 	and.w	r2, r2, #31
 8008a30:	2101      	movs	r1, #1
 8008a32:	fa01 f202 	lsl.w	r2, r1, r2
 8008a36:	4013      	ands	r3, r2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d084      	beq.n	8008946 <HAL_RCC_OscConfig+0x9b6>
 8008a3c:	e083      	b.n	8008b46 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a3e:	f7fc fedd 	bl	80057fc <HAL_GetTick>
 8008a42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a46:	e00b      	b.n	8008a60 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a48:	f7fc fed8 	bl	80057fc <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d901      	bls.n	8008a60 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e2e4      	b.n	800902a <HAL_RCC_OscConfig+0x109a>
 8008a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008a68:	2202      	movs	r2, #2
 8008a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a70:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	fa93 f2a3 	rbit	r2, r3
 8008a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a7e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a94:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	fa93 f2a3 	rbit	r2, r3
 8008a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008aa2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008aa6:	601a      	str	r2, [r3, #0]
  return result;
 8008aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008aac:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008ab0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ab2:	fab3 f383 	clz	r3, r3
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	095b      	lsrs	r3, r3, #5
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f043 0302 	orr.w	r3, r3, #2
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d106      	bne.n	8008ad4 <HAL_RCC_OscConfig+0xb44>
 8008ac6:	4b02      	ldr	r3, [pc, #8]	; (8008ad0 <HAL_RCC_OscConfig+0xb40>)
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	e017      	b.n	8008afc <HAL_RCC_OscConfig+0xb6c>
 8008acc:	40007000 	.word	0x40007000
 8008ad0:	40021000 	.word	0x40021000
 8008ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ad8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008adc:	2202      	movs	r2, #2
 8008ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ae4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	fa93 f2a3 	rbit	r2, r3
 8008aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008af2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	4bb3      	ldr	r3, [pc, #716]	; (8008dc8 <HAL_RCC_OscConfig+0xe38>)
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008b00:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008b04:	2102      	movs	r1, #2
 8008b06:	6011      	str	r1, [r2, #0]
 8008b08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008b0c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008b10:	6812      	ldr	r2, [r2, #0]
 8008b12:	fa92 f1a2 	rbit	r1, r2
 8008b16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008b1a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8008b1e:	6011      	str	r1, [r2, #0]
  return result;
 8008b20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008b24:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8008b28:	6812      	ldr	r2, [r2, #0]
 8008b2a:	fab2 f282 	clz	r2, r2
 8008b2e:	b2d2      	uxtb	r2, r2
 8008b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b34:	b2d2      	uxtb	r2, r2
 8008b36:	f002 021f 	and.w	r2, r2, #31
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8008b40:	4013      	ands	r3, r2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d180      	bne.n	8008a48 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008b46:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d105      	bne.n	8008b5a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b4e:	4b9e      	ldr	r3, [pc, #632]	; (8008dc8 <HAL_RCC_OscConfig+0xe38>)
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	4a9d      	ldr	r2, [pc, #628]	; (8008dc8 <HAL_RCC_OscConfig+0xe38>)
 8008b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b58:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 825e 	beq.w	8009028 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b6c:	4b96      	ldr	r3, [pc, #600]	; (8008dc8 <HAL_RCC_OscConfig+0xe38>)
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f003 030c 	and.w	r3, r3, #12
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	f000 821f 	beq.w	8008fb8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	f040 8170 	bne.w	8008e6c <HAL_RCC_OscConfig+0xedc>
 8008b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008b94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b9e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	fa93 f2a3 	rbit	r2, r3
 8008ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008bac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008bb0:	601a      	str	r2, [r3, #0]
  return result;
 8008bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008bb6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008bba:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bbc:	fab3 f383 	clz	r3, r3
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008bc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	461a      	mov	r2, r3
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bd2:	f7fc fe13 	bl	80057fc <HAL_GetTick>
 8008bd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bda:	e009      	b.n	8008bf0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bdc:	f7fc fe0e 	bl	80057fc <HAL_GetTick>
 8008be0:	4602      	mov	r2, r0
 8008be2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d901      	bls.n	8008bf0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e21c      	b.n	800902a <HAL_RCC_OscConfig+0x109a>
 8008bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008bf4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c02:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	fa93 f2a3 	rbit	r2, r3
 8008c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008c14:	601a      	str	r2, [r3, #0]
  return result;
 8008c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c1a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008c1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c20:	fab3 f383 	clz	r3, r3
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	095b      	lsrs	r3, r3, #5
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	f043 0301 	orr.w	r3, r3, #1
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d102      	bne.n	8008c3a <HAL_RCC_OscConfig+0xcaa>
 8008c34:	4b64      	ldr	r3, [pc, #400]	; (8008dc8 <HAL_RCC_OscConfig+0xe38>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	e027      	b.n	8008c8a <HAL_RCC_OscConfig+0xcfa>
 8008c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c4c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	fa93 f2a3 	rbit	r2, r3
 8008c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c5a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c72:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	fa93 f2a3 	rbit	r2, r3
 8008c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c80:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	4b50      	ldr	r3, [pc, #320]	; (8008dc8 <HAL_RCC_OscConfig+0xe38>)
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008c8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008c92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008c96:	6011      	str	r1, [r2, #0]
 8008c98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008c9c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008ca0:	6812      	ldr	r2, [r2, #0]
 8008ca2:	fa92 f1a2 	rbit	r1, r2
 8008ca6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008caa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8008cae:	6011      	str	r1, [r2, #0]
  return result;
 8008cb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008cb4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8008cb8:	6812      	ldr	r2, [r2, #0]
 8008cba:	fab2 f282 	clz	r2, r2
 8008cbe:	b2d2      	uxtb	r2, r2
 8008cc0:	f042 0220 	orr.w	r2, r2, #32
 8008cc4:	b2d2      	uxtb	r2, r2
 8008cc6:	f002 021f 	and.w	r2, r2, #31
 8008cca:	2101      	movs	r1, #1
 8008ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d182      	bne.n	8008bdc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cd6:	4b3c      	ldr	r3, [pc, #240]	; (8008dc8 <HAL_RCC_OscConfig+0xe38>)
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	f023 020f 	bic.w	r2, r3, #15
 8008cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ce2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cea:	4937      	ldr	r1, [pc, #220]	; (8008dc8 <HAL_RCC_OscConfig+0xe38>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008cf0:	4b35      	ldr	r3, [pc, #212]	; (8008dc8 <HAL_RCC_OscConfig+0xe38>)
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8008cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008cfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6a19      	ldr	r1, [r3, #32]
 8008d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	430b      	orrs	r3, r1
 8008d12:	492d      	ldr	r1, [pc, #180]	; (8008dc8 <HAL_RCC_OscConfig+0xe38>)
 8008d14:	4313      	orrs	r3, r2
 8008d16:	604b      	str	r3, [r1, #4]
 8008d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d1c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008d20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	fa93 f2a3 	rbit	r2, r3
 8008d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d38:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008d3c:	601a      	str	r2, [r3, #0]
  return result;
 8008d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d42:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008d46:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d48:	fab3 f383 	clz	r3, r3
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008d52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	461a      	mov	r2, r3
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d5e:	f7fc fd4d 	bl	80057fc <HAL_GetTick>
 8008d62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008d66:	e009      	b.n	8008d7c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d68:	f7fc fd48 	bl	80057fc <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d901      	bls.n	8008d7c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e156      	b.n	800902a <HAL_RCC_OscConfig+0x109a>
 8008d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d80:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008d84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d8e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	fa93 f2a3 	rbit	r2, r3
 8008d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d9c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008da0:	601a      	str	r2, [r3, #0]
  return result;
 8008da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008da6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008daa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008dac:	fab3 f383 	clz	r3, r3
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	095b      	lsrs	r3, r3, #5
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	f043 0301 	orr.w	r3, r3, #1
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d105      	bne.n	8008dcc <HAL_RCC_OscConfig+0xe3c>
 8008dc0:	4b01      	ldr	r3, [pc, #4]	; (8008dc8 <HAL_RCC_OscConfig+0xe38>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	e02a      	b.n	8008e1c <HAL_RCC_OscConfig+0xe8c>
 8008dc6:	bf00      	nop
 8008dc8:	40021000 	.word	0x40021000
 8008dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008dd0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008dd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008dde:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	fa93 f2a3 	rbit	r2, r3
 8008de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008dec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008df6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8008dfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e04:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	fa93 f2a3 	rbit	r2, r3
 8008e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e12:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	4b86      	ldr	r3, [pc, #536]	; (8009034 <HAL_RCC_OscConfig+0x10a4>)
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008e20:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008e24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008e28:	6011      	str	r1, [r2, #0]
 8008e2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008e2e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008e32:	6812      	ldr	r2, [r2, #0]
 8008e34:	fa92 f1a2 	rbit	r1, r2
 8008e38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008e3c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8008e40:	6011      	str	r1, [r2, #0]
  return result;
 8008e42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008e46:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8008e4a:	6812      	ldr	r2, [r2, #0]
 8008e4c:	fab2 f282 	clz	r2, r2
 8008e50:	b2d2      	uxtb	r2, r2
 8008e52:	f042 0220 	orr.w	r2, r2, #32
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	f002 021f 	and.w	r2, r2, #31
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8008e62:	4013      	ands	r3, r2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f43f af7f 	beq.w	8008d68 <HAL_RCC_OscConfig+0xdd8>
 8008e6a:	e0dd      	b.n	8009028 <HAL_RCC_OscConfig+0x1098>
 8008e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	fa93 f2a3 	rbit	r2, r3
 8008e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e8c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008e90:	601a      	str	r2, [r3, #0]
  return result;
 8008e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e96:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008e9a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e9c:	fab3 f383 	clz	r3, r3
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008ea6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	461a      	mov	r2, r3
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eb2:	f7fc fca3 	bl	80057fc <HAL_GetTick>
 8008eb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008eba:	e009      	b.n	8008ed0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ebc:	f7fc fc9e 	bl	80057fc <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d901      	bls.n	8008ed0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e0ac      	b.n	800902a <HAL_RCC_OscConfig+0x109a>
 8008ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ed4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ee2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	fa93 f2a3 	rbit	r2, r3
 8008eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ef0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008ef4:	601a      	str	r2, [r3, #0]
  return result;
 8008ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008efa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008efe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f00:	fab3 f383 	clz	r3, r3
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	095b      	lsrs	r3, r3, #5
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	f043 0301 	orr.w	r3, r3, #1
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d102      	bne.n	8008f1a <HAL_RCC_OscConfig+0xf8a>
 8008f14:	4b47      	ldr	r3, [pc, #284]	; (8009034 <HAL_RCC_OscConfig+0x10a4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	e027      	b.n	8008f6a <HAL_RCC_OscConfig+0xfda>
 8008f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f1e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008f22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008f26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	fa93 f2a3 	rbit	r2, r3
 8008f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f3a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f44:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8008f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	fa93 f2a3 	rbit	r2, r3
 8008f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f60:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	4b33      	ldr	r3, [pc, #204]	; (8009034 <HAL_RCC_OscConfig+0x10a4>)
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008f6e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008f72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008f76:	6011      	str	r1, [r2, #0]
 8008f78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008f7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008f80:	6812      	ldr	r2, [r2, #0]
 8008f82:	fa92 f1a2 	rbit	r1, r2
 8008f86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008f8a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8008f8e:	6011      	str	r1, [r2, #0]
  return result;
 8008f90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008f94:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	fab2 f282 	clz	r2, r2
 8008f9e:	b2d2      	uxtb	r2, r2
 8008fa0:	f042 0220 	orr.w	r2, r2, #32
 8008fa4:	b2d2      	uxtb	r2, r2
 8008fa6:	f002 021f 	and.w	r2, r2, #31
 8008faa:	2101      	movs	r1, #1
 8008fac:	fa01 f202 	lsl.w	r2, r1, r2
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d182      	bne.n	8008ebc <HAL_RCC_OscConfig+0xf2c>
 8008fb6:	e037      	b.n	8009028 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d101      	bne.n	8008fcc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e02e      	b.n	800902a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008fcc:	4b19      	ldr	r3, [pc, #100]	; (8009034 <HAL_RCC_OscConfig+0x10a4>)
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8008fd4:	4b17      	ldr	r3, [pc, #92]	; (8009034 <HAL_RCC_OscConfig+0x10a4>)
 8008fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008fdc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008fe0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8008fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fe8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d117      	bne.n	8009024 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8008ff4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008ff8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009000:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009008:	429a      	cmp	r2, r3
 800900a:	d10b      	bne.n	8009024 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800900c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009010:	f003 020f 	and.w	r2, r3, #15
 8009014:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009018:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009020:	429a      	cmp	r2, r3
 8009022:	d001      	beq.n	8009028 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e000      	b.n	800902a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	40021000 	.word	0x40021000

08009038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b09e      	sub	sp, #120	; 0x78
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009042:	2300      	movs	r3, #0
 8009044:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e162      	b.n	8009316 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009050:	4b90      	ldr	r3, [pc, #576]	; (8009294 <HAL_RCC_ClockConfig+0x25c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0307 	and.w	r3, r3, #7
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	429a      	cmp	r2, r3
 800905c:	d910      	bls.n	8009080 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800905e:	4b8d      	ldr	r3, [pc, #564]	; (8009294 <HAL_RCC_ClockConfig+0x25c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f023 0207 	bic.w	r2, r3, #7
 8009066:	498b      	ldr	r1, [pc, #556]	; (8009294 <HAL_RCC_ClockConfig+0x25c>)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	4313      	orrs	r3, r2
 800906c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800906e:	4b89      	ldr	r3, [pc, #548]	; (8009294 <HAL_RCC_ClockConfig+0x25c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0307 	and.w	r3, r3, #7
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	d001      	beq.n	8009080 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e14a      	b.n	8009316 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0302 	and.w	r3, r3, #2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d008      	beq.n	800909e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800908c:	4b82      	ldr	r3, [pc, #520]	; (8009298 <HAL_RCC_ClockConfig+0x260>)
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	497f      	ldr	r1, [pc, #508]	; (8009298 <HAL_RCC_ClockConfig+0x260>)
 800909a:	4313      	orrs	r3, r2
 800909c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 80dc 	beq.w	8009264 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d13c      	bne.n	800912e <HAL_RCC_ClockConfig+0xf6>
 80090b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090bc:	fa93 f3a3 	rbit	r3, r3
 80090c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80090c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090c4:	fab3 f383 	clz	r3, r3
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	f043 0301 	orr.w	r3, r3, #1
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d102      	bne.n	80090de <HAL_RCC_ClockConfig+0xa6>
 80090d8:	4b6f      	ldr	r3, [pc, #444]	; (8009298 <HAL_RCC_ClockConfig+0x260>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	e00f      	b.n	80090fe <HAL_RCC_ClockConfig+0xc6>
 80090de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090e6:	fa93 f3a3 	rbit	r3, r3
 80090ea:	667b      	str	r3, [r7, #100]	; 0x64
 80090ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090f0:	663b      	str	r3, [r7, #96]	; 0x60
 80090f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090f4:	fa93 f3a3 	rbit	r3, r3
 80090f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090fa:	4b67      	ldr	r3, [pc, #412]	; (8009298 <HAL_RCC_ClockConfig+0x260>)
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009102:	65ba      	str	r2, [r7, #88]	; 0x58
 8009104:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009106:	fa92 f2a2 	rbit	r2, r2
 800910a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800910c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800910e:	fab2 f282 	clz	r2, r2
 8009112:	b2d2      	uxtb	r2, r2
 8009114:	f042 0220 	orr.w	r2, r2, #32
 8009118:	b2d2      	uxtb	r2, r2
 800911a:	f002 021f 	and.w	r2, r2, #31
 800911e:	2101      	movs	r1, #1
 8009120:	fa01 f202 	lsl.w	r2, r1, r2
 8009124:	4013      	ands	r3, r2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d17b      	bne.n	8009222 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e0f3      	b.n	8009316 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	2b02      	cmp	r3, #2
 8009134:	d13c      	bne.n	80091b0 <HAL_RCC_ClockConfig+0x178>
 8009136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800913a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800913c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800913e:	fa93 f3a3 	rbit	r3, r3
 8009142:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009146:	fab3 f383 	clz	r3, r3
 800914a:	b2db      	uxtb	r3, r3
 800914c:	095b      	lsrs	r3, r3, #5
 800914e:	b2db      	uxtb	r3, r3
 8009150:	f043 0301 	orr.w	r3, r3, #1
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b01      	cmp	r3, #1
 8009158:	d102      	bne.n	8009160 <HAL_RCC_ClockConfig+0x128>
 800915a:	4b4f      	ldr	r3, [pc, #316]	; (8009298 <HAL_RCC_ClockConfig+0x260>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	e00f      	b.n	8009180 <HAL_RCC_ClockConfig+0x148>
 8009160:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009164:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009168:	fa93 f3a3 	rbit	r3, r3
 800916c:	647b      	str	r3, [r7, #68]	; 0x44
 800916e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009172:	643b      	str	r3, [r7, #64]	; 0x40
 8009174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009176:	fa93 f3a3 	rbit	r3, r3
 800917a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800917c:	4b46      	ldr	r3, [pc, #280]	; (8009298 <HAL_RCC_ClockConfig+0x260>)
 800917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009184:	63ba      	str	r2, [r7, #56]	; 0x38
 8009186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009188:	fa92 f2a2 	rbit	r2, r2
 800918c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800918e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009190:	fab2 f282 	clz	r2, r2
 8009194:	b2d2      	uxtb	r2, r2
 8009196:	f042 0220 	orr.w	r2, r2, #32
 800919a:	b2d2      	uxtb	r2, r2
 800919c:	f002 021f 	and.w	r2, r2, #31
 80091a0:	2101      	movs	r1, #1
 80091a2:	fa01 f202 	lsl.w	r2, r1, r2
 80091a6:	4013      	ands	r3, r2
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d13a      	bne.n	8009222 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e0b2      	b.n	8009316 <HAL_RCC_ClockConfig+0x2de>
 80091b0:	2302      	movs	r3, #2
 80091b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b6:	fa93 f3a3 	rbit	r3, r3
 80091ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80091bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091be:	fab3 f383 	clz	r3, r3
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	095b      	lsrs	r3, r3, #5
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	f043 0301 	orr.w	r3, r3, #1
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d102      	bne.n	80091d8 <HAL_RCC_ClockConfig+0x1a0>
 80091d2:	4b31      	ldr	r3, [pc, #196]	; (8009298 <HAL_RCC_ClockConfig+0x260>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	e00d      	b.n	80091f4 <HAL_RCC_ClockConfig+0x1bc>
 80091d8:	2302      	movs	r3, #2
 80091da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091de:	fa93 f3a3 	rbit	r3, r3
 80091e2:	627b      	str	r3, [r7, #36]	; 0x24
 80091e4:	2302      	movs	r3, #2
 80091e6:	623b      	str	r3, [r7, #32]
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	fa93 f3a3 	rbit	r3, r3
 80091ee:	61fb      	str	r3, [r7, #28]
 80091f0:	4b29      	ldr	r3, [pc, #164]	; (8009298 <HAL_RCC_ClockConfig+0x260>)
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	2202      	movs	r2, #2
 80091f6:	61ba      	str	r2, [r7, #24]
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	fa92 f2a2 	rbit	r2, r2
 80091fe:	617a      	str	r2, [r7, #20]
  return result;
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	fab2 f282 	clz	r2, r2
 8009206:	b2d2      	uxtb	r2, r2
 8009208:	f042 0220 	orr.w	r2, r2, #32
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	f002 021f 	and.w	r2, r2, #31
 8009212:	2101      	movs	r1, #1
 8009214:	fa01 f202 	lsl.w	r2, r1, r2
 8009218:	4013      	ands	r3, r2
 800921a:	2b00      	cmp	r3, #0
 800921c:	d101      	bne.n	8009222 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e079      	b.n	8009316 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009222:	4b1d      	ldr	r3, [pc, #116]	; (8009298 <HAL_RCC_ClockConfig+0x260>)
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f023 0203 	bic.w	r2, r3, #3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	491a      	ldr	r1, [pc, #104]	; (8009298 <HAL_RCC_ClockConfig+0x260>)
 8009230:	4313      	orrs	r3, r2
 8009232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009234:	f7fc fae2 	bl	80057fc <HAL_GetTick>
 8009238:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800923a:	e00a      	b.n	8009252 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800923c:	f7fc fade 	bl	80057fc <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	f241 3288 	movw	r2, #5000	; 0x1388
 800924a:	4293      	cmp	r3, r2
 800924c:	d901      	bls.n	8009252 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e061      	b.n	8009316 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009252:	4b11      	ldr	r3, [pc, #68]	; (8009298 <HAL_RCC_ClockConfig+0x260>)
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f003 020c 	and.w	r2, r3, #12
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	429a      	cmp	r2, r3
 8009262:	d1eb      	bne.n	800923c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009264:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <HAL_RCC_ClockConfig+0x25c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0307 	and.w	r3, r3, #7
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	429a      	cmp	r2, r3
 8009270:	d214      	bcs.n	800929c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009272:	4b08      	ldr	r3, [pc, #32]	; (8009294 <HAL_RCC_ClockConfig+0x25c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f023 0207 	bic.w	r2, r3, #7
 800927a:	4906      	ldr	r1, [pc, #24]	; (8009294 <HAL_RCC_ClockConfig+0x25c>)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	4313      	orrs	r3, r2
 8009280:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009282:	4b04      	ldr	r3, [pc, #16]	; (8009294 <HAL_RCC_ClockConfig+0x25c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	d005      	beq.n	800929c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e040      	b.n	8009316 <HAL_RCC_ClockConfig+0x2de>
 8009294:	40022000 	.word	0x40022000
 8009298:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0304 	and.w	r3, r3, #4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d008      	beq.n	80092ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092a8:	4b1d      	ldr	r3, [pc, #116]	; (8009320 <HAL_RCC_ClockConfig+0x2e8>)
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	491a      	ldr	r1, [pc, #104]	; (8009320 <HAL_RCC_ClockConfig+0x2e8>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0308 	and.w	r3, r3, #8
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d009      	beq.n	80092da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092c6:	4b16      	ldr	r3, [pc, #88]	; (8009320 <HAL_RCC_ClockConfig+0x2e8>)
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4912      	ldr	r1, [pc, #72]	; (8009320 <HAL_RCC_ClockConfig+0x2e8>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80092da:	f000 f829 	bl	8009330 <HAL_RCC_GetSysClockFreq>
 80092de:	4601      	mov	r1, r0
 80092e0:	4b0f      	ldr	r3, [pc, #60]	; (8009320 <HAL_RCC_ClockConfig+0x2e8>)
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092e8:	22f0      	movs	r2, #240	; 0xf0
 80092ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	fa92 f2a2 	rbit	r2, r2
 80092f2:	60fa      	str	r2, [r7, #12]
  return result;
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	fab2 f282 	clz	r2, r2
 80092fa:	b2d2      	uxtb	r2, r2
 80092fc:	40d3      	lsrs	r3, r2
 80092fe:	4a09      	ldr	r2, [pc, #36]	; (8009324 <HAL_RCC_ClockConfig+0x2ec>)
 8009300:	5cd3      	ldrb	r3, [r2, r3]
 8009302:	fa21 f303 	lsr.w	r3, r1, r3
 8009306:	4a08      	ldr	r2, [pc, #32]	; (8009328 <HAL_RCC_ClockConfig+0x2f0>)
 8009308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800930a:	4b08      	ldr	r3, [pc, #32]	; (800932c <HAL_RCC_ClockConfig+0x2f4>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	f7fc fa30 	bl	8005774 <HAL_InitTick>
  
  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3778      	adds	r7, #120	; 0x78
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40021000 	.word	0x40021000
 8009324:	08018718 	.word	0x08018718
 8009328:	20000150 	.word	0x20000150
 800932c:	20000154 	.word	0x20000154

08009330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009330:	b480      	push	{r7}
 8009332:	b08b      	sub	sp, #44	; 0x2c
 8009334:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009336:	2300      	movs	r3, #0
 8009338:	61fb      	str	r3, [r7, #28]
 800933a:	2300      	movs	r3, #0
 800933c:	61bb      	str	r3, [r7, #24]
 800933e:	2300      	movs	r3, #0
 8009340:	627b      	str	r3, [r7, #36]	; 0x24
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009346:	2300      	movs	r3, #0
 8009348:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800934a:	4b2a      	ldr	r3, [pc, #168]	; (80093f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	f003 030c 	and.w	r3, r3, #12
 8009356:	2b04      	cmp	r3, #4
 8009358:	d002      	beq.n	8009360 <HAL_RCC_GetSysClockFreq+0x30>
 800935a:	2b08      	cmp	r3, #8
 800935c:	d003      	beq.n	8009366 <HAL_RCC_GetSysClockFreq+0x36>
 800935e:	e03f      	b.n	80093e0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009360:	4b25      	ldr	r3, [pc, #148]	; (80093f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009362:	623b      	str	r3, [r7, #32]
      break;
 8009364:	e03f      	b.n	80093e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800936c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8009370:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	fa92 f2a2 	rbit	r2, r2
 8009378:	607a      	str	r2, [r7, #4]
  return result;
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	fab2 f282 	clz	r2, r2
 8009380:	b2d2      	uxtb	r2, r2
 8009382:	40d3      	lsrs	r3, r2
 8009384:	4a1d      	ldr	r2, [pc, #116]	; (80093fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8009386:	5cd3      	ldrb	r3, [r2, r3]
 8009388:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800938a:	4b1a      	ldr	r3, [pc, #104]	; (80093f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800938c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938e:	f003 030f 	and.w	r3, r3, #15
 8009392:	220f      	movs	r2, #15
 8009394:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	fa92 f2a2 	rbit	r2, r2
 800939c:	60fa      	str	r2, [r7, #12]
  return result;
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	fab2 f282 	clz	r2, r2
 80093a4:	b2d2      	uxtb	r2, r2
 80093a6:	40d3      	lsrs	r3, r2
 80093a8:	4a15      	ldr	r2, [pc, #84]	; (8009400 <HAL_RCC_GetSysClockFreq+0xd0>)
 80093aa:	5cd3      	ldrb	r3, [r2, r3]
 80093ac:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d008      	beq.n	80093ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80093b8:	4a0f      	ldr	r2, [pc, #60]	; (80093f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	fb02 f303 	mul.w	r3, r2, r3
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
 80093c8:	e007      	b.n	80093da <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80093ca:	4a0b      	ldr	r2, [pc, #44]	; (80093f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	fb02 f303 	mul.w	r3, r2, r3
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	623b      	str	r3, [r7, #32]
      break;
 80093de:	e002      	b.n	80093e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80093e0:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80093e2:	623b      	str	r3, [r7, #32]
      break;
 80093e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093e6:	6a3b      	ldr	r3, [r7, #32]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	372c      	adds	r7, #44	; 0x2c
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	40021000 	.word	0x40021000
 80093f8:	007a1200 	.word	0x007a1200
 80093fc:	08018730 	.word	0x08018730
 8009400:	08018740 	.word	0x08018740

08009404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009404:	b480      	push	{r7}
 8009406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009408:	4b03      	ldr	r3, [pc, #12]	; (8009418 <HAL_RCC_GetHCLKFreq+0x14>)
 800940a:	681b      	ldr	r3, [r3, #0]
}
 800940c:	4618      	mov	r0, r3
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	20000150 	.word	0x20000150

0800941c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8009422:	f7ff ffef 	bl	8009404 <HAL_RCC_GetHCLKFreq>
 8009426:	4601      	mov	r1, r0
 8009428:	4b0b      	ldr	r3, [pc, #44]	; (8009458 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009430:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009434:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	fa92 f2a2 	rbit	r2, r2
 800943c:	603a      	str	r2, [r7, #0]
  return result;
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	fab2 f282 	clz	r2, r2
 8009444:	b2d2      	uxtb	r2, r2
 8009446:	40d3      	lsrs	r3, r2
 8009448:	4a04      	ldr	r2, [pc, #16]	; (800945c <HAL_RCC_GetPCLK1Freq+0x40>)
 800944a:	5cd3      	ldrb	r3, [r2, r3]
 800944c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	40021000 	.word	0x40021000
 800945c:	08018728 	.word	0x08018728

08009460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8009466:	f7ff ffcd 	bl	8009404 <HAL_RCC_GetHCLKFreq>
 800946a:	4601      	mov	r1, r0
 800946c:	4b0b      	ldr	r3, [pc, #44]	; (800949c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8009474:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009478:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	fa92 f2a2 	rbit	r2, r2
 8009480:	603a      	str	r2, [r7, #0]
  return result;
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	fab2 f282 	clz	r2, r2
 8009488:	b2d2      	uxtb	r2, r2
 800948a:	40d3      	lsrs	r3, r2
 800948c:	4a04      	ldr	r2, [pc, #16]	; (80094a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800948e:	5cd3      	ldrb	r3, [r2, r3]
 8009490:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009494:	4618      	mov	r0, r3
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	40021000 	.word	0x40021000
 80094a0:	08018728 	.word	0x08018728

080094a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b092      	sub	sp, #72	; 0x48
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80094b4:	2300      	movs	r3, #0
 80094b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 80d4 	beq.w	8009670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094c8:	4b4e      	ldr	r3, [pc, #312]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10e      	bne.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094d4:	4b4b      	ldr	r3, [pc, #300]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80094d6:	69db      	ldr	r3, [r3, #28]
 80094d8:	4a4a      	ldr	r2, [pc, #296]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80094da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094de:	61d3      	str	r3, [r2, #28]
 80094e0:	4b48      	ldr	r3, [pc, #288]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094e8:	60bb      	str	r3, [r7, #8]
 80094ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094ec:	2301      	movs	r3, #1
 80094ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094f2:	4b45      	ldr	r3, [pc, #276]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d118      	bne.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094fe:	4b42      	ldr	r3, [pc, #264]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a41      	ldr	r2, [pc, #260]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009508:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800950a:	f7fc f977 	bl	80057fc <HAL_GetTick>
 800950e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009510:	e008      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009512:	f7fc f973 	bl	80057fc <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	2b64      	cmp	r3, #100	; 0x64
 800951e:	d901      	bls.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e1d6      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009524:	4b38      	ldr	r3, [pc, #224]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0f0      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009530:	4b34      	ldr	r3, [pc, #208]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009538:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800953a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 8084 	beq.w	800964a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800954a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800954c:	429a      	cmp	r2, r3
 800954e:	d07c      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009550:	4b2c      	ldr	r3, [pc, #176]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800955a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800955e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009562:	fa93 f3a3 	rbit	r3, r3
 8009566:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800956a:	fab3 f383 	clz	r3, r3
 800956e:	b2db      	uxtb	r3, r3
 8009570:	461a      	mov	r2, r3
 8009572:	4b26      	ldr	r3, [pc, #152]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	461a      	mov	r2, r3
 800957a:	2301      	movs	r3, #1
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009582:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	fa93 f3a3 	rbit	r3, r3
 800958a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800958c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800958e:	fab3 f383 	clz	r3, r3
 8009592:	b2db      	uxtb	r3, r3
 8009594:	461a      	mov	r2, r3
 8009596:	4b1d      	ldr	r3, [pc, #116]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009598:	4413      	add	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	461a      	mov	r2, r3
 800959e:	2300      	movs	r3, #0
 80095a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80095a2:	4a18      	ldr	r2, [pc, #96]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80095a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80095a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d04b      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095b2:	f7fc f923 	bl	80057fc <HAL_GetTick>
 80095b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095b8:	e00a      	b.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ba:	f7fc f91f 	bl	80057fc <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d901      	bls.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e180      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80095d0:	2302      	movs	r3, #2
 80095d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	fa93 f3a3 	rbit	r3, r3
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
 80095dc:	2302      	movs	r3, #2
 80095de:	623b      	str	r3, [r7, #32]
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	fa93 f3a3 	rbit	r3, r3
 80095e6:	61fb      	str	r3, [r7, #28]
  return result;
 80095e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095ea:	fab3 f383 	clz	r3, r3
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	095b      	lsrs	r3, r3, #5
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	f043 0302 	orr.w	r3, r3, #2
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d108      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80095fe:	4b01      	ldr	r3, [pc, #4]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	e00d      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8009604:	40021000 	.word	0x40021000
 8009608:	40007000 	.word	0x40007000
 800960c:	10908100 	.word	0x10908100
 8009610:	2302      	movs	r3, #2
 8009612:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	fa93 f3a3 	rbit	r3, r3
 800961a:	617b      	str	r3, [r7, #20]
 800961c:	4b9a      	ldr	r3, [pc, #616]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	2202      	movs	r2, #2
 8009622:	613a      	str	r2, [r7, #16]
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	fa92 f2a2 	rbit	r2, r2
 800962a:	60fa      	str	r2, [r7, #12]
  return result;
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	fab2 f282 	clz	r2, r2
 8009632:	b2d2      	uxtb	r2, r2
 8009634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009638:	b2d2      	uxtb	r2, r2
 800963a:	f002 021f 	and.w	r2, r2, #31
 800963e:	2101      	movs	r1, #1
 8009640:	fa01 f202 	lsl.w	r2, r1, r2
 8009644:	4013      	ands	r3, r2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0b7      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800964a:	4b8f      	ldr	r3, [pc, #572]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	498c      	ldr	r1, [pc, #560]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009658:	4313      	orrs	r3, r2
 800965a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800965c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009660:	2b01      	cmp	r3, #1
 8009662:	d105      	bne.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009664:	4b88      	ldr	r3, [pc, #544]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	4a87      	ldr	r2, [pc, #540]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800966a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800966e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d008      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800967c:	4b82      	ldr	r3, [pc, #520]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800967e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009680:	f023 0203 	bic.w	r2, r3, #3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	497f      	ldr	r1, [pc, #508]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800968a:	4313      	orrs	r3, r2
 800968c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 0302 	and.w	r3, r3, #2
 8009696:	2b00      	cmp	r3, #0
 8009698:	d008      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800969a:	4b7b      	ldr	r3, [pc, #492]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	4978      	ldr	r1, [pc, #480]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80096a8:	4313      	orrs	r3, r2
 80096aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d008      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80096b8:	4b73      	ldr	r3, [pc, #460]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80096ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	4970      	ldr	r1, [pc, #448]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0320 	and.w	r3, r3, #32
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d008      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80096d6:	4b6c      	ldr	r3, [pc, #432]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80096d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096da:	f023 0210 	bic.w	r2, r3, #16
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	4969      	ldr	r1, [pc, #420]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80096e4:	4313      	orrs	r3, r2
 80096e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d008      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80096f4:	4b64      	ldr	r3, [pc, #400]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009700:	4961      	ldr	r1, [pc, #388]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009702:	4313      	orrs	r3, r2
 8009704:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800970e:	2b00      	cmp	r3, #0
 8009710:	d008      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009712:	4b5d      	ldr	r3, [pc, #372]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009716:	f023 0220 	bic.w	r2, r3, #32
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	495a      	ldr	r1, [pc, #360]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009720:	4313      	orrs	r3, r2
 8009722:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d008      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009730:	4b55      	ldr	r3, [pc, #340]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009734:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973c:	4952      	ldr	r1, [pc, #328]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800973e:	4313      	orrs	r3, r2
 8009740:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0308 	and.w	r3, r3, #8
 800974a:	2b00      	cmp	r3, #0
 800974c:	d008      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800974e:	4b4e      	ldr	r3, [pc, #312]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	494b      	ldr	r1, [pc, #300]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800975c:	4313      	orrs	r3, r2
 800975e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2b00      	cmp	r3, #0
 800976a:	d008      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800976c:	4b46      	ldr	r3, [pc, #280]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800976e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009770:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	4943      	ldr	r1, [pc, #268]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800977a:	4313      	orrs	r3, r2
 800977c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009786:	2b00      	cmp	r3, #0
 8009788:	d008      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800978a:	4b3f      	ldr	r3, [pc, #252]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009796:	493c      	ldr	r1, [pc, #240]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009798:	4313      	orrs	r3, r2
 800979a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d008      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80097a8:	4b37      	ldr	r3, [pc, #220]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b4:	4934      	ldr	r1, [pc, #208]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d008      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80097c6:	4b30      	ldr	r3, [pc, #192]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80097c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ca:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d2:	492d      	ldr	r1, [pc, #180]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d008      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80097e4:	4b28      	ldr	r3, [pc, #160]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80097e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f0:	4925      	ldr	r1, [pc, #148]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d008      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8009802:	4b21      	ldr	r3, [pc, #132]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009806:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	491e      	ldr	r1, [pc, #120]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009810:	4313      	orrs	r3, r2
 8009812:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d008      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8009820:	4b19      	ldr	r3, [pc, #100]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009824:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982c:	4916      	ldr	r1, [pc, #88]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800982e:	4313      	orrs	r3, r2
 8009830:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d008      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800983e:	4b12      	ldr	r3, [pc, #72]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009842:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984a:	490f      	ldr	r1, [pc, #60]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800984c:	4313      	orrs	r3, r2
 800984e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d008      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800985c:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800985e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009860:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009868:	4907      	ldr	r1, [pc, #28]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800986a:	4313      	orrs	r3, r2
 800986c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00c      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800987a:	4b03      	ldr	r3, [pc, #12]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800987c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	e002      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009886:	bf00      	nop
 8009888:	40021000 	.word	0x40021000
 800988c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800988e:	4913      	ldr	r1, [pc, #76]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009890:	4313      	orrs	r3, r2
 8009892:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d008      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80098a0:	4b0e      	ldr	r3, [pc, #56]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ac:	490b      	ldr	r1, [pc, #44]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d008      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80098be:	4b07      	ldr	r3, [pc, #28]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80098c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ca:	4904      	ldr	r1, [pc, #16]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3748      	adds	r7, #72	; 0x48
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	40021000 	.word	0x40021000

080098e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d101      	bne.n	80098f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e09d      	b.n	8009a2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d108      	bne.n	800990c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009902:	d009      	beq.n	8009918 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	61da      	str	r2, [r3, #28]
 800990a:	e005      	b.n	8009918 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d106      	bne.n	8009938 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7fb fb86 	bl	8005044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2202      	movs	r2, #2
 800993c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800994e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009958:	d902      	bls.n	8009960 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800995a:	2300      	movs	r3, #0
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	e002      	b.n	8009966 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009964:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800996e:	d007      	beq.n	8009980 <HAL_SPI_Init+0xa0>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009978:	d002      	beq.n	8009980 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009990:	431a      	orrs	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	431a      	orrs	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	431a      	orrs	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099ae:	431a      	orrs	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099b8:	431a      	orrs	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c2:	ea42 0103 	orr.w	r1, r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	0c1b      	lsrs	r3, r3, #16
 80099dc:	f003 0204 	and.w	r2, r3, #4
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e4:	f003 0310 	and.w	r3, r3, #16
 80099e8:	431a      	orrs	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ee:	f003 0308 	and.w	r3, r3, #8
 80099f2:	431a      	orrs	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80099fc:	ea42 0103 	orr.w	r1, r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	69da      	ldr	r2, [r3, #28]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b088      	sub	sp, #32
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	60f8      	str	r0, [r7, #12]
 8009a3e:	60b9      	str	r1, [r7, #8]
 8009a40:	603b      	str	r3, [r7, #0]
 8009a42:	4613      	mov	r3, r2
 8009a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d101      	bne.n	8009a58 <HAL_SPI_Transmit+0x22>
 8009a54:	2302      	movs	r3, #2
 8009a56:	e15f      	b.n	8009d18 <HAL_SPI_Transmit+0x2e2>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a60:	f7fb fecc 	bl	80057fc <HAL_GetTick>
 8009a64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009a66:	88fb      	ldrh	r3, [r7, #6]
 8009a68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d002      	beq.n	8009a7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009a76:	2302      	movs	r3, #2
 8009a78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a7a:	e148      	b.n	8009d0e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d002      	beq.n	8009a88 <HAL_SPI_Transmit+0x52>
 8009a82:	88fb      	ldrh	r3, [r7, #6]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d102      	bne.n	8009a8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a8c:	e13f      	b.n	8009d0e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2203      	movs	r2, #3
 8009a92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	88fa      	ldrh	r2, [r7, #6]
 8009aa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	88fa      	ldrh	r2, [r7, #6]
 8009aac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ad8:	d10f      	bne.n	8009afa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ae8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009af8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b04:	2b40      	cmp	r3, #64	; 0x40
 8009b06:	d007      	beq.n	8009b18 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b20:	d94f      	bls.n	8009bc2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <HAL_SPI_Transmit+0xfa>
 8009b2a:	8afb      	ldrh	r3, [r7, #22]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d142      	bne.n	8009bb6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	881a      	ldrh	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b40:	1c9a      	adds	r2, r3, #2
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009b54:	e02f      	b.n	8009bb6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f003 0302 	and.w	r3, r3, #2
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d112      	bne.n	8009b8a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b68:	881a      	ldrh	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b74:	1c9a      	adds	r2, r3, #2
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	3b01      	subs	r3, #1
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b88:	e015      	b.n	8009bb6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b8a:	f7fb fe37 	bl	80057fc <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d803      	bhi.n	8009ba2 <HAL_SPI_Transmit+0x16c>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba0:	d102      	bne.n	8009ba8 <HAL_SPI_Transmit+0x172>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d106      	bne.n	8009bb6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8009bb4:	e0ab      	b.n	8009d0e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1ca      	bne.n	8009b56 <HAL_SPI_Transmit+0x120>
 8009bc0:	e080      	b.n	8009cc4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <HAL_SPI_Transmit+0x19a>
 8009bca:	8afb      	ldrh	r3, [r7, #22]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d174      	bne.n	8009cba <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d912      	bls.n	8009c00 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bde:	881a      	ldrh	r2, [r3, #0]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bea:	1c9a      	adds	r2, r3, #2
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	3b02      	subs	r3, #2
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009bfe:	e05c      	b.n	8009cba <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	330c      	adds	r3, #12
 8009c0a:	7812      	ldrb	r2, [r2, #0]
 8009c0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009c26:	e048      	b.n	8009cba <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f003 0302 	and.w	r3, r3, #2
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d12b      	bne.n	8009c8e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d912      	bls.n	8009c66 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c44:	881a      	ldrh	r2, [r3, #0]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c50:	1c9a      	adds	r2, r3, #2
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	3b02      	subs	r3, #2
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c64:	e029      	b.n	8009cba <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	330c      	adds	r3, #12
 8009c70:	7812      	ldrb	r2, [r2, #0]
 8009c72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c8c:	e015      	b.n	8009cba <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c8e:	f7fb fdb5 	bl	80057fc <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d803      	bhi.n	8009ca6 <HAL_SPI_Transmit+0x270>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca4:	d102      	bne.n	8009cac <HAL_SPI_Transmit+0x276>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d106      	bne.n	8009cba <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8009cb8:	e029      	b.n	8009d0e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1b1      	bne.n	8009c28 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f000 fcf9 	bl	800a6c0 <SPI_EndRxTxTransaction>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10a      	bne.n	8009cf8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	613b      	str	r3, [r7, #16]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	613b      	str	r3, [r7, #16]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	613b      	str	r3, [r7, #16]
 8009cf6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	77fb      	strb	r3, [r7, #31]
 8009d04:	e003      	b.n	8009d0e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009d16:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3720      	adds	r7, #32
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b088      	sub	sp, #32
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	603b      	str	r3, [r7, #0]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d002      	beq.n	8009d46 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8009d40:	2302      	movs	r3, #2
 8009d42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d44:	e11a      	b.n	8009f7c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d4e:	d112      	bne.n	8009d76 <HAL_SPI_Receive+0x56>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10e      	bne.n	8009d76 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2204      	movs	r2, #4
 8009d5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009d60:	88fa      	ldrh	r2, [r7, #6]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	4613      	mov	r3, r2
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	68b9      	ldr	r1, [r7, #8]
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 f90e 	bl	8009f8e <HAL_SPI_TransmitReceive>
 8009d72:	4603      	mov	r3, r0
 8009d74:	e107      	b.n	8009f86 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d101      	bne.n	8009d84 <HAL_SPI_Receive+0x64>
 8009d80:	2302      	movs	r3, #2
 8009d82:	e100      	b.n	8009f86 <HAL_SPI_Receive+0x266>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d8c:	f7fb fd36 	bl	80057fc <HAL_GetTick>
 8009d90:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <HAL_SPI_Receive+0x7e>
 8009d98:	88fb      	ldrh	r3, [r7, #6]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d102      	bne.n	8009da4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009da2:	e0eb      	b.n	8009f7c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2204      	movs	r2, #4
 8009da8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	88fa      	ldrh	r2, [r7, #6]
 8009dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	88fa      	ldrh	r2, [r7, #6]
 8009dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009dee:	d908      	bls.n	8009e02 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009dfe:	605a      	str	r2, [r3, #4]
 8009e00:	e007      	b.n	8009e12 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e10:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e1a:	d10f      	bne.n	8009e3c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e46:	2b40      	cmp	r3, #64	; 0x40
 8009e48:	d007      	beq.n	8009e5a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009e62:	d86f      	bhi.n	8009f44 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009e64:	e034      	b.n	8009ed0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d117      	bne.n	8009ea4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f103 020c 	add.w	r2, r3, #12
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e80:	7812      	ldrb	r2, [r2, #0]
 8009e82:	b2d2      	uxtb	r2, r2
 8009e84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009ea2:	e015      	b.n	8009ed0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ea4:	f7fb fcaa 	bl	80057fc <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d803      	bhi.n	8009ebc <HAL_SPI_Receive+0x19c>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eba:	d102      	bne.n	8009ec2 <HAL_SPI_Receive+0x1a2>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d106      	bne.n	8009ed0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8009ece:	e055      	b.n	8009f7c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1c4      	bne.n	8009e66 <HAL_SPI_Receive+0x146>
 8009edc:	e038      	b.n	8009f50 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d115      	bne.n	8009f18 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef6:	b292      	uxth	r2, r2
 8009ef8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efe:	1c9a      	adds	r2, r3, #2
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009f16:	e015      	b.n	8009f44 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f18:	f7fb fc70 	bl	80057fc <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d803      	bhi.n	8009f30 <HAL_SPI_Receive+0x210>
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2e:	d102      	bne.n	8009f36 <HAL_SPI_Receive+0x216>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d106      	bne.n	8009f44 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8009f42:	e01b      	b.n	8009f7c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1c6      	bne.n	8009ede <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 fb5b 	bl	800a610 <SPI_EndRxTransaction>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2220      	movs	r2, #32
 8009f64:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d002      	beq.n	8009f74 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	75fb      	strb	r3, [r7, #23]
 8009f72:	e003      	b.n	8009f7c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b08a      	sub	sp, #40	; 0x28
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	60f8      	str	r0, [r7, #12]
 8009f96:	60b9      	str	r1, [r7, #8]
 8009f98:	607a      	str	r2, [r7, #4]
 8009f9a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d101      	bne.n	8009fb4 <HAL_SPI_TransmitReceive+0x26>
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	e20a      	b.n	800a3ca <HAL_SPI_TransmitReceive+0x43c>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009fbc:	f7fb fc1e 	bl	80057fc <HAL_GetTick>
 8009fc0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009fc8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009fd0:	887b      	ldrh	r3, [r7, #2]
 8009fd2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009fd4:	887b      	ldrh	r3, [r7, #2]
 8009fd6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009fd8:	7efb      	ldrb	r3, [r7, #27]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d00e      	beq.n	8009ffc <HAL_SPI_TransmitReceive+0x6e>
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fe4:	d106      	bne.n	8009ff4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d102      	bne.n	8009ff4 <HAL_SPI_TransmitReceive+0x66>
 8009fee:	7efb      	ldrb	r3, [r7, #27]
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d003      	beq.n	8009ffc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009ffa:	e1e0      	b.n	800a3be <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <HAL_SPI_TransmitReceive+0x80>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <HAL_SPI_TransmitReceive+0x80>
 800a008:	887b      	ldrh	r3, [r7, #2]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d103      	bne.n	800a016 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a014:	e1d3      	b.n	800a3be <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	2b04      	cmp	r3, #4
 800a020:	d003      	beq.n	800a02a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2205      	movs	r2, #5
 800a026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	887a      	ldrh	r2, [r7, #2]
 800a03a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	887a      	ldrh	r2, [r7, #2]
 800a042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	887a      	ldrh	r2, [r7, #2]
 800a050:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	887a      	ldrh	r2, [r7, #2]
 800a056:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a06c:	d802      	bhi.n	800a074 <HAL_SPI_TransmitReceive+0xe6>
 800a06e:	8a3b      	ldrh	r3, [r7, #16]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d908      	bls.n	800a086 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a082:	605a      	str	r2, [r3, #4]
 800a084:	e007      	b.n	800a096 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a094:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a0:	2b40      	cmp	r3, #64	; 0x40
 800a0a2:	d007      	beq.n	800a0b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0bc:	f240 8081 	bls.w	800a1c2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <HAL_SPI_TransmitReceive+0x140>
 800a0c8:	8a7b      	ldrh	r3, [r7, #18]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d16d      	bne.n	800a1aa <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d2:	881a      	ldrh	r2, [r3, #0]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0de:	1c9a      	adds	r2, r3, #2
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0f2:	e05a      	b.n	800a1aa <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	f003 0302 	and.w	r3, r3, #2
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d11b      	bne.n	800a13a <HAL_SPI_TransmitReceive+0x1ac>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a106:	b29b      	uxth	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d016      	beq.n	800a13a <HAL_SPI_TransmitReceive+0x1ac>
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d113      	bne.n	800a13a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a116:	881a      	ldrh	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	1c9a      	adds	r2, r3, #2
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	3b01      	subs	r3, #1
 800a130:	b29a      	uxth	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b01      	cmp	r3, #1
 800a146:	d11c      	bne.n	800a182 <HAL_SPI_TransmitReceive+0x1f4>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a14e:	b29b      	uxth	r3, r3
 800a150:	2b00      	cmp	r3, #0
 800a152:	d016      	beq.n	800a182 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68da      	ldr	r2, [r3, #12]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15e:	b292      	uxth	r2, r2
 800a160:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a166:	1c9a      	adds	r2, r3, #2
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a172:	b29b      	uxth	r3, r3
 800a174:	3b01      	subs	r3, #1
 800a176:	b29a      	uxth	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a17e:	2301      	movs	r3, #1
 800a180:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a182:	f7fb fb3b 	bl	80057fc <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a18e:	429a      	cmp	r2, r3
 800a190:	d80b      	bhi.n	800a1aa <HAL_SPI_TransmitReceive+0x21c>
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a198:	d007      	beq.n	800a1aa <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800a1a8:	e109      	b.n	800a3be <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d19f      	bne.n	800a0f4 <HAL_SPI_TransmitReceive+0x166>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d199      	bne.n	800a0f4 <HAL_SPI_TransmitReceive+0x166>
 800a1c0:	e0e3      	b.n	800a38a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d003      	beq.n	800a1d2 <HAL_SPI_TransmitReceive+0x244>
 800a1ca:	8a7b      	ldrh	r3, [r7, #18]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	f040 80cf 	bne.w	800a370 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d912      	bls.n	800a202 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e0:	881a      	ldrh	r2, [r3, #0]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ec:	1c9a      	adds	r2, r3, #2
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	3b02      	subs	r3, #2
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a200:	e0b6      	b.n	800a370 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	330c      	adds	r3, #12
 800a20c:	7812      	ldrb	r2, [r2, #0]
 800a20e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a21e:	b29b      	uxth	r3, r3
 800a220:	3b01      	subs	r3, #1
 800a222:	b29a      	uxth	r2, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a228:	e0a2      	b.n	800a370 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f003 0302 	and.w	r3, r3, #2
 800a234:	2b02      	cmp	r3, #2
 800a236:	d134      	bne.n	800a2a2 <HAL_SPI_TransmitReceive+0x314>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d02f      	beq.n	800a2a2 <HAL_SPI_TransmitReceive+0x314>
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	2b01      	cmp	r3, #1
 800a246:	d12c      	bne.n	800a2a2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d912      	bls.n	800a278 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a256:	881a      	ldrh	r2, [r3, #0]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a262:	1c9a      	adds	r2, r3, #2
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	3b02      	subs	r3, #2
 800a270:	b29a      	uxth	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a276:	e012      	b.n	800a29e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	330c      	adds	r3, #12
 800a282:	7812      	ldrb	r2, [r2, #0]
 800a284:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28a:	1c5a      	adds	r2, r3, #1
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a294:	b29b      	uxth	r3, r3
 800a296:	3b01      	subs	r3, #1
 800a298:	b29a      	uxth	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	f003 0301 	and.w	r3, r3, #1
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d148      	bne.n	800a342 <HAL_SPI_TransmitReceive+0x3b4>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d042      	beq.n	800a342 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d923      	bls.n	800a310 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68da      	ldr	r2, [r3, #12]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d2:	b292      	uxth	r2, r2
 800a2d4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2da:	1c9a      	adds	r2, r3, #2
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	3b02      	subs	r3, #2
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d81f      	bhi.n	800a33e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a30c:	605a      	str	r2, [r3, #4]
 800a30e:	e016      	b.n	800a33e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f103 020c 	add.w	r2, r3, #12
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31c:	7812      	ldrb	r2, [r2, #0]
 800a31e:	b2d2      	uxtb	r2, r2
 800a320:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a332:	b29b      	uxth	r3, r3
 800a334:	3b01      	subs	r3, #1
 800a336:	b29a      	uxth	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a33e:	2301      	movs	r3, #1
 800a340:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a342:	f7fb fa5b 	bl	80057fc <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a34e:	429a      	cmp	r2, r3
 800a350:	d803      	bhi.n	800a35a <HAL_SPI_TransmitReceive+0x3cc>
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a358:	d102      	bne.n	800a360 <HAL_SPI_TransmitReceive+0x3d2>
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d107      	bne.n	800a370 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2201      	movs	r2, #1
 800a36a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800a36e:	e026      	b.n	800a3be <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a374:	b29b      	uxth	r3, r3
 800a376:	2b00      	cmp	r3, #0
 800a378:	f47f af57 	bne.w	800a22a <HAL_SPI_TransmitReceive+0x29c>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a382:	b29b      	uxth	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	f47f af50 	bne.w	800a22a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f000 f996 	bl	800a6c0 <SPI_EndRxTxTransaction>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d005      	beq.n	800a3a6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d003      	beq.n	800a3b6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3b4:	e003      	b.n	800a3be <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a3c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3728      	adds	r7, #40	; 0x28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
	...

0800a3d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	603b      	str	r3, [r7, #0]
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a3e4:	f7fb fa0a 	bl	80057fc <HAL_GetTick>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	1a9b      	subs	r3, r3, r2
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a3f4:	f7fb fa02 	bl	80057fc <HAL_GetTick>
 800a3f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a3fa:	4b39      	ldr	r3, [pc, #228]	; (800a4e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	015b      	lsls	r3, r3, #5
 800a400:	0d1b      	lsrs	r3, r3, #20
 800a402:	69fa      	ldr	r2, [r7, #28]
 800a404:	fb02 f303 	mul.w	r3, r2, r3
 800a408:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a40a:	e054      	b.n	800a4b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a412:	d050      	beq.n	800a4b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a414:	f7fb f9f2 	bl	80057fc <HAL_GetTick>
 800a418:	4602      	mov	r2, r0
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	69fa      	ldr	r2, [r7, #28]
 800a420:	429a      	cmp	r2, r3
 800a422:	d902      	bls.n	800a42a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d13d      	bne.n	800a4a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a438:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a442:	d111      	bne.n	800a468 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a44c:	d004      	beq.n	800a458 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a456:	d107      	bne.n	800a468 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a466:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a470:	d10f      	bne.n	800a492 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a490:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e017      	b.n	800a4d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d101      	bne.n	800a4b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	689a      	ldr	r2, [r3, #8]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	4013      	ands	r3, r2
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	bf0c      	ite	eq
 800a4c6:	2301      	moveq	r3, #1
 800a4c8:	2300      	movne	r3, #0
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	79fb      	ldrb	r3, [r7, #7]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d19b      	bne.n	800a40c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3720      	adds	r7, #32
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20000150 	.word	0x20000150

0800a4e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08a      	sub	sp, #40	; 0x28
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	607a      	str	r2, [r7, #4]
 800a4f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a4f6:	f7fb f981 	bl	80057fc <HAL_GetTick>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	1a9b      	subs	r3, r3, r2
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	4413      	add	r3, r2
 800a504:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a506:	f7fb f979 	bl	80057fc <HAL_GetTick>
 800a50a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	330c      	adds	r3, #12
 800a512:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a514:	4b3d      	ldr	r3, [pc, #244]	; (800a60c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	4613      	mov	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	00da      	lsls	r2, r3, #3
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	0d1b      	lsrs	r3, r3, #20
 800a524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a526:	fb02 f303 	mul.w	r3, r2, r3
 800a52a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a52c:	e060      	b.n	800a5f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a534:	d107      	bne.n	800a546 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d104      	bne.n	800a546 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	b2db      	uxtb	r3, r3
 800a542:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a544:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a54c:	d050      	beq.n	800a5f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a54e:	f7fb f955 	bl	80057fc <HAL_GetTick>
 800a552:	4602      	mov	r2, r0
 800a554:	6a3b      	ldr	r3, [r7, #32]
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d902      	bls.n	800a564 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a560:	2b00      	cmp	r3, #0
 800a562:	d13d      	bne.n	800a5e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a572:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a57c:	d111      	bne.n	800a5a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a586:	d004      	beq.n	800a592 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a590:	d107      	bne.n	800a5a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5aa:	d10f      	bne.n	800a5cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e010      	b.n	800a602 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d101      	bne.n	800a5ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689a      	ldr	r2, [r3, #8]
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d196      	bne.n	800a52e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3728      	adds	r7, #40	; 0x28
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20000150 	.word	0x20000150

0800a610 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af02      	add	r7, sp, #8
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a624:	d111      	bne.n	800a64a <SPI_EndRxTransaction+0x3a>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a62e:	d004      	beq.n	800a63a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a638:	d107      	bne.n	800a64a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a648:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	2200      	movs	r2, #0
 800a652:	2180      	movs	r1, #128	; 0x80
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f7ff febd 	bl	800a3d4 <SPI_WaitFlagStateUntilTimeout>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d007      	beq.n	800a670 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a664:	f043 0220 	orr.w	r2, r3, #32
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e023      	b.n	800a6b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a678:	d11d      	bne.n	800a6b6 <SPI_EndRxTransaction+0xa6>
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a682:	d004      	beq.n	800a68e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a68c:	d113      	bne.n	800a6b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	2200      	movs	r2, #0
 800a696:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7ff ff22 	bl	800a4e4 <SPI_WaitFifoStateUntilTimeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d007      	beq.n	800a6b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6aa:	f043 0220 	orr.w	r2, r3, #32
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e000      	b.n	800a6b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af02      	add	r7, sp, #8
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f7ff ff03 	bl	800a4e4 <SPI_WaitFifoStateUntilTimeout>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d007      	beq.n	800a6f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6e8:	f043 0220 	orr.w	r2, r3, #32
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e027      	b.n	800a744 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2180      	movs	r1, #128	; 0x80
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f7ff fe68 	bl	800a3d4 <SPI_WaitFlagStateUntilTimeout>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d007      	beq.n	800a71a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a70e:	f043 0220 	orr.w	r2, r3, #32
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e014      	b.n	800a744 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2200      	movs	r2, #0
 800a722:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7ff fedc 	bl	800a4e4 <SPI_WaitFifoStateUntilTimeout>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d007      	beq.n	800a742 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a736:	f043 0220 	orr.w	r2, r3, #32
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a73e:	2303      	movs	r3, #3
 800a740:	e000      	b.n	800a744 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e049      	b.n	800a7f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d106      	bne.n	800a778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7fa fd06 	bl	8005184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2202      	movs	r2, #2
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	3304      	adds	r3, #4
 800a788:	4619      	mov	r1, r3
 800a78a:	4610      	mov	r0, r2
 800a78c:	f000 fe0a 	bl	800b3a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d001      	beq.n	800a814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e04f      	b.n	800a8b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2202      	movs	r2, #2
 800a818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68da      	ldr	r2, [r3, #12]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f042 0201 	orr.w	r2, r2, #1
 800a82a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a23      	ldr	r2, [pc, #140]	; (800a8c0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d01d      	beq.n	800a872 <HAL_TIM_Base_Start_IT+0x76>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a83e:	d018      	beq.n	800a872 <HAL_TIM_Base_Start_IT+0x76>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a1f      	ldr	r2, [pc, #124]	; (800a8c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d013      	beq.n	800a872 <HAL_TIM_Base_Start_IT+0x76>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a1e      	ldr	r2, [pc, #120]	; (800a8c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d00e      	beq.n	800a872 <HAL_TIM_Base_Start_IT+0x76>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a1c      	ldr	r2, [pc, #112]	; (800a8cc <HAL_TIM_Base_Start_IT+0xd0>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d009      	beq.n	800a872 <HAL_TIM_Base_Start_IT+0x76>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a1b      	ldr	r2, [pc, #108]	; (800a8d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d004      	beq.n	800a872 <HAL_TIM_Base_Start_IT+0x76>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a19      	ldr	r2, [pc, #100]	; (800a8d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d115      	bne.n	800a89e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	689a      	ldr	r2, [r3, #8]
 800a878:	4b17      	ldr	r3, [pc, #92]	; (800a8d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a87a:	4013      	ands	r3, r2
 800a87c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b06      	cmp	r3, #6
 800a882:	d015      	beq.n	800a8b0 <HAL_TIM_Base_Start_IT+0xb4>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a88a:	d011      	beq.n	800a8b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f042 0201 	orr.w	r2, r2, #1
 800a89a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a89c:	e008      	b.n	800a8b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f042 0201 	orr.w	r2, r2, #1
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	e000      	b.n	800a8b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	40012c00 	.word	0x40012c00
 800a8c4:	40000400 	.word	0x40000400
 800a8c8:	40000800 	.word	0x40000800
 800a8cc:	40013400 	.word	0x40013400
 800a8d0:	40014000 	.word	0x40014000
 800a8d4:	40015000 	.word	0x40015000
 800a8d8:	00010007 	.word	0x00010007

0800a8dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e049      	b.n	800a982 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d106      	bne.n	800a908 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7fa fc9e 	bl	8005244 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2202      	movs	r2, #2
 800a90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3304      	adds	r3, #4
 800a918:	4619      	mov	r1, r3
 800a91a:	4610      	mov	r0, r2
 800a91c:	f000 fd42 	bl	800b3a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b082      	sub	sp, #8
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e049      	b.n	800aa30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d106      	bne.n	800a9b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f841 	bl	800aa38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	f000 fceb 	bl	800b3a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d109      	bne.n	800aa70 <HAL_TIM_PWM_Start+0x24>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	bf14      	ite	ne
 800aa68:	2301      	movne	r3, #1
 800aa6a:	2300      	moveq	r3, #0
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	e03c      	b.n	800aaea <HAL_TIM_PWM_Start+0x9e>
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d109      	bne.n	800aa8a <HAL_TIM_PWM_Start+0x3e>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	bf14      	ite	ne
 800aa82:	2301      	movne	r3, #1
 800aa84:	2300      	moveq	r3, #0
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	e02f      	b.n	800aaea <HAL_TIM_PWM_Start+0x9e>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b08      	cmp	r3, #8
 800aa8e:	d109      	bne.n	800aaa4 <HAL_TIM_PWM_Start+0x58>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	bf14      	ite	ne
 800aa9c:	2301      	movne	r3, #1
 800aa9e:	2300      	moveq	r3, #0
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	e022      	b.n	800aaea <HAL_TIM_PWM_Start+0x9e>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	2b0c      	cmp	r3, #12
 800aaa8:	d109      	bne.n	800aabe <HAL_TIM_PWM_Start+0x72>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	bf14      	ite	ne
 800aab6:	2301      	movne	r3, #1
 800aab8:	2300      	moveq	r3, #0
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	e015      	b.n	800aaea <HAL_TIM_PWM_Start+0x9e>
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2b10      	cmp	r3, #16
 800aac2:	d109      	bne.n	800aad8 <HAL_TIM_PWM_Start+0x8c>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b01      	cmp	r3, #1
 800aace:	bf14      	ite	ne
 800aad0:	2301      	movne	r3, #1
 800aad2:	2300      	moveq	r3, #0
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	e008      	b.n	800aaea <HAL_TIM_PWM_Start+0x9e>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	bf14      	ite	ne
 800aae4:	2301      	movne	r3, #1
 800aae6:	2300      	moveq	r3, #0
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e0a1      	b.n	800ac36 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d104      	bne.n	800ab02 <HAL_TIM_PWM_Start+0xb6>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2202      	movs	r2, #2
 800aafc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab00:	e023      	b.n	800ab4a <HAL_TIM_PWM_Start+0xfe>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	d104      	bne.n	800ab12 <HAL_TIM_PWM_Start+0xc6>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab10:	e01b      	b.n	800ab4a <HAL_TIM_PWM_Start+0xfe>
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	2b08      	cmp	r3, #8
 800ab16:	d104      	bne.n	800ab22 <HAL_TIM_PWM_Start+0xd6>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab20:	e013      	b.n	800ab4a <HAL_TIM_PWM_Start+0xfe>
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	2b0c      	cmp	r3, #12
 800ab26:	d104      	bne.n	800ab32 <HAL_TIM_PWM_Start+0xe6>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2202      	movs	r2, #2
 800ab2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab30:	e00b      	b.n	800ab4a <HAL_TIM_PWM_Start+0xfe>
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b10      	cmp	r3, #16
 800ab36:	d104      	bne.n	800ab42 <HAL_TIM_PWM_Start+0xf6>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab40:	e003      	b.n	800ab4a <HAL_TIM_PWM_Start+0xfe>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2202      	movs	r2, #2
 800ab46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	6839      	ldr	r1, [r7, #0]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f001 f864 	bl	800bc20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a38      	ldr	r2, [pc, #224]	; (800ac40 <HAL_TIM_PWM_Start+0x1f4>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d018      	beq.n	800ab94 <HAL_TIM_PWM_Start+0x148>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a37      	ldr	r2, [pc, #220]	; (800ac44 <HAL_TIM_PWM_Start+0x1f8>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d013      	beq.n	800ab94 <HAL_TIM_PWM_Start+0x148>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a35      	ldr	r2, [pc, #212]	; (800ac48 <HAL_TIM_PWM_Start+0x1fc>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d00e      	beq.n	800ab94 <HAL_TIM_PWM_Start+0x148>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a34      	ldr	r2, [pc, #208]	; (800ac4c <HAL_TIM_PWM_Start+0x200>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d009      	beq.n	800ab94 <HAL_TIM_PWM_Start+0x148>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a32      	ldr	r2, [pc, #200]	; (800ac50 <HAL_TIM_PWM_Start+0x204>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d004      	beq.n	800ab94 <HAL_TIM_PWM_Start+0x148>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a31      	ldr	r2, [pc, #196]	; (800ac54 <HAL_TIM_PWM_Start+0x208>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d101      	bne.n	800ab98 <HAL_TIM_PWM_Start+0x14c>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e000      	b.n	800ab9a <HAL_TIM_PWM_Start+0x14e>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d007      	beq.n	800abae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a23      	ldr	r2, [pc, #140]	; (800ac40 <HAL_TIM_PWM_Start+0x1f4>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d01d      	beq.n	800abf4 <HAL_TIM_PWM_Start+0x1a8>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abc0:	d018      	beq.n	800abf4 <HAL_TIM_PWM_Start+0x1a8>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a24      	ldr	r2, [pc, #144]	; (800ac58 <HAL_TIM_PWM_Start+0x20c>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d013      	beq.n	800abf4 <HAL_TIM_PWM_Start+0x1a8>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a22      	ldr	r2, [pc, #136]	; (800ac5c <HAL_TIM_PWM_Start+0x210>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d00e      	beq.n	800abf4 <HAL_TIM_PWM_Start+0x1a8>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a1a      	ldr	r2, [pc, #104]	; (800ac44 <HAL_TIM_PWM_Start+0x1f8>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d009      	beq.n	800abf4 <HAL_TIM_PWM_Start+0x1a8>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a18      	ldr	r2, [pc, #96]	; (800ac48 <HAL_TIM_PWM_Start+0x1fc>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d004      	beq.n	800abf4 <HAL_TIM_PWM_Start+0x1a8>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a19      	ldr	r2, [pc, #100]	; (800ac54 <HAL_TIM_PWM_Start+0x208>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d115      	bne.n	800ac20 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	689a      	ldr	r2, [r3, #8]
 800abfa:	4b19      	ldr	r3, [pc, #100]	; (800ac60 <HAL_TIM_PWM_Start+0x214>)
 800abfc:	4013      	ands	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b06      	cmp	r3, #6
 800ac04:	d015      	beq.n	800ac32 <HAL_TIM_PWM_Start+0x1e6>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac0c:	d011      	beq.n	800ac32 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f042 0201 	orr.w	r2, r2, #1
 800ac1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac1e:	e008      	b.n	800ac32 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f042 0201 	orr.w	r2, r2, #1
 800ac2e:	601a      	str	r2, [r3, #0]
 800ac30:	e000      	b.n	800ac34 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	40012c00 	.word	0x40012c00
 800ac44:	40013400 	.word	0x40013400
 800ac48:	40014000 	.word	0x40014000
 800ac4c:	40014400 	.word	0x40014400
 800ac50:	40014800 	.word	0x40014800
 800ac54:	40015000 	.word	0x40015000
 800ac58:	40000400 	.word	0x40000400
 800ac5c:	40000800 	.word	0x40000800
 800ac60:	00010007 	.word	0x00010007

0800ac64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	f003 0302 	and.w	r3, r3, #2
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d122      	bne.n	800acc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	f003 0302 	and.w	r3, r3, #2
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d11b      	bne.n	800acc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f06f 0202 	mvn.w	r2, #2
 800ac90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	f003 0303 	and.w	r3, r3, #3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fb5d 	bl	800b366 <HAL_TIM_IC_CaptureCallback>
 800acac:	e005      	b.n	800acba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fb4f 	bl	800b352 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fb60 	bl	800b37a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	f003 0304 	and.w	r3, r3, #4
 800acca:	2b04      	cmp	r3, #4
 800accc:	d122      	bne.n	800ad14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	f003 0304 	and.w	r3, r3, #4
 800acd8:	2b04      	cmp	r3, #4
 800acda:	d11b      	bne.n	800ad14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f06f 0204 	mvn.w	r2, #4
 800ace4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2202      	movs	r2, #2
 800acea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d003      	beq.n	800ad02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fb33 	bl	800b366 <HAL_TIM_IC_CaptureCallback>
 800ad00:	e005      	b.n	800ad0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fb25 	bl	800b352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fb36 	bl	800b37a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	f003 0308 	and.w	r3, r3, #8
 800ad1e:	2b08      	cmp	r3, #8
 800ad20:	d122      	bne.n	800ad68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	f003 0308 	and.w	r3, r3, #8
 800ad2c:	2b08      	cmp	r3, #8
 800ad2e:	d11b      	bne.n	800ad68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f06f 0208 	mvn.w	r2, #8
 800ad38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2204      	movs	r2, #4
 800ad3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	f003 0303 	and.w	r3, r3, #3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d003      	beq.n	800ad56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fb09 	bl	800b366 <HAL_TIM_IC_CaptureCallback>
 800ad54:	e005      	b.n	800ad62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fafb 	bl	800b352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fb0c 	bl	800b37a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	f003 0310 	and.w	r3, r3, #16
 800ad72:	2b10      	cmp	r3, #16
 800ad74:	d122      	bne.n	800adbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	f003 0310 	and.w	r3, r3, #16
 800ad80:	2b10      	cmp	r3, #16
 800ad82:	d11b      	bne.n	800adbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f06f 0210 	mvn.w	r2, #16
 800ad8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2208      	movs	r2, #8
 800ad92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d003      	beq.n	800adaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fadf 	bl	800b366 <HAL_TIM_IC_CaptureCallback>
 800ada8:	e005      	b.n	800adb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fad1 	bl	800b352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fae2 	bl	800b37a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d10e      	bne.n	800ade8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b01      	cmp	r3, #1
 800add6:	d107      	bne.n	800ade8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f06f 0201 	mvn.w	r2, #1
 800ade0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f007 fd18 	bl	8012818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adf2:	2b80      	cmp	r3, #128	; 0x80
 800adf4:	d10e      	bne.n	800ae14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae00:	2b80      	cmp	r3, #128	; 0x80
 800ae02:	d107      	bne.n	800ae14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 ffc2 	bl	800bd98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae22:	d10e      	bne.n	800ae42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae2e:	2b80      	cmp	r3, #128	; 0x80
 800ae30:	d107      	bne.n	800ae42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ae3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 ffb5 	bl	800bdac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae4c:	2b40      	cmp	r3, #64	; 0x40
 800ae4e:	d10e      	bne.n	800ae6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae5a:	2b40      	cmp	r3, #64	; 0x40
 800ae5c:	d107      	bne.n	800ae6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fa90 	bl	800b38e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	f003 0320 	and.w	r3, r3, #32
 800ae78:	2b20      	cmp	r3, #32
 800ae7a:	d10e      	bne.n	800ae9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	f003 0320 	and.w	r3, r3, #32
 800ae86:	2b20      	cmp	r3, #32
 800ae88:	d107      	bne.n	800ae9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f06f 0220 	mvn.w	r2, #32
 800ae92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 ff75 	bl	800bd84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae9a:	bf00      	nop
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
	...

0800aea4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d101      	bne.n	800aec2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800aebe:	2302      	movs	r3, #2
 800aec0:	e066      	b.n	800af90 <HAL_TIM_OC_ConfigChannel+0xec>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2201      	movs	r2, #1
 800aec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b14      	cmp	r3, #20
 800aece:	d857      	bhi.n	800af80 <HAL_TIM_OC_ConfigChannel+0xdc>
 800aed0:	a201      	add	r2, pc, #4	; (adr r2, 800aed8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800aed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed6:	bf00      	nop
 800aed8:	0800af2d 	.word	0x0800af2d
 800aedc:	0800af81 	.word	0x0800af81
 800aee0:	0800af81 	.word	0x0800af81
 800aee4:	0800af81 	.word	0x0800af81
 800aee8:	0800af3b 	.word	0x0800af3b
 800aeec:	0800af81 	.word	0x0800af81
 800aef0:	0800af81 	.word	0x0800af81
 800aef4:	0800af81 	.word	0x0800af81
 800aef8:	0800af49 	.word	0x0800af49
 800aefc:	0800af81 	.word	0x0800af81
 800af00:	0800af81 	.word	0x0800af81
 800af04:	0800af81 	.word	0x0800af81
 800af08:	0800af57 	.word	0x0800af57
 800af0c:	0800af81 	.word	0x0800af81
 800af10:	0800af81 	.word	0x0800af81
 800af14:	0800af81 	.word	0x0800af81
 800af18:	0800af65 	.word	0x0800af65
 800af1c:	0800af81 	.word	0x0800af81
 800af20:	0800af81 	.word	0x0800af81
 800af24:	0800af81 	.word	0x0800af81
 800af28:	0800af73 	.word	0x0800af73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68b9      	ldr	r1, [r7, #8]
 800af32:	4618      	mov	r0, r3
 800af34:	f000 fad4 	bl	800b4e0 <TIM_OC1_SetConfig>
      break;
 800af38:	e025      	b.n	800af86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68b9      	ldr	r1, [r7, #8]
 800af40:	4618      	mov	r0, r3
 800af42:	f000 fb67 	bl	800b614 <TIM_OC2_SetConfig>
      break;
 800af46:	e01e      	b.n	800af86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68b9      	ldr	r1, [r7, #8]
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 fbf4 	bl	800b73c <TIM_OC3_SetConfig>
      break;
 800af54:	e017      	b.n	800af86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68b9      	ldr	r1, [r7, #8]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 fc7f 	bl	800b860 <TIM_OC4_SetConfig>
      break;
 800af62:	e010      	b.n	800af86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68b9      	ldr	r1, [r7, #8]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 fce8 	bl	800b940 <TIM_OC5_SetConfig>
      break;
 800af70:	e009      	b.n	800af86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68b9      	ldr	r1, [r7, #8]
 800af78:	4618      	mov	r0, r3
 800af7a:	f000 fd4b 	bl	800ba14 <TIM_OC6_SetConfig>
      break;
 800af7e:	e002      	b.n	800af86 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	75fb      	strb	r3, [r7, #23]
      break;
 800af84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3718      	adds	r7, #24
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d101      	bne.n	800afb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800afb2:	2302      	movs	r3, #2
 800afb4:	e0ff      	b.n	800b1b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2b14      	cmp	r3, #20
 800afc2:	f200 80f0 	bhi.w	800b1a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800afc6:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800b021 	.word	0x0800b021
 800afd0:	0800b1a7 	.word	0x0800b1a7
 800afd4:	0800b1a7 	.word	0x0800b1a7
 800afd8:	0800b1a7 	.word	0x0800b1a7
 800afdc:	0800b061 	.word	0x0800b061
 800afe0:	0800b1a7 	.word	0x0800b1a7
 800afe4:	0800b1a7 	.word	0x0800b1a7
 800afe8:	0800b1a7 	.word	0x0800b1a7
 800afec:	0800b0a3 	.word	0x0800b0a3
 800aff0:	0800b1a7 	.word	0x0800b1a7
 800aff4:	0800b1a7 	.word	0x0800b1a7
 800aff8:	0800b1a7 	.word	0x0800b1a7
 800affc:	0800b0e3 	.word	0x0800b0e3
 800b000:	0800b1a7 	.word	0x0800b1a7
 800b004:	0800b1a7 	.word	0x0800b1a7
 800b008:	0800b1a7 	.word	0x0800b1a7
 800b00c:	0800b125 	.word	0x0800b125
 800b010:	0800b1a7 	.word	0x0800b1a7
 800b014:	0800b1a7 	.word	0x0800b1a7
 800b018:	0800b1a7 	.word	0x0800b1a7
 800b01c:	0800b165 	.word	0x0800b165
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68b9      	ldr	r1, [r7, #8]
 800b026:	4618      	mov	r0, r3
 800b028:	f000 fa5a 	bl	800b4e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	699a      	ldr	r2, [r3, #24]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f042 0208 	orr.w	r2, r2, #8
 800b03a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	699a      	ldr	r2, [r3, #24]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f022 0204 	bic.w	r2, r2, #4
 800b04a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6999      	ldr	r1, [r3, #24]
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	691a      	ldr	r2, [r3, #16]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	430a      	orrs	r2, r1
 800b05c:	619a      	str	r2, [r3, #24]
      break;
 800b05e:	e0a5      	b.n	800b1ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68b9      	ldr	r1, [r7, #8]
 800b066:	4618      	mov	r0, r3
 800b068:	f000 fad4 	bl	800b614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	699a      	ldr	r2, [r3, #24]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b07a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	699a      	ldr	r2, [r3, #24]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b08a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6999      	ldr	r1, [r3, #24]
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	021a      	lsls	r2, r3, #8
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	430a      	orrs	r2, r1
 800b09e:	619a      	str	r2, [r3, #24]
      break;
 800b0a0:	e084      	b.n	800b1ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68b9      	ldr	r1, [r7, #8]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f000 fb47 	bl	800b73c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	69da      	ldr	r2, [r3, #28]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f042 0208 	orr.w	r2, r2, #8
 800b0bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	69da      	ldr	r2, [r3, #28]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f022 0204 	bic.w	r2, r2, #4
 800b0cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	69d9      	ldr	r1, [r3, #28]
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	691a      	ldr	r2, [r3, #16]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	61da      	str	r2, [r3, #28]
      break;
 800b0e0:	e064      	b.n	800b1ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68b9      	ldr	r1, [r7, #8]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 fbb9 	bl	800b860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	69da      	ldr	r2, [r3, #28]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	69da      	ldr	r2, [r3, #28]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b10c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	69d9      	ldr	r1, [r3, #28]
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	021a      	lsls	r2, r3, #8
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	430a      	orrs	r2, r1
 800b120:	61da      	str	r2, [r3, #28]
      break;
 800b122:	e043      	b.n	800b1ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68b9      	ldr	r1, [r7, #8]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 fc08 	bl	800b940 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f042 0208 	orr.w	r2, r2, #8
 800b13e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 0204 	bic.w	r2, r2, #4
 800b14e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	691a      	ldr	r2, [r3, #16]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	430a      	orrs	r2, r1
 800b160:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b162:	e023      	b.n	800b1ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68b9      	ldr	r1, [r7, #8]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 fc52 	bl	800ba14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b17e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b18e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	021a      	lsls	r2, r3, #8
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	430a      	orrs	r2, r1
 800b1a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b1a4:	e002      	b.n	800b1ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b1aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3718      	adds	r7, #24
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop

0800b1c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d101      	bne.n	800b1dc <HAL_TIM_ConfigClockSource+0x1c>
 800b1d8:	2302      	movs	r3, #2
 800b1da:	e0b6      	b.n	800b34a <HAL_TIM_ConfigClockSource+0x18a>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b1fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b218:	d03e      	beq.n	800b298 <HAL_TIM_ConfigClockSource+0xd8>
 800b21a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b21e:	f200 8087 	bhi.w	800b330 <HAL_TIM_ConfigClockSource+0x170>
 800b222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b226:	f000 8086 	beq.w	800b336 <HAL_TIM_ConfigClockSource+0x176>
 800b22a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b22e:	d87f      	bhi.n	800b330 <HAL_TIM_ConfigClockSource+0x170>
 800b230:	2b70      	cmp	r3, #112	; 0x70
 800b232:	d01a      	beq.n	800b26a <HAL_TIM_ConfigClockSource+0xaa>
 800b234:	2b70      	cmp	r3, #112	; 0x70
 800b236:	d87b      	bhi.n	800b330 <HAL_TIM_ConfigClockSource+0x170>
 800b238:	2b60      	cmp	r3, #96	; 0x60
 800b23a:	d050      	beq.n	800b2de <HAL_TIM_ConfigClockSource+0x11e>
 800b23c:	2b60      	cmp	r3, #96	; 0x60
 800b23e:	d877      	bhi.n	800b330 <HAL_TIM_ConfigClockSource+0x170>
 800b240:	2b50      	cmp	r3, #80	; 0x50
 800b242:	d03c      	beq.n	800b2be <HAL_TIM_ConfigClockSource+0xfe>
 800b244:	2b50      	cmp	r3, #80	; 0x50
 800b246:	d873      	bhi.n	800b330 <HAL_TIM_ConfigClockSource+0x170>
 800b248:	2b40      	cmp	r3, #64	; 0x40
 800b24a:	d058      	beq.n	800b2fe <HAL_TIM_ConfigClockSource+0x13e>
 800b24c:	2b40      	cmp	r3, #64	; 0x40
 800b24e:	d86f      	bhi.n	800b330 <HAL_TIM_ConfigClockSource+0x170>
 800b250:	2b30      	cmp	r3, #48	; 0x30
 800b252:	d064      	beq.n	800b31e <HAL_TIM_ConfigClockSource+0x15e>
 800b254:	2b30      	cmp	r3, #48	; 0x30
 800b256:	d86b      	bhi.n	800b330 <HAL_TIM_ConfigClockSource+0x170>
 800b258:	2b20      	cmp	r3, #32
 800b25a:	d060      	beq.n	800b31e <HAL_TIM_ConfigClockSource+0x15e>
 800b25c:	2b20      	cmp	r3, #32
 800b25e:	d867      	bhi.n	800b330 <HAL_TIM_ConfigClockSource+0x170>
 800b260:	2b00      	cmp	r3, #0
 800b262:	d05c      	beq.n	800b31e <HAL_TIM_ConfigClockSource+0x15e>
 800b264:	2b10      	cmp	r3, #16
 800b266:	d05a      	beq.n	800b31e <HAL_TIM_ConfigClockSource+0x15e>
 800b268:	e062      	b.n	800b330 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b27a:	f000 fcb1 	bl	800bbe0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b28c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	609a      	str	r2, [r3, #8]
      break;
 800b296:	e04f      	b.n	800b338 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2a8:	f000 fc9a 	bl	800bbe0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	689a      	ldr	r2, [r3, #8]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2ba:	609a      	str	r2, [r3, #8]
      break;
 800b2bc:	e03c      	b.n	800b338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	f000 fc0e 	bl	800baec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2150      	movs	r1, #80	; 0x50
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f000 fc67 	bl	800bbaa <TIM_ITRx_SetConfig>
      break;
 800b2dc:	e02c      	b.n	800b338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	f000 fc2d 	bl	800bb4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2160      	movs	r1, #96	; 0x60
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 fc57 	bl	800bbaa <TIM_ITRx_SetConfig>
      break;
 800b2fc:	e01c      	b.n	800b338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b30a:	461a      	mov	r2, r3
 800b30c:	f000 fbee 	bl	800baec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2140      	movs	r1, #64	; 0x40
 800b316:	4618      	mov	r0, r3
 800b318:	f000 fc47 	bl	800bbaa <TIM_ITRx_SetConfig>
      break;
 800b31c:	e00c      	b.n	800b338 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4619      	mov	r1, r3
 800b328:	4610      	mov	r0, r2
 800b32a:	f000 fc3e 	bl	800bbaa <TIM_ITRx_SetConfig>
      break;
 800b32e:	e003      	b.n	800b338 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	73fb      	strb	r3, [r7, #15]
      break;
 800b334:	e000      	b.n	800b338 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b348:	7bfb      	ldrb	r3, [r7, #15]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b35a:	bf00      	nop
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b382:	bf00      	nop
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b396:	bf00      	nop
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
	...

0800b3a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a42      	ldr	r2, [pc, #264]	; (800b4c0 <TIM_Base_SetConfig+0x11c>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d013      	beq.n	800b3e4 <TIM_Base_SetConfig+0x40>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3c2:	d00f      	beq.n	800b3e4 <TIM_Base_SetConfig+0x40>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a3f      	ldr	r2, [pc, #252]	; (800b4c4 <TIM_Base_SetConfig+0x120>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d00b      	beq.n	800b3e4 <TIM_Base_SetConfig+0x40>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a3e      	ldr	r2, [pc, #248]	; (800b4c8 <TIM_Base_SetConfig+0x124>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d007      	beq.n	800b3e4 <TIM_Base_SetConfig+0x40>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a3d      	ldr	r2, [pc, #244]	; (800b4cc <TIM_Base_SetConfig+0x128>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d003      	beq.n	800b3e4 <TIM_Base_SetConfig+0x40>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a3c      	ldr	r2, [pc, #240]	; (800b4d0 <TIM_Base_SetConfig+0x12c>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d108      	bne.n	800b3f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a31      	ldr	r2, [pc, #196]	; (800b4c0 <TIM_Base_SetConfig+0x11c>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d01f      	beq.n	800b43e <TIM_Base_SetConfig+0x9a>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b404:	d01b      	beq.n	800b43e <TIM_Base_SetConfig+0x9a>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a2e      	ldr	r2, [pc, #184]	; (800b4c4 <TIM_Base_SetConfig+0x120>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d017      	beq.n	800b43e <TIM_Base_SetConfig+0x9a>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a2d      	ldr	r2, [pc, #180]	; (800b4c8 <TIM_Base_SetConfig+0x124>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d013      	beq.n	800b43e <TIM_Base_SetConfig+0x9a>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a2c      	ldr	r2, [pc, #176]	; (800b4cc <TIM_Base_SetConfig+0x128>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d00f      	beq.n	800b43e <TIM_Base_SetConfig+0x9a>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a2c      	ldr	r2, [pc, #176]	; (800b4d4 <TIM_Base_SetConfig+0x130>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d00b      	beq.n	800b43e <TIM_Base_SetConfig+0x9a>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a2b      	ldr	r2, [pc, #172]	; (800b4d8 <TIM_Base_SetConfig+0x134>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d007      	beq.n	800b43e <TIM_Base_SetConfig+0x9a>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a2a      	ldr	r2, [pc, #168]	; (800b4dc <TIM_Base_SetConfig+0x138>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d003      	beq.n	800b43e <TIM_Base_SetConfig+0x9a>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a25      	ldr	r2, [pc, #148]	; (800b4d0 <TIM_Base_SetConfig+0x12c>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d108      	bne.n	800b450 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	689a      	ldr	r2, [r3, #8]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a12      	ldr	r2, [pc, #72]	; (800b4c0 <TIM_Base_SetConfig+0x11c>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d013      	beq.n	800b4a4 <TIM_Base_SetConfig+0x100>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a13      	ldr	r2, [pc, #76]	; (800b4cc <TIM_Base_SetConfig+0x128>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d00f      	beq.n	800b4a4 <TIM_Base_SetConfig+0x100>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a13      	ldr	r2, [pc, #76]	; (800b4d4 <TIM_Base_SetConfig+0x130>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d00b      	beq.n	800b4a4 <TIM_Base_SetConfig+0x100>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a12      	ldr	r2, [pc, #72]	; (800b4d8 <TIM_Base_SetConfig+0x134>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d007      	beq.n	800b4a4 <TIM_Base_SetConfig+0x100>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a11      	ldr	r2, [pc, #68]	; (800b4dc <TIM_Base_SetConfig+0x138>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d003      	beq.n	800b4a4 <TIM_Base_SetConfig+0x100>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a0c      	ldr	r2, [pc, #48]	; (800b4d0 <TIM_Base_SetConfig+0x12c>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d103      	bne.n	800b4ac <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	691a      	ldr	r2, [r3, #16]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	615a      	str	r2, [r3, #20]
}
 800b4b2:	bf00      	nop
 800b4b4:	3714      	adds	r7, #20
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	40012c00 	.word	0x40012c00
 800b4c4:	40000400 	.word	0x40000400
 800b4c8:	40000800 	.word	0x40000800
 800b4cc:	40013400 	.word	0x40013400
 800b4d0:	40015000 	.word	0x40015000
 800b4d4:	40014000 	.word	0x40014000
 800b4d8:	40014400 	.word	0x40014400
 800b4dc:	40014800 	.word	0x40014800

0800b4e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b087      	sub	sp, #28
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	f023 0201 	bic.w	r2, r3, #1
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	699b      	ldr	r3, [r3, #24]
 800b506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b50e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f023 0303 	bic.w	r3, r3, #3
 800b51a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	4313      	orrs	r3, r2
 800b524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f023 0302 	bic.w	r3, r3, #2
 800b52c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	4313      	orrs	r3, r2
 800b536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a30      	ldr	r2, [pc, #192]	; (800b5fc <TIM_OC1_SetConfig+0x11c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d013      	beq.n	800b568 <TIM_OC1_SetConfig+0x88>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a2f      	ldr	r2, [pc, #188]	; (800b600 <TIM_OC1_SetConfig+0x120>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d00f      	beq.n	800b568 <TIM_OC1_SetConfig+0x88>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a2e      	ldr	r2, [pc, #184]	; (800b604 <TIM_OC1_SetConfig+0x124>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d00b      	beq.n	800b568 <TIM_OC1_SetConfig+0x88>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a2d      	ldr	r2, [pc, #180]	; (800b608 <TIM_OC1_SetConfig+0x128>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d007      	beq.n	800b568 <TIM_OC1_SetConfig+0x88>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a2c      	ldr	r2, [pc, #176]	; (800b60c <TIM_OC1_SetConfig+0x12c>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d003      	beq.n	800b568 <TIM_OC1_SetConfig+0x88>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a2b      	ldr	r2, [pc, #172]	; (800b610 <TIM_OC1_SetConfig+0x130>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d10c      	bne.n	800b582 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	f023 0308 	bic.w	r3, r3, #8
 800b56e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	4313      	orrs	r3, r2
 800b578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	f023 0304 	bic.w	r3, r3, #4
 800b580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a1d      	ldr	r2, [pc, #116]	; (800b5fc <TIM_OC1_SetConfig+0x11c>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d013      	beq.n	800b5b2 <TIM_OC1_SetConfig+0xd2>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a1c      	ldr	r2, [pc, #112]	; (800b600 <TIM_OC1_SetConfig+0x120>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d00f      	beq.n	800b5b2 <TIM_OC1_SetConfig+0xd2>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a1b      	ldr	r2, [pc, #108]	; (800b604 <TIM_OC1_SetConfig+0x124>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d00b      	beq.n	800b5b2 <TIM_OC1_SetConfig+0xd2>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a1a      	ldr	r2, [pc, #104]	; (800b608 <TIM_OC1_SetConfig+0x128>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d007      	beq.n	800b5b2 <TIM_OC1_SetConfig+0xd2>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a19      	ldr	r2, [pc, #100]	; (800b60c <TIM_OC1_SetConfig+0x12c>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d003      	beq.n	800b5b2 <TIM_OC1_SetConfig+0xd2>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a18      	ldr	r2, [pc, #96]	; (800b610 <TIM_OC1_SetConfig+0x130>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d111      	bne.n	800b5d6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	695b      	ldr	r3, [r3, #20]
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	693a      	ldr	r2, [r7, #16]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	693a      	ldr	r2, [r7, #16]
 800b5da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	685a      	ldr	r2, [r3, #4]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	697a      	ldr	r2, [r7, #20]
 800b5ee:	621a      	str	r2, [r3, #32]
}
 800b5f0:	bf00      	nop
 800b5f2:	371c      	adds	r7, #28
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr
 800b5fc:	40012c00 	.word	0x40012c00
 800b600:	40013400 	.word	0x40013400
 800b604:	40014000 	.word	0x40014000
 800b608:	40014400 	.word	0x40014400
 800b60c:	40014800 	.word	0x40014800
 800b610:	40015000 	.word	0x40015000

0800b614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b614:	b480      	push	{r7}
 800b616:	b087      	sub	sp, #28
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6a1b      	ldr	r3, [r3, #32]
 800b622:	f023 0210 	bic.w	r2, r3, #16
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	699b      	ldr	r3, [r3, #24]
 800b63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b64e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	021b      	lsls	r3, r3, #8
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	4313      	orrs	r3, r2
 800b65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	f023 0320 	bic.w	r3, r3, #32
 800b662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	011b      	lsls	r3, r3, #4
 800b66a:	697a      	ldr	r2, [r7, #20]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a2c      	ldr	r2, [pc, #176]	; (800b724 <TIM_OC2_SetConfig+0x110>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d007      	beq.n	800b688 <TIM_OC2_SetConfig+0x74>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a2b      	ldr	r2, [pc, #172]	; (800b728 <TIM_OC2_SetConfig+0x114>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d003      	beq.n	800b688 <TIM_OC2_SetConfig+0x74>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a2a      	ldr	r2, [pc, #168]	; (800b72c <TIM_OC2_SetConfig+0x118>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d10d      	bne.n	800b6a4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b68e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	011b      	lsls	r3, r3, #4
 800b696:	697a      	ldr	r2, [r7, #20]
 800b698:	4313      	orrs	r3, r2
 800b69a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a1f      	ldr	r2, [pc, #124]	; (800b724 <TIM_OC2_SetConfig+0x110>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d013      	beq.n	800b6d4 <TIM_OC2_SetConfig+0xc0>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a1e      	ldr	r2, [pc, #120]	; (800b728 <TIM_OC2_SetConfig+0x114>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d00f      	beq.n	800b6d4 <TIM_OC2_SetConfig+0xc0>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a1e      	ldr	r2, [pc, #120]	; (800b730 <TIM_OC2_SetConfig+0x11c>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d00b      	beq.n	800b6d4 <TIM_OC2_SetConfig+0xc0>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a1d      	ldr	r2, [pc, #116]	; (800b734 <TIM_OC2_SetConfig+0x120>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d007      	beq.n	800b6d4 <TIM_OC2_SetConfig+0xc0>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a1c      	ldr	r2, [pc, #112]	; (800b738 <TIM_OC2_SetConfig+0x124>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d003      	beq.n	800b6d4 <TIM_OC2_SetConfig+0xc0>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a17      	ldr	r2, [pc, #92]	; (800b72c <TIM_OC2_SetConfig+0x118>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d113      	bne.n	800b6fc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6da:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6e2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	695b      	ldr	r3, [r3, #20]
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	699b      	ldr	r3, [r3, #24]
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	693a      	ldr	r2, [r7, #16]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	697a      	ldr	r2, [r7, #20]
 800b714:	621a      	str	r2, [r3, #32]
}
 800b716:	bf00      	nop
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	40012c00 	.word	0x40012c00
 800b728:	40013400 	.word	0x40013400
 800b72c:	40015000 	.word	0x40015000
 800b730:	40014000 	.word	0x40014000
 800b734:	40014400 	.word	0x40014400
 800b738:	40014800 	.word	0x40014800

0800b73c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b087      	sub	sp, #28
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a1b      	ldr	r3, [r3, #32]
 800b74a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	69db      	ldr	r3, [r3, #28]
 800b762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b76e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f023 0303 	bic.w	r3, r3, #3
 800b776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4313      	orrs	r3, r2
 800b780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	021b      	lsls	r3, r3, #8
 800b790:	697a      	ldr	r2, [r7, #20]
 800b792:	4313      	orrs	r3, r2
 800b794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a2b      	ldr	r2, [pc, #172]	; (800b848 <TIM_OC3_SetConfig+0x10c>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d007      	beq.n	800b7ae <TIM_OC3_SetConfig+0x72>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a2a      	ldr	r2, [pc, #168]	; (800b84c <TIM_OC3_SetConfig+0x110>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d003      	beq.n	800b7ae <TIM_OC3_SetConfig+0x72>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a29      	ldr	r2, [pc, #164]	; (800b850 <TIM_OC3_SetConfig+0x114>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d10d      	bne.n	800b7ca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	021b      	lsls	r3, r3, #8
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7c8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a1e      	ldr	r2, [pc, #120]	; (800b848 <TIM_OC3_SetConfig+0x10c>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d013      	beq.n	800b7fa <TIM_OC3_SetConfig+0xbe>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a1d      	ldr	r2, [pc, #116]	; (800b84c <TIM_OC3_SetConfig+0x110>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d00f      	beq.n	800b7fa <TIM_OC3_SetConfig+0xbe>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a1d      	ldr	r2, [pc, #116]	; (800b854 <TIM_OC3_SetConfig+0x118>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d00b      	beq.n	800b7fa <TIM_OC3_SetConfig+0xbe>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a1c      	ldr	r2, [pc, #112]	; (800b858 <TIM_OC3_SetConfig+0x11c>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d007      	beq.n	800b7fa <TIM_OC3_SetConfig+0xbe>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a1b      	ldr	r2, [pc, #108]	; (800b85c <TIM_OC3_SetConfig+0x120>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d003      	beq.n	800b7fa <TIM_OC3_SetConfig+0xbe>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a16      	ldr	r2, [pc, #88]	; (800b850 <TIM_OC3_SetConfig+0x114>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d113      	bne.n	800b822 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	011b      	lsls	r3, r3, #4
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	4313      	orrs	r3, r2
 800b814:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	011b      	lsls	r3, r3, #4
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	4313      	orrs	r3, r2
 800b820:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	621a      	str	r2, [r3, #32]
}
 800b83c:	bf00      	nop
 800b83e:	371c      	adds	r7, #28
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr
 800b848:	40012c00 	.word	0x40012c00
 800b84c:	40013400 	.word	0x40013400
 800b850:	40015000 	.word	0x40015000
 800b854:	40014000 	.word	0x40014000
 800b858:	40014400 	.word	0x40014400
 800b85c:	40014800 	.word	0x40014800

0800b860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a1b      	ldr	r3, [r3, #32]
 800b86e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	69db      	ldr	r3, [r3, #28]
 800b886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b88e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	021b      	lsls	r3, r3, #8
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	031b      	lsls	r3, r3, #12
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a1a      	ldr	r2, [pc, #104]	; (800b928 <TIM_OC4_SetConfig+0xc8>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d013      	beq.n	800b8ec <TIM_OC4_SetConfig+0x8c>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a19      	ldr	r2, [pc, #100]	; (800b92c <TIM_OC4_SetConfig+0xcc>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00f      	beq.n	800b8ec <TIM_OC4_SetConfig+0x8c>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a18      	ldr	r2, [pc, #96]	; (800b930 <TIM_OC4_SetConfig+0xd0>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d00b      	beq.n	800b8ec <TIM_OC4_SetConfig+0x8c>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a17      	ldr	r2, [pc, #92]	; (800b934 <TIM_OC4_SetConfig+0xd4>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d007      	beq.n	800b8ec <TIM_OC4_SetConfig+0x8c>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a16      	ldr	r2, [pc, #88]	; (800b938 <TIM_OC4_SetConfig+0xd8>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d003      	beq.n	800b8ec <TIM_OC4_SetConfig+0x8c>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a15      	ldr	r2, [pc, #84]	; (800b93c <TIM_OC4_SetConfig+0xdc>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d109      	bne.n	800b900 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	019b      	lsls	r3, r3, #6
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	697a      	ldr	r2, [r7, #20]
 800b904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	621a      	str	r2, [r3, #32]
}
 800b91a:	bf00      	nop
 800b91c:	371c      	adds	r7, #28
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	40012c00 	.word	0x40012c00
 800b92c:	40013400 	.word	0x40013400
 800b930:	40014000 	.word	0x40014000
 800b934:	40014400 	.word	0x40014400
 800b938:	40014800 	.word	0x40014800
 800b93c:	40015000 	.word	0x40015000

0800b940 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a1b      	ldr	r3, [r3, #32]
 800b94e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a1b      	ldr	r3, [r3, #32]
 800b95a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b96e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b984:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	041b      	lsls	r3, r3, #16
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	4313      	orrs	r3, r2
 800b990:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a19      	ldr	r2, [pc, #100]	; (800b9fc <TIM_OC5_SetConfig+0xbc>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d013      	beq.n	800b9c2 <TIM_OC5_SetConfig+0x82>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a18      	ldr	r2, [pc, #96]	; (800ba00 <TIM_OC5_SetConfig+0xc0>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d00f      	beq.n	800b9c2 <TIM_OC5_SetConfig+0x82>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a17      	ldr	r2, [pc, #92]	; (800ba04 <TIM_OC5_SetConfig+0xc4>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d00b      	beq.n	800b9c2 <TIM_OC5_SetConfig+0x82>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a16      	ldr	r2, [pc, #88]	; (800ba08 <TIM_OC5_SetConfig+0xc8>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d007      	beq.n	800b9c2 <TIM_OC5_SetConfig+0x82>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a15      	ldr	r2, [pc, #84]	; (800ba0c <TIM_OC5_SetConfig+0xcc>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d003      	beq.n	800b9c2 <TIM_OC5_SetConfig+0x82>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a14      	ldr	r2, [pc, #80]	; (800ba10 <TIM_OC5_SetConfig+0xd0>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d109      	bne.n	800b9d6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	695b      	ldr	r3, [r3, #20]
 800b9ce:	021b      	lsls	r3, r3, #8
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	697a      	ldr	r2, [r7, #20]
 800b9da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	621a      	str	r2, [r3, #32]
}
 800b9f0:	bf00      	nop
 800b9f2:	371c      	adds	r7, #28
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr
 800b9fc:	40012c00 	.word	0x40012c00
 800ba00:	40013400 	.word	0x40013400
 800ba04:	40014000 	.word	0x40014000
 800ba08:	40014400 	.word	0x40014400
 800ba0c:	40014800 	.word	0x40014800
 800ba10:	40015000 	.word	0x40015000

0800ba14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b087      	sub	sp, #28
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a1b      	ldr	r3, [r3, #32]
 800ba22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6a1b      	ldr	r3, [r3, #32]
 800ba2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	021b      	lsls	r3, r3, #8
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	051b      	lsls	r3, r3, #20
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a1a      	ldr	r2, [pc, #104]	; (800bad4 <TIM_OC6_SetConfig+0xc0>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d013      	beq.n	800ba98 <TIM_OC6_SetConfig+0x84>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a19      	ldr	r2, [pc, #100]	; (800bad8 <TIM_OC6_SetConfig+0xc4>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d00f      	beq.n	800ba98 <TIM_OC6_SetConfig+0x84>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a18      	ldr	r2, [pc, #96]	; (800badc <TIM_OC6_SetConfig+0xc8>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d00b      	beq.n	800ba98 <TIM_OC6_SetConfig+0x84>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4a17      	ldr	r2, [pc, #92]	; (800bae0 <TIM_OC6_SetConfig+0xcc>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d007      	beq.n	800ba98 <TIM_OC6_SetConfig+0x84>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a16      	ldr	r2, [pc, #88]	; (800bae4 <TIM_OC6_SetConfig+0xd0>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d003      	beq.n	800ba98 <TIM_OC6_SetConfig+0x84>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a15      	ldr	r2, [pc, #84]	; (800bae8 <TIM_OC6_SetConfig+0xd4>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d109      	bne.n	800baac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	695b      	ldr	r3, [r3, #20]
 800baa4:	029b      	lsls	r3, r3, #10
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	693a      	ldr	r2, [r7, #16]
 800bac4:	621a      	str	r2, [r3, #32]
}
 800bac6:	bf00      	nop
 800bac8:	371c      	adds	r7, #28
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	40012c00 	.word	0x40012c00
 800bad8:	40013400 	.word	0x40013400
 800badc:	40014000 	.word	0x40014000
 800bae0:	40014400 	.word	0x40014400
 800bae4:	40014800 	.word	0x40014800
 800bae8:	40015000 	.word	0x40015000

0800baec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800baec:	b480      	push	{r7}
 800baee:	b087      	sub	sp, #28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6a1b      	ldr	r3, [r3, #32]
 800bb02:	f023 0201 	bic.w	r2, r3, #1
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	699b      	ldr	r3, [r3, #24]
 800bb0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	011b      	lsls	r3, r3, #4
 800bb1c:	693a      	ldr	r2, [r7, #16]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f023 030a 	bic.w	r3, r3, #10
 800bb28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	621a      	str	r2, [r3, #32]
}
 800bb3e:	bf00      	nop
 800bb40:	371c      	adds	r7, #28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb4a:	b480      	push	{r7}
 800bb4c:	b087      	sub	sp, #28
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	60f8      	str	r0, [r7, #12]
 800bb52:	60b9      	str	r1, [r7, #8]
 800bb54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	f023 0210 	bic.w	r2, r3, #16
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	699b      	ldr	r3, [r3, #24]
 800bb66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6a1b      	ldr	r3, [r3, #32]
 800bb6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	031b      	lsls	r3, r3, #12
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	011b      	lsls	r3, r3, #4
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	697a      	ldr	r2, [r7, #20]
 800bb96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	621a      	str	r2, [r3, #32]
}
 800bb9e:	bf00      	nop
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr

0800bbaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbaa:	b480      	push	{r7}
 800bbac:	b085      	sub	sp, #20
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	f043 0307 	orr.w	r3, r3, #7
 800bbcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	609a      	str	r2, [r3, #8]
}
 800bbd4:	bf00      	nop
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
 800bbec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	021a      	lsls	r2, r3, #8
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	431a      	orrs	r2, r3
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	697a      	ldr	r2, [r7, #20]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	697a      	ldr	r2, [r7, #20]
 800bc12:	609a      	str	r2, [r3, #8]
}
 800bc14:	bf00      	nop
 800bc16:	371c      	adds	r7, #28
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b087      	sub	sp, #28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	f003 031f 	and.w	r3, r3, #31
 800bc32:	2201      	movs	r2, #1
 800bc34:	fa02 f303 	lsl.w	r3, r2, r3
 800bc38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6a1a      	ldr	r2, [r3, #32]
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	43db      	mvns	r3, r3
 800bc42:	401a      	ands	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6a1a      	ldr	r2, [r3, #32]
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	f003 031f 	and.w	r3, r3, #31
 800bc52:	6879      	ldr	r1, [r7, #4]
 800bc54:	fa01 f303 	lsl.w	r3, r1, r3
 800bc58:	431a      	orrs	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	621a      	str	r2, [r3, #32]
}
 800bc5e:	bf00      	nop
 800bc60:	371c      	adds	r7, #28
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr
	...

0800bc6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d101      	bne.n	800bc84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc80:	2302      	movs	r3, #2
 800bc82:	e06d      	b.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2202      	movs	r2, #2
 800bc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a30      	ldr	r2, [pc, #192]	; (800bd6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d009      	beq.n	800bcc2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a2f      	ldr	r2, [pc, #188]	; (800bd70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d004      	beq.n	800bcc2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a2d      	ldr	r2, [pc, #180]	; (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d108      	bne.n	800bcd4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bcc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a1e      	ldr	r2, [pc, #120]	; (800bd6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d01d      	beq.n	800bd34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd00:	d018      	beq.n	800bd34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a1c      	ldr	r2, [pc, #112]	; (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d013      	beq.n	800bd34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a1a      	ldr	r2, [pc, #104]	; (800bd7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d00e      	beq.n	800bd34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a15      	ldr	r2, [pc, #84]	; (800bd70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d009      	beq.n	800bd34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a16      	ldr	r2, [pc, #88]	; (800bd80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d004      	beq.n	800bd34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a11      	ldr	r2, [pc, #68]	; (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d10c      	bne.n	800bd4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2201      	movs	r2, #1
 800bd52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	40012c00 	.word	0x40012c00
 800bd70:	40013400 	.word	0x40013400
 800bd74:	40015000 	.word	0x40015000
 800bd78:	40000400 	.word	0x40000400
 800bd7c:	40000800 	.word	0x40000800
 800bd80:	40014000 	.word	0x40014000

0800bd84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd8c:	bf00      	nop
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bdb4:	bf00      	nop
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d101      	bne.n	800bdd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e040      	b.n	800be54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d106      	bne.n	800bde8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7f9 faae 	bl	8005344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2224      	movs	r2, #36	; 0x24
 800bdec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f022 0201 	bic.w	r2, r2, #1
 800bdfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fc00 	bl	800c604 <UART_SetConfig>
 800be04:	4603      	mov	r3, r0
 800be06:	2b01      	cmp	r3, #1
 800be08:	d101      	bne.n	800be0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	e022      	b.n	800be54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be12:	2b00      	cmp	r3, #0
 800be14:	d002      	beq.n	800be1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fdc8 	bl	800c9ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	689a      	ldr	r2, [r3, #8]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f042 0201 	orr.w	r2, r2, #1
 800be4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fe4f 	bl	800caf0 <UART_CheckIdleState>
 800be52:	4603      	mov	r3, r0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08a      	sub	sp, #40	; 0x28
 800be60:	af02      	add	r7, sp, #8
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	603b      	str	r3, [r7, #0]
 800be68:	4613      	mov	r3, r2
 800be6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be70:	2b20      	cmp	r3, #32
 800be72:	d178      	bne.n	800bf66 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d002      	beq.n	800be80 <HAL_UART_Transmit+0x24>
 800be7a:	88fb      	ldrh	r3, [r7, #6]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e071      	b.n	800bf68 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2221      	movs	r2, #33	; 0x21
 800be90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be92:	f7f9 fcb3 	bl	80057fc <HAL_GetTick>
 800be96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	88fa      	ldrh	r2, [r7, #6]
 800be9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	88fa      	ldrh	r2, [r7, #6]
 800bea4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beb0:	d108      	bne.n	800bec4 <HAL_UART_Transmit+0x68>
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d104      	bne.n	800bec4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800beba:	2300      	movs	r3, #0
 800bebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	61bb      	str	r3, [r7, #24]
 800bec2:	e003      	b.n	800becc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bec8:	2300      	movs	r3, #0
 800beca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800becc:	e030      	b.n	800bf30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	2200      	movs	r2, #0
 800bed6:	2180      	movs	r1, #128	; 0x80
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f000 feb1 	bl	800cc40 <UART_WaitOnFlagUntilTimeout>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d004      	beq.n	800beee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2220      	movs	r2, #32
 800bee8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800beea:	2303      	movs	r3, #3
 800beec:	e03c      	b.n	800bf68 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10b      	bne.n	800bf0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	881a      	ldrh	r2, [r3, #0]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf00:	b292      	uxth	r2, r2
 800bf02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	3302      	adds	r3, #2
 800bf08:	61bb      	str	r3, [r7, #24]
 800bf0a:	e008      	b.n	800bf1e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	781a      	ldrb	r2, [r3, #0]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	b292      	uxth	r2, r2
 800bf16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	3b01      	subs	r3, #1
 800bf28:	b29a      	uxth	r2, r3
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1c8      	bne.n	800bece <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	2200      	movs	r2, #0
 800bf44:	2140      	movs	r1, #64	; 0x40
 800bf46:	68f8      	ldr	r0, [r7, #12]
 800bf48:	f000 fe7a 	bl	800cc40 <UART_WaitOnFlagUntilTimeout>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d004      	beq.n	800bf5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2220      	movs	r2, #32
 800bf56:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	e005      	b.n	800bf68 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2220      	movs	r2, #32
 800bf60:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	e000      	b.n	800bf68 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800bf66:	2302      	movs	r3, #2
  }
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3720      	adds	r7, #32
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08a      	sub	sp, #40	; 0x28
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf84:	2b20      	cmp	r3, #32
 800bf86:	d132      	bne.n	800bfee <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d002      	beq.n	800bf94 <HAL_UART_Receive_IT+0x24>
 800bf8e:	88fb      	ldrh	r3, [r7, #6]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d101      	bne.n	800bf98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	e02b      	b.n	800bff0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d018      	beq.n	800bfde <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	e853 3f00 	ldrex	r3, [r3]
 800bfb8:	613b      	str	r3, [r7, #16]
   return(result);
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bfc0:	627b      	str	r3, [r7, #36]	; 0x24
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfca:	623b      	str	r3, [r7, #32]
 800bfcc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfce:	69f9      	ldr	r1, [r7, #28]
 800bfd0:	6a3a      	ldr	r2, [r7, #32]
 800bfd2:	e841 2300 	strex	r3, r2, [r1]
 800bfd6:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1e6      	bne.n	800bfac <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bfde:	88fb      	ldrh	r3, [r7, #6]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	68b9      	ldr	r1, [r7, #8]
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f000 fe93 	bl	800cd10 <UART_Start_Receive_IT>
 800bfea:	4603      	mov	r3, r0
 800bfec:	e000      	b.n	800bff0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800bfee:	2302      	movs	r3, #2
  }
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3728      	adds	r7, #40	; 0x28
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b0ba      	sub	sp, #232	; 0xe8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	69db      	ldr	r3, [r3, #28]
 800c006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c01e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c022:	f640 030f 	movw	r3, #2063	; 0x80f
 800c026:	4013      	ands	r3, r2
 800c028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c02c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c030:	2b00      	cmp	r3, #0
 800c032:	d115      	bne.n	800c060 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c038:	f003 0320 	and.w	r3, r3, #32
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00f      	beq.n	800c060 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c044:	f003 0320 	and.w	r3, r3, #32
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d009      	beq.n	800c060 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c050:	2b00      	cmp	r3, #0
 800c052:	f000 82ab 	beq.w	800c5ac <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	4798      	blx	r3
      }
      return;
 800c05e:	e2a5      	b.n	800c5ac <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c064:	2b00      	cmp	r3, #0
 800c066:	f000 8117 	beq.w	800c298 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c06a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c06e:	f003 0301 	and.w	r3, r3, #1
 800c072:	2b00      	cmp	r3, #0
 800c074:	d106      	bne.n	800c084 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c076:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c07a:	4b85      	ldr	r3, [pc, #532]	; (800c290 <HAL_UART_IRQHandler+0x298>)
 800c07c:	4013      	ands	r3, r2
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 810a 	beq.w	800c298 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c088:	f003 0301 	and.w	r3, r3, #1
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d011      	beq.n	800c0b4 <HAL_UART_IRQHandler+0xbc>
 800c090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00b      	beq.n	800c0b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0aa:	f043 0201 	orr.w	r2, r3, #1
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0b8:	f003 0302 	and.w	r3, r3, #2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d011      	beq.n	800c0e4 <HAL_UART_IRQHandler+0xec>
 800c0c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0c4:	f003 0301 	and.w	r3, r3, #1
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00b      	beq.n	800c0e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2202      	movs	r2, #2
 800c0d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0da:	f043 0204 	orr.w	r2, r3, #4
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0e8:	f003 0304 	and.w	r3, r3, #4
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d011      	beq.n	800c114 <HAL_UART_IRQHandler+0x11c>
 800c0f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0f4:	f003 0301 	and.w	r3, r3, #1
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00b      	beq.n	800c114 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2204      	movs	r2, #4
 800c102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c10a:	f043 0202 	orr.w	r2, r3, #2
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c118:	f003 0308 	and.w	r3, r3, #8
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d017      	beq.n	800c150 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c124:	f003 0320 	and.w	r3, r3, #32
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d105      	bne.n	800c138 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c12c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c130:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00b      	beq.n	800c150 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2208      	movs	r2, #8
 800c13e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c146:	f043 0208 	orr.w	r2, r3, #8
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d012      	beq.n	800c182 <HAL_UART_IRQHandler+0x18a>
 800c15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00c      	beq.n	800c182 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c178:	f043 0220 	orr.w	r2, r3, #32
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f000 8211 	beq.w	800c5b0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c192:	f003 0320 	and.w	r3, r3, #32
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00d      	beq.n	800c1b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c19a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c19e:	f003 0320 	and.w	r3, r3, #32
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d007      	beq.n	800c1b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ca:	2b40      	cmp	r3, #64	; 0x40
 800c1cc:	d005      	beq.n	800c1da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c1ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c1d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d04f      	beq.n	800c27a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fe5e 	bl	800ce9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ea:	2b40      	cmp	r3, #64	; 0x40
 800c1ec:	d141      	bne.n	800c272 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	3308      	adds	r3, #8
 800c1f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c1fc:	e853 3f00 	ldrex	r3, [r3]
 800c200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c20c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	3308      	adds	r3, #8
 800c216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c21a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c21e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c22a:	e841 2300 	strex	r3, r2, [r1]
 800c22e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1d9      	bne.n	800c1ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d013      	beq.n	800c26a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c246:	4a13      	ldr	r2, [pc, #76]	; (800c294 <HAL_UART_IRQHandler+0x29c>)
 800c248:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fa fd54 	bl	8006cfc <HAL_DMA_Abort_IT>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d017      	beq.n	800c28a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c264:	4610      	mov	r0, r2
 800c266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c268:	e00f      	b.n	800c28a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f9b4 	bl	800c5d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c270:	e00b      	b.n	800c28a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f9b0 	bl	800c5d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c278:	e007      	b.n	800c28a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f9ac 	bl	800c5d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800c288:	e192      	b.n	800c5b0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c28a:	bf00      	nop
    return;
 800c28c:	e190      	b.n	800c5b0 <HAL_UART_IRQHandler+0x5b8>
 800c28e:	bf00      	nop
 800c290:	04000120 	.word	0x04000120
 800c294:	0800cf65 	.word	0x0800cf65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	f040 814b 	bne.w	800c538 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c2a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2a6:	f003 0310 	and.w	r3, r3, #16
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	f000 8144 	beq.w	800c538 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c2b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2b4:	f003 0310 	and.w	r3, r3, #16
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f000 813d 	beq.w	800c538 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2210      	movs	r2, #16
 800c2c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d0:	2b40      	cmp	r3, #64	; 0x40
 800c2d2:	f040 80b5 	bne.w	800c440 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c2e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f000 8164 	beq.w	800c5b4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c2f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	f080 815c 	bcs.w	800c5b4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c302:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c30a:	699b      	ldr	r3, [r3, #24]
 800c30c:	2b20      	cmp	r3, #32
 800c30e:	f000 8086 	beq.w	800c41e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c31e:	e853 3f00 	ldrex	r3, [r3]
 800c322:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c326:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c32a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c32e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c33c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c340:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c344:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c348:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c34c:	e841 2300 	strex	r3, r2, [r1]
 800c350:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c354:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d1da      	bne.n	800c312 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	3308      	adds	r3, #8
 800c362:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c366:	e853 3f00 	ldrex	r3, [r3]
 800c36a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c36c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c36e:	f023 0301 	bic.w	r3, r3, #1
 800c372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3308      	adds	r3, #8
 800c37c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c380:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c384:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c386:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c388:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c38c:	e841 2300 	strex	r3, r2, [r1]
 800c390:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1e1      	bne.n	800c35c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	3308      	adds	r3, #8
 800c39e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3a2:	e853 3f00 	ldrex	r3, [r3]
 800c3a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c3a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c3bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c3be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c3c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c3c4:	e841 2300 	strex	r3, r2, [r1]
 800c3c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c3ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1e3      	bne.n	800c398 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2220      	movs	r2, #32
 800c3d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e6:	e853 3f00 	ldrex	r3, [r3]
 800c3ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c3ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ee:	f023 0310 	bic.w	r3, r3, #16
 800c3f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c400:	65bb      	str	r3, [r7, #88]	; 0x58
 800c402:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c406:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c408:	e841 2300 	strex	r3, r2, [r1]
 800c40c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c40e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1e4      	bne.n	800c3de <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fa fc36 	bl	8006c8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2202      	movs	r2, #2
 800c422:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c430:	b29b      	uxth	r3, r3
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	b29b      	uxth	r3, r3
 800c436:	4619      	mov	r1, r3
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 f8d7 	bl	800c5ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c43e:	e0b9      	b.n	800c5b4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f000 80ab 	beq.w	800c5b8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800c462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c466:	2b00      	cmp	r3, #0
 800c468:	f000 80a6 	beq.w	800c5b8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c474:	e853 3f00 	ldrex	r3, [r3]
 800c478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	461a      	mov	r2, r3
 800c48a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c48e:	647b      	str	r3, [r7, #68]	; 0x44
 800c490:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c496:	e841 2300 	strex	r3, r2, [r1]
 800c49a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1e4      	bne.n	800c46c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3308      	adds	r3, #8
 800c4a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	e853 3f00 	ldrex	r3, [r3]
 800c4b0:	623b      	str	r3, [r7, #32]
   return(result);
 800c4b2:	6a3b      	ldr	r3, [r7, #32]
 800c4b4:	f023 0301 	bic.w	r3, r3, #1
 800c4b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	3308      	adds	r3, #8
 800c4c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c4c6:	633a      	str	r2, [r7, #48]	; 0x30
 800c4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ce:	e841 2300 	strex	r3, r2, [r1]
 800c4d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e3      	bne.n	800c4a2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2220      	movs	r2, #32
 800c4de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	e853 3f00 	ldrex	r3, [r3]
 800c4fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f023 0310 	bic.w	r3, r3, #16
 800c502:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	461a      	mov	r2, r3
 800c50c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c510:	61fb      	str	r3, [r7, #28]
 800c512:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c514:	69b9      	ldr	r1, [r7, #24]
 800c516:	69fa      	ldr	r2, [r7, #28]
 800c518:	e841 2300 	strex	r3, r2, [r1]
 800c51c:	617b      	str	r3, [r7, #20]
   return(result);
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1e4      	bne.n	800c4ee <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2202      	movs	r2, #2
 800c528:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c52a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c52e:	4619      	mov	r1, r3
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f85b 	bl	800c5ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c536:	e03f      	b.n	800c5b8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c53c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00e      	beq.n	800c562 <HAL_UART_IRQHandler+0x56a>
 800c544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d008      	beq.n	800c562 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c558:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 feea 	bl	800d334 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c560:	e02d      	b.n	800c5be <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00e      	beq.n	800c58c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c56e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c576:	2b00      	cmp	r3, #0
 800c578:	d008      	beq.n	800c58c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d01c      	beq.n	800c5bc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	4798      	blx	r3
    }
    return;
 800c58a:	e017      	b.n	800c5bc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c58c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c594:	2b00      	cmp	r3, #0
 800c596:	d012      	beq.n	800c5be <HAL_UART_IRQHandler+0x5c6>
 800c598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c59c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00c      	beq.n	800c5be <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 fcf3 	bl	800cf90 <UART_EndTransmit_IT>
    return;
 800c5aa:	e008      	b.n	800c5be <HAL_UART_IRQHandler+0x5c6>
      return;
 800c5ac:	bf00      	nop
 800c5ae:	e006      	b.n	800c5be <HAL_UART_IRQHandler+0x5c6>
    return;
 800c5b0:	bf00      	nop
 800c5b2:	e004      	b.n	800c5be <HAL_UART_IRQHandler+0x5c6>
      return;
 800c5b4:	bf00      	nop
 800c5b6:	e002      	b.n	800c5be <HAL_UART_IRQHandler+0x5c6>
      return;
 800c5b8:	bf00      	nop
 800c5ba:	e000      	b.n	800c5be <HAL_UART_IRQHandler+0x5c6>
    return;
 800c5bc:	bf00      	nop
  }

}
 800c5be:	37e8      	adds	r7, #232	; 0xe8
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b088      	sub	sp, #32
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c60c:	2300      	movs	r3, #0
 800c60e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	689a      	ldr	r2, [r3, #8]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	431a      	orrs	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	695b      	ldr	r3, [r3, #20]
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	69db      	ldr	r3, [r3, #28]
 800c624:	4313      	orrs	r3, r2
 800c626:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	4b92      	ldr	r3, [pc, #584]	; (800c878 <UART_SetConfig+0x274>)
 800c630:	4013      	ands	r3, r2
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	6812      	ldr	r2, [r2, #0]
 800c636:	6979      	ldr	r1, [r7, #20]
 800c638:	430b      	orrs	r3, r1
 800c63a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	68da      	ldr	r2, [r3, #12]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	430a      	orrs	r2, r1
 800c650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	699b      	ldr	r3, [r3, #24]
 800c656:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6a1b      	ldr	r3, [r3, #32]
 800c65c:	697a      	ldr	r2, [r7, #20]
 800c65e:	4313      	orrs	r3, r2
 800c660:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	697a      	ldr	r2, [r7, #20]
 800c672:	430a      	orrs	r2, r1
 800c674:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a80      	ldr	r2, [pc, #512]	; (800c87c <UART_SetConfig+0x278>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d120      	bne.n	800c6c2 <UART_SetConfig+0xbe>
 800c680:	4b7f      	ldr	r3, [pc, #508]	; (800c880 <UART_SetConfig+0x27c>)
 800c682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c684:	f003 0303 	and.w	r3, r3, #3
 800c688:	2b03      	cmp	r3, #3
 800c68a:	d817      	bhi.n	800c6bc <UART_SetConfig+0xb8>
 800c68c:	a201      	add	r2, pc, #4	; (adr r2, 800c694 <UART_SetConfig+0x90>)
 800c68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c692:	bf00      	nop
 800c694:	0800c6a5 	.word	0x0800c6a5
 800c698:	0800c6b1 	.word	0x0800c6b1
 800c69c:	0800c6b7 	.word	0x0800c6b7
 800c6a0:	0800c6ab 	.word	0x0800c6ab
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	77fb      	strb	r3, [r7, #31]
 800c6a8:	e0b5      	b.n	800c816 <UART_SetConfig+0x212>
 800c6aa:	2302      	movs	r3, #2
 800c6ac:	77fb      	strb	r3, [r7, #31]
 800c6ae:	e0b2      	b.n	800c816 <UART_SetConfig+0x212>
 800c6b0:	2304      	movs	r3, #4
 800c6b2:	77fb      	strb	r3, [r7, #31]
 800c6b4:	e0af      	b.n	800c816 <UART_SetConfig+0x212>
 800c6b6:	2308      	movs	r3, #8
 800c6b8:	77fb      	strb	r3, [r7, #31]
 800c6ba:	e0ac      	b.n	800c816 <UART_SetConfig+0x212>
 800c6bc:	2310      	movs	r3, #16
 800c6be:	77fb      	strb	r3, [r7, #31]
 800c6c0:	e0a9      	b.n	800c816 <UART_SetConfig+0x212>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a6f      	ldr	r2, [pc, #444]	; (800c884 <UART_SetConfig+0x280>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d124      	bne.n	800c716 <UART_SetConfig+0x112>
 800c6cc:	4b6c      	ldr	r3, [pc, #432]	; (800c880 <UART_SetConfig+0x27c>)
 800c6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c6d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c6d8:	d011      	beq.n	800c6fe <UART_SetConfig+0xfa>
 800c6da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c6de:	d817      	bhi.n	800c710 <UART_SetConfig+0x10c>
 800c6e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6e4:	d011      	beq.n	800c70a <UART_SetConfig+0x106>
 800c6e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6ea:	d811      	bhi.n	800c710 <UART_SetConfig+0x10c>
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d003      	beq.n	800c6f8 <UART_SetConfig+0xf4>
 800c6f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6f4:	d006      	beq.n	800c704 <UART_SetConfig+0x100>
 800c6f6:	e00b      	b.n	800c710 <UART_SetConfig+0x10c>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	77fb      	strb	r3, [r7, #31]
 800c6fc:	e08b      	b.n	800c816 <UART_SetConfig+0x212>
 800c6fe:	2302      	movs	r3, #2
 800c700:	77fb      	strb	r3, [r7, #31]
 800c702:	e088      	b.n	800c816 <UART_SetConfig+0x212>
 800c704:	2304      	movs	r3, #4
 800c706:	77fb      	strb	r3, [r7, #31]
 800c708:	e085      	b.n	800c816 <UART_SetConfig+0x212>
 800c70a:	2308      	movs	r3, #8
 800c70c:	77fb      	strb	r3, [r7, #31]
 800c70e:	e082      	b.n	800c816 <UART_SetConfig+0x212>
 800c710:	2310      	movs	r3, #16
 800c712:	77fb      	strb	r3, [r7, #31]
 800c714:	e07f      	b.n	800c816 <UART_SetConfig+0x212>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a5b      	ldr	r2, [pc, #364]	; (800c888 <UART_SetConfig+0x284>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d124      	bne.n	800c76a <UART_SetConfig+0x166>
 800c720:	4b57      	ldr	r3, [pc, #348]	; (800c880 <UART_SetConfig+0x27c>)
 800c722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c724:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c728:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c72c:	d011      	beq.n	800c752 <UART_SetConfig+0x14e>
 800c72e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c732:	d817      	bhi.n	800c764 <UART_SetConfig+0x160>
 800c734:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c738:	d011      	beq.n	800c75e <UART_SetConfig+0x15a>
 800c73a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c73e:	d811      	bhi.n	800c764 <UART_SetConfig+0x160>
 800c740:	2b00      	cmp	r3, #0
 800c742:	d003      	beq.n	800c74c <UART_SetConfig+0x148>
 800c744:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c748:	d006      	beq.n	800c758 <UART_SetConfig+0x154>
 800c74a:	e00b      	b.n	800c764 <UART_SetConfig+0x160>
 800c74c:	2300      	movs	r3, #0
 800c74e:	77fb      	strb	r3, [r7, #31]
 800c750:	e061      	b.n	800c816 <UART_SetConfig+0x212>
 800c752:	2302      	movs	r3, #2
 800c754:	77fb      	strb	r3, [r7, #31]
 800c756:	e05e      	b.n	800c816 <UART_SetConfig+0x212>
 800c758:	2304      	movs	r3, #4
 800c75a:	77fb      	strb	r3, [r7, #31]
 800c75c:	e05b      	b.n	800c816 <UART_SetConfig+0x212>
 800c75e:	2308      	movs	r3, #8
 800c760:	77fb      	strb	r3, [r7, #31]
 800c762:	e058      	b.n	800c816 <UART_SetConfig+0x212>
 800c764:	2310      	movs	r3, #16
 800c766:	77fb      	strb	r3, [r7, #31]
 800c768:	e055      	b.n	800c816 <UART_SetConfig+0x212>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a47      	ldr	r2, [pc, #284]	; (800c88c <UART_SetConfig+0x288>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d124      	bne.n	800c7be <UART_SetConfig+0x1ba>
 800c774:	4b42      	ldr	r3, [pc, #264]	; (800c880 <UART_SetConfig+0x27c>)
 800c776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c778:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c77c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c780:	d011      	beq.n	800c7a6 <UART_SetConfig+0x1a2>
 800c782:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c786:	d817      	bhi.n	800c7b8 <UART_SetConfig+0x1b4>
 800c788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c78c:	d011      	beq.n	800c7b2 <UART_SetConfig+0x1ae>
 800c78e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c792:	d811      	bhi.n	800c7b8 <UART_SetConfig+0x1b4>
 800c794:	2b00      	cmp	r3, #0
 800c796:	d003      	beq.n	800c7a0 <UART_SetConfig+0x19c>
 800c798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c79c:	d006      	beq.n	800c7ac <UART_SetConfig+0x1a8>
 800c79e:	e00b      	b.n	800c7b8 <UART_SetConfig+0x1b4>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	77fb      	strb	r3, [r7, #31]
 800c7a4:	e037      	b.n	800c816 <UART_SetConfig+0x212>
 800c7a6:	2302      	movs	r3, #2
 800c7a8:	77fb      	strb	r3, [r7, #31]
 800c7aa:	e034      	b.n	800c816 <UART_SetConfig+0x212>
 800c7ac:	2304      	movs	r3, #4
 800c7ae:	77fb      	strb	r3, [r7, #31]
 800c7b0:	e031      	b.n	800c816 <UART_SetConfig+0x212>
 800c7b2:	2308      	movs	r3, #8
 800c7b4:	77fb      	strb	r3, [r7, #31]
 800c7b6:	e02e      	b.n	800c816 <UART_SetConfig+0x212>
 800c7b8:	2310      	movs	r3, #16
 800c7ba:	77fb      	strb	r3, [r7, #31]
 800c7bc:	e02b      	b.n	800c816 <UART_SetConfig+0x212>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a33      	ldr	r2, [pc, #204]	; (800c890 <UART_SetConfig+0x28c>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d124      	bne.n	800c812 <UART_SetConfig+0x20e>
 800c7c8:	4b2d      	ldr	r3, [pc, #180]	; (800c880 <UART_SetConfig+0x27c>)
 800c7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c7d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c7d4:	d011      	beq.n	800c7fa <UART_SetConfig+0x1f6>
 800c7d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c7da:	d817      	bhi.n	800c80c <UART_SetConfig+0x208>
 800c7dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7e0:	d011      	beq.n	800c806 <UART_SetConfig+0x202>
 800c7e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7e6:	d811      	bhi.n	800c80c <UART_SetConfig+0x208>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d003      	beq.n	800c7f4 <UART_SetConfig+0x1f0>
 800c7ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7f0:	d006      	beq.n	800c800 <UART_SetConfig+0x1fc>
 800c7f2:	e00b      	b.n	800c80c <UART_SetConfig+0x208>
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	77fb      	strb	r3, [r7, #31]
 800c7f8:	e00d      	b.n	800c816 <UART_SetConfig+0x212>
 800c7fa:	2302      	movs	r3, #2
 800c7fc:	77fb      	strb	r3, [r7, #31]
 800c7fe:	e00a      	b.n	800c816 <UART_SetConfig+0x212>
 800c800:	2304      	movs	r3, #4
 800c802:	77fb      	strb	r3, [r7, #31]
 800c804:	e007      	b.n	800c816 <UART_SetConfig+0x212>
 800c806:	2308      	movs	r3, #8
 800c808:	77fb      	strb	r3, [r7, #31]
 800c80a:	e004      	b.n	800c816 <UART_SetConfig+0x212>
 800c80c:	2310      	movs	r3, #16
 800c80e:	77fb      	strb	r3, [r7, #31]
 800c810:	e001      	b.n	800c816 <UART_SetConfig+0x212>
 800c812:	2310      	movs	r3, #16
 800c814:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	69db      	ldr	r3, [r3, #28]
 800c81a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c81e:	d16b      	bne.n	800c8f8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800c820:	7ffb      	ldrb	r3, [r7, #31]
 800c822:	2b08      	cmp	r3, #8
 800c824:	d838      	bhi.n	800c898 <UART_SetConfig+0x294>
 800c826:	a201      	add	r2, pc, #4	; (adr r2, 800c82c <UART_SetConfig+0x228>)
 800c828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c82c:	0800c851 	.word	0x0800c851
 800c830:	0800c859 	.word	0x0800c859
 800c834:	0800c861 	.word	0x0800c861
 800c838:	0800c899 	.word	0x0800c899
 800c83c:	0800c867 	.word	0x0800c867
 800c840:	0800c899 	.word	0x0800c899
 800c844:	0800c899 	.word	0x0800c899
 800c848:	0800c899 	.word	0x0800c899
 800c84c:	0800c86f 	.word	0x0800c86f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c850:	f7fc fde4 	bl	800941c <HAL_RCC_GetPCLK1Freq>
 800c854:	61b8      	str	r0, [r7, #24]
        break;
 800c856:	e024      	b.n	800c8a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c858:	f7fc fe02 	bl	8009460 <HAL_RCC_GetPCLK2Freq>
 800c85c:	61b8      	str	r0, [r7, #24]
        break;
 800c85e:	e020      	b.n	800c8a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c860:	4b0c      	ldr	r3, [pc, #48]	; (800c894 <UART_SetConfig+0x290>)
 800c862:	61bb      	str	r3, [r7, #24]
        break;
 800c864:	e01d      	b.n	800c8a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c866:	f7fc fd63 	bl	8009330 <HAL_RCC_GetSysClockFreq>
 800c86a:	61b8      	str	r0, [r7, #24]
        break;
 800c86c:	e019      	b.n	800c8a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c86e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c872:	61bb      	str	r3, [r7, #24]
        break;
 800c874:	e015      	b.n	800c8a2 <UART_SetConfig+0x29e>
 800c876:	bf00      	nop
 800c878:	efff69f3 	.word	0xefff69f3
 800c87c:	40013800 	.word	0x40013800
 800c880:	40021000 	.word	0x40021000
 800c884:	40004400 	.word	0x40004400
 800c888:	40004800 	.word	0x40004800
 800c88c:	40004c00 	.word	0x40004c00
 800c890:	40005000 	.word	0x40005000
 800c894:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800c898:	2300      	movs	r3, #0
 800c89a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c89c:	2301      	movs	r3, #1
 800c89e:	77bb      	strb	r3, [r7, #30]
        break;
 800c8a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d073      	beq.n	800c990 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	005a      	lsls	r2, r3, #1
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	085b      	lsrs	r3, r3, #1
 800c8b2:	441a      	add	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	2b0f      	cmp	r3, #15
 800c8c2:	d916      	bls.n	800c8f2 <UART_SetConfig+0x2ee>
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8ca:	d212      	bcs.n	800c8f2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	f023 030f 	bic.w	r3, r3, #15
 800c8d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	085b      	lsrs	r3, r3, #1
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	f003 0307 	and.w	r3, r3, #7
 800c8e0:	b29a      	uxth	r2, r3
 800c8e2:	89fb      	ldrh	r3, [r7, #14]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	89fa      	ldrh	r2, [r7, #14]
 800c8ee:	60da      	str	r2, [r3, #12]
 800c8f0:	e04e      	b.n	800c990 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	77bb      	strb	r3, [r7, #30]
 800c8f6:	e04b      	b.n	800c990 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c8f8:	7ffb      	ldrb	r3, [r7, #31]
 800c8fa:	2b08      	cmp	r3, #8
 800c8fc:	d827      	bhi.n	800c94e <UART_SetConfig+0x34a>
 800c8fe:	a201      	add	r2, pc, #4	; (adr r2, 800c904 <UART_SetConfig+0x300>)
 800c900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c904:	0800c929 	.word	0x0800c929
 800c908:	0800c931 	.word	0x0800c931
 800c90c:	0800c939 	.word	0x0800c939
 800c910:	0800c94f 	.word	0x0800c94f
 800c914:	0800c93f 	.word	0x0800c93f
 800c918:	0800c94f 	.word	0x0800c94f
 800c91c:	0800c94f 	.word	0x0800c94f
 800c920:	0800c94f 	.word	0x0800c94f
 800c924:	0800c947 	.word	0x0800c947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c928:	f7fc fd78 	bl	800941c <HAL_RCC_GetPCLK1Freq>
 800c92c:	61b8      	str	r0, [r7, #24]
        break;
 800c92e:	e013      	b.n	800c958 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c930:	f7fc fd96 	bl	8009460 <HAL_RCC_GetPCLK2Freq>
 800c934:	61b8      	str	r0, [r7, #24]
        break;
 800c936:	e00f      	b.n	800c958 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c938:	4b1b      	ldr	r3, [pc, #108]	; (800c9a8 <UART_SetConfig+0x3a4>)
 800c93a:	61bb      	str	r3, [r7, #24]
        break;
 800c93c:	e00c      	b.n	800c958 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c93e:	f7fc fcf7 	bl	8009330 <HAL_RCC_GetSysClockFreq>
 800c942:	61b8      	str	r0, [r7, #24]
        break;
 800c944:	e008      	b.n	800c958 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c94a:	61bb      	str	r3, [r7, #24]
        break;
 800c94c:	e004      	b.n	800c958 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800c94e:	2300      	movs	r3, #0
 800c950:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c952:	2301      	movs	r3, #1
 800c954:	77bb      	strb	r3, [r7, #30]
        break;
 800c956:	bf00      	nop
    }

    if (pclk != 0U)
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d018      	beq.n	800c990 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	085a      	lsrs	r2, r3, #1
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	441a      	add	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c970:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	2b0f      	cmp	r3, #15
 800c976:	d909      	bls.n	800c98c <UART_SetConfig+0x388>
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c97e:	d205      	bcs.n	800c98c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	b29a      	uxth	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	60da      	str	r2, [r3, #12]
 800c98a:	e001      	b.n	800c990 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
 800c98e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800c99c:	7fbb      	ldrb	r3, [r7, #30]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3720      	adds	r7, #32
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	007a1200 	.word	0x007a1200

0800c9ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b8:	f003 0301 	and.w	r3, r3, #1
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00a      	beq.n	800c9d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	430a      	orrs	r2, r1
 800c9d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9da:	f003 0302 	and.w	r3, r3, #2
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00a      	beq.n	800c9f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	430a      	orrs	r2, r1
 800c9f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9fc:	f003 0304 	and.w	r3, r3, #4
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00a      	beq.n	800ca1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	430a      	orrs	r2, r1
 800ca18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca1e:	f003 0308 	and.w	r3, r3, #8
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00a      	beq.n	800ca3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	430a      	orrs	r2, r1
 800ca3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca40:	f003 0310 	and.w	r3, r3, #16
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00a      	beq.n	800ca5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	430a      	orrs	r2, r1
 800ca5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca62:	f003 0320 	and.w	r3, r3, #32
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00a      	beq.n	800ca80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	430a      	orrs	r2, r1
 800ca7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d01a      	beq.n	800cac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	430a      	orrs	r2, r1
 800caa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800caaa:	d10a      	bne.n	800cac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	430a      	orrs	r2, r1
 800cac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00a      	beq.n	800cae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	430a      	orrs	r2, r1
 800cae2:	605a      	str	r2, [r3, #4]
  }
}
 800cae4:	bf00      	nop
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b098      	sub	sp, #96	; 0x60
 800caf4:	af02      	add	r7, sp, #8
 800caf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb00:	f7f8 fe7c 	bl	80057fc <HAL_GetTick>
 800cb04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f003 0308 	and.w	r3, r3, #8
 800cb10:	2b08      	cmp	r3, #8
 800cb12:	d12e      	bne.n	800cb72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb18:	9300      	str	r3, [sp, #0]
 800cb1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 f88c 	bl	800cc40 <UART_WaitOnFlagUntilTimeout>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d021      	beq.n	800cb72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb36:	e853 3f00 	ldrex	r3, [r3]
 800cb3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb42:	653b      	str	r3, [r7, #80]	; 0x50
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	461a      	mov	r2, r3
 800cb4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb4c:	647b      	str	r3, [r7, #68]	; 0x44
 800cb4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb54:	e841 2300 	strex	r3, r2, [r1]
 800cb58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d1e6      	bne.n	800cb2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2220      	movs	r2, #32
 800cb64:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb6e:	2303      	movs	r3, #3
 800cb70:	e062      	b.n	800cc38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 0304 	and.w	r3, r3, #4
 800cb7c:	2b04      	cmp	r3, #4
 800cb7e:	d149      	bne.n	800cc14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 f856 	bl	800cc40 <UART_WaitOnFlagUntilTimeout>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d03c      	beq.n	800cc14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	e853 3f00 	ldrex	r3, [r3]
 800cba6:	623b      	str	r3, [r7, #32]
   return(result);
 800cba8:	6a3b      	ldr	r3, [r7, #32]
 800cbaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cbae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb8:	633b      	str	r3, [r7, #48]	; 0x30
 800cbba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc0:	e841 2300 	strex	r3, r2, [r1]
 800cbc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1e6      	bne.n	800cb9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	e853 3f00 	ldrex	r3, [r3]
 800cbda:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f023 0301 	bic.w	r3, r3, #1
 800cbe2:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3308      	adds	r3, #8
 800cbea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbec:	61fa      	str	r2, [r7, #28]
 800cbee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf0:	69b9      	ldr	r1, [r7, #24]
 800cbf2:	69fa      	ldr	r2, [r7, #28]
 800cbf4:	e841 2300 	strex	r3, r2, [r1]
 800cbf8:	617b      	str	r3, [r7, #20]
   return(result);
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d1e5      	bne.n	800cbcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2220      	movs	r2, #32
 800cc04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc10:	2303      	movs	r3, #3
 800cc12:	e011      	b.n	800cc38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2220      	movs	r2, #32
 800cc18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2220      	movs	r2, #32
 800cc1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800cc36:	2300      	movs	r3, #0
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3758      	adds	r7, #88	; 0x58
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	603b      	str	r3, [r7, #0]
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc50:	e049      	b.n	800cce6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc58:	d045      	beq.n	800cce6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc5a:	f7f8 fdcf 	bl	80057fc <HAL_GetTick>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	1ad3      	subs	r3, r2, r3
 800cc64:	69ba      	ldr	r2, [r7, #24]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d302      	bcc.n	800cc70 <UART_WaitOnFlagUntilTimeout+0x30>
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d101      	bne.n	800cc74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cc70:	2303      	movs	r3, #3
 800cc72:	e048      	b.n	800cd06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f003 0304 	and.w	r3, r3, #4
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d031      	beq.n	800cce6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	69db      	ldr	r3, [r3, #28]
 800cc88:	f003 0308 	and.w	r3, r3, #8
 800cc8c:	2b08      	cmp	r3, #8
 800cc8e:	d110      	bne.n	800ccb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2208      	movs	r2, #8
 800cc96:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f000 f8ff 	bl	800ce9c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2208      	movs	r2, #8
 800cca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e029      	b.n	800cd06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	69db      	ldr	r3, [r3, #28]
 800ccb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccc0:	d111      	bne.n	800cce6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f000 f8e5 	bl	800ce9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2220      	movs	r2, #32
 800ccd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800cce2:	2303      	movs	r3, #3
 800cce4:	e00f      	b.n	800cd06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	69da      	ldr	r2, [r3, #28]
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	4013      	ands	r3, r2
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	bf0c      	ite	eq
 800ccf6:	2301      	moveq	r3, #1
 800ccf8:	2300      	movne	r3, #0
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	79fb      	ldrb	r3, [r7, #7]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d0a6      	beq.n	800cc52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
	...

0800cd10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b097      	sub	sp, #92	; 0x5c
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	68ba      	ldr	r2, [r7, #8]
 800cd22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	88fa      	ldrh	r2, [r7, #6]
 800cd28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	88fa      	ldrh	r2, [r7, #6]
 800cd30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2200      	movs	r2, #0
 800cd38:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd42:	d10e      	bne.n	800cd62 <UART_Start_Receive_IT+0x52>
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	691b      	ldr	r3, [r3, #16]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d105      	bne.n	800cd58 <UART_Start_Receive_IT+0x48>
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cd52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cd56:	e02d      	b.n	800cdb4 <UART_Start_Receive_IT+0xa4>
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	22ff      	movs	r2, #255	; 0xff
 800cd5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cd60:	e028      	b.n	800cdb4 <UART_Start_Receive_IT+0xa4>
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10d      	bne.n	800cd86 <UART_Start_Receive_IT+0x76>
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	691b      	ldr	r3, [r3, #16]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d104      	bne.n	800cd7c <UART_Start_Receive_IT+0x6c>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	22ff      	movs	r2, #255	; 0xff
 800cd76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cd7a:	e01b      	b.n	800cdb4 <UART_Start_Receive_IT+0xa4>
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	227f      	movs	r2, #127	; 0x7f
 800cd80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cd84:	e016      	b.n	800cdb4 <UART_Start_Receive_IT+0xa4>
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd8e:	d10d      	bne.n	800cdac <UART_Start_Receive_IT+0x9c>
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	691b      	ldr	r3, [r3, #16]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d104      	bne.n	800cda2 <UART_Start_Receive_IT+0x92>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	227f      	movs	r2, #127	; 0x7f
 800cd9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cda0:	e008      	b.n	800cdb4 <UART_Start_Receive_IT+0xa4>
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	223f      	movs	r2, #63	; 0x3f
 800cda6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cdaa:	e003      	b.n	800cdb4 <UART_Start_Receive_IT+0xa4>
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2222      	movs	r2, #34	; 0x22
 800cdc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	3308      	adds	r3, #8
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdce:	e853 3f00 	ldrex	r3, [r3]
 800cdd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd6:	f043 0301 	orr.w	r3, r3, #1
 800cdda:	657b      	str	r3, [r7, #84]	; 0x54
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3308      	adds	r3, #8
 800cde2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cde4:	64ba      	str	r2, [r7, #72]	; 0x48
 800cde6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cdea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdec:	e841 2300 	strex	r3, r2, [r1]
 800cdf0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cdf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1e5      	bne.n	800cdc4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce00:	d107      	bne.n	800ce12 <UART_Start_Receive_IT+0x102>
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d103      	bne.n	800ce12 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	4a21      	ldr	r2, [pc, #132]	; (800ce94 <UART_Start_Receive_IT+0x184>)
 800ce0e:	669a      	str	r2, [r3, #104]	; 0x68
 800ce10:	e002      	b.n	800ce18 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	4a20      	ldr	r2, [pc, #128]	; (800ce98 <UART_Start_Receive_IT+0x188>)
 800ce16:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	691b      	ldr	r3, [r3, #16]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d019      	beq.n	800ce54 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce28:	e853 3f00 	ldrex	r3, [r3]
 800ce2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce30:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ce34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce3e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce40:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce46:	e841 2300 	strex	r3, r2, [r1]
 800ce4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ce4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1e6      	bne.n	800ce20 <UART_Start_Receive_IT+0x110>
 800ce52:	e018      	b.n	800ce86 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	e853 3f00 	ldrex	r3, [r3]
 800ce60:	613b      	str	r3, [r7, #16]
   return(result);
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	f043 0320 	orr.w	r3, r3, #32
 800ce68:	653b      	str	r3, [r7, #80]	; 0x50
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce72:	623b      	str	r3, [r7, #32]
 800ce74:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce76:	69f9      	ldr	r1, [r7, #28]
 800ce78:	6a3a      	ldr	r2, [r7, #32]
 800ce7a:	e841 2300 	strex	r3, r2, [r1]
 800ce7e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d1e6      	bne.n	800ce54 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	375c      	adds	r7, #92	; 0x5c
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr
 800ce94:	0800d18d 	.word	0x0800d18d
 800ce98:	0800cfe5 	.word	0x0800cfe5

0800ce9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b095      	sub	sp, #84	; 0x54
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceac:	e853 3f00 	ldrex	r3, [r3]
 800ceb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ceb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	461a      	mov	r2, r3
 800cec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cec2:	643b      	str	r3, [r7, #64]	; 0x40
 800cec4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ceca:	e841 2300 	strex	r3, r2, [r1]
 800cece:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ced0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1e6      	bne.n	800cea4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	3308      	adds	r3, #8
 800cedc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cede:	6a3b      	ldr	r3, [r7, #32]
 800cee0:	e853 3f00 	ldrex	r3, [r3]
 800cee4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	f023 0301 	bic.w	r3, r3, #1
 800ceec:	64bb      	str	r3, [r7, #72]	; 0x48
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	3308      	adds	r3, #8
 800cef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cefc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cefe:	e841 2300 	strex	r3, r2, [r1]
 800cf02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d1e5      	bne.n	800ced6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d118      	bne.n	800cf44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	e853 3f00 	ldrex	r3, [r3]
 800cf1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	f023 0310 	bic.w	r3, r3, #16
 800cf26:	647b      	str	r3, [r7, #68]	; 0x44
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf30:	61bb      	str	r3, [r7, #24]
 800cf32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf34:	6979      	ldr	r1, [r7, #20]
 800cf36:	69ba      	ldr	r2, [r7, #24]
 800cf38:	e841 2300 	strex	r3, r2, [r1]
 800cf3c:	613b      	str	r3, [r7, #16]
   return(result);
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1e6      	bne.n	800cf12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2220      	movs	r2, #32
 800cf48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	669a      	str	r2, [r3, #104]	; 0x68
}
 800cf58:	bf00      	nop
 800cf5a:	3754      	adds	r7, #84	; 0x54
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f7ff fb28 	bl	800c5d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf88:	bf00      	nop
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b088      	sub	sp, #32
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	e853 3f00 	ldrex	r3, [r3]
 800cfa4:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfac:	61fb      	str	r3, [r7, #28]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	61bb      	str	r3, [r7, #24]
 800cfb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfba:	6979      	ldr	r1, [r7, #20]
 800cfbc:	69ba      	ldr	r2, [r7, #24]
 800cfbe:	e841 2300 	strex	r3, r2, [r1]
 800cfc2:	613b      	str	r3, [r7, #16]
   return(result);
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1e6      	bne.n	800cf98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2220      	movs	r2, #32
 800cfce:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f7ff faf4 	bl	800c5c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfdc:	bf00      	nop
 800cfde:	3720      	adds	r7, #32
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b09c      	sub	sp, #112	; 0x70
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cff2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cffc:	2b22      	cmp	r3, #34	; 0x22
 800cffe:	f040 80b9 	bne.w	800d174 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d008:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d00c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d010:	b2d9      	uxtb	r1, r3
 800d012:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d016:	b2da      	uxtb	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d01c:	400a      	ands	r2, r1
 800d01e:	b2d2      	uxtb	r2, r2
 800d020:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d026:	1c5a      	adds	r2, r3, #1
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d032:	b29b      	uxth	r3, r3
 800d034:	3b01      	subs	r3, #1
 800d036:	b29a      	uxth	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d044:	b29b      	uxth	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	f040 809c 	bne.w	800d184 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d054:	e853 3f00 	ldrex	r3, [r3]
 800d058:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d05a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d05c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d060:	66bb      	str	r3, [r7, #104]	; 0x68
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	461a      	mov	r2, r3
 800d068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d06a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d06c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d070:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d072:	e841 2300 	strex	r3, r2, [r1]
 800d076:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d1e6      	bne.n	800d04c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	3308      	adds	r3, #8
 800d084:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d088:	e853 3f00 	ldrex	r3, [r3]
 800d08c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d090:	f023 0301 	bic.w	r3, r3, #1
 800d094:	667b      	str	r3, [r7, #100]	; 0x64
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	3308      	adds	r3, #8
 800d09c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d09e:	647a      	str	r2, [r7, #68]	; 0x44
 800d0a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d0a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0a6:	e841 2300 	strex	r3, r2, [r1]
 800d0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1e5      	bne.n	800d07e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2220      	movs	r2, #32
 800d0b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d018      	beq.n	800d106 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0dc:	e853 3f00 	ldrex	r3, [r3]
 800d0e0:	623b      	str	r3, [r7, #32]
   return(result);
 800d0e2:	6a3b      	ldr	r3, [r7, #32]
 800d0e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d0e8:	663b      	str	r3, [r7, #96]	; 0x60
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0f2:	633b      	str	r3, [r7, #48]	; 0x30
 800d0f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0fa:	e841 2300 	strex	r3, r2, [r1]
 800d0fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1e6      	bne.n	800d0d4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d12e      	bne.n	800d16c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	e853 3f00 	ldrex	r3, [r3]
 800d120:	60fb      	str	r3, [r7, #12]
   return(result);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f023 0310 	bic.w	r3, r3, #16
 800d128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	461a      	mov	r2, r3
 800d130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d132:	61fb      	str	r3, [r7, #28]
 800d134:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d136:	69b9      	ldr	r1, [r7, #24]
 800d138:	69fa      	ldr	r2, [r7, #28]
 800d13a:	e841 2300 	strex	r3, r2, [r1]
 800d13e:	617b      	str	r3, [r7, #20]
   return(result);
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d1e6      	bne.n	800d114 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	69db      	ldr	r3, [r3, #28]
 800d14c:	f003 0310 	and.w	r3, r3, #16
 800d150:	2b10      	cmp	r3, #16
 800d152:	d103      	bne.n	800d15c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2210      	movs	r2, #16
 800d15a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff fa41 	bl	800c5ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d16a:	e00b      	b.n	800d184 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f7f6 f92d 	bl	80033cc <HAL_UART_RxCpltCallback>
}
 800d172:	e007      	b.n	800d184 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	699a      	ldr	r2, [r3, #24]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f042 0208 	orr.w	r2, r2, #8
 800d182:	619a      	str	r2, [r3, #24]
}
 800d184:	bf00      	nop
 800d186:	3770      	adds	r7, #112	; 0x70
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b09c      	sub	sp, #112	; 0x70
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d19a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1a4:	2b22      	cmp	r3, #34	; 0x22
 800d1a6:	f040 80b9 	bne.w	800d31c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d1b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1b8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d1ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d1be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d1c2:	4013      	ands	r3, r2
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1ce:	1c9a      	adds	r2, r3, #2
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	f040 809c 	bne.w	800d32c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1fc:	e853 3f00 	ldrex	r3, [r3]
 800d200:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d204:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d208:	667b      	str	r3, [r7, #100]	; 0x64
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	461a      	mov	r2, r3
 800d210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d212:	657b      	str	r3, [r7, #84]	; 0x54
 800d214:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d216:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d218:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d21a:	e841 2300 	strex	r3, r2, [r1]
 800d21e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1e6      	bne.n	800d1f4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	3308      	adds	r3, #8
 800d22c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d230:	e853 3f00 	ldrex	r3, [r3]
 800d234:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d238:	f023 0301 	bic.w	r3, r3, #1
 800d23c:	663b      	str	r3, [r7, #96]	; 0x60
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	3308      	adds	r3, #8
 800d244:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d246:	643a      	str	r2, [r7, #64]	; 0x40
 800d248:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d24a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d24c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d24e:	e841 2300 	strex	r3, r2, [r1]
 800d252:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1e5      	bne.n	800d226 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2220      	movs	r2, #32
 800d25e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d018      	beq.n	800d2ae <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	e853 3f00 	ldrex	r3, [r3]
 800d288:	61fb      	str	r3, [r7, #28]
   return(result);
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d290:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	461a      	mov	r2, r3
 800d298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d29a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d29c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d29e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2a2:	e841 2300 	strex	r3, r2, [r1]
 800d2a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1e6      	bne.n	800d27c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d12e      	bne.n	800d314 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	e853 3f00 	ldrex	r3, [r3]
 800d2c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	f023 0310 	bic.w	r3, r3, #16
 800d2d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2da:	61bb      	str	r3, [r7, #24]
 800d2dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2de:	6979      	ldr	r1, [r7, #20]
 800d2e0:	69ba      	ldr	r2, [r7, #24]
 800d2e2:	e841 2300 	strex	r3, r2, [r1]
 800d2e6:	613b      	str	r3, [r7, #16]
   return(result);
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1e6      	bne.n	800d2bc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	69db      	ldr	r3, [r3, #28]
 800d2f4:	f003 0310 	and.w	r3, r3, #16
 800d2f8:	2b10      	cmp	r3, #16
 800d2fa:	d103      	bne.n	800d304 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2210      	movs	r2, #16
 800d302:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7ff f96d 	bl	800c5ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d312:	e00b      	b.n	800d32c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f7f6 f859 	bl	80033cc <HAL_UART_RxCpltCallback>
}
 800d31a:	e007      	b.n	800d32c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	699a      	ldr	r2, [r3, #24]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f042 0208 	orr.w	r2, r2, #8
 800d32a:	619a      	str	r2, [r3, #24]
}
 800d32c:	bf00      	nop
 800d32e:	3770      	adds	r7, #112	; 0x70
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <table_get_u1>:

// global area for passing parameters (aux, key) and for storing round keys
uint32_t AESAUX[16/sizeof(uint32_t)];
uint32_t AESKEY[11*16/sizeof(uint32_t)];

uint8_t table_get_u1(const uint8_t *table, size_t index) { return table[index]; }
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	4413      	add	r3, r2
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	4618      	mov	r0, r3
 800d35c:	370c      	adds	r7, #12
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr

0800d366 <table_get_u2>:
int8_t table_get_s1(const int8_t *table, size_t index) { return table[index]; }
uint16_t table_get_u2(const uint16_t *table, size_t index) { return table[index]; }
 800d366:	b480      	push	{r7}
 800d368:	b083      	sub	sp, #12
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
 800d36e:	6039      	str	r1, [r7, #0]
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	005b      	lsls	r3, r3, #1
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	4413      	add	r3, r2
 800d378:	881b      	ldrh	r3, [r3, #0]
 800d37a:	4618      	mov	r0, r3
 800d37c:	370c      	adds	r7, #12
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr

0800d386 <table_get_u4>:
int16_t table_get_s2(const int16_t *table, size_t index) { return table[index]; }
uint32_t table_get_u4(const uint32_t *table, size_t index) { return table[index]; }
 800d386:	b480      	push	{r7}
 800d388:	b083      	sub	sp, #12
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
 800d38e:	6039      	str	r1, [r7, #0]
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	4413      	add	r3, r2
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4618      	mov	r0, r3
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr

0800d3a6 <table_get_ostime>:
int32_t table_get_s4(const int32_t *table, size_t index) { return table[index]; }
ostime_t table_get_ostime(const ostime_t *table, size_t index) { return table[index]; }
 800d3a6:	b480      	push	{r7}
 800d3a8:	b083      	sub	sp, #12
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	6039      	str	r1, [r7, #0]
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	4413      	add	r3, r2
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	370c      	adds	r7, #12
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
	...

0800d3c8 <aesroundkeys>:

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 800d3c8:	b590      	push	{r4, r7, lr}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
    int i;
    uint32_t b;

    for( i=0; i<4; i++) {
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	607b      	str	r3, [r7, #4]
 800d3d2:	e021      	b.n	800d418 <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 800d3d4:	4a3b      	ldr	r2, [pc, #236]	; (800d4c4 <aesroundkeys+0xfc>)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3dc:	061a      	lsls	r2, r3, #24
 800d3de:	4939      	ldr	r1, [pc, #228]	; (800d4c4 <aesroundkeys+0xfc>)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d3e6:	021b      	lsls	r3, r3, #8
 800d3e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3ec:	431a      	orrs	r2, r3
 800d3ee:	4935      	ldr	r1, [pc, #212]	; (800d4c4 <aesroundkeys+0xfc>)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d3f6:	0a1b      	lsrs	r3, r3, #8
 800d3f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d3fc:	431a      	orrs	r2, r3
 800d3fe:	4931      	ldr	r1, [pc, #196]	; (800d4c4 <aesroundkeys+0xfc>)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d406:	0e1b      	lsrs	r3, r3, #24
 800d408:	431a      	orrs	r2, r3
 800d40a:	492e      	ldr	r1, [pc, #184]	; (800d4c4 <aesroundkeys+0xfc>)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	3301      	adds	r3, #1
 800d416:	607b      	str	r3, [r7, #4]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2b03      	cmp	r3, #3
 800d41c:	ddda      	ble.n	800d3d4 <aesroundkeys+0xc>
    }

    b = AESKEY[3];
 800d41e:	4b29      	ldr	r3, [pc, #164]	; (800d4c4 <aesroundkeys+0xfc>)
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 800d424:	e045      	b.n	800d4b2 <aesroundkeys+0xea>
        if( i%4==0 ) {
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f003 0303 	and.w	r3, r3, #3
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d130      	bne.n	800d492 <aesroundkeys+0xca>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = ((uint32_t)TABLE_GET_U1(AES_S, u1(b >> 16)) << 24) ^
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	0c1b      	lsrs	r3, r3, #16
 800d434:	b2db      	uxtb	r3, r3
 800d436:	4619      	mov	r1, r3
 800d438:	4823      	ldr	r0, [pc, #140]	; (800d4c8 <aesroundkeys+0x100>)
 800d43a:	f7ff ff85 	bl	800d348 <table_get_u1>
 800d43e:	4603      	mov	r3, r0
 800d440:	061c      	lsls	r4, r3, #24
                ((uint32_t)TABLE_GET_U1(AES_S, u1(b >>  8)) << 16) ^
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	0a1b      	lsrs	r3, r3, #8
 800d446:	b2db      	uxtb	r3, r3
 800d448:	4619      	mov	r1, r3
 800d44a:	481f      	ldr	r0, [pc, #124]	; (800d4c8 <aesroundkeys+0x100>)
 800d44c:	f7ff ff7c 	bl	800d348 <table_get_u1>
 800d450:	4603      	mov	r3, r0
 800d452:	041b      	lsls	r3, r3, #16
            b = ((uint32_t)TABLE_GET_U1(AES_S, u1(b >> 16)) << 24) ^
 800d454:	405c      	eors	r4, r3
                ((uint32_t)TABLE_GET_U1(AES_S, u1(b)      ) <<  8) ^
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	4619      	mov	r1, r3
 800d45c:	481a      	ldr	r0, [pc, #104]	; (800d4c8 <aesroundkeys+0x100>)
 800d45e:	f7ff ff73 	bl	800d348 <table_get_u1>
 800d462:	4603      	mov	r3, r0
 800d464:	021b      	lsls	r3, r3, #8
                ((uint32_t)TABLE_GET_U1(AES_S, u1(b >>  8)) << 16) ^
 800d466:	405c      	eors	r4, r3
                ((uint32_t)TABLE_GET_U1(AES_S,    b >> 24 )      ) ^
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	0e1b      	lsrs	r3, r3, #24
 800d46c:	4619      	mov	r1, r3
 800d46e:	4816      	ldr	r0, [pc, #88]	; (800d4c8 <aesroundkeys+0x100>)
 800d470:	f7ff ff6a 	bl	800d348 <table_get_u1>
 800d474:	4603      	mov	r3, r0
                ((uint32_t)TABLE_GET_U1(AES_S, u1(b)      ) <<  8) ^
 800d476:	405c      	eors	r4, r3
                 TABLE_GET_U4(AES_RCON, (i-4)/4);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	3b04      	subs	r3, #4
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	da00      	bge.n	800d482 <aesroundkeys+0xba>
 800d480:	3303      	adds	r3, #3
 800d482:	109b      	asrs	r3, r3, #2
 800d484:	4619      	mov	r1, r3
 800d486:	4811      	ldr	r0, [pc, #68]	; (800d4cc <aesroundkeys+0x104>)
 800d488:	f7ff ff7d 	bl	800d386 <table_get_u4>
 800d48c:	4603      	mov	r3, r0
            b = ((uint32_t)TABLE_GET_U1(AES_S, u1(b >> 16)) << 24) ^
 800d48e:	4063      	eors	r3, r4
 800d490:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	3b04      	subs	r3, #4
 800d496:	4a0b      	ldr	r2, [pc, #44]	; (800d4c4 <aesroundkeys+0xfc>)
 800d498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d49c:	683a      	ldr	r2, [r7, #0]
 800d49e:	4053      	eors	r3, r2
 800d4a0:	603b      	str	r3, [r7, #0]
 800d4a2:	4908      	ldr	r1, [pc, #32]	; (800d4c4 <aesroundkeys+0xfc>)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	683a      	ldr	r2, [r7, #0]
 800d4a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	607b      	str	r3, [r7, #4]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b2b      	cmp	r3, #43	; 0x2b
 800d4b6:	ddb6      	ble.n	800d426 <aesroundkeys+0x5e>
    }
}
 800d4b8:	bf00      	nop
 800d4ba:	bf00      	nop
 800d4bc:	370c      	adds	r7, #12
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd90      	pop	{r4, r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	20000b54 	.word	0x20000b54
 800d4c8:	08018778 	.word	0x08018778
 800d4cc:	08018750 	.word	0x08018750

0800d4d0 <os_aes>:

uint32_t os_aes (uint8_t mode, uint8_t *buf, uint16_t len) {
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b08c      	sub	sp, #48	; 0x30
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	6039      	str	r1, [r7, #0]
 800d4da:	71fb      	strb	r3, [r7, #7]
 800d4dc:	4613      	mov	r3, r2
 800d4de:	80bb      	strh	r3, [r7, #4]

        aesroundkeys();
 800d4e0:	f7ff ff72 	bl	800d3c8 <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 800d4e4:	79fb      	ldrb	r3, [r7, #7]
 800d4e6:	f003 0308 	and.w	r3, r3, #8
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d010      	beq.n	800d510 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 800d4ee:	4b5a      	ldr	r3, [pc, #360]	; (800d658 <os_aes+0x188>)
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	60da      	str	r2, [r3, #12]
 800d4f4:	4b58      	ldr	r3, [pc, #352]	; (800d658 <os_aes+0x188>)
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	4a57      	ldr	r2, [pc, #348]	; (800d658 <os_aes+0x188>)
 800d4fa:	6093      	str	r3, [r2, #8]
 800d4fc:	4b56      	ldr	r3, [pc, #344]	; (800d658 <os_aes+0x188>)
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	4a55      	ldr	r2, [pc, #340]	; (800d658 <os_aes+0x188>)
 800d502:	6053      	str	r3, [r2, #4]
 800d504:	4b54      	ldr	r3, [pc, #336]	; (800d658 <os_aes+0x188>)
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	4a53      	ldr	r2, [pc, #332]	; (800d658 <os_aes+0x188>)
 800d50a:	6013      	str	r3, [r2, #0]
 800d50c:	f000 bcf9 	b.w	800df02 <os_aes+0xa32>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 800d510:	4b51      	ldr	r3, [pc, #324]	; (800d658 <os_aes+0x188>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	061a      	lsls	r2, r3, #24
 800d516:	4b50      	ldr	r3, [pc, #320]	; (800d658 <os_aes+0x188>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	021b      	lsls	r3, r3, #8
 800d51c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d520:	431a      	orrs	r2, r3
 800d522:	4b4d      	ldr	r3, [pc, #308]	; (800d658 <os_aes+0x188>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	0a1b      	lsrs	r3, r3, #8
 800d528:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d52c:	431a      	orrs	r2, r3
 800d52e:	4b4a      	ldr	r3, [pc, #296]	; (800d658 <os_aes+0x188>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	0e1b      	lsrs	r3, r3, #24
 800d534:	4313      	orrs	r3, r2
 800d536:	4a48      	ldr	r2, [pc, #288]	; (800d658 <os_aes+0x188>)
 800d538:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 800d53a:	4b47      	ldr	r3, [pc, #284]	; (800d658 <os_aes+0x188>)
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	061a      	lsls	r2, r3, #24
 800d540:	4b45      	ldr	r3, [pc, #276]	; (800d658 <os_aes+0x188>)
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	021b      	lsls	r3, r3, #8
 800d546:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d54a:	431a      	orrs	r2, r3
 800d54c:	4b42      	ldr	r3, [pc, #264]	; (800d658 <os_aes+0x188>)
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	0a1b      	lsrs	r3, r3, #8
 800d552:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d556:	431a      	orrs	r2, r3
 800d558:	4b3f      	ldr	r3, [pc, #252]	; (800d658 <os_aes+0x188>)
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	0e1b      	lsrs	r3, r3, #24
 800d55e:	4313      	orrs	r3, r2
 800d560:	4a3d      	ldr	r2, [pc, #244]	; (800d658 <os_aes+0x188>)
 800d562:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 800d564:	4b3c      	ldr	r3, [pc, #240]	; (800d658 <os_aes+0x188>)
 800d566:	689b      	ldr	r3, [r3, #8]
 800d568:	061a      	lsls	r2, r3, #24
 800d56a:	4b3b      	ldr	r3, [pc, #236]	; (800d658 <os_aes+0x188>)
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	021b      	lsls	r3, r3, #8
 800d570:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d574:	431a      	orrs	r2, r3
 800d576:	4b38      	ldr	r3, [pc, #224]	; (800d658 <os_aes+0x188>)
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	0a1b      	lsrs	r3, r3, #8
 800d57c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d580:	431a      	orrs	r2, r3
 800d582:	4b35      	ldr	r3, [pc, #212]	; (800d658 <os_aes+0x188>)
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	0e1b      	lsrs	r3, r3, #24
 800d588:	4313      	orrs	r3, r2
 800d58a:	4a33      	ldr	r2, [pc, #204]	; (800d658 <os_aes+0x188>)
 800d58c:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 800d58e:	4b32      	ldr	r3, [pc, #200]	; (800d658 <os_aes+0x188>)
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	061a      	lsls	r2, r3, #24
 800d594:	4b30      	ldr	r3, [pc, #192]	; (800d658 <os_aes+0x188>)
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	021b      	lsls	r3, r3, #8
 800d59a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d59e:	431a      	orrs	r2, r3
 800d5a0:	4b2d      	ldr	r3, [pc, #180]	; (800d658 <os_aes+0x188>)
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	0a1b      	lsrs	r3, r3, #8
 800d5a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d5aa:	431a      	orrs	r2, r3
 800d5ac:	4b2a      	ldr	r3, [pc, #168]	; (800d658 <os_aes+0x188>)
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	0e1b      	lsrs	r3, r3, #24
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	4a28      	ldr	r2, [pc, #160]	; (800d658 <os_aes+0x188>)
 800d5b6:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 800d5b8:	f000 bca3 	b.w	800df02 <os_aes+0xa32>
            uint32_t a0, a1, a2, a3;
            uint32_t t0, t1, t2, t3;
            uint32_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 800d5bc:	79fb      	ldrb	r3, [r7, #7]
 800d5be:	f003 0304 	and.w	r3, r3, #4
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d109      	bne.n	800d5da <os_aes+0x10a>
 800d5c6:	79fb      	ldrb	r3, [r7, #7]
 800d5c8:	f003 0302 	and.w	r3, r3, #2
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d011      	beq.n	800d5f4 <os_aes+0x124>
 800d5d0:	79fb      	ldrb	r3, [r7, #7]
 800d5d2:	f003 0308 	and.w	r3, r3, #8
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10c      	bne.n	800d5f4 <os_aes+0x124>
                a0 = AESAUX[0];
 800d5da:	4b1f      	ldr	r3, [pc, #124]	; (800d658 <os_aes+0x188>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	62fb      	str	r3, [r7, #44]	; 0x2c
                a1 = AESAUX[1];
 800d5e0:	4b1d      	ldr	r3, [pc, #116]	; (800d658 <os_aes+0x188>)
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	62bb      	str	r3, [r7, #40]	; 0x28
                a2 = AESAUX[2];
 800d5e6:	4b1c      	ldr	r3, [pc, #112]	; (800d658 <os_aes+0x188>)
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	627b      	str	r3, [r7, #36]	; 0x24
                a3 = AESAUX[3];
 800d5ec:	4b1a      	ldr	r3, [pc, #104]	; (800d658 <os_aes+0x188>)
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	623b      	str	r3, [r7, #32]
 800d5f2:	e062      	b.n	800d6ba <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 800d5f4:	79fb      	ldrb	r3, [r7, #7]
 800d5f6:	f003 0302 	and.w	r3, r3, #2
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d016      	beq.n	800d62c <os_aes+0x15c>
 800d5fe:	88bb      	ldrh	r3, [r7, #4]
 800d600:	2b10      	cmp	r3, #16
 800d602:	d813      	bhi.n	800d62c <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 800d604:	2300      	movs	r3, #0
 800d606:	623b      	str	r3, [r7, #32]
 800d608:	6a3b      	ldr	r3, [r7, #32]
 800d60a:	627b      	str	r3, [r7, #36]	; 0x24
 800d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d612:	62fb      	str	r3, [r7, #44]	; 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 800d614:	88bb      	ldrh	r3, [r7, #4]
 800d616:	2b10      	cmp	r3, #16
 800d618:	d101      	bne.n	800d61e <os_aes+0x14e>
 800d61a:	2210      	movs	r2, #16
 800d61c:	e000      	b.n	800d620 <os_aes+0x150>
 800d61e:	2220      	movs	r2, #32
 800d620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d624:	4313      	orrs	r3, r2
 800d626:	b25b      	sxtb	r3, r3
 800d628:	71fb      	strb	r3, [r7, #7]
 800d62a:	e046      	b.n	800d6ba <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 800d62c:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 800d62e:	2300      	movs	r3, #0
 800d630:	61fb      	str	r3, [r7, #28]
 800d632:	e026      	b.n	800d682 <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	021a      	lsls	r2, r3, #8
 800d638:	88bb      	ldrh	r3, [r7, #4]
 800d63a:	69f9      	ldr	r1, [r7, #28]
 800d63c:	4299      	cmp	r1, r3
 800d63e:	d204      	bcs.n	800d64a <os_aes+0x17a>
 800d640:	6839      	ldr	r1, [r7, #0]
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	440b      	add	r3, r1
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	e009      	b.n	800d65e <os_aes+0x18e>
 800d64a:	88bb      	ldrh	r3, [r7, #4]
 800d64c:	69f9      	ldr	r1, [r7, #28]
 800d64e:	4299      	cmp	r1, r3
 800d650:	d104      	bne.n	800d65c <os_aes+0x18c>
 800d652:	2380      	movs	r3, #128	; 0x80
 800d654:	e003      	b.n	800d65e <os_aes+0x18e>
 800d656:	bf00      	nop
 800d658:	20000b44 	.word	0x20000b44
 800d65c:	2300      	movs	r3, #0
 800d65e:	4313      	orrs	r3, r2
 800d660:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	f003 0303 	and.w	r3, r3, #3
 800d668:	2b03      	cmp	r3, #3
 800d66a:	d107      	bne.n	800d67c <os_aes+0x1ac>
                        a0 = a1;
 800d66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = a2;
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = a3;
 800d674:	6a3b      	ldr	r3, [r7, #32]
 800d676:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = t1;
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	3301      	adds	r3, #1
 800d680:	61fb      	str	r3, [r7, #28]
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	2b0f      	cmp	r3, #15
 800d686:	d9d5      	bls.n	800d634 <os_aes+0x164>
                    }
                }
                if( mode & AES_MIC ) {
 800d688:	79fb      	ldrb	r3, [r7, #7]
 800d68a:	f003 0302 	and.w	r3, r3, #2
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d013      	beq.n	800d6ba <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 800d692:	4ba6      	ldr	r3, [pc, #664]	; (800d92c <os_aes+0x45c>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d698:	4053      	eors	r3, r2
 800d69a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    a1 ^= AESAUX[1];
 800d69c:	4ba3      	ldr	r3, [pc, #652]	; (800d92c <os_aes+0x45c>)
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6a2:	4053      	eors	r3, r2
 800d6a4:	62bb      	str	r3, [r7, #40]	; 0x28
                    a2 ^= AESAUX[2];
 800d6a6:	4ba1      	ldr	r3, [pc, #644]	; (800d92c <os_aes+0x45c>)
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ac:	4053      	eors	r3, r2
 800d6ae:	627b      	str	r3, [r7, #36]	; 0x24
                    a3 ^= AESAUX[3];
 800d6b0:	4b9e      	ldr	r3, [pc, #632]	; (800d92c <os_aes+0x45c>)
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	6a3a      	ldr	r2, [r7, #32]
 800d6b6:	4053      	eors	r3, r2
 800d6b8:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 800d6ba:	4b9d      	ldr	r3, [pc, #628]	; (800d930 <os_aes+0x460>)
 800d6bc:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	3380      	adds	r3, #128	; 0x80
 800d6c2:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6ca:	4053      	eors	r3, r2
 800d6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            a1 ^= ki[1];
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6d6:	4053      	eors	r3, r2
 800d6d8:	62bb      	str	r3, [r7, #40]	; 0x28
            a2 ^= ki[2];
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	3308      	adds	r3, #8
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6e2:	4053      	eors	r3, r2
 800d6e4:	627b      	str	r3, [r7, #36]	; 0x24
            a3 ^= ki[3];
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	330c      	adds	r3, #12
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	6a3a      	ldr	r2, [r7, #32]
 800d6ee:	4053      	eors	r3, r2
 800d6f0:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	695b      	ldr	r3, [r3, #20]
 800d6f6:	61bb      	str	r3, [r7, #24]
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	699b      	ldr	r3, [r3, #24]
 800d6fc:	60fb      	str	r3, [r7, #12]
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	69db      	ldr	r3, [r3, #28]
 800d702:	60bb      	str	r3, [r7, #8]
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	691b      	ldr	r3, [r3, #16]
 800d708:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 800d70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	4619      	mov	r1, r3
 800d710:	4888      	ldr	r0, [pc, #544]	; (800d934 <os_aes+0x464>)
 800d712:	f7ff fe38 	bl	800d386 <table_get_u4>
 800d716:	4602      	mov	r2, r0
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	4053      	eors	r3, r2
 800d71c:	61bb      	str	r3, [r7, #24]
 800d71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d720:	0a1b      	lsrs	r3, r3, #8
 800d722:	b2db      	uxtb	r3, r3
 800d724:	4619      	mov	r1, r3
 800d726:	4884      	ldr	r0, [pc, #528]	; (800d938 <os_aes+0x468>)
 800d728:	f7ff fe2d 	bl	800d386 <table_get_u4>
 800d72c:	4602      	mov	r2, r0
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	4053      	eors	r3, r2
 800d732:	60fb      	str	r3, [r7, #12]
 800d734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d736:	0c1b      	lsrs	r3, r3, #16
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	4619      	mov	r1, r3
 800d73c:	487f      	ldr	r0, [pc, #508]	; (800d93c <os_aes+0x46c>)
 800d73e:	f7ff fe22 	bl	800d386 <table_get_u4>
 800d742:	4602      	mov	r2, r0
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	4053      	eors	r3, r2
 800d748:	60bb      	str	r3, [r7, #8]
 800d74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74c:	0e1b      	lsrs	r3, r3, #24
 800d74e:	4619      	mov	r1, r3
 800d750:	487b      	ldr	r0, [pc, #492]	; (800d940 <os_aes+0x470>)
 800d752:	f7ff fe18 	bl	800d386 <table_get_u4>
 800d756:	4602      	mov	r2, r0
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	4053      	eors	r3, r2
 800d75c:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 800d75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d760:	b2db      	uxtb	r3, r3
 800d762:	4619      	mov	r1, r3
 800d764:	4873      	ldr	r0, [pc, #460]	; (800d934 <os_aes+0x464>)
 800d766:	f7ff fe0e 	bl	800d386 <table_get_u4>
 800d76a:	4602      	mov	r2, r0
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	4053      	eors	r3, r2
 800d770:	60fb      	str	r3, [r7, #12]
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	0a1b      	lsrs	r3, r3, #8
 800d776:	b2db      	uxtb	r3, r3
 800d778:	4619      	mov	r1, r3
 800d77a:	486f      	ldr	r0, [pc, #444]	; (800d938 <os_aes+0x468>)
 800d77c:	f7ff fe03 	bl	800d386 <table_get_u4>
 800d780:	4602      	mov	r2, r0
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	4053      	eors	r3, r2
 800d786:	60bb      	str	r3, [r7, #8]
 800d788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78a:	0c1b      	lsrs	r3, r3, #16
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	4619      	mov	r1, r3
 800d790:	486a      	ldr	r0, [pc, #424]	; (800d93c <os_aes+0x46c>)
 800d792:	f7ff fdf8 	bl	800d386 <table_get_u4>
 800d796:	4602      	mov	r2, r0
 800d798:	69fb      	ldr	r3, [r7, #28]
 800d79a:	4053      	eors	r3, r2
 800d79c:	61fb      	str	r3, [r7, #28]
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	0e1b      	lsrs	r3, r3, #24
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	4866      	ldr	r0, [pc, #408]	; (800d940 <os_aes+0x470>)
 800d7a6:	f7ff fdee 	bl	800d386 <table_get_u4>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	4053      	eors	r3, r2
 800d7b0:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	485e      	ldr	r0, [pc, #376]	; (800d934 <os_aes+0x464>)
 800d7ba:	f7ff fde4 	bl	800d386 <table_get_u4>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	4053      	eors	r3, r2
 800d7c4:	60bb      	str	r3, [r7, #8]
 800d7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c8:	0a1b      	lsrs	r3, r3, #8
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	485a      	ldr	r0, [pc, #360]	; (800d938 <os_aes+0x468>)
 800d7d0:	f7ff fdd9 	bl	800d386 <table_get_u4>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	4053      	eors	r3, r2
 800d7da:	61fb      	str	r3, [r7, #28]
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	0c1b      	lsrs	r3, r3, #16
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	4855      	ldr	r0, [pc, #340]	; (800d93c <os_aes+0x46c>)
 800d7e6:	f7ff fdce 	bl	800d386 <table_get_u4>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	4053      	eors	r3, r2
 800d7f0:	61bb      	str	r3, [r7, #24]
 800d7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f4:	0e1b      	lsrs	r3, r3, #24
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	4851      	ldr	r0, [pc, #324]	; (800d940 <os_aes+0x470>)
 800d7fa:	f7ff fdc4 	bl	800d386 <table_get_u4>
 800d7fe:	4602      	mov	r2, r0
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	4053      	eors	r3, r2
 800d804:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 800d806:	6a3b      	ldr	r3, [r7, #32]
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	4619      	mov	r1, r3
 800d80c:	4849      	ldr	r0, [pc, #292]	; (800d934 <os_aes+0x464>)
 800d80e:	f7ff fdba 	bl	800d386 <table_get_u4>
 800d812:	4602      	mov	r2, r0
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	4053      	eors	r3, r2
 800d818:	61fb      	str	r3, [r7, #28]
 800d81a:	6a3b      	ldr	r3, [r7, #32]
 800d81c:	0a1b      	lsrs	r3, r3, #8
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	4619      	mov	r1, r3
 800d822:	4845      	ldr	r0, [pc, #276]	; (800d938 <os_aes+0x468>)
 800d824:	f7ff fdaf 	bl	800d386 <table_get_u4>
 800d828:	4602      	mov	r2, r0
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	4053      	eors	r3, r2
 800d82e:	61bb      	str	r3, [r7, #24]
 800d830:	6a3b      	ldr	r3, [r7, #32]
 800d832:	0c1b      	lsrs	r3, r3, #16
 800d834:	b2db      	uxtb	r3, r3
 800d836:	4619      	mov	r1, r3
 800d838:	4840      	ldr	r0, [pc, #256]	; (800d93c <os_aes+0x46c>)
 800d83a:	f7ff fda4 	bl	800d386 <table_get_u4>
 800d83e:	4602      	mov	r2, r0
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	4053      	eors	r3, r2
 800d844:	60fb      	str	r3, [r7, #12]
 800d846:	6a3b      	ldr	r3, [r7, #32]
 800d848:	0e1b      	lsrs	r3, r3, #24
 800d84a:	4619      	mov	r1, r3
 800d84c:	483c      	ldr	r0, [pc, #240]	; (800d940 <os_aes+0x470>)
 800d84e:	f7ff fd9a 	bl	800d386 <table_get_u4>
 800d852:	4602      	mov	r2, r0
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	4053      	eors	r3, r2
 800d858:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d85e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d864:	627b      	str	r3, [r7, #36]	; 0x24
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86a:	623b      	str	r3, [r7, #32]
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	6a1b      	ldr	r3, [r3, #32]
 800d870:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	b2db      	uxtb	r3, r3
 800d876:	4619      	mov	r1, r3
 800d878:	482e      	ldr	r0, [pc, #184]	; (800d934 <os_aes+0x464>)
 800d87a:	f7ff fd84 	bl	800d386 <table_get_u4>
 800d87e:	4602      	mov	r2, r0
 800d880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d882:	4053      	eors	r3, r2
 800d884:	62bb      	str	r3, [r7, #40]	; 0x28
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	0a1b      	lsrs	r3, r3, #8
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	4619      	mov	r1, r3
 800d88e:	482a      	ldr	r0, [pc, #168]	; (800d938 <os_aes+0x468>)
 800d890:	f7ff fd79 	bl	800d386 <table_get_u4>
 800d894:	4602      	mov	r2, r0
 800d896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d898:	4053      	eors	r3, r2
 800d89a:	627b      	str	r3, [r7, #36]	; 0x24
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	0c1b      	lsrs	r3, r3, #16
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	4825      	ldr	r0, [pc, #148]	; (800d93c <os_aes+0x46c>)
 800d8a6:	f7ff fd6e 	bl	800d386 <table_get_u4>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	6a3b      	ldr	r3, [r7, #32]
 800d8ae:	4053      	eors	r3, r2
 800d8b0:	623b      	str	r3, [r7, #32]
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	0e1b      	lsrs	r3, r3, #24
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	4821      	ldr	r0, [pc, #132]	; (800d940 <os_aes+0x470>)
 800d8ba:	f7ff fd64 	bl	800d386 <table_get_u4>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	4053      	eors	r3, r2
 800d8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	4819      	ldr	r0, [pc, #100]	; (800d934 <os_aes+0x464>)
 800d8ce:	f7ff fd5a 	bl	800d386 <table_get_u4>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d6:	4053      	eors	r3, r2
 800d8d8:	627b      	str	r3, [r7, #36]	; 0x24
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	0a1b      	lsrs	r3, r3, #8
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	4815      	ldr	r0, [pc, #84]	; (800d938 <os_aes+0x468>)
 800d8e4:	f7ff fd4f 	bl	800d386 <table_get_u4>
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	6a3b      	ldr	r3, [r7, #32]
 800d8ec:	4053      	eors	r3, r2
 800d8ee:	623b      	str	r3, [r7, #32]
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	0c1b      	lsrs	r3, r3, #16
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	4810      	ldr	r0, [pc, #64]	; (800d93c <os_aes+0x46c>)
 800d8fa:	f7ff fd44 	bl	800d386 <table_get_u4>
 800d8fe:	4602      	mov	r2, r0
 800d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d902:	4053      	eors	r3, r2
 800d904:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	0e1b      	lsrs	r3, r3, #24
 800d90a:	4619      	mov	r1, r3
 800d90c:	480c      	ldr	r0, [pc, #48]	; (800d940 <os_aes+0x470>)
 800d90e:	f7ff fd3a 	bl	800d386 <table_get_u4>
 800d912:	4602      	mov	r2, r0
 800d914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d916:	4053      	eors	r3, r2
 800d918:	62bb      	str	r3, [r7, #40]	; 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	4619      	mov	r1, r3
 800d920:	4804      	ldr	r0, [pc, #16]	; (800d934 <os_aes+0x464>)
 800d922:	f7ff fd30 	bl	800d386 <table_get_u4>
 800d926:	4602      	mov	r2, r0
 800d928:	e00c      	b.n	800d944 <os_aes+0x474>
 800d92a:	bf00      	nop
 800d92c:	20000b44 	.word	0x20000b44
 800d930:	20000b54 	.word	0x20000b54
 800d934:	08019478 	.word	0x08019478
 800d938:	08019078 	.word	0x08019078
 800d93c:	08018c78 	.word	0x08018c78
 800d940:	08018878 	.word	0x08018878
 800d944:	6a3b      	ldr	r3, [r7, #32]
 800d946:	4053      	eors	r3, r2
 800d948:	623b      	str	r3, [r7, #32]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	0a1b      	lsrs	r3, r3, #8
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	4619      	mov	r1, r3
 800d952:	48ad      	ldr	r0, [pc, #692]	; (800dc08 <os_aes+0x738>)
 800d954:	f7ff fd17 	bl	800d386 <table_get_u4>
 800d958:	4602      	mov	r2, r0
 800d95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95c:	4053      	eors	r3, r2
 800d95e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	0c1b      	lsrs	r3, r3, #16
 800d964:	b2db      	uxtb	r3, r3
 800d966:	4619      	mov	r1, r3
 800d968:	48a8      	ldr	r0, [pc, #672]	; (800dc0c <os_aes+0x73c>)
 800d96a:	f7ff fd0c 	bl	800d386 <table_get_u4>
 800d96e:	4602      	mov	r2, r0
 800d970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d972:	4053      	eors	r3, r2
 800d974:	62bb      	str	r3, [r7, #40]	; 0x28
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	0e1b      	lsrs	r3, r3, #24
 800d97a:	4619      	mov	r1, r3
 800d97c:	48a4      	ldr	r0, [pc, #656]	; (800dc10 <os_aes+0x740>)
 800d97e:	f7ff fd02 	bl	800d386 <table_get_u4>
 800d982:	4602      	mov	r2, r0
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	4053      	eors	r3, r2
 800d988:	627b      	str	r3, [r7, #36]	; 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	4619      	mov	r1, r3
 800d990:	48a0      	ldr	r0, [pc, #640]	; (800dc14 <os_aes+0x744>)
 800d992:	f7ff fcf8 	bl	800d386 <table_get_u4>
 800d996:	4602      	mov	r2, r0
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99a:	4053      	eors	r3, r2
 800d99c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	0a1b      	lsrs	r3, r3, #8
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	4898      	ldr	r0, [pc, #608]	; (800dc08 <os_aes+0x738>)
 800d9a8:	f7ff fced 	bl	800d386 <table_get_u4>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b0:	4053      	eors	r3, r2
 800d9b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	0c1b      	lsrs	r3, r3, #16
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	4893      	ldr	r0, [pc, #588]	; (800dc0c <os_aes+0x73c>)
 800d9be:	f7ff fce2 	bl	800d386 <table_get_u4>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	4053      	eors	r3, r2
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	0e1b      	lsrs	r3, r3, #24
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	488f      	ldr	r0, [pc, #572]	; (800dc10 <os_aes+0x740>)
 800d9d2:	f7ff fcd8 	bl	800d386 <table_get_u4>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	6a3b      	ldr	r3, [r7, #32]
 800d9da:	4053      	eors	r3, r2
 800d9dc:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	3320      	adds	r3, #32
 800d9e2:	617b      	str	r3, [r7, #20]
 800d9e4:	697a      	ldr	r2, [r7, #20]
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	f4ff ae82 	bcc.w	800d6f2 <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	61bb      	str	r3, [r7, #24]
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	699b      	ldr	r3, [r3, #24]
 800d9f8:	60fb      	str	r3, [r7, #12]
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	69db      	ldr	r3, [r3, #28]
 800d9fe:	60bb      	str	r3, [r7, #8]
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 800da06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	4619      	mov	r1, r3
 800da0c:	4881      	ldr	r0, [pc, #516]	; (800dc14 <os_aes+0x744>)
 800da0e:	f7ff fcba 	bl	800d386 <table_get_u4>
 800da12:	4602      	mov	r2, r0
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	4053      	eors	r3, r2
 800da18:	61bb      	str	r3, [r7, #24]
 800da1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1c:	0a1b      	lsrs	r3, r3, #8
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	4619      	mov	r1, r3
 800da22:	4879      	ldr	r0, [pc, #484]	; (800dc08 <os_aes+0x738>)
 800da24:	f7ff fcaf 	bl	800d386 <table_get_u4>
 800da28:	4602      	mov	r2, r0
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	4053      	eors	r3, r2
 800da2e:	60fb      	str	r3, [r7, #12]
 800da30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da32:	0c1b      	lsrs	r3, r3, #16
 800da34:	b2db      	uxtb	r3, r3
 800da36:	4619      	mov	r1, r3
 800da38:	4874      	ldr	r0, [pc, #464]	; (800dc0c <os_aes+0x73c>)
 800da3a:	f7ff fca4 	bl	800d386 <table_get_u4>
 800da3e:	4602      	mov	r2, r0
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	4053      	eors	r3, r2
 800da44:	60bb      	str	r3, [r7, #8]
 800da46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da48:	0e1b      	lsrs	r3, r3, #24
 800da4a:	4619      	mov	r1, r3
 800da4c:	4870      	ldr	r0, [pc, #448]	; (800dc10 <os_aes+0x740>)
 800da4e:	f7ff fc9a 	bl	800d386 <table_get_u4>
 800da52:	4602      	mov	r2, r0
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	4053      	eors	r3, r2
 800da58:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 800da5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	4619      	mov	r1, r3
 800da60:	486c      	ldr	r0, [pc, #432]	; (800dc14 <os_aes+0x744>)
 800da62:	f7ff fc90 	bl	800d386 <table_get_u4>
 800da66:	4602      	mov	r2, r0
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	4053      	eors	r3, r2
 800da6c:	60fb      	str	r3, [r7, #12]
 800da6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da70:	0a1b      	lsrs	r3, r3, #8
 800da72:	b2db      	uxtb	r3, r3
 800da74:	4619      	mov	r1, r3
 800da76:	4864      	ldr	r0, [pc, #400]	; (800dc08 <os_aes+0x738>)
 800da78:	f7ff fc85 	bl	800d386 <table_get_u4>
 800da7c:	4602      	mov	r2, r0
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	4053      	eors	r3, r2
 800da82:	60bb      	str	r3, [r7, #8]
 800da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da86:	0c1b      	lsrs	r3, r3, #16
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	4619      	mov	r1, r3
 800da8c:	485f      	ldr	r0, [pc, #380]	; (800dc0c <os_aes+0x73c>)
 800da8e:	f7ff fc7a 	bl	800d386 <table_get_u4>
 800da92:	4602      	mov	r2, r0
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	4053      	eors	r3, r2
 800da98:	61fb      	str	r3, [r7, #28]
 800da9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9c:	0e1b      	lsrs	r3, r3, #24
 800da9e:	4619      	mov	r1, r3
 800daa0:	485b      	ldr	r0, [pc, #364]	; (800dc10 <os_aes+0x740>)
 800daa2:	f7ff fc70 	bl	800d386 <table_get_u4>
 800daa6:	4602      	mov	r2, r0
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	4053      	eors	r3, r2
 800daac:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 800daae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	4619      	mov	r1, r3
 800dab4:	4857      	ldr	r0, [pc, #348]	; (800dc14 <os_aes+0x744>)
 800dab6:	f7ff fc66 	bl	800d386 <table_get_u4>
 800daba:	4602      	mov	r2, r0
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	4053      	eors	r3, r2
 800dac0:	60bb      	str	r3, [r7, #8]
 800dac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac4:	0a1b      	lsrs	r3, r3, #8
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	4619      	mov	r1, r3
 800daca:	484f      	ldr	r0, [pc, #316]	; (800dc08 <os_aes+0x738>)
 800dacc:	f7ff fc5b 	bl	800d386 <table_get_u4>
 800dad0:	4602      	mov	r2, r0
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	4053      	eors	r3, r2
 800dad6:	61fb      	str	r3, [r7, #28]
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	0c1b      	lsrs	r3, r3, #16
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	4619      	mov	r1, r3
 800dae0:	484a      	ldr	r0, [pc, #296]	; (800dc0c <os_aes+0x73c>)
 800dae2:	f7ff fc50 	bl	800d386 <table_get_u4>
 800dae6:	4602      	mov	r2, r0
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	4053      	eors	r3, r2
 800daec:	61bb      	str	r3, [r7, #24]
 800daee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf0:	0e1b      	lsrs	r3, r3, #24
 800daf2:	4619      	mov	r1, r3
 800daf4:	4846      	ldr	r0, [pc, #280]	; (800dc10 <os_aes+0x740>)
 800daf6:	f7ff fc46 	bl	800d386 <table_get_u4>
 800dafa:	4602      	mov	r2, r0
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	4053      	eors	r3, r2
 800db00:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 800db02:	6a3b      	ldr	r3, [r7, #32]
 800db04:	b2db      	uxtb	r3, r3
 800db06:	4619      	mov	r1, r3
 800db08:	4842      	ldr	r0, [pc, #264]	; (800dc14 <os_aes+0x744>)
 800db0a:	f7ff fc3c 	bl	800d386 <table_get_u4>
 800db0e:	4602      	mov	r2, r0
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	4053      	eors	r3, r2
 800db14:	61fb      	str	r3, [r7, #28]
 800db16:	6a3b      	ldr	r3, [r7, #32]
 800db18:	0a1b      	lsrs	r3, r3, #8
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	4619      	mov	r1, r3
 800db1e:	483a      	ldr	r0, [pc, #232]	; (800dc08 <os_aes+0x738>)
 800db20:	f7ff fc31 	bl	800d386 <table_get_u4>
 800db24:	4602      	mov	r2, r0
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	4053      	eors	r3, r2
 800db2a:	61bb      	str	r3, [r7, #24]
 800db2c:	6a3b      	ldr	r3, [r7, #32]
 800db2e:	0c1b      	lsrs	r3, r3, #16
 800db30:	b2db      	uxtb	r3, r3
 800db32:	4619      	mov	r1, r3
 800db34:	4835      	ldr	r0, [pc, #212]	; (800dc0c <os_aes+0x73c>)
 800db36:	f7ff fc26 	bl	800d386 <table_get_u4>
 800db3a:	4602      	mov	r2, r0
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	4053      	eors	r3, r2
 800db40:	60fb      	str	r3, [r7, #12]
 800db42:	6a3b      	ldr	r3, [r7, #32]
 800db44:	0e1b      	lsrs	r3, r3, #24
 800db46:	4619      	mov	r1, r3
 800db48:	4831      	ldr	r0, [pc, #196]	; (800dc10 <os_aes+0x740>)
 800db4a:	f7ff fc1c 	bl	800d386 <table_get_u4>
 800db4e:	4602      	mov	r2, r0
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	4053      	eors	r3, r2
 800db54:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	0e1b      	lsrs	r3, r3, #24
 800db60:	4619      	mov	r1, r3
 800db62:	482d      	ldr	r0, [pc, #180]	; (800dc18 <os_aes+0x748>)
 800db64:	f7ff fbf0 	bl	800d348 <table_get_u1>
 800db68:	4603      	mov	r3, r0
 800db6a:	061b      	lsls	r3, r3, #24
 800db6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db6e:	4053      	eors	r3, r2
 800db70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	0c1b      	lsrs	r3, r3, #16
 800db76:	b2db      	uxtb	r3, r3
 800db78:	4619      	mov	r1, r3
 800db7a:	4827      	ldr	r0, [pc, #156]	; (800dc18 <os_aes+0x748>)
 800db7c:	f7ff fbe4 	bl	800d348 <table_get_u1>
 800db80:	4603      	mov	r3, r0
 800db82:	041b      	lsls	r3, r3, #16
 800db84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db86:	4053      	eors	r3, r2
 800db88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	0a1b      	lsrs	r3, r3, #8
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	4619      	mov	r1, r3
 800db92:	4821      	ldr	r0, [pc, #132]	; (800dc18 <os_aes+0x748>)
 800db94:	f7ff fbd8 	bl	800d348 <table_get_u1>
 800db98:	4603      	mov	r3, r0
 800db9a:	021b      	lsls	r3, r3, #8
 800db9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db9e:	4053      	eors	r3, r2
 800dba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	4619      	mov	r1, r3
 800dba8:	481b      	ldr	r0, [pc, #108]	; (800dc18 <os_aes+0x748>)
 800dbaa:	f7ff fbcd 	bl	800d348 <table_get_u1>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb4:	4053      	eors	r3, r2
 800dbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbbc:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	0e1b      	lsrs	r3, r3, #24
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	4814      	ldr	r0, [pc, #80]	; (800dc18 <os_aes+0x748>)
 800dbc6:	f7ff fbbf 	bl	800d348 <table_get_u1>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	061b      	lsls	r3, r3, #24
 800dbce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbd0:	4053      	eors	r3, r2
 800dbd2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	0c1b      	lsrs	r3, r3, #16
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	4619      	mov	r1, r3
 800dbdc:	480e      	ldr	r0, [pc, #56]	; (800dc18 <os_aes+0x748>)
 800dbde:	f7ff fbb3 	bl	800d348 <table_get_u1>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	041b      	lsls	r3, r3, #16
 800dbe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbe8:	4053      	eors	r3, r2
 800dbea:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	0a1b      	lsrs	r3, r3, #8
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4808      	ldr	r0, [pc, #32]	; (800dc18 <os_aes+0x748>)
 800dbf6:	f7ff fba7 	bl	800d348 <table_get_u1>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	021b      	lsls	r3, r3, #8
 800dbfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc00:	4053      	eors	r3, r2
 800dc02:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc04:	e00a      	b.n	800dc1c <os_aes+0x74c>
 800dc06:	bf00      	nop
 800dc08:	08019078 	.word	0x08019078
 800dc0c:	08018c78 	.word	0x08018c78
 800dc10:	08018878 	.word	0x08018878
 800dc14:	08019478 	.word	0x08019478
 800dc18:	08018778 	.word	0x08018778
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	4619      	mov	r1, r3
 800dc22:	487e      	ldr	r0, [pc, #504]	; (800de1c <os_aes+0x94c>)
 800dc24:	f7ff fb90 	bl	800d348 <table_get_u1>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2e:	4053      	eors	r3, r2
 800dc30:	62bb      	str	r3, [r7, #40]	; 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc36:	627b      	str	r3, [r7, #36]	; 0x24
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	0e1b      	lsrs	r3, r3, #24
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	4877      	ldr	r0, [pc, #476]	; (800de1c <os_aes+0x94c>)
 800dc40:	f7ff fb82 	bl	800d348 <table_get_u1>
 800dc44:	4603      	mov	r3, r0
 800dc46:	061b      	lsls	r3, r3, #24
 800dc48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc4a:	4053      	eors	r3, r2
 800dc4c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	0c1b      	lsrs	r3, r3, #16
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	4619      	mov	r1, r3
 800dc56:	4871      	ldr	r0, [pc, #452]	; (800de1c <os_aes+0x94c>)
 800dc58:	f7ff fb76 	bl	800d348 <table_get_u1>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	041b      	lsls	r3, r3, #16
 800dc60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc62:	4053      	eors	r3, r2
 800dc64:	627b      	str	r3, [r7, #36]	; 0x24
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	0a1b      	lsrs	r3, r3, #8
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	486b      	ldr	r0, [pc, #428]	; (800de1c <os_aes+0x94c>)
 800dc70:	f7ff fb6a 	bl	800d348 <table_get_u1>
 800dc74:	4603      	mov	r3, r0
 800dc76:	021b      	lsls	r3, r3, #8
 800dc78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc7a:	4053      	eors	r3, r2
 800dc7c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	4619      	mov	r1, r3
 800dc84:	4865      	ldr	r0, [pc, #404]	; (800de1c <os_aes+0x94c>)
 800dc86:	f7ff fb5f 	bl	800d348 <table_get_u1>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc90:	4053      	eors	r3, r2
 800dc92:	627b      	str	r3, [r7, #36]	; 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc98:	623b      	str	r3, [r7, #32]
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	0e1b      	lsrs	r3, r3, #24
 800dc9e:	4619      	mov	r1, r3
 800dca0:	485e      	ldr	r0, [pc, #376]	; (800de1c <os_aes+0x94c>)
 800dca2:	f7ff fb51 	bl	800d348 <table_get_u1>
 800dca6:	4603      	mov	r3, r0
 800dca8:	061b      	lsls	r3, r3, #24
 800dcaa:	6a3a      	ldr	r2, [r7, #32]
 800dcac:	4053      	eors	r3, r2
 800dcae:	623b      	str	r3, [r7, #32]
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	0c1b      	lsrs	r3, r3, #16
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	4858      	ldr	r0, [pc, #352]	; (800de1c <os_aes+0x94c>)
 800dcba:	f7ff fb45 	bl	800d348 <table_get_u1>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	041b      	lsls	r3, r3, #16
 800dcc2:	6a3a      	ldr	r2, [r7, #32]
 800dcc4:	4053      	eors	r3, r2
 800dcc6:	623b      	str	r3, [r7, #32]
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	0a1b      	lsrs	r3, r3, #8
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	4619      	mov	r1, r3
 800dcd0:	4852      	ldr	r0, [pc, #328]	; (800de1c <os_aes+0x94c>)
 800dcd2:	f7ff fb39 	bl	800d348 <table_get_u1>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	021b      	lsls	r3, r3, #8
 800dcda:	6a3a      	ldr	r2, [r7, #32]
 800dcdc:	4053      	eors	r3, r2
 800dcde:	623b      	str	r3, [r7, #32]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	4619      	mov	r1, r3
 800dce6:	484d      	ldr	r0, [pc, #308]	; (800de1c <os_aes+0x94c>)
 800dce8:	f7ff fb2e 	bl	800d348 <table_get_u1>
 800dcec:	4603      	mov	r3, r0
 800dcee:	461a      	mov	r2, r3
 800dcf0:	6a3b      	ldr	r3, [r7, #32]
 800dcf2:	4053      	eors	r3, r2
 800dcf4:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 800dcf6:	79fb      	ldrb	r3, [r7, #7]
 800dcf8:	f003 0302 	and.w	r3, r3, #2
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d056      	beq.n	800ddae <os_aes+0x8de>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 800dd00:	79fb      	ldrb	r3, [r7, #7]
 800dd02:	111b      	asrs	r3, r3, #4
 800dd04:	f003 0303 	and.w	r3, r3, #3
 800dd08:	61bb      	str	r3, [r7, #24]
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d041      	beq.n	800dd94 <os_aes+0x8c4>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 800dd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd12:	0fdb      	lsrs	r3, r3, #31
 800dd14:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 800dd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd18:	005a      	lsls	r2, r3, #1
 800dd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1c:	0fdb      	lsrs	r3, r3, #31
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 800dd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd24:	005a      	lsls	r2, r3, #1
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	0fdb      	lsrs	r3, r3, #31
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 800dd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd30:	005a      	lsls	r2, r3, #1
 800dd32:	6a3b      	ldr	r3, [r7, #32]
 800dd34:	0fdb      	lsrs	r3, r3, #31
 800dd36:	4313      	orrs	r3, r2
 800dd38:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = (a3 << 1);
 800dd3a:	6a3b      	ldr	r3, [r7, #32]
 800dd3c:	005b      	lsls	r3, r3, #1
 800dd3e:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d003      	beq.n	800dd4e <os_aes+0x87e>
 800dd46:	6a3b      	ldr	r3, [r7, #32]
 800dd48:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800dd4c:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	3b01      	subs	r3, #1
 800dd52:	61bb      	str	r3, [r7, #24]
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1da      	bne.n	800dd10 <os_aes+0x840>

                    AESAUX[0] ^= a0;
 800dd5a:	4b31      	ldr	r3, [pc, #196]	; (800de20 <os_aes+0x950>)
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd60:	4053      	eors	r3, r2
 800dd62:	4a2f      	ldr	r2, [pc, #188]	; (800de20 <os_aes+0x950>)
 800dd64:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 800dd66:	4b2e      	ldr	r3, [pc, #184]	; (800de20 <os_aes+0x950>)
 800dd68:	685a      	ldr	r2, [r3, #4]
 800dd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6c:	4053      	eors	r3, r2
 800dd6e:	4a2c      	ldr	r2, [pc, #176]	; (800de20 <os_aes+0x950>)
 800dd70:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 800dd72:	4b2b      	ldr	r3, [pc, #172]	; (800de20 <os_aes+0x950>)
 800dd74:	689a      	ldr	r2, [r3, #8]
 800dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd78:	4053      	eors	r3, r2
 800dd7a:	4a29      	ldr	r2, [pc, #164]	; (800de20 <os_aes+0x950>)
 800dd7c:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 800dd7e:	4b28      	ldr	r3, [pc, #160]	; (800de20 <os_aes+0x950>)
 800dd80:	68da      	ldr	r2, [r3, #12]
 800dd82:	6a3b      	ldr	r3, [r7, #32]
 800dd84:	4053      	eors	r3, r2
 800dd86:	4a26      	ldr	r2, [pc, #152]	; (800de20 <os_aes+0x950>)
 800dd88:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 800dd8a:	79fb      	ldrb	r3, [r7, #7]
 800dd8c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800dd90:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 800dd92:	e44c      	b.n	800d62e <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 800dd94:	4a22      	ldr	r2, [pc, #136]	; (800de20 <os_aes+0x950>)
 800dd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd98:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 800dd9a:	4a21      	ldr	r2, [pc, #132]	; (800de20 <os_aes+0x950>)
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 800dda0:	4a1f      	ldr	r2, [pc, #124]	; (800de20 <os_aes+0x950>)
 800dda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda4:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 800dda6:	4a1e      	ldr	r2, [pc, #120]	; (800de20 <os_aes+0x950>)
 800dda8:	6a3b      	ldr	r3, [r7, #32]
 800ddaa:	60d3      	str	r3, [r2, #12]
 800ddac:	e095      	b.n	800deda <os_aes+0xa0a>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 800ddae:	79fb      	ldrb	r3, [r7, #7]
 800ddb0:	f003 0304 	and.w	r3, r3, #4
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d035      	beq.n	800de24 <os_aes+0x954>
                    t0 = (len > 16) ? 16: len;
 800ddb8:	88bb      	ldrh	r3, [r7, #4]
 800ddba:	2b10      	cmp	r3, #16
 800ddbc:	bf28      	it	cs
 800ddbe:	2310      	movcs	r3, #16
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	61bb      	str	r3, [r7, #24]
 800ddc8:	e01d      	b.n	800de06 <os_aes+0x936>
                        buf[t1] ^= (a0>>24);
 800ddca:	683a      	ldr	r2, [r7, #0]
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	4413      	add	r3, r2
 800ddd0:	7819      	ldrb	r1, [r3, #0]
 800ddd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd4:	0e1b      	lsrs	r3, r3, #24
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	6838      	ldr	r0, [r7, #0]
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	4403      	add	r3, r0
 800ddde:	404a      	eors	r2, r1
 800dde0:	b2d2      	uxtb	r2, r2
 800dde2:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 800dde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde6:	021b      	lsls	r3, r3, #8
 800dde8:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if((t1&3)==3) {
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	f003 0303 	and.w	r3, r3, #3
 800ddf0:	2b03      	cmp	r3, #3
 800ddf2:	d105      	bne.n	800de00 <os_aes+0x930>
                            a0 = a1;
 800ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf6:	62fb      	str	r3, [r7, #44]	; 0x2c
                            a1 = a2;
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	62bb      	str	r3, [r7, #40]	; 0x28
                            a2 = a3;
 800ddfc:	6a3b      	ldr	r3, [r7, #32]
 800ddfe:	627b      	str	r3, [r7, #36]	; 0x24
                    for(t1=0; t1<t0; t1++) {
 800de00:	69bb      	ldr	r3, [r7, #24]
 800de02:	3301      	adds	r3, #1
 800de04:	61bb      	str	r3, [r7, #24]
 800de06:	69ba      	ldr	r2, [r7, #24]
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d3dd      	bcc.n	800ddca <os_aes+0x8fa>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 800de0e:	4b04      	ldr	r3, [pc, #16]	; (800de20 <os_aes+0x950>)
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	3301      	adds	r3, #1
 800de14:	4a02      	ldr	r2, [pc, #8]	; (800de20 <os_aes+0x950>)
 800de16:	60d3      	str	r3, [r2, #12]
 800de18:	e05f      	b.n	800deda <os_aes+0xa0a>
 800de1a:	bf00      	nop
 800de1c:	08018778 	.word	0x08018778
 800de20:	20000b44 	.word	0x20000b44
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 800de24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de26:	0e1b      	lsrs	r3, r3, #24
 800de28:	b2da      	uxtb	r2, r3
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	701a      	strb	r2, [r3, #0]
 800de2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de30:	0c1a      	lsrs	r2, r3, #16
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	3301      	adds	r3, #1
 800de36:	b2d2      	uxtb	r2, r2
 800de38:	701a      	strb	r2, [r3, #0]
 800de3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3c:	0a1a      	lsrs	r2, r3, #8
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	3302      	adds	r3, #2
 800de42:	b2d2      	uxtb	r2, r2
 800de44:	701a      	strb	r2, [r3, #0]
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	3303      	adds	r3, #3
 800de4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de4c:	b2d2      	uxtb	r2, r2
 800de4e:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	0e1a      	lsrs	r2, r3, #24
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	3304      	adds	r3, #4
 800de58:	b2d2      	uxtb	r2, r2
 800de5a:	701a      	strb	r2, [r3, #0]
 800de5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5e:	0c1a      	lsrs	r2, r3, #16
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	3305      	adds	r3, #5
 800de64:	b2d2      	uxtb	r2, r2
 800de66:	701a      	strb	r2, [r3, #0]
 800de68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6a:	0a1a      	lsrs	r2, r3, #8
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	3306      	adds	r3, #6
 800de70:	b2d2      	uxtb	r2, r2
 800de72:	701a      	strb	r2, [r3, #0]
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	3307      	adds	r3, #7
 800de78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de7a:	b2d2      	uxtb	r2, r2
 800de7c:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 800de7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de80:	0e1a      	lsrs	r2, r3, #24
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	3308      	adds	r3, #8
 800de86:	b2d2      	uxtb	r2, r2
 800de88:	701a      	strb	r2, [r3, #0]
 800de8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8c:	0c1a      	lsrs	r2, r3, #16
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	3309      	adds	r3, #9
 800de92:	b2d2      	uxtb	r2, r2
 800de94:	701a      	strb	r2, [r3, #0]
 800de96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de98:	0a1a      	lsrs	r2, r3, #8
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	330a      	adds	r3, #10
 800de9e:	b2d2      	uxtb	r2, r2
 800dea0:	701a      	strb	r2, [r3, #0]
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	330b      	adds	r3, #11
 800dea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dea8:	b2d2      	uxtb	r2, r2
 800deaa:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 800deac:	6a3b      	ldr	r3, [r7, #32]
 800deae:	0e1a      	lsrs	r2, r3, #24
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	330c      	adds	r3, #12
 800deb4:	b2d2      	uxtb	r2, r2
 800deb6:	701a      	strb	r2, [r3, #0]
 800deb8:	6a3b      	ldr	r3, [r7, #32]
 800deba:	0c1a      	lsrs	r2, r3, #16
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	330d      	adds	r3, #13
 800dec0:	b2d2      	uxtb	r2, r2
 800dec2:	701a      	strb	r2, [r3, #0]
 800dec4:	6a3b      	ldr	r3, [r7, #32]
 800dec6:	0a1a      	lsrs	r2, r3, #8
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	330e      	adds	r3, #14
 800decc:	b2d2      	uxtb	r2, r2
 800dece:	701a      	strb	r2, [r3, #0]
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	330f      	adds	r3, #15
 800ded4:	6a3a      	ldr	r2, [r7, #32]
 800ded6:	b2d2      	uxtb	r2, r2
 800ded8:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 800deda:	79fb      	ldrb	r3, [r7, #7]
 800dedc:	f003 0302 	and.w	r3, r3, #2
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d004      	beq.n	800deee <os_aes+0xa1e>
 800dee4:	79fb      	ldrb	r3, [r7, #7]
 800dee6:	f003 0308 	and.w	r3, r3, #8
 800deea:	2b00      	cmp	r3, #0
 800deec:	d005      	beq.n	800defa <os_aes+0xa2a>
                buf += 16;
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	3310      	adds	r3, #16
 800def2:	603b      	str	r3, [r7, #0]
                len -= 16;
 800def4:	88bb      	ldrh	r3, [r7, #4]
 800def6:	3b10      	subs	r3, #16
 800def8:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 800defa:	79fb      	ldrb	r3, [r7, #7]
 800defc:	f043 0308 	orr.w	r3, r3, #8
 800df00:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 800df02:	88bb      	ldrh	r3, [r7, #4]
 800df04:	b25b      	sxtb	r3, r3
 800df06:	2b00      	cmp	r3, #0
 800df08:	f73f ab58 	bgt.w	800d5bc <os_aes+0xec>
        }
        return AESAUX[0];
 800df0c:	4b02      	ldr	r3, [pc, #8]	; (800df18 <os_aes+0xa48>)
 800df0e:	681b      	ldr	r3, [r3, #0]
}
 800df10:	4618      	mov	r0, r3
 800df12:	3730      	adds	r7, #48	; 0x30
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	20000b44 	.word	0x20000b44

0800df1c <getSf>:
typedef uint32_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	4603      	mov	r3, r0
 800df24:	80fb      	strh	r3, [r7, #6]
 800df26:	88fb      	ldrh	r3, [r7, #6]
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	f003 0307 	and.w	r3, r3, #7
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	4618      	mov	r0, r3
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
 800df42:	4603      	mov	r3, r0
 800df44:	80fb      	strh	r3, [r7, #6]
 800df46:	88fb      	ldrh	r3, [r7, #6]
 800df48:	08db      	lsrs	r3, r3, #3
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	f003 0303 	and.w	r3, r3, #3
 800df52:	b2db      	uxtb	r3, r3
 800df54:	4618      	mov	r0, r3
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	4603      	mov	r3, r0
 800df68:	80fb      	strh	r3, [r7, #6]
 800df6a:	88fb      	ldrh	r3, [r7, #6]
 800df6c:	095b      	lsrs	r3, r3, #5
 800df6e:	b29b      	uxth	r3, r3
 800df70:	b2db      	uxtb	r3, r3
 800df72:	f003 0303 	and.w	r3, r3, #3
 800df76:	b2db      	uxtb	r3, r3
 800df78:	4618      	mov	r0, r3
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	460a      	mov	r2, r1
 800df8e:	80fb      	strh	r3, [r7, #6]
 800df90:	4613      	mov	r3, r2
 800df92:	717b      	strb	r3, [r7, #5]
 800df94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df98:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800df9c:	b21a      	sxth	r2, r3
 800df9e:	797b      	ldrb	r3, [r7, #5]
 800dfa0:	015b      	lsls	r3, r3, #5
 800dfa2:	b21b      	sxth	r3, r3
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	b21b      	sxth	r3, r3
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	4618      	mov	r0, r3
 800dfac:	370c      	adds	r7, #12
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr

0800dfb6 <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 800dfb6:	b480      	push	{r7}
 800dfb8:	b083      	sub	sp, #12
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	80fb      	strh	r3, [r7, #6]
 800dfc0:	88fb      	ldrh	r3, [r7, #6]
 800dfc2:	09db      	lsrs	r3, r3, #7
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	f003 0301 	and.w	r3, r3, #1
 800dfca:	4618      	mov	r0, r3
 800dfcc:	370c      	adds	r7, #12
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr

0800dfd6 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 800dfd6:	b480      	push	{r7}
 800dfd8:	b083      	sub	sp, #12
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	4603      	mov	r3, r0
 800dfde:	6039      	str	r1, [r7, #0]
 800dfe0:	80fb      	strh	r3, [r7, #6]
 800dfe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dfe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfea:	b21a      	sxth	r2, r3
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	01db      	lsls	r3, r3, #7
 800dff0:	b21b      	sxth	r3, r3
 800dff2:	4313      	orrs	r3, r2
 800dff4:	b21b      	sxth	r3, r3
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	4618      	mov	r0, r3
 800dffa:	370c      	adds	r7, #12
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	80fb      	strh	r3, [r7, #6]
 800e00e:	88fb      	ldrh	r3, [r7, #6]
 800e010:	0a1b      	lsrs	r3, r3, #8
 800e012:	b29b      	uxth	r3, r3
 800e014:	b2db      	uxtb	r3, r3
 800e016:	4618      	mov	r0, r3
 800e018:	370c      	adds	r7, #12
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr

0800e022 <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 800e022:	b480      	push	{r7}
 800e024:	b083      	sub	sp, #12
 800e026:	af00      	add	r7, sp, #0
 800e028:	4603      	mov	r3, r0
 800e02a:	6039      	str	r1, [r7, #0]
 800e02c:	80fb      	strh	r3, [r7, #6]
 800e02e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e032:	b2db      	uxtb	r3, r3
 800e034:	b21a      	sxth	r2, r3
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	021b      	lsls	r3, r3, #8
 800e03a:	b21b      	sxth	r3, r3
 800e03c:	4313      	orrs	r3, r2
 800e03e:	b21b      	sxth	r3, r3
 800e040:	b29b      	uxth	r3, r3
 800e042:	4618      	mov	r0, r3
 800e044:	370c      	adds	r7, #12
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr
	...

0800e050 <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern CONST_TABLE(uint8_t, _DR2RPS_CRC)[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)TABLE_GET_U1(_DR2RPS_CRC, dr+1); }
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	4603      	mov	r3, r0
 800e058:	71fb      	strb	r3, [r7, #7]
 800e05a:	79fb      	ldrb	r3, [r7, #7]
 800e05c:	3301      	adds	r3, #1
 800e05e:	4619      	mov	r1, r3
 800e060:	4804      	ldr	r0, [pc, #16]	; (800e074 <updr2rps+0x24>)
 800e062:	f7ff f971 	bl	800d348 <table_get_u1>
 800e066:	4603      	mov	r3, r0
 800e068:	b29b      	uxth	r3, r3
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	08019878 	.word	0x08019878

0800e078 <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	4603      	mov	r3, r0
 800e080:	71fb      	strb	r3, [r7, #7]
 800e082:	79fb      	ldrb	r3, [r7, #7]
 800e084:	4618      	mov	r0, r3
 800e086:	f7ff ffe3 	bl	800e050 <updr2rps>
 800e08a:	4603      	mov	r3, r0
 800e08c:	2101      	movs	r1, #1
 800e08e:	4618      	mov	r0, r3
 800e090:	f7ff ffa1 	bl	800dfd6 <setNocrc>
 800e094:	4603      	mov	r3, r0
 800e096:	4618      	mov	r0, r3
 800e098:	3708      	adds	r7, #8
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
	...

0800e0a0 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return TABLE_GET_U1(_DR2RPS_CRC, dr+2)==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return TABLE_GET_U1(_DR2RPS_CRC, dr  )==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	71fb      	strb	r3, [r7, #7]
 800e0aa:	79fb      	ldrb	r3, [r7, #7]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	4807      	ldr	r0, [pc, #28]	; (800e0cc <decDR+0x2c>)
 800e0b0:	f7ff f94a 	bl	800d348 <table_get_u1>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2bff      	cmp	r3, #255	; 0xff
 800e0b8:	d003      	beq.n	800e0c2 <decDR+0x22>
 800e0ba:	79fb      	ldrb	r3, [r7, #7]
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	e000      	b.n	800e0c4 <decDR+0x24>
 800e0c2:	79fb      	ldrb	r3, [r7, #7]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	08019878 	.word	0x08019878

0800e0d0 <validDR>:
inline dr_t  assertDR (dr_t dr) { return TABLE_GET_U1(_DR2RPS_CRC, dr+1)==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bool validDR  (dr_t dr) { return TABLE_GET_U1(_DR2RPS_CRC, dr+1)!=ILLEGAL_RPS; } // in range
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	71fb      	strb	r3, [r7, #7]
 800e0da:	79fb      	ldrb	r3, [r7, #7]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	4619      	mov	r1, r3
 800e0e0:	4806      	ldr	r0, [pc, #24]	; (800e0fc <validDR+0x2c>)
 800e0e2:	f7ff f931 	bl	800d348 <table_get_u1>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2bff      	cmp	r3, #255	; 0xff
 800e0ea:	bf14      	ite	ne
 800e0ec:	2301      	movne	r3, #1
 800e0ee:	2300      	moveq	r3, #0
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3708      	adds	r7, #8
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	08019878 	.word	0x08019878

0800e100 <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, uint8_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	4603      	mov	r3, r0
 800e108:	460a      	mov	r2, r1
 800e10a:	71fb      	strb	r3, [r7, #7]
 800e10c:	4613      	mov	r3, r2
 800e10e:	71bb      	strb	r3, [r7, #6]
 800e110:	e005      	b.n	800e11e <lowerDR+0x1e>
 800e112:	79fb      	ldrb	r3, [r7, #7]
 800e114:	4618      	mov	r0, r3
 800e116:	f7ff ffc3 	bl	800e0a0 <decDR>
 800e11a:	4603      	mov	r3, r0
 800e11c:	71fb      	strb	r3, [r7, #7]
 800e11e:	79bb      	ldrb	r3, [r7, #6]
 800e120:	1e5a      	subs	r2, r3, #1
 800e122:	71ba      	strb	r2, [r7, #6]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d1f4      	bne.n	800e112 <lowerDR+0x12>
 800e128:	79fb      	ldrb	r3, [r7, #7]
 800e12a:	4618      	mov	r0, r3
 800e12c:	3708      	adds	r7, #8
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}

0800e132 <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
uint16_t os_rlsbf2 (const uint8_t *buf) {
 800e132:	b480      	push	{r7}
 800e134:	b083      	sub	sp, #12
 800e136:	af00      	add	r7, sp, #0
 800e138:	6078      	str	r0, [r7, #4]
    return (uint16_t)((uint16_t)buf[0] | ((uint16_t)buf[1]<<8));
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	b21a      	sxth	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	3301      	adds	r3, #1
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	021b      	lsls	r3, r3, #8
 800e148:	b21b      	sxth	r3, r3
 800e14a:	4313      	orrs	r3, r2
 800e14c:	b21b      	sxth	r3, r3
 800e14e:	b29b      	uxth	r3, r3
}
 800e150:	4618      	mov	r0, r3
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
uint32_t os_rlsbf4 (const uint8_t *buf) {
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
    return (uint32_t)((uint32_t)buf[0] | ((uint32_t)buf[1]<<8) | ((uint32_t)buf[2]<<16) | ((uint32_t)buf[3]<<24));
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	461a      	mov	r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	3301      	adds	r3, #1
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	021b      	lsls	r3, r3, #8
 800e172:	431a      	orrs	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	3302      	adds	r3, #2
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	041b      	lsls	r3, r3, #16
 800e17c:	431a      	orrs	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	3303      	adds	r3, #3
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	061b      	lsls	r3, r3, #24
 800e186:	4313      	orrs	r3, r2
}
 800e188:	4618      	mov	r0, r3
 800e18a:	370c      	adds	r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
uint32_t os_rmsbf4 (const uint8_t *buf) {
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
    return (uint32_t)((uint32_t)buf[3] | ((uint32_t)buf[2]<<8) | ((uint32_t)buf[1]<<16) | ((uint32_t)buf[0]<<24));
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	3303      	adds	r3, #3
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	3302      	adds	r3, #2
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	021b      	lsls	r3, r3, #8
 800e1ac:	431a      	orrs	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	041b      	lsls	r3, r3, #16
 800e1b6:	431a      	orrs	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	061b      	lsls	r3, r3, #24
 800e1be:	4313      	orrs	r3, r2
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr

0800e1cc <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (uint8_t *buf, uint16_t v) {
 800e1cc:	b480      	push	{r7}
 800e1ce:	b083      	sub	sp, #12
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 800e1d8:	887b      	ldrh	r3, [r7, #2]
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 800e1e0:	887b      	ldrh	r3, [r7, #2]
 800e1e2:	0a1b      	lsrs	r3, r3, #8
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	b2d2      	uxtb	r2, r2
 800e1ec:	701a      	strb	r2, [r3, #0]
}
 800e1ee:	bf00      	nop
 800e1f0:	370c      	adds	r7, #12
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr

0800e1fa <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (uint8_t *buf, uint32_t v) {
 800e1fa:	b480      	push	{r7}
 800e1fc:	b083      	sub	sp, #12
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
 800e202:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	b2da      	uxtb	r2, r3
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	0a1a      	lsrs	r2, r3, #8
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	3301      	adds	r3, #1
 800e214:	b2d2      	uxtb	r2, r2
 800e216:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	0c1a      	lsrs	r2, r3, #16
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	3302      	adds	r3, #2
 800e220:	b2d2      	uxtb	r2, r2
 800e222:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	0e1a      	lsrs	r2, r3, #24
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	3303      	adds	r3, #3
 800e22c:	b2d2      	uxtb	r2, r2
 800e22e:	701a      	strb	r2, [r3, #0]
}
 800e230:	bf00      	nop
 800e232:	370c      	adds	r7, #12
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (uint8_t *buf, uint32_t v) {
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	3303      	adds	r3, #3
 800e24a:	683a      	ldr	r2, [r7, #0]
 800e24c:	b2d2      	uxtb	r2, r2
 800e24e:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	0a1a      	lsrs	r2, r3, #8
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	3302      	adds	r3, #2
 800e258:	b2d2      	uxtb	r2, r2
 800e25a:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	0c1a      	lsrs	r2, r3, #16
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3301      	adds	r3, #1
 800e264:	b2d2      	uxtb	r2, r2
 800e266:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	0e1b      	lsrs	r3, r3, #24
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	701a      	strb	r2, [r3, #0]
}
 800e272:	bf00      	nop
 800e274:	370c      	adds	r7, #12
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
uint8_t os_getBattLevel (void) {
 800e27e:	b480      	push	{r7}
 800e280:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 800e282:	23ff      	movs	r3, #255	; 0xff
}
 800e284:	4618      	mov	r0, r3
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
uint16_t os_crc16 (uint8_t *data, size_t len) {
 800e28e:	b480      	push	{r7}
 800e290:	b087      	sub	sp, #28
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
 800e296:	6039      	str	r1, [r7, #0]
    uint16_t remainder = 0;
 800e298:	2300      	movs	r3, #0
 800e29a:	82fb      	strh	r3, [r7, #22]
    uint16_t polynomial = 0x1021;
 800e29c:	f241 0321 	movw	r3, #4129	; 0x1021
 800e2a0:	81bb      	strh	r3, [r7, #12]
    for( size_t i = 0; i < len; i++ ) {
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	613b      	str	r3, [r7, #16]
 800e2a6:	e026      	b.n	800e2f6 <os_crc16+0x68>
        remainder ^= data[i] << 8;
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	021b      	lsls	r3, r3, #8
 800e2b2:	b21a      	sxth	r2, r3
 800e2b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e2b8:	4053      	eors	r3, r2
 800e2ba:	b21b      	sxth	r3, r3
 800e2bc:	82fb      	strh	r3, [r7, #22]
        for( uint8_t bit = 8; bit > 0; bit--) {
 800e2be:	2308      	movs	r3, #8
 800e2c0:	73fb      	strb	r3, [r7, #15]
 800e2c2:	e012      	b.n	800e2ea <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 800e2c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	da08      	bge.n	800e2de <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 800e2cc:	8afb      	ldrh	r3, [r7, #22]
 800e2ce:	005b      	lsls	r3, r3, #1
 800e2d0:	b21a      	sxth	r2, r3
 800e2d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e2d6:	4053      	eors	r3, r2
 800e2d8:	b21b      	sxth	r3, r3
 800e2da:	82fb      	strh	r3, [r7, #22]
 800e2dc:	e002      	b.n	800e2e4 <os_crc16+0x56>
            else
                remainder <<= 1;
 800e2de:	8afb      	ldrh	r3, [r7, #22]
 800e2e0:	005b      	lsls	r3, r3, #1
 800e2e2:	82fb      	strh	r3, [r7, #22]
        for( uint8_t bit = 8; bit > 0; bit--) {
 800e2e4:	7bfb      	ldrb	r3, [r7, #15]
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	73fb      	strb	r3, [r7, #15]
 800e2ea:	7bfb      	ldrb	r3, [r7, #15]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d1e9      	bne.n	800e2c4 <os_crc16+0x36>
    for( size_t i = 0; i < len; i++ ) {
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	613b      	str	r3, [r7, #16]
 800e2f6:	693a      	ldr	r2, [r7, #16]
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d3d4      	bcc.n	800e2a8 <os_crc16+0x1a>
        }
    }
    return remainder;
 800e2fe:	8afb      	ldrh	r3, [r7, #22]
}
 800e300:	4618      	mov	r0, r3
 800e302:	371c      	adds	r7, #28
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (uint32_t devaddr, uint32_t seqno, int dndir, int len) {
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
 800e318:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 800e31a:	2210      	movs	r2, #16
 800e31c:	2100      	movs	r1, #0
 800e31e:	4810      	ldr	r0, [pc, #64]	; (800e360 <micB0+0x54>)
 800e320:	f005 fb3e 	bl	80139a0 <memset>
    AESaux[0]  = 0x49;
 800e324:	4b0e      	ldr	r3, [pc, #56]	; (800e360 <micB0+0x54>)
 800e326:	2249      	movs	r2, #73	; 0x49
 800e328:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	bf14      	ite	ne
 800e330:	2301      	movne	r3, #1
 800e332:	2300      	moveq	r3, #0
 800e334:	b2da      	uxtb	r2, r3
 800e336:	4b0b      	ldr	r3, [pc, #44]	; (800e364 <micB0+0x58>)
 800e338:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 800e33a:	4b0b      	ldr	r3, [pc, #44]	; (800e368 <micB0+0x5c>)
 800e33c:	683a      	ldr	r2, [r7, #0]
 800e33e:	b2d2      	uxtb	r2, r2
 800e340:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 800e342:	4b0a      	ldr	r3, [pc, #40]	; (800e36c <micB0+0x60>)
 800e344:	68f9      	ldr	r1, [r7, #12]
 800e346:	4618      	mov	r0, r3
 800e348:	f7ff ff57 	bl	800e1fa <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 800e34c:	4b08      	ldr	r3, [pc, #32]	; (800e370 <micB0+0x64>)
 800e34e:	68b9      	ldr	r1, [r7, #8]
 800e350:	4618      	mov	r0, r3
 800e352:	f7ff ff52 	bl	800e1fa <os_wlsbf4>
}
 800e356:	bf00      	nop
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	20000b44 	.word	0x20000b44
 800e364:	20000b49 	.word	0x20000b49
 800e368:	20000b53 	.word	0x20000b53
 800e36c:	20000b4a 	.word	0x20000b4a
 800e370:	20000b4e 	.word	0x20000b4e

0800e374 <aes_verifyMic>:


static int aes_verifyMic (const uint8_t *key, uint32_t devaddr, uint32_t seqno, int dndir, uint8_t *pdu, int len) {
 800e374:	b590      	push	{r4, r7, lr}
 800e376:	b085      	sub	sp, #20
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	607a      	str	r2, [r7, #4]
 800e380:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 800e382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e384:	683a      	ldr	r2, [r7, #0]
 800e386:	6879      	ldr	r1, [r7, #4]
 800e388:	68b8      	ldr	r0, [r7, #8]
 800e38a:	f7ff ffbf 	bl	800e30c <micB0>
    os_copyMem(AESkey,key,16);
 800e38e:	2210      	movs	r2, #16
 800e390:	68f9      	ldr	r1, [r7, #12]
 800e392:	480d      	ldr	r0, [pc, #52]	; (800e3c8 <aes_verifyMic+0x54>)
 800e394:	f005 fb91 	bl	8013aba <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	461a      	mov	r2, r3
 800e39e:	6a39      	ldr	r1, [r7, #32]
 800e3a0:	2002      	movs	r0, #2
 800e3a2:	f7ff f895 	bl	800d4d0 <os_aes>
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3aa:	6a3a      	ldr	r2, [r7, #32]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7ff fef0 	bl	800e194 <os_rmsbf4>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	429c      	cmp	r4, r3
 800e3b8:	bf0c      	ite	eq
 800e3ba:	2301      	moveq	r3, #1
 800e3bc:	2300      	movne	r3, #0
 800e3be:	b2db      	uxtb	r3, r3
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3714      	adds	r7, #20
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd90      	pop	{r4, r7, pc}
 800e3c8:	20000b54 	.word	0x20000b54

0800e3cc <aes_appendMic>:


static void aes_appendMic (const uint8_t *key, uint32_t devaddr, uint32_t seqno, int dndir, uint8_t *pdu, int len) {
 800e3cc:	b590      	push	{r4, r7, lr}
 800e3ce:	b085      	sub	sp, #20
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
 800e3d8:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 800e3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3dc:	683a      	ldr	r2, [r7, #0]
 800e3de:	6879      	ldr	r1, [r7, #4]
 800e3e0:	68b8      	ldr	r0, [r7, #8]
 800e3e2:	f7ff ff93 	bl	800e30c <micB0>
    os_copyMem(AESkey,key,16);
 800e3e6:	2210      	movs	r2, #16
 800e3e8:	68f9      	ldr	r1, [r7, #12]
 800e3ea:	480b      	ldr	r0, [pc, #44]	; (800e418 <aes_appendMic+0x4c>)
 800e3ec:	f005 fb65 	bl	8013aba <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f2:	6a3a      	ldr	r2, [r7, #32]
 800e3f4:	18d4      	adds	r4, r2, r3
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	6a39      	ldr	r1, [r7, #32]
 800e3fe:	2002      	movs	r0, #2
 800e400:	f7ff f866 	bl	800d4d0 <os_aes>
 800e404:	4603      	mov	r3, r0
 800e406:	4619      	mov	r1, r3
 800e408:	4620      	mov	r0, r4
 800e40a:	f7ff ff17 	bl	800e23c <os_wmsbf4>
}
 800e40e:	bf00      	nop
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	bd90      	pop	{r4, r7, pc}
 800e416:	bf00      	nop
 800e418:	20000b54 	.word	0x20000b54

0800e41c <aes_appendMic0>:


static void aes_appendMic0 (uint8_t *pdu, int len) {
 800e41c:	b590      	push	{r4, r7, lr}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800e426:	480b      	ldr	r0, [pc, #44]	; (800e454 <aes_appendMic0+0x38>)
 800e428:	f7f5 f836 	bl	8003498 <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	18d4      	adds	r4, r2, r3
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	b29b      	uxth	r3, r3
 800e436:	461a      	mov	r2, r3
 800e438:	6879      	ldr	r1, [r7, #4]
 800e43a:	200a      	movs	r0, #10
 800e43c:	f7ff f848 	bl	800d4d0 <os_aes>
 800e440:	4603      	mov	r3, r0
 800e442:	4619      	mov	r1, r3
 800e444:	4620      	mov	r0, r4
 800e446:	f7ff fef9 	bl	800e23c <os_wmsbf4>
}
 800e44a:	bf00      	nop
 800e44c:	370c      	adds	r7, #12
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd90      	pop	{r4, r7, pc}
 800e452:	bf00      	nop
 800e454:	20000b54 	.word	0x20000b54

0800e458 <aes_verifyMic0>:


static int aes_verifyMic0 (uint8_t *pdu, int len) {
 800e458:	b590      	push	{r4, r7, lr}
 800e45a:	b083      	sub	sp, #12
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800e462:	480d      	ldr	r0, [pc, #52]	; (800e498 <aes_verifyMic0+0x40>)
 800e464:	f7f5 f818 	bl	8003498 <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	461a      	mov	r2, r3
 800e46e:	6879      	ldr	r1, [r7, #4]
 800e470:	200a      	movs	r0, #10
 800e472:	f7ff f82d 	bl	800d4d0 <os_aes>
 800e476:	4604      	mov	r4, r0
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	4413      	add	r3, r2
 800e47e:	4618      	mov	r0, r3
 800e480:	f7ff fe88 	bl	800e194 <os_rmsbf4>
 800e484:	4603      	mov	r3, r0
 800e486:	429c      	cmp	r4, r3
 800e488:	bf0c      	ite	eq
 800e48a:	2301      	moveq	r3, #1
 800e48c:	2300      	movne	r3, #0
 800e48e:	b2db      	uxtb	r3, r3
}
 800e490:	4618      	mov	r0, r3
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	bd90      	pop	{r4, r7, pc}
 800e498:	20000b54 	.word	0x20000b54

0800e49c <aes_encrypt>:


static void aes_encrypt (uint8_t *pdu, int len) {
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800e4a6:	4807      	ldr	r0, [pc, #28]	; (800e4c4 <aes_encrypt+0x28>)
 800e4a8:	f7f4 fff6 	bl	8003498 <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	6879      	ldr	r1, [r7, #4]
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	f7ff f80b 	bl	800d4d0 <os_aes>
}
 800e4ba:	bf00      	nop
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	20000b54 	.word	0x20000b54

0800e4c8 <aes_cipher>:


static void aes_cipher (const uint8_t *key, uint32_t devaddr, uint32_t seqno, int dndir, uint8_t *payload, int len) {
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	607a      	str	r2, [r7, #4]
 800e4d4:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	dd29      	ble.n	800e530 <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 800e4dc:	2210      	movs	r2, #16
 800e4de:	2100      	movs	r1, #0
 800e4e0:	4815      	ldr	r0, [pc, #84]	; (800e538 <aes_cipher+0x70>)
 800e4e2:	f005 fa5d 	bl	80139a0 <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 800e4e6:	4b15      	ldr	r3, [pc, #84]	; (800e53c <aes_cipher+0x74>)
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	701a      	strb	r2, [r3, #0]
 800e4ec:	4a12      	ldr	r2, [pc, #72]	; (800e538 <aes_cipher+0x70>)
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	bf14      	ite	ne
 800e4f8:	2301      	movne	r3, #1
 800e4fa:	2300      	moveq	r3, #0
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	4b10      	ldr	r3, [pc, #64]	; (800e540 <aes_cipher+0x78>)
 800e500:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 800e502:	4b10      	ldr	r3, [pc, #64]	; (800e544 <aes_cipher+0x7c>)
 800e504:	68b9      	ldr	r1, [r7, #8]
 800e506:	4618      	mov	r0, r3
 800e508:	f7ff fe77 	bl	800e1fa <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 800e50c:	4b0e      	ldr	r3, [pc, #56]	; (800e548 <aes_cipher+0x80>)
 800e50e:	6879      	ldr	r1, [r7, #4]
 800e510:	4618      	mov	r0, r3
 800e512:	f7ff fe72 	bl	800e1fa <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 800e516:	2210      	movs	r2, #16
 800e518:	68f9      	ldr	r1, [r7, #12]
 800e51a:	480c      	ldr	r0, [pc, #48]	; (800e54c <aes_cipher+0x84>)
 800e51c:	f005 facd 	bl	8013aba <memcpy>
    os_aes(AES_CTR, payload, len);
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	b29b      	uxth	r3, r3
 800e524:	461a      	mov	r2, r3
 800e526:	69b9      	ldr	r1, [r7, #24]
 800e528:	2004      	movs	r0, #4
 800e52a:	f7fe ffd1 	bl	800d4d0 <os_aes>
 800e52e:	e000      	b.n	800e532 <aes_cipher+0x6a>
        return;
 800e530:	bf00      	nop
}
 800e532:	3710      	adds	r7, #16
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}
 800e538:	20000b44 	.word	0x20000b44
 800e53c:	20000b53 	.word	0x20000b53
 800e540:	20000b49 	.word	0x20000b49
 800e544:	20000b4a 	.word	0x20000b4a
 800e548:	20000b4e 	.word	0x20000b4e
 800e54c:	20000b54 	.word	0x20000b54

0800e550 <aes_sessKeys>:


static void aes_sessKeys (uint16_t devnonce, const uint8_t *artnonce, uint8_t *nwkkey, uint8_t *artkey) {
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	60b9      	str	r1, [r7, #8]
 800e558:	607a      	str	r2, [r7, #4]
 800e55a:	603b      	str	r3, [r7, #0]
 800e55c:	4603      	mov	r3, r0
 800e55e:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 800e560:	2210      	movs	r2, #16
 800e562:	2100      	movs	r1, #0
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f005 fa1b 	bl	80139a0 <memset>
    nwkkey[0] = 0x01;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2201      	movs	r2, #1
 800e56e:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	3301      	adds	r3, #1
 800e574:	2206      	movs	r2, #6
 800e576:	68b9      	ldr	r1, [r7, #8]
 800e578:	4618      	mov	r0, r3
 800e57a:	f005 fa9e 	bl	8013aba <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	3307      	adds	r3, #7
 800e582:	89fa      	ldrh	r2, [r7, #14]
 800e584:	4611      	mov	r1, r2
 800e586:	4618      	mov	r0, r3
 800e588:	f7ff fe20 	bl	800e1cc <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 800e58c:	2210      	movs	r2, #16
 800e58e:	6879      	ldr	r1, [r7, #4]
 800e590:	6838      	ldr	r0, [r7, #0]
 800e592:	f005 fa92 	bl	8013aba <memcpy>
    artkey[0] = 0x02;
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	2202      	movs	r2, #2
 800e59a:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 800e59c:	4809      	ldr	r0, [pc, #36]	; (800e5c4 <aes_sessKeys+0x74>)
 800e59e:	f7f4 ff7b 	bl	8003498 <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 800e5a2:	2210      	movs	r2, #16
 800e5a4:	6879      	ldr	r1, [r7, #4]
 800e5a6:	2000      	movs	r0, #0
 800e5a8:	f7fe ff92 	bl	800d4d0 <os_aes>
    os_getDevKey(AESkey);
 800e5ac:	4805      	ldr	r0, [pc, #20]	; (800e5c4 <aes_sessKeys+0x74>)
 800e5ae:	f7f4 ff73 	bl	8003498 <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 800e5b2:	2210      	movs	r2, #16
 800e5b4:	6839      	ldr	r1, [r7, #0]
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	f7fe ff8a 	bl	800d4d0 <os_aes>
}
 800e5bc:	bf00      	nop
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	20000b54 	.word	0x20000b54

0800e5c8 <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 800e5c8:	b590      	push	{r4, r7, lr}
 800e5ca:	b083      	sub	sp, #12
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	80fb      	strh	r3, [r7, #6]
    return -141 + TABLE_GET_U1_TWODIM(SENSITIVITY, getSf(rps), getBw(rps));
 800e5d2:	88fb      	ldrh	r3, [r7, #6]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7ff fca1 	bl	800df1c <getSf>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	461a      	mov	r2, r3
 800e5de:	4613      	mov	r3, r2
 800e5e0:	005b      	lsls	r3, r3, #1
 800e5e2:	4413      	add	r3, r2
 800e5e4:	4a08      	ldr	r2, [pc, #32]	; (800e608 <getSensitivity+0x40>)
 800e5e6:	189c      	adds	r4, r3, r2
 800e5e8:	88fb      	ldrh	r3, [r7, #6]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7ff fca6 	bl	800df3c <getBw>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f7fe fea7 	bl	800d348 <table_get_u1>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	3b8d      	subs	r3, #141	; 0x8d
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	370c      	adds	r7, #12
 800e602:	46bd      	mov	sp, r7
 800e604:	bd90      	pop	{r4, r7, pc}
 800e606:	bf00      	nop
 800e608:	08019888 	.word	0x08019888

0800e60c <calcAirTime>:

ostime_t calcAirTime (rps_t rps, uint8_t plen) {
 800e60c:	b590      	push	{r4, r7, lr}
 800e60e:	b087      	sub	sp, #28
 800e610:	af00      	add	r7, sp, #0
 800e612:	4603      	mov	r3, r0
 800e614:	460a      	mov	r2, r1
 800e616:	80fb      	strh	r3, [r7, #6]
 800e618:	4613      	mov	r3, r2
 800e61a:	717b      	strb	r3, [r7, #5]
    uint8_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 800e61c:	88fb      	ldrh	r3, [r7, #6]
 800e61e:	4618      	mov	r0, r3
 800e620:	f7ff fc8c 	bl	800df3c <getBw>
 800e624:	4603      	mov	r3, r0
 800e626:	72fb      	strb	r3, [r7, #11]
    uint8_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 800e628:	88fb      	ldrh	r3, [r7, #6]
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7ff fc76 	bl	800df1c <getSf>
 800e630:	4603      	mov	r3, r0
 800e632:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 800e634:	7abb      	ldrb	r3, [r7, #10]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d10c      	bne.n	800e654 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 800e63a:	797b      	ldrb	r3, [r7, #5]
 800e63c:	330b      	adds	r3, #11
            * (int32_t)LMIC_OSTICKS_PER_SEC / /*kbit/s*/50000;
 800e63e:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800e642:	fb02 f303 	mul.w	r3, r2, r3
 800e646:	4a3c      	ldr	r2, [pc, #240]	; (800e738 <calcAirTime+0x12c>)
 800e648:	fb82 1203 	smull	r1, r2, r2, r3
 800e64c:	1312      	asrs	r2, r2, #12
 800e64e:	17db      	asrs	r3, r3, #31
 800e650:	1ad3      	subs	r3, r2, r3
 800e652:	e06d      	b.n	800e730 <calcAirTime+0x124>
    }
    uint8_t sfx = 4*(sf+(7-SF7));
 800e654:	7abb      	ldrb	r3, [r7, #10]
 800e656:	3306      	adds	r3, #6
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	75fb      	strb	r3, [r7, #23]
    uint8_t q = sfx - (sf >= SF11 ? 8 : 0);
 800e65e:	7abb      	ldrb	r3, [r7, #10]
 800e660:	2b04      	cmp	r3, #4
 800e662:	d901      	bls.n	800e668 <calcAirTime+0x5c>
 800e664:	2308      	movs	r3, #8
 800e666:	e000      	b.n	800e66a <calcAirTime+0x5e>
 800e668:	2300      	movs	r3, #0
 800e66a:	7dfa      	ldrb	r2, [r7, #23]
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 800e670:	797b      	ldrb	r3, [r7, #5]
 800e672:	00da      	lsls	r2, r3, #3
 800e674:	7dfb      	ldrb	r3, [r7, #23]
 800e676:	1ad3      	subs	r3, r2, r3
 800e678:	f103 041c 	add.w	r4, r3, #28
 800e67c:	88fb      	ldrh	r3, [r7, #6]
 800e67e:	4618      	mov	r0, r3
 800e680:	f7ff fc99 	bl	800dfb6 <getNocrc>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d001      	beq.n	800e68e <calcAirTime+0x82>
 800e68a:	2300      	movs	r3, #0
 800e68c:	e000      	b.n	800e690 <calcAirTime+0x84>
 800e68e:	2310      	movs	r3, #16
 800e690:	441c      	add	r4, r3
 800e692:	88fb      	ldrh	r3, [r7, #6]
 800e694:	4618      	mov	r0, r3
 800e696:	f7ff fcb5 	bl	800e004 <getIh>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d001      	beq.n	800e6a4 <calcAirTime+0x98>
 800e6a0:	2314      	movs	r3, #20
 800e6a2:	e000      	b.n	800e6a6 <calcAirTime+0x9a>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	1ae3      	subs	r3, r4, r3
 800e6a8:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	dd15      	ble.n	800e6dc <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 800e6b0:	7a7a      	ldrb	r2, [r7, #9]
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	1e5a      	subs	r2, r3, #1
 800e6b8:	7a7b      	ldrb	r3, [r7, #9]
 800e6ba:	fb92 f3f3 	sdiv	r3, r2, r3
 800e6be:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 800e6c0:	88fb      	ldrh	r3, [r7, #6]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7ff fc4c 	bl	800df60 <getCr>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	1d5a      	adds	r2, r3, #5
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	fb02 f303 	mul.w	r3, r2, r3
 800e6d2:	613b      	str	r3, [r7, #16]
        tmp += 8;
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	3308      	adds	r3, #8
 800e6d8:	613b      	str	r3, [r7, #16]
 800e6da:	e001      	b.n	800e6e0 <calcAirTime+0xd4>
    } else {
        tmp = 8;
 800e6dc:	2308      	movs	r3, #8
 800e6de:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	3331      	adds	r3, #49	; 0x31
 800e6e6:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * LMIC_OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 800e6e8:	7aba      	ldrb	r2, [r7, #10]
 800e6ea:	7afb      	ldrb	r3, [r7, #11]
 800e6ec:	1ad3      	subs	r3, r2, r3
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 800e6f4:	f643 5309 	movw	r3, #15625	; 0x3d09
 800e6f8:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 800e6fa:	7dfb      	ldrb	r3, [r7, #23]
 800e6fc:	2b04      	cmp	r3, #4
 800e6fe:	d907      	bls.n	800e710 <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 800e700:	7dfb      	ldrb	r3, [r7, #23]
 800e702:	3b04      	subs	r3, #4
 800e704:	68fa      	ldr	r2, [r7, #12]
 800e706:	fa42 f303 	asr.w	r3, r2, r3
 800e70a:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 800e70c:	2304      	movs	r3, #4
 800e70e:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * LMIC_OSTICKS_PER_SEC + div/2) / div;
 800e710:	693a      	ldr	r2, [r7, #16]
 800e712:	7dfb      	ldrb	r3, [r7, #23]
 800e714:	fa02 f303 	lsl.w	r3, r2, r3
 800e718:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800e71c:	fb03 f202 	mul.w	r2, r3, r2
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	0fd9      	lsrs	r1, r3, #31
 800e724:	440b      	add	r3, r1
 800e726:	105b      	asrs	r3, r3, #1
 800e728:	441a      	add	r2, r3
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800e730:	4618      	mov	r0, r3
 800e732:	371c      	adds	r7, #28
 800e734:	46bd      	mov	sp, r7
 800e736:	bd90      	pop	{r4, r7, pc}
 800e738:	14f8b589 	.word	0x14f8b589

0800e73c <calcRxWindow>:
#endif
};


#if !defined(LMIC_DISABLE_BEACONS)
static ostime_t calcRxWindow (uint8_t secs, dr_t dr) {
 800e73c:	b590      	push	{r4, r7, lr}
 800e73e:	b087      	sub	sp, #28
 800e740:	af00      	add	r7, sp, #0
 800e742:	4603      	mov	r3, r0
 800e744:	460a      	mov	r2, r1
 800e746:	71fb      	strb	r3, [r7, #7]
 800e748:	4613      	mov	r3, r2
 800e74a:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 800e74c:	79fb      	ldrb	r3, [r7, #7]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d108      	bne.n	800e764 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 800e752:	4b26      	ldr	r3, [pc, #152]	; (800e7ec <calcRxWindow+0xb0>)
 800e754:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800e758:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 800e75a:	4b24      	ldr	r3, [pc, #144]	; (800e7ec <calcRxWindow+0xb0>)
 800e75c:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 800e760:	613b      	str	r3, [r7, #16]
 800e762:	e011      	b.n	800e788 <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 800e764:	4b21      	ldr	r3, [pc, #132]	; (800e7ec <calcRxWindow+0xb0>)
 800e766:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800e76a:	461a      	mov	r2, r3
 800e76c:	79fb      	ldrb	r3, [r7, #7]
 800e76e:	fb02 f303 	mul.w	r3, r2, r3
 800e772:	09db      	lsrs	r3, r3, #7
 800e774:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 800e776:	4b1d      	ldr	r3, [pc, #116]	; (800e7ec <calcRxWindow+0xb0>)
 800e778:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 800e77c:	461a      	mov	r2, r3
 800e77e:	79fb      	ldrb	r3, [r7, #7]
 800e780:	fb02 f303 	mul.w	r3, r2, r3
 800e784:	09db      	lsrs	r3, r3, #7
 800e786:	613b      	str	r3, [r7, #16]
    }
    uint8_t rxsyms = MINRX_SYMS;
 800e788:	2305      	movs	r3, #5
 800e78a:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 800e78c:	4b17      	ldr	r3, [pc, #92]	; (800e7ec <calcRxWindow+0xb0>)
 800e78e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800e792:	461a      	mov	r2, r3
 800e794:	4b15      	ldr	r3, [pc, #84]	; (800e7ec <calcRxWindow+0xb0>)
 800e796:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800e79a:	fb02 f303 	mul.w	r3, r2, r3
 800e79e:	693a      	ldr	r2, [r7, #16]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 800e7a4:	79bb      	ldrb	r3, [r7, #6]
 800e7a6:	f003 0307 	and.w	r3, r3, #7
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	4810      	ldr	r0, [pc, #64]	; (800e7f0 <calcRxWindow+0xb4>)
 800e7ae:	f7fe fdfa 	bl	800d3a6 <table_get_ostime>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	3305      	adds	r3, #5
 800e7be:	b2da      	uxtb	r2, r3
 800e7c0:	4b0a      	ldr	r3, [pc, #40]	; (800e7ec <calcRxWindow+0xb0>)
 800e7c2:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 800e7c4:	7bfb      	ldrb	r3, [r7, #15]
 800e7c6:	3b08      	subs	r3, #8
 800e7c8:	461c      	mov	r4, r3
 800e7ca:	79bb      	ldrb	r3, [r7, #6]
 800e7cc:	f003 0307 	and.w	r3, r3, #7
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	4807      	ldr	r0, [pc, #28]	; (800e7f0 <calcRxWindow+0xb4>)
 800e7d4:	f7fe fde7 	bl	800d3a6 <table_get_ostime>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	fb03 f204 	mul.w	r2, r3, r4
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	4413      	add	r3, r2
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	371c      	adds	r7, #28
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd90      	pop	{r4, r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	20000c04 	.word	0x20000c04
 800e7f0:	080198ac 	.word	0x080198ac

0800e7f4 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (uint8_t ms, bool ini) {
 800e7f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e7f8:	b086      	sub	sp, #24
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	460a      	mov	r2, r1
 800e800:	73fb      	strb	r3, [r7, #15]
 800e802:	4613      	mov	r3, r2
 800e804:	73bb      	strb	r3, [r7, #14]
    if( ini ) {
 800e806:	7bbb      	ldrb	r3, [r7, #14]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d014      	beq.n	800e836 <calcBcnRxWindowFromMillis+0x42>
        LMIC.drift = 0;
 800e80c:	4b3c      	ldr	r3, [pc, #240]	; (800e900 <calcBcnRxWindowFromMillis+0x10c>)
 800e80e:	2200      	movs	r2, #0
 800e810:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        LMIC.maxDriftDiff = 0;
 800e814:	4b3a      	ldr	r3, [pc, #232]	; (800e900 <calcBcnRxWindowFromMillis+0x10c>)
 800e816:	2200      	movs	r2, #0
 800e818:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        LMIC.missedBcns = 0;
 800e81c:	4b38      	ldr	r3, [pc, #224]	; (800e900 <calcBcnRxWindowFromMillis+0x10c>)
 800e81e:	2200      	movs	r2, #0
 800e820:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 800e824:	4b36      	ldr	r3, [pc, #216]	; (800e900 <calcBcnRxWindowFromMillis+0x10c>)
 800e826:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 800e82a:	f043 030c 	orr.w	r3, r3, #12
 800e82e:	b2da      	uxtb	r2, r3
 800e830:	4b33      	ldr	r3, [pc, #204]	; (800e900 <calcBcnRxWindowFromMillis+0x10c>)
 800e832:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 800e836:	2102      	movs	r1, #2
 800e838:	4832      	ldr	r0, [pc, #200]	; (800e904 <calcBcnRxWindowFromMillis+0x110>)
 800e83a:	f7fe fdb4 	bl	800d3a6 <table_get_ostime>
 800e83e:	6178      	str	r0, [r7, #20]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 800e840:	7bfb      	ldrb	r3, [r7, #15]
 800e842:	2200      	movs	r2, #0
 800e844:	4698      	mov	r8, r3
 800e846:	4691      	mov	r9, r2
 800e848:	4642      	mov	r2, r8
 800e84a:	464b      	mov	r3, r9
 800e84c:	f04f 0000 	mov.w	r0, #0
 800e850:	f04f 0100 	mov.w	r1, #0
 800e854:	0159      	lsls	r1, r3, #5
 800e856:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e85a:	0150      	lsls	r0, r2, #5
 800e85c:	4602      	mov	r2, r0
 800e85e:	460b      	mov	r3, r1
 800e860:	ebb2 0408 	subs.w	r4, r2, r8
 800e864:	eb63 0509 	sbc.w	r5, r3, r9
 800e868:	f04f 0200 	mov.w	r2, #0
 800e86c:	f04f 0300 	mov.w	r3, #0
 800e870:	00ab      	lsls	r3, r5, #2
 800e872:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e876:	00a2      	lsls	r2, r4, #2
 800e878:	4614      	mov	r4, r2
 800e87a:	461d      	mov	r5, r3
 800e87c:	eb14 0a08 	adds.w	sl, r4, r8
 800e880:	eb45 0b09 	adc.w	fp, r5, r9
 800e884:	f04f 0200 	mov.w	r2, #0
 800e888:	f04f 0300 	mov.w	r3, #0
 800e88c:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800e890:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800e894:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800e898:	4692      	mov	sl, r2
 800e89a:	469b      	mov	fp, r3
 800e89c:	4652      	mov	r2, sl
 800e89e:	465b      	mov	r3, fp
 800e8a0:	f240 31e7 	movw	r1, #999	; 0x3e7
 800e8a4:	1851      	adds	r1, r2, r1
 800e8a6:	6039      	str	r1, [r7, #0]
 800e8a8:	f143 0300 	adc.w	r3, r3, #0
 800e8ac:	607b      	str	r3, [r7, #4]
 800e8ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e8b2:	f04f 0300 	mov.w	r3, #0
 800e8b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e8ba:	f7f2 f9ed 	bl	8000c98 <__aeabi_uldivmod>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	3305      	adds	r3, #5
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	4b0c      	ldr	r3, [pc, #48]	; (800e900 <calcBcnRxWindowFromMillis+0x10c>)
 800e8d0:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 800e8d4:	4b0a      	ldr	r3, [pc, #40]	; (800e900 <calcBcnRxWindowFromMillis+0x10c>)
 800e8d6:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800e8da:	4b09      	ldr	r3, [pc, #36]	; (800e900 <calcBcnRxWindowFromMillis+0x10c>)
 800e8dc:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 800e8e0:	3b08      	subs	r3, #8
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	fb01 f303 	mul.w	r3, r1, r3
 800e8ea:	1ad3      	subs	r3, r2, r3
 800e8ec:	f503 137a 	add.w	r3, r3, #4096000	; 0x3e8000
 800e8f0:	4a03      	ldr	r2, [pc, #12]	; (800e900 <calcBcnRxWindowFromMillis+0x10c>)
 800e8f2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
}
 800e8f6:	bf00      	nop
 800e8f8:	3718      	adds	r7, #24
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e900:	20000c04 	.word	0x20000c04
 800e904:	080198ac 	.word	0x080198ac

0800e908 <rxschedInit>:
#endif // !LMIC_DISABLE_BEACONS


#if !defined(LMIC_DISABLE_PING)
// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (rxsched_t *rxsched) {
 800e908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e90c:	b085      	sub	sp, #20
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 800e912:	2210      	movs	r2, #16
 800e914:	2100      	movs	r1, #0
 800e916:	484a      	ldr	r0, [pc, #296]	; (800ea40 <rxschedInit+0x138>)
 800e918:	f005 f842 	bl	80139a0 <memset>
    os_clearMem(LMIC.frame+8,8);
 800e91c:	4b49      	ldr	r3, [pc, #292]	; (800ea44 <rxschedInit+0x13c>)
 800e91e:	2208      	movs	r2, #8
 800e920:	2100      	movs	r1, #0
 800e922:	4618      	mov	r0, r3
 800e924:	f005 f83c 	bl	80139a0 <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 800e928:	4b47      	ldr	r3, [pc, #284]	; (800ea48 <rxschedInit+0x140>)
 800e92a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800e92e:	4619      	mov	r1, r3
 800e930:	4846      	ldr	r0, [pc, #280]	; (800ea4c <rxschedInit+0x144>)
 800e932:	f7ff fc62 	bl	800e1fa <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 800e936:	4a46      	ldr	r2, [pc, #280]	; (800ea50 <rxschedInit+0x148>)
 800e938:	4b43      	ldr	r3, [pc, #268]	; (800ea48 <rxschedInit+0x140>)
 800e93a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e93e:	4619      	mov	r1, r3
 800e940:	4610      	mov	r0, r2
 800e942:	f7ff fc5a 	bl	800e1fa <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 800e946:	2210      	movs	r2, #16
 800e948:	4940      	ldr	r1, [pc, #256]	; (800ea4c <rxschedInit+0x144>)
 800e94a:	2000      	movs	r0, #0
 800e94c:	f7fe fdc0 	bl	800d4d0 <os_aes>
    uint8_t intvExp = rxsched->intvExp;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	785b      	ldrb	r3, [r3, #1]
 800e954:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 800e956:	483d      	ldr	r0, [pc, #244]	; (800ea4c <rxschedInit+0x144>)
 800e958:	f7ff fbeb 	bl	800e132 <os_rlsbf2>
 800e95c:	4603      	mov	r3, r0
 800e95e:	4619      	mov	r1, r3
 800e960:	7bfb      	ldrb	r3, [r7, #15]
 800e962:	f1c3 0307 	rsb	r3, r3, #7
 800e966:	f640 72ff 	movw	r2, #4095	; 0xfff
 800e96a:	fa42 f303 	asr.w	r3, r2, r3
 800e96e:	400b      	ands	r3, r1
 800e970:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 800e972:	4b35      	ldr	r3, [pc, #212]	; (800ea48 <rxschedInit+0x140>)
 800e974:	f8d3 612c 	ldr.w	r6, [r3, #300]	; 0x12c
                       BCN_RESERVE_osticks +
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 800e978:	68ba      	ldr	r2, [r7, #8]
 800e97a:	4613      	mov	r3, r2
 800e97c:	011b      	lsls	r3, r3, #4
 800e97e:	1a9b      	subs	r3, r3, r2
 800e980:	005b      	lsls	r3, r3, #1
 800e982:	461a      	mov	r2, r3
 800e984:	2300      	movs	r3, #0
 800e986:	4690      	mov	r8, r2
 800e988:	4699      	mov	r9, r3
 800e98a:	4642      	mov	r2, r8
 800e98c:	464b      	mov	r3, r9
 800e98e:	f04f 0000 	mov.w	r0, #0
 800e992:	f04f 0100 	mov.w	r1, #0
 800e996:	0159      	lsls	r1, r3, #5
 800e998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e99c:	0150      	lsls	r0, r2, #5
 800e99e:	4602      	mov	r2, r0
 800e9a0:	460b      	mov	r3, r1
 800e9a2:	ebb2 0408 	subs.w	r4, r2, r8
 800e9a6:	eb63 0509 	sbc.w	r5, r3, r9
 800e9aa:	f04f 0200 	mov.w	r2, #0
 800e9ae:	f04f 0300 	mov.w	r3, #0
 800e9b2:	00ab      	lsls	r3, r5, #2
 800e9b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e9b8:	00a2      	lsls	r2, r4, #2
 800e9ba:	4614      	mov	r4, r2
 800e9bc:	461d      	mov	r5, r3
 800e9be:	eb14 0a08 	adds.w	sl, r4, r8
 800e9c2:	eb45 0b09 	adc.w	fp, r5, r9
 800e9c6:	f04f 0200 	mov.w	r2, #0
 800e9ca:	f04f 0300 	mov.w	r3, #0
 800e9ce:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800e9d2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800e9d6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800e9da:	4692      	mov	sl, r2
 800e9dc:	469b      	mov	fp, r3
 800e9de:	4650      	mov	r0, sl
 800e9e0:	4659      	mov	r1, fp
 800e9e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e9e6:	f04f 0300 	mov.w	r3, #0
 800e9ea:	f7f2 f955 	bl	8000c98 <__aeabi_uldivmod>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	4613      	mov	r3, r2
                       BCN_RESERVE_osticks +
 800e9f4:	4433      	add	r3, r6
 800e9f6:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800e9fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	6053      	str	r3, [r2, #4]
    rxsched->slot   = 0;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	685c      	ldr	r4, [r3, #4]
 800ea0c:	7bfb      	ldrb	r3, [r7, #15]
 800ea0e:	2201      	movs	r2, #1
 800ea10:	fa02 f303 	lsl.w	r3, r2, r3
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	3302      	adds	r3, #2
 800ea18:	b2da      	uxtb	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	4619      	mov	r1, r3
 800ea20:	4610      	mov	r0, r2
 800ea22:	f7ff fe8b 	bl	800e73c <calcRxWindow>
 800ea26:	4603      	mov	r3, r0
 800ea28:	1ae2      	subs	r2, r4, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 800ea2e:	4b06      	ldr	r3, [pc, #24]	; (800ea48 <rxschedInit+0x140>)
 800ea30:	7c1a      	ldrb	r2, [r3, #16]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	70da      	strb	r2, [r3, #3]
}
 800ea36:	bf00      	nop
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea40:	20000b54 	.word	0x20000b54
 800ea44:	20000cf0 	.word	0x20000cf0
 800ea48:	20000c04 	.word	0x20000c04
 800ea4c:	20000ce8 	.word	0x20000ce8
 800ea50:	20000cec 	.word	0x20000cec

0800ea54 <rxschedNext>:


static bool rxschedNext (rxsched_t *rxsched, ostime_t cando) {
 800ea54:	b590      	push	{r4, r7, lr}
 800ea56:	b085      	sub	sp, #20
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
  again:
    if( (ostimediff_t)(rxsched->rxtime - cando) >= 0 )
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	689a      	ldr	r2, [r3, #8]
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	db01      	blt.n	800ea6e <rxschedNext+0x1a>
        return 1;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	e03a      	b.n	800eae4 <rxschedNext+0x90>
    uint8_t slot;
    if( (slot=rxsched->slot) >= 128 )
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	789b      	ldrb	r3, [r3, #2]
 800ea72:	73fb      	strb	r3, [r7, #15]
 800ea74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	da01      	bge.n	800ea80 <rxschedNext+0x2c>
        return 0;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	e031      	b.n	800eae4 <rxschedNext+0x90>
    uint8_t intv = 1<<rxsched->intvExp;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	785b      	ldrb	r3, [r3, #1]
 800ea84:	461a      	mov	r2, r3
 800ea86:	2301      	movs	r3, #1
 800ea88:	4093      	lsls	r3, r2
 800ea8a:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 800ea8c:	7bfa      	ldrb	r2, [r7, #15]
 800ea8e:	7bbb      	ldrb	r3, [r7, #14]
 800ea90:	4413      	add	r3, r2
 800ea92:	73fb      	strb	r3, [r7, #15]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	7bfa      	ldrb	r2, [r7, #15]
 800ea98:	709a      	strb	r2, [r3, #2]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	789b      	ldrb	r3, [r3, #2]
 800ea9e:	b25b      	sxtb	r3, r3
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	da01      	bge.n	800eaa8 <rxschedNext+0x54>
        return 0;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	e01d      	b.n	800eae4 <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 800eaac:	7bfa      	ldrb	r2, [r7, #15]
 800eaae:	4613      	mov	r3, r2
 800eab0:	011b      	lsls	r3, r3, #4
 800eab2:	1a9b      	subs	r3, r3, r2
 800eab4:	049b      	lsls	r3, r3, #18
 800eab6:	09db      	lsrs	r3, r3, #7
 800eab8:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 800eaba:	7bfa      	ldrb	r2, [r7, #15]
 800eabc:	7bbb      	ldrb	r3, [r7, #14]
 800eabe:	4413      	add	r3, r2
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	3302      	adds	r3, #2
 800eac4:	b2da      	uxtb	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	4619      	mov	r1, r3
 800eacc:	4610      	mov	r0, r2
 800eace:	f7ff fe35 	bl	800e73c <calcRxWindow>
 800ead2:	4603      	mov	r3, r0
 800ead4:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 800eada:	4b04      	ldr	r3, [pc, #16]	; (800eaec <rxschedNext+0x98>)
 800eadc:	7c1a      	ldrb	r2, [r3, #16]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	70da      	strb	r2, [r3, #3]
    goto again;
 800eae2:	e7bc      	b.n	800ea5e <rxschedNext+0xa>
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3714      	adds	r7, #20
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd90      	pop	{r4, r7, pc}
 800eaec:	20000c04 	.word	0x20000c04

0800eaf0 <rndDelay>:
#endif // !LMIC_DISABLE_PING)


static ostime_t rndDelay (uint8_t secSpan) {
 800eaf0:	b590      	push	{r4, r7, lr}
 800eaf2:	b085      	sub	sp, #20
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	71fb      	strb	r3, [r7, #7]
    uint16_t r = os_getRndU2();
 800eafa:	f003 fb1b 	bl	8012134 <radio_rand1>
 800eafe:	4603      	mov	r3, r0
 800eb00:	021b      	lsls	r3, r3, #8
 800eb02:	b21c      	sxth	r4, r3
 800eb04:	f003 fb16 	bl	8012134 <radio_rand1>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	b21b      	sxth	r3, r3
 800eb0c:	4323      	orrs	r3, r4
 800eb0e:	b21b      	sxth	r3, r3
 800eb10:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 800eb12:	897b      	ldrh	r3, [r7, #10]
 800eb14:	60fb      	str	r3, [r7, #12]
    if( delay > LMIC_OSTICKS_PER_SEC )
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800eb1c:	d90b      	bls.n	800eb36 <rndDelay+0x46>
        delay = r % (uint16_t)LMIC_OSTICKS_PER_SEC;
 800eb1e:	897b      	ldrh	r3, [r7, #10]
 800eb20:	4a12      	ldr	r2, [pc, #72]	; (800eb6c <rndDelay+0x7c>)
 800eb22:	fba2 1203 	umull	r1, r2, r2, r3
 800eb26:	0ad2      	lsrs	r2, r2, #11
 800eb28:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 800eb2c:	fb01 f202 	mul.w	r2, r1, r2
 800eb30:	1a9b      	subs	r3, r3, r2
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 800eb36:	79fb      	ldrb	r3, [r7, #7]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d011      	beq.n	800eb60 <rndDelay+0x70>
        delay += ((uint8_t)r % secSpan) * LMIC_OSTICKS_PER_SEC;
 800eb3c:	897b      	ldrh	r3, [r7, #10]
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	79fa      	ldrb	r2, [r7, #7]
 800eb42:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb46:	fb01 f202 	mul.w	r2, r1, r2
 800eb4a:	1a9b      	subs	r3, r3, r2
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	461a      	mov	r2, r3
 800eb50:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800eb54:	fb02 f303 	mul.w	r3, r2, r3
 800eb58:	461a      	mov	r2, r3
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	4413      	add	r3, r2
 800eb5e:	60fb      	str	r3, [r7, #12]
    return delay;
 800eb60:	68fb      	ldr	r3, [r7, #12]
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3714      	adds	r7, #20
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd90      	pop	{r4, r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	10624dd3 	.word	0x10624dd3

0800eb70 <txDelay>:


static void txDelay (ostime_t reftime, uint8_t secSpan) {
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 800eb7c:	78fb      	ldrb	r3, [r7, #3]
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7ff ffb6 	bl	800eaf0 <rndDelay>
 800eb84:	4602      	mov	r2, r0
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4413      	add	r3, r2
 800eb8a:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (ostimediff_t)(reftime - LMIC.globalDutyAvail) > 0 ) {
 800eb8c:	4b0d      	ldr	r3, [pc, #52]	; (800ebc4 <txDelay+0x54>)
 800eb8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d005      	beq.n	800eba2 <txDelay+0x32>
 800eb96:	4b0b      	ldr	r3, [pc, #44]	; (800ebc4 <txDelay+0x54>)
 800eb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	1ad3      	subs	r3, r2, r3
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	dd0b      	ble.n	800ebba <txDelay+0x4a>
        LMIC.globalDutyAvail = reftime;
 800eba2:	4a08      	ldr	r2, [pc, #32]	; (800ebc4 <txDelay+0x54>)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	63d3      	str	r3, [r2, #60]	; 0x3c
        LMIC.opmode |= OP_RNDTX;
 800eba8:	4b06      	ldr	r3, [pc, #24]	; (800ebc4 <txDelay+0x54>)
 800ebaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ebae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	4b03      	ldr	r3, [pc, #12]	; (800ebc4 <txDelay+0x54>)
 800ebb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }
}
 800ebba:	bf00      	nop
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	20000c04 	.word	0x20000c04

0800ebc8 <setDrJoin>:


static void setDrJoin (uint8_t reason, uint8_t dr) {
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	4603      	mov	r3, r0
 800ebd0:	460a      	mov	r2, r1
 800ebd2:	71fb      	strb	r3, [r7, #7]
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 800ebd8:	4a04      	ldr	r2, [pc, #16]	; (800ebec <setDrJoin+0x24>)
 800ebda:	79bb      	ldrb	r3, [r7, #6]
 800ebdc:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    DO_DEVDB(LMIC.datarate,datarate);
}
 800ebe0:	bf00      	nop
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr
 800ebec:	20000c04 	.word	0x20000c04

0800ebf0 <setDrTxpow>:


static void setDrTxpow (uint8_t reason, uint8_t dr, int8_t pow) {
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	71fb      	strb	r3, [r7, #7]
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	71bb      	strb	r3, [r7, #6]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));

    if( pow != KEEP_TXPOW )
 800ec02:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800ec06:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800ec0a:	d003      	beq.n	800ec14 <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 800ec0c:	4a0e      	ldr	r2, [pc, #56]	; (800ec48 <setDrTxpow+0x58>)
 800ec0e:	797b      	ldrb	r3, [r7, #5]
 800ec10:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
    if( LMIC.datarate != dr ) {
 800ec14:	4b0c      	ldr	r3, [pc, #48]	; (800ec48 <setDrTxpow+0x58>)
 800ec16:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ec1a:	79ba      	ldrb	r2, [r7, #6]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d00c      	beq.n	800ec3a <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 800ec20:	4a09      	ldr	r2, [pc, #36]	; (800ec48 <setDrTxpow+0x58>)
 800ec22:	79bb      	ldrb	r3, [r7, #6]
 800ec24:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 800ec28:	4b07      	ldr	r3, [pc, #28]	; (800ec48 <setDrTxpow+0x58>)
 800ec2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ec2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	4b04      	ldr	r3, [pc, #16]	; (800ec48 <setDrTxpow+0x58>)
 800ec36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }
}
 800ec3a:	bf00      	nop
 800ec3c:	370c      	adds	r7, #12
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	20000c04 	.word	0x20000c04

0800ec4c <initDefaultChannels>:
//
// BEG: US915 related stuff
//


static void initDefaultChannels (void) {
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
    for( uint8_t i=0; i<4; i++ )
 800ec52:	2300      	movs	r3, #0
 800ec54:	71fb      	strb	r3, [r7, #7]
 800ec56:	e00a      	b.n	800ec6e <initDefaultChannels+0x22>
        LMIC.channelMap[i] = 0xFFFF;
 800ec58:	79fb      	ldrb	r3, [r7, #7]
 800ec5a:	4a0b      	ldr	r2, [pc, #44]	; (800ec88 <initDefaultChannels+0x3c>)
 800ec5c:	3314      	adds	r3, #20
 800ec5e:	005b      	lsls	r3, r3, #1
 800ec60:	4413      	add	r3, r2
 800ec62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec66:	809a      	strh	r2, [r3, #4]
    for( uint8_t i=0; i<4; i++ )
 800ec68:	79fb      	ldrb	r3, [r7, #7]
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	71fb      	strb	r3, [r7, #7]
 800ec6e:	79fb      	ldrb	r3, [r7, #7]
 800ec70:	2b03      	cmp	r3, #3
 800ec72:	d9f1      	bls.n	800ec58 <initDefaultChannels+0xc>
    LMIC.channelMap[4] = 0x00FF;
 800ec74:	4b04      	ldr	r3, [pc, #16]	; (800ec88 <initDefaultChannels+0x3c>)
 800ec76:	22ff      	movs	r2, #255	; 0xff
 800ec78:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800ec7a:	bf00      	nop
 800ec7c:	370c      	adds	r7, #12
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	20000c04 	.word	0x20000c04

0800ec8c <convFreq>:

static uint32_t convFreq (uint8_t *ptr) {
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
    uint32_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fa5f 	bl	800e15c <os_rlsbf4>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	0a1b      	lsrs	r3, r3, #8
 800eca2:	2264      	movs	r2, #100	; 0x64
 800eca4:	fb02 f303 	mul.w	r3, r2, r3
 800eca8:	60fb      	str	r3, [r7, #12]
    if( freq < US915_FREQ_MIN || freq > US915_FREQ_MAX )
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	4a06      	ldr	r2, [pc, #24]	; (800ecc8 <convFreq+0x3c>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d903      	bls.n	800ecba <convFreq+0x2e>
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	4a05      	ldr	r2, [pc, #20]	; (800eccc <convFreq+0x40>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d901      	bls.n	800ecbe <convFreq+0x32>
        freq = 0;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	60fb      	str	r3, [r7, #12]
    return freq;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	35c36d7f 	.word	0x35c36d7f
 800eccc:	37502800 	.word	0x37502800

0800ecd0 <LMIC_setupChannel>:

bool LMIC_setupChannel (uint8_t chidx, uint32_t freq, uint16_t drmap, int8_t band) {
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6039      	str	r1, [r7, #0]
 800ecd8:	4611      	mov	r1, r2
 800ecda:	461a      	mov	r2, r3
 800ecdc:	4603      	mov	r3, r0
 800ecde:	71fb      	strb	r3, [r7, #7]
 800ece0:	460b      	mov	r3, r1
 800ece2:	80bb      	strh	r3, [r7, #4]
 800ece4:	4613      	mov	r3, r2
 800ece6:	71bb      	strb	r3, [r7, #6]
    if( chidx < 72 || chidx >= 72+MAX_XCHANNELS )
 800ece8:	79fb      	ldrb	r3, [r7, #7]
 800ecea:	2b47      	cmp	r3, #71	; 0x47
 800ecec:	d902      	bls.n	800ecf4 <LMIC_setupChannel+0x24>
 800ecee:	79fb      	ldrb	r3, [r7, #7]
 800ecf0:	2b49      	cmp	r3, #73	; 0x49
 800ecf2:	d901      	bls.n	800ecf8 <LMIC_setupChannel+0x28>
        return 0; // channels 0..71 are hardwired
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	e030      	b.n	800ed5a <LMIC_setupChannel+0x8a>
    chidx -= 72;
 800ecf8:	79fb      	ldrb	r3, [r7, #7]
 800ecfa:	3b48      	subs	r3, #72	; 0x48
 800ecfc:	71fb      	strb	r3, [r7, #7]
    LMIC.xchFreq[chidx] = freq;
 800ecfe:	79fb      	ldrb	r3, [r7, #7]
 800ed00:	4919      	ldr	r1, [pc, #100]	; (800ed68 <LMIC_setupChannel+0x98>)
 800ed02:	3308      	adds	r3, #8
 800ed04:	683a      	ldr	r2, [r7, #0]
 800ed06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.xchDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF10,DR_SF8C) : drmap;
 800ed0a:	88bb      	ldrh	r3, [r7, #4]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d001      	beq.n	800ed14 <LMIC_setupChannel+0x44>
 800ed10:	88ba      	ldrh	r2, [r7, #4]
 800ed12:	e000      	b.n	800ed16 <LMIC_setupChannel+0x46>
 800ed14:	221f      	movs	r2, #31
 800ed16:	79fb      	ldrb	r3, [r7, #7]
 800ed18:	4913      	ldr	r1, [pc, #76]	; (800ed68 <LMIC_setupChannel+0x98>)
 800ed1a:	3314      	adds	r3, #20
 800ed1c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap[chidx>>4] |= (1<<(chidx&0xF));
 800ed20:	79fb      	ldrb	r3, [r7, #7]
 800ed22:	091b      	lsrs	r3, r3, #4
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	4a10      	ldr	r2, [pc, #64]	; (800ed68 <LMIC_setupChannel+0x98>)
 800ed28:	3314      	adds	r3, #20
 800ed2a:	005b      	lsls	r3, r3, #1
 800ed2c:	4413      	add	r3, r2
 800ed2e:	889b      	ldrh	r3, [r3, #4]
 800ed30:	b21a      	sxth	r2, r3
 800ed32:	79fb      	ldrb	r3, [r7, #7]
 800ed34:	f003 030f 	and.w	r3, r3, #15
 800ed38:	2101      	movs	r1, #1
 800ed3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ed3e:	b21b      	sxth	r3, r3
 800ed40:	4313      	orrs	r3, r2
 800ed42:	b21a      	sxth	r2, r3
 800ed44:	79fb      	ldrb	r3, [r7, #7]
 800ed46:	091b      	lsrs	r3, r3, #4
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	b291      	uxth	r1, r2
 800ed4c:	4a06      	ldr	r2, [pc, #24]	; (800ed68 <LMIC_setupChannel+0x98>)
 800ed4e:	3314      	adds	r3, #20
 800ed50:	005b      	lsls	r3, r3, #1
 800ed52:	4413      	add	r3, r2
 800ed54:	460a      	mov	r2, r1
 800ed56:	809a      	strh	r2, [r3, #4]
    return 1;
 800ed58:	2301      	movs	r3, #1
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	370c      	adds	r7, #12
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	20000c04 	.word	0x20000c04

0800ed6c <LMIC_disableChannel>:

void LMIC_disableChannel (uint8_t channel) {
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	4603      	mov	r3, r0
 800ed74:	71fb      	strb	r3, [r7, #7]
    if( channel < 72+MAX_XCHANNELS )
 800ed76:	79fb      	ldrb	r3, [r7, #7]
 800ed78:	2b49      	cmp	r3, #73	; 0x49
 800ed7a:	d81d      	bhi.n	800edb8 <LMIC_disableChannel+0x4c>
        LMIC.channelMap[channel>>4] &= ~(1<<(channel&0xF));
 800ed7c:	79fb      	ldrb	r3, [r7, #7]
 800ed7e:	091b      	lsrs	r3, r3, #4
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	4a10      	ldr	r2, [pc, #64]	; (800edc4 <LMIC_disableChannel+0x58>)
 800ed84:	3314      	adds	r3, #20
 800ed86:	005b      	lsls	r3, r3, #1
 800ed88:	4413      	add	r3, r2
 800ed8a:	889b      	ldrh	r3, [r3, #4]
 800ed8c:	b21a      	sxth	r2, r3
 800ed8e:	79fb      	ldrb	r3, [r7, #7]
 800ed90:	f003 030f 	and.w	r3, r3, #15
 800ed94:	2101      	movs	r1, #1
 800ed96:	fa01 f303 	lsl.w	r3, r1, r3
 800ed9a:	b21b      	sxth	r3, r3
 800ed9c:	43db      	mvns	r3, r3
 800ed9e:	b21b      	sxth	r3, r3
 800eda0:	4013      	ands	r3, r2
 800eda2:	b21a      	sxth	r2, r3
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	091b      	lsrs	r3, r3, #4
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	b291      	uxth	r1, r2
 800edac:	4a05      	ldr	r2, [pc, #20]	; (800edc4 <LMIC_disableChannel+0x58>)
 800edae:	3314      	adds	r3, #20
 800edb0:	005b      	lsls	r3, r3, #1
 800edb2:	4413      	add	r3, r2
 800edb4:	460a      	mov	r2, r1
 800edb6:	809a      	strh	r2, [r3, #4]
}
 800edb8:	bf00      	nop
 800edba:	370c      	adds	r7, #12
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr
 800edc4:	20000c04 	.word	0x20000c04

0800edc8 <LMIC_enableChannel>:

void LMIC_enableChannel (uint8_t channel) {
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	4603      	mov	r3, r0
 800edd0:	71fb      	strb	r3, [r7, #7]
    if( channel < 72+MAX_XCHANNELS )
 800edd2:	79fb      	ldrb	r3, [r7, #7]
 800edd4:	2b49      	cmp	r3, #73	; 0x49
 800edd6:	d81b      	bhi.n	800ee10 <LMIC_enableChannel+0x48>
        LMIC.channelMap[channel>>4] |= (1<<(channel&0xF));
 800edd8:	79fb      	ldrb	r3, [r7, #7]
 800edda:	091b      	lsrs	r3, r3, #4
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	4a0f      	ldr	r2, [pc, #60]	; (800ee1c <LMIC_enableChannel+0x54>)
 800ede0:	3314      	adds	r3, #20
 800ede2:	005b      	lsls	r3, r3, #1
 800ede4:	4413      	add	r3, r2
 800ede6:	889b      	ldrh	r3, [r3, #4]
 800ede8:	b21a      	sxth	r2, r3
 800edea:	79fb      	ldrb	r3, [r7, #7]
 800edec:	f003 030f 	and.w	r3, r3, #15
 800edf0:	2101      	movs	r1, #1
 800edf2:	fa01 f303 	lsl.w	r3, r1, r3
 800edf6:	b21b      	sxth	r3, r3
 800edf8:	4313      	orrs	r3, r2
 800edfa:	b21a      	sxth	r2, r3
 800edfc:	79fb      	ldrb	r3, [r7, #7]
 800edfe:	091b      	lsrs	r3, r3, #4
 800ee00:	b2db      	uxtb	r3, r3
 800ee02:	b291      	uxth	r1, r2
 800ee04:	4a05      	ldr	r2, [pc, #20]	; (800ee1c <LMIC_enableChannel+0x54>)
 800ee06:	3314      	adds	r3, #20
 800ee08:	005b      	lsls	r3, r3, #1
 800ee0a:	4413      	add	r3, r2
 800ee0c:	460a      	mov	r2, r1
 800ee0e:	809a      	strh	r2, [r3, #4]
}
 800ee10:	bf00      	nop
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr
 800ee1c:	20000c04 	.word	0x20000c04

0800ee20 <LMIC_enableSubBand>:

void  LMIC_enableSubBand (uint8_t band) {
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	4603      	mov	r3, r0
 800ee28:	71fb      	strb	r3, [r7, #7]
  ASSERT(band < 8);
 800ee2a:	79fb      	ldrb	r3, [r7, #7]
 800ee2c:	2b07      	cmp	r3, #7
 800ee2e:	d904      	bls.n	800ee3a <LMIC_enableSubBand+0x1a>
 800ee30:	f240 3129 	movw	r1, #809	; 0x329
 800ee34:	480e      	ldr	r0, [pc, #56]	; (800ee70 <LMIC_enableSubBand+0x50>)
 800ee36:	f003 fd5f 	bl	80128f8 <hal_failed>
  uint8_t start = band * 8;
 800ee3a:	79fb      	ldrb	r3, [r7, #7]
 800ee3c:	00db      	lsls	r3, r3, #3
 800ee3e:	72fb      	strb	r3, [r7, #11]
  uint8_t end = start + 8;
 800ee40:	7afb      	ldrb	r3, [r7, #11]
 800ee42:	3308      	adds	r3, #8
 800ee44:	72bb      	strb	r3, [r7, #10]
  for (int channel=start; channel < end; ++channel )
 800ee46:	7afb      	ldrb	r3, [r7, #11]
 800ee48:	60fb      	str	r3, [r7, #12]
 800ee4a:	e007      	b.n	800ee5c <LMIC_enableSubBand+0x3c>
      LMIC_enableChannel(channel);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7ff ffb9 	bl	800edc8 <LMIC_enableChannel>
  for (int channel=start; channel < end; ++channel )
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	60fb      	str	r3, [r7, #12]
 800ee5c:	7abb      	ldrb	r3, [r7, #10]
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	dbf3      	blt.n	800ee4c <LMIC_enableSubBand+0x2c>
}
 800ee64:	bf00      	nop
 800ee66:	bf00      	nop
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	08018278 	.word	0x08018278

0800ee74 <LMIC_disableSubBand>:
void  LMIC_disableSubBand (uint8_t band) {
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	71fb      	strb	r3, [r7, #7]
  ASSERT(band < 8);
 800ee7e:	79fb      	ldrb	r3, [r7, #7]
 800ee80:	2b07      	cmp	r3, #7
 800ee82:	d904      	bls.n	800ee8e <LMIC_disableSubBand+0x1a>
 800ee84:	f44f 714c 	mov.w	r1, #816	; 0x330
 800ee88:	480e      	ldr	r0, [pc, #56]	; (800eec4 <LMIC_disableSubBand+0x50>)
 800ee8a:	f003 fd35 	bl	80128f8 <hal_failed>
  uint8_t start = band * 8;
 800ee8e:	79fb      	ldrb	r3, [r7, #7]
 800ee90:	00db      	lsls	r3, r3, #3
 800ee92:	72fb      	strb	r3, [r7, #11]
  uint8_t end = start + 8;
 800ee94:	7afb      	ldrb	r3, [r7, #11]
 800ee96:	3308      	adds	r3, #8
 800ee98:	72bb      	strb	r3, [r7, #10]
  for (int channel=start; channel < end; ++channel )
 800ee9a:	7afb      	ldrb	r3, [r7, #11]
 800ee9c:	60fb      	str	r3, [r7, #12]
 800ee9e:	e007      	b.n	800eeb0 <LMIC_disableSubBand+0x3c>
      LMIC_disableChannel(channel);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7ff ff61 	bl	800ed6c <LMIC_disableChannel>
  for (int channel=start; channel < end; ++channel )
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	3301      	adds	r3, #1
 800eeae:	60fb      	str	r3, [r7, #12]
 800eeb0:	7abb      	ldrb	r3, [r7, #10]
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	dbf3      	blt.n	800eea0 <LMIC_disableSubBand+0x2c>
}
 800eeb8:	bf00      	nop
 800eeba:	bf00      	nop
 800eebc:	3710      	adds	r7, #16
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	08018278 	.word	0x08018278

0800eec8 <LMIC_selectSubBand>:
void  LMIC_selectSubBand (uint8_t band) {
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	4603      	mov	r3, r0
 800eed0:	71fb      	strb	r3, [r7, #7]
  ASSERT(band < 8);
 800eed2:	79fb      	ldrb	r3, [r7, #7]
 800eed4:	2b07      	cmp	r3, #7
 800eed6:	d904      	bls.n	800eee2 <LMIC_selectSubBand+0x1a>
 800eed8:	f240 3137 	movw	r1, #823	; 0x337
 800eedc:	480f      	ldr	r0, [pc, #60]	; (800ef1c <LMIC_selectSubBand+0x54>)
 800eede:	f003 fd0b 	bl	80128f8 <hal_failed>
  for (int b=0; b<8; ++b) {
 800eee2:	2300      	movs	r3, #0
 800eee4:	60fb      	str	r3, [r7, #12]
 800eee6:	e011      	b.n	800ef0c <LMIC_selectSubBand+0x44>
    if (band==b)
 800eee8:	79fb      	ldrb	r3, [r7, #7]
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d105      	bne.n	800eefc <LMIC_selectSubBand+0x34>
      LMIC_enableSubBand(b);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	b2db      	uxtb	r3, r3
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7ff ff93 	bl	800ee20 <LMIC_enableSubBand>
 800eefa:	e004      	b.n	800ef06 <LMIC_selectSubBand+0x3e>
    else
      LMIC_disableSubBand(b);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7ff ffb7 	bl	800ee74 <LMIC_disableSubBand>
  for (int b=0; b<8; ++b) {
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	60fb      	str	r3, [r7, #12]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2b07      	cmp	r3, #7
 800ef10:	ddea      	ble.n	800eee8 <LMIC_selectSubBand+0x20>
  }
}
 800ef12:	bf00      	nop
 800ef14:	bf00      	nop
 800ef16:	3710      	adds	r7, #16
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	08018278 	.word	0x08018278

0800ef20 <mapChannels>:

static uint8_t mapChannels (uint8_t chpage, uint16_t chmap) {
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	4603      	mov	r3, r0
 800ef28:	460a      	mov	r2, r1
 800ef2a:	71fb      	strb	r3, [r7, #7]
 800ef2c:	4613      	mov	r3, r2
 800ef2e:	80bb      	strh	r3, [r7, #4]
    if( chpage == MCMD_LADR_CHP_125ON || chpage == MCMD_LADR_CHP_125OFF ) {
 800ef30:	79fb      	ldrb	r3, [r7, #7]
 800ef32:	2b60      	cmp	r3, #96	; 0x60
 800ef34:	d002      	beq.n	800ef3c <mapChannels+0x1c>
 800ef36:	79fb      	ldrb	r3, [r7, #7]
 800ef38:	2b70      	cmp	r3, #112	; 0x70
 800ef3a:	d11b      	bne.n	800ef74 <mapChannels+0x54>
        uint16_t en125 = chpage == MCMD_LADR_CHP_125ON ? 0xFFFF : 0x0000;
 800ef3c:	79fb      	ldrb	r3, [r7, #7]
 800ef3e:	2b60      	cmp	r3, #96	; 0x60
 800ef40:	d102      	bne.n	800ef48 <mapChannels+0x28>
 800ef42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef46:	e000      	b.n	800ef4a <mapChannels+0x2a>
 800ef48:	2300      	movs	r3, #0
 800ef4a:	81bb      	strh	r3, [r7, #12]
        for( uint8_t u=0; u<4; u++ )
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	73fb      	strb	r3, [r7, #15]
 800ef50:	e009      	b.n	800ef66 <mapChannels+0x46>
            LMIC.channelMap[u] = en125;
 800ef52:	7bfb      	ldrb	r3, [r7, #15]
 800ef54:	4a11      	ldr	r2, [pc, #68]	; (800ef9c <mapChannels+0x7c>)
 800ef56:	3314      	adds	r3, #20
 800ef58:	005b      	lsls	r3, r3, #1
 800ef5a:	4413      	add	r3, r2
 800ef5c:	89ba      	ldrh	r2, [r7, #12]
 800ef5e:	809a      	strh	r2, [r3, #4]
        for( uint8_t u=0; u<4; u++ )
 800ef60:	7bfb      	ldrb	r3, [r7, #15]
 800ef62:	3301      	adds	r3, #1
 800ef64:	73fb      	strb	r3, [r7, #15]
 800ef66:	7bfb      	ldrb	r3, [r7, #15]
 800ef68:	2b03      	cmp	r3, #3
 800ef6a:	d9f2      	bls.n	800ef52 <mapChannels+0x32>
        LMIC.channelMap[64/16] = chmap;
 800ef6c:	4a0b      	ldr	r2, [pc, #44]	; (800ef9c <mapChannels+0x7c>)
 800ef6e:	88bb      	ldrh	r3, [r7, #4]
 800ef70:	8693      	strh	r3, [r2, #52]	; 0x34
    if( chpage == MCMD_LADR_CHP_125ON || chpage == MCMD_LADR_CHP_125OFF ) {
 800ef72:	e00b      	b.n	800ef8c <mapChannels+0x6c>
    } else {
        if( chpage >= (72+MAX_XCHANNELS+15)/16 )
 800ef74:	79fb      	ldrb	r3, [r7, #7]
 800ef76:	2b04      	cmp	r3, #4
 800ef78:	d901      	bls.n	800ef7e <mapChannels+0x5e>
            return 0;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	e007      	b.n	800ef8e <mapChannels+0x6e>
        LMIC.channelMap[chpage] = chmap;
 800ef7e:	79fb      	ldrb	r3, [r7, #7]
 800ef80:	4a06      	ldr	r2, [pc, #24]	; (800ef9c <mapChannels+0x7c>)
 800ef82:	3314      	adds	r3, #20
 800ef84:	005b      	lsls	r3, r3, #1
 800ef86:	4413      	add	r3, r2
 800ef88:	88ba      	ldrh	r2, [r7, #4]
 800ef8a:	809a      	strh	r2, [r3, #4]
    }
    return 1;
 800ef8c:	2301      	movs	r3, #1
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3714      	adds	r7, #20
 800ef92:	46bd      	mov	sp, r7
 800ef94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	20000c04 	.word	0x20000c04

0800efa0 <updateTx>:

static void updateTx (ostime_t txbeg) {
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
    uint8_t chnl = LMIC.txChnl;
 800efa8:	4b28      	ldr	r3, [pc, #160]	; (800f04c <updateTx+0xac>)
 800efaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800efae:	73fb      	strb	r3, [r7, #15]
    if( chnl < 64 ) {
 800efb0:	7bfb      	ldrb	r3, [r7, #15]
 800efb2:	2b3f      	cmp	r3, #63	; 0x3f
 800efb4:	d80c      	bhi.n	800efd0 <updateTx+0x30>
        LMIC.freq = US915_125kHz_UPFBASE + chnl*US915_125kHz_UPFSTEP;
 800efb6:	7bfb      	ldrb	r3, [r7, #15]
 800efb8:	4a25      	ldr	r2, [pc, #148]	; (800f050 <updateTx+0xb0>)
 800efba:	fb03 f202 	mul.w	r2, r3, r2
 800efbe:	4b25      	ldr	r3, [pc, #148]	; (800f054 <updateTx+0xb4>)
 800efc0:	4413      	add	r3, r2
 800efc2:	461a      	mov	r2, r3
 800efc4:	4b21      	ldr	r3, [pc, #132]	; (800f04c <updateTx+0xac>)
 800efc6:	609a      	str	r2, [r3, #8]
        LMIC.txpow = 30;
 800efc8:	4b20      	ldr	r3, [pc, #128]	; (800f04c <updateTx+0xac>)
 800efca:	221e      	movs	r2, #30
 800efcc:	749a      	strb	r2, [r3, #18]
        return;
 800efce:	e03a      	b.n	800f046 <updateTx+0xa6>
    }
    LMIC.txpow = 26;
 800efd0:	4b1e      	ldr	r3, [pc, #120]	; (800f04c <updateTx+0xac>)
 800efd2:	221a      	movs	r2, #26
 800efd4:	749a      	strb	r2, [r3, #18]
    if( chnl < 64+8 ) {
 800efd6:	7bfb      	ldrb	r3, [r7, #15]
 800efd8:	2b47      	cmp	r3, #71	; 0x47
 800efda:	d80a      	bhi.n	800eff2 <updateTx+0x52>
        LMIC.freq = US915_500kHz_UPFBASE + (chnl-64)*US915_500kHz_UPFSTEP;
 800efdc:	7bfb      	ldrb	r3, [r7, #15]
 800efde:	3b40      	subs	r3, #64	; 0x40
 800efe0:	4a1d      	ldr	r2, [pc, #116]	; (800f058 <updateTx+0xb8>)
 800efe2:	fb03 f202 	mul.w	r2, r3, r2
 800efe6:	4b1d      	ldr	r3, [pc, #116]	; (800f05c <updateTx+0xbc>)
 800efe8:	4413      	add	r3, r2
 800efea:	461a      	mov	r2, r3
 800efec:	4b17      	ldr	r3, [pc, #92]	; (800f04c <updateTx+0xac>)
 800efee:	609a      	str	r2, [r3, #8]
 800eff0:	e00f      	b.n	800f012 <updateTx+0x72>
    } else {
        ASSERT(chnl < 64+8+MAX_XCHANNELS);
 800eff2:	7bfb      	ldrb	r3, [r7, #15]
 800eff4:	2b49      	cmp	r3, #73	; 0x49
 800eff6:	d904      	bls.n	800f002 <updateTx+0x62>
 800eff8:	f240 3159 	movw	r1, #857	; 0x359
 800effc:	4818      	ldr	r0, [pc, #96]	; (800f060 <updateTx+0xc0>)
 800effe:	f003 fc7b 	bl	80128f8 <hal_failed>
        LMIC.freq = LMIC.xchFreq[chnl-72];
 800f002:	7bfb      	ldrb	r3, [r7, #15]
 800f004:	3b48      	subs	r3, #72	; 0x48
 800f006:	4a11      	ldr	r2, [pc, #68]	; (800f04c <updateTx+0xac>)
 800f008:	3308      	adds	r3, #8
 800f00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f00e:	4a0f      	ldr	r2, [pc, #60]	; (800f04c <updateTx+0xac>)
 800f010:	6093      	str	r3, [r2, #8]
    }

    // Update global duty cycle stats
    if( LMIC.globalDutyRate != 0 ) {
 800f012:	4b0e      	ldr	r3, [pc, #56]	; (800f04c <updateTx+0xac>)
 800f014:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d014      	beq.n	800f046 <updateTx+0xa6>
        ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 800f01c:	4b0b      	ldr	r3, [pc, #44]	; (800f04c <updateTx+0xac>)
 800f01e:	89db      	ldrh	r3, [r3, #14]
 800f020:	4a0a      	ldr	r2, [pc, #40]	; (800f04c <updateTx+0xac>)
 800f022:	f892 20e3 	ldrb.w	r2, [r2, #227]	; 0xe3
 800f026:	4611      	mov	r1, r2
 800f028:	4618      	mov	r0, r3
 800f02a:	f7ff faef 	bl	800e60c <calcAirTime>
 800f02e:	60b8      	str	r0, [r7, #8]
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 800f030:	4b06      	ldr	r3, [pc, #24]	; (800f04c <updateTx+0xac>)
 800f032:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f036:	461a      	mov	r2, r3
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	fa03 f202 	lsl.w	r2, r3, r2
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4413      	add	r3, r2
 800f042:	4a02      	ldr	r2, [pc, #8]	; (800f04c <updateTx+0xac>)
 800f044:	63d3      	str	r3, [r2, #60]	; 0x3c
    }
}
 800f046:	3710      	adds	r7, #16
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}
 800f04c:	20000c04 	.word	0x20000c04
 800f050:	00030d40 	.word	0x00030d40
 800f054:	35c80160 	.word	0x35c80160
 800f058:	00186a00 	.word	0x00186a00
 800f05c:	35d2afc0 	.word	0x35d2afc0
 800f060:	08018278 	.word	0x08018278

0800f064 <_nextTx>:

// US does not have duty cycling - return now as earliest TX time
#define nextTx(now) (_nextTx(),(now))
static void _nextTx (void) {
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
    if( LMIC.chRnd==0 )
 800f06a:	4b35      	ldr	r3, [pc, #212]	; (800f140 <_nextTx+0xdc>)
 800f06c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d108      	bne.n	800f084 <_nextTx+0x20>
        LMIC.chRnd = os_getRndU1() & 0x3F;
 800f072:	f003 f85f 	bl	8012134 <radio_rand1>
 800f076:	4603      	mov	r3, r0
 800f078:	b29b      	uxth	r3, r3
 800f07a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f07e:	b29a      	uxth	r2, r3
 800f080:	4b2f      	ldr	r3, [pc, #188]	; (800f140 <_nextTx+0xdc>)
 800f082:	86da      	strh	r2, [r3, #54]	; 0x36
    if( LMIC.datarate >= DR_SF8C ) { // 500kHz
 800f084:	4b2e      	ldr	r3, [pc, #184]	; (800f140 <_nextTx+0xdc>)
 800f086:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f08a:	2b03      	cmp	r3, #3
 800f08c:	d929      	bls.n	800f0e2 <_nextTx+0x7e>
        uint8_t map = LMIC.channelMap[64/16]&0xFF;
 800f08e:	4b2c      	ldr	r3, [pc, #176]	; (800f140 <_nextTx+0xdc>)
 800f090:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f092:	713b      	strb	r3, [r7, #4]
        for( uint8_t i=0; i<8; i++ ) {
 800f094:	2300      	movs	r3, #0
 800f096:	71fb      	strb	r3, [r7, #7]
 800f098:	e01f      	b.n	800f0da <_nextTx+0x76>
            if( (map & (1<<(++LMIC.chRnd & 7))) != 0 ) {
 800f09a:	793a      	ldrb	r2, [r7, #4]
 800f09c:	4b28      	ldr	r3, [pc, #160]	; (800f140 <_nextTx+0xdc>)
 800f09e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	b299      	uxth	r1, r3
 800f0a4:	4b26      	ldr	r3, [pc, #152]	; (800f140 <_nextTx+0xdc>)
 800f0a6:	86d9      	strh	r1, [r3, #54]	; 0x36
 800f0a8:	4b25      	ldr	r3, [pc, #148]	; (800f140 <_nextTx+0xdc>)
 800f0aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0ac:	f003 0307 	and.w	r3, r3, #7
 800f0b0:	fa42 f303 	asr.w	r3, r2, r3
 800f0b4:	f003 0301 	and.w	r3, r3, #1
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00b      	beq.n	800f0d4 <_nextTx+0x70>
                LMIC.txChnl = 64 + (LMIC.chRnd & 7);
 800f0bc:	4b20      	ldr	r3, [pc, #128]	; (800f140 <_nextTx+0xdc>)
 800f0be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	f003 0307 	and.w	r3, r3, #7
 800f0c6:	b2db      	uxtb	r3, r3
 800f0c8:	3340      	adds	r3, #64	; 0x40
 800f0ca:	b2da      	uxtb	r2, r3
 800f0cc:	4b1c      	ldr	r3, [pc, #112]	; (800f140 <_nextTx+0xdc>)
 800f0ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                return;
 800f0d2:	e032      	b.n	800f13a <_nextTx+0xd6>
        for( uint8_t i=0; i<8; i++ ) {
 800f0d4:	79fb      	ldrb	r3, [r7, #7]
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	71fb      	strb	r3, [r7, #7]
 800f0da:	79fb      	ldrb	r3, [r7, #7]
 800f0dc:	2b07      	cmp	r3, #7
 800f0de:	d9dc      	bls.n	800f09a <_nextTx+0x36>
 800f0e0:	e02b      	b.n	800f13a <_nextTx+0xd6>
            }
        }
    } else { // 125kHz
        for( uint8_t i=0; i<64; i++ ) {
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	71bb      	strb	r3, [r7, #6]
 800f0e6:	e025      	b.n	800f134 <_nextTx+0xd0>
            uint8_t chnl = ++LMIC.chRnd & 0x3F;
 800f0e8:	4b15      	ldr	r3, [pc, #84]	; (800f140 <_nextTx+0xdc>)
 800f0ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	4b13      	ldr	r3, [pc, #76]	; (800f140 <_nextTx+0xdc>)
 800f0f2:	86da      	strh	r2, [r3, #54]	; 0x36
 800f0f4:	4b12      	ldr	r3, [pc, #72]	; (800f140 <_nextTx+0xdc>)
 800f0f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0f8:	b2db      	uxtb	r3, r3
 800f0fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0fe:	717b      	strb	r3, [r7, #5]
            if( (LMIC.channelMap[(chnl >> 4)] & (1<<(chnl & 0xF))) != 0 ) {
 800f100:	797b      	ldrb	r3, [r7, #5]
 800f102:	091b      	lsrs	r3, r3, #4
 800f104:	b2db      	uxtb	r3, r3
 800f106:	4a0e      	ldr	r2, [pc, #56]	; (800f140 <_nextTx+0xdc>)
 800f108:	3314      	adds	r3, #20
 800f10a:	005b      	lsls	r3, r3, #1
 800f10c:	4413      	add	r3, r2
 800f10e:	889b      	ldrh	r3, [r3, #4]
 800f110:	461a      	mov	r2, r3
 800f112:	797b      	ldrb	r3, [r7, #5]
 800f114:	f003 030f 	and.w	r3, r3, #15
 800f118:	fa42 f303 	asr.w	r3, r2, r3
 800f11c:	f003 0301 	and.w	r3, r3, #1
 800f120:	2b00      	cmp	r3, #0
 800f122:	d004      	beq.n	800f12e <_nextTx+0xca>
                LMIC.txChnl = chnl;
 800f124:	4a06      	ldr	r2, [pc, #24]	; (800f140 <_nextTx+0xdc>)
 800f126:	797b      	ldrb	r3, [r7, #5]
 800f128:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
                return;
 800f12c:	e005      	b.n	800f13a <_nextTx+0xd6>
        for( uint8_t i=0; i<64; i++ ) {
 800f12e:	79bb      	ldrb	r3, [r7, #6]
 800f130:	3301      	adds	r3, #1
 800f132:	71bb      	strb	r3, [r7, #6]
 800f134:	79bb      	ldrb	r3, [r7, #6]
 800f136:	2b3f      	cmp	r3, #63	; 0x3f
 800f138:	d9d6      	bls.n	800f0e8 <_nextTx+0x84>
            }
        }
    }
    // No feasible channel  found! Keep old one.
}
 800f13a:	3708      	adds	r7, #8
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	20000c04 	.word	0x20000c04

0800f144 <setBcnRxParams>:

#if !defined(LMIC_DISABLE_BEACONS)
static void setBcnRxParams (void) {
 800f144:	b580      	push	{r7, lr}
 800f146:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 800f148:	4b11      	ldr	r3, [pc, #68]	; (800f190 <setBcnRxParams+0x4c>)
 800f14a:	2200      	movs	r2, #0
 800f14c:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
    LMIC.freq = US915_500kHz_DNFBASE + LMIC.bcnChnl * US915_500kHz_DNFSTEP;
 800f150:	4b0f      	ldr	r3, [pc, #60]	; (800f190 <setBcnRxParams+0x4c>)
 800f152:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800f156:	461a      	mov	r2, r3
 800f158:	4b0e      	ldr	r3, [pc, #56]	; (800f194 <setBcnRxParams+0x50>)
 800f15a:	fb03 f202 	mul.w	r2, r3, r2
 800f15e:	4b0e      	ldr	r3, [pc, #56]	; (800f198 <setBcnRxParams+0x54>)
 800f160:	4413      	add	r3, r2
 800f162:	461a      	mov	r2, r3
 800f164:	4b0a      	ldr	r3, [pc, #40]	; (800f190 <setBcnRxParams+0x4c>)
 800f166:	609a      	str	r2, [r3, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 800f168:	200a      	movs	r0, #10
 800f16a:	f7fe ff85 	bl	800e078 <dndr2rps>
 800f16e:	4603      	mov	r3, r0
 800f170:	2101      	movs	r1, #1
 800f172:	4618      	mov	r0, r3
 800f174:	f7fe ff2f 	bl	800dfd6 <setNocrc>
 800f178:	4603      	mov	r3, r0
 800f17a:	2113      	movs	r1, #19
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7fe ff50 	bl	800e022 <setIh>
 800f182:	4603      	mov	r3, r0
 800f184:	461a      	mov	r2, r3
 800f186:	4b02      	ldr	r3, [pc, #8]	; (800f190 <setBcnRxParams+0x4c>)
 800f188:	81da      	strh	r2, [r3, #14]
}
 800f18a:	bf00      	nop
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	20000c04 	.word	0x20000c04
 800f194:	000927c0 	.word	0x000927c0
 800f198:	370870a0 	.word	0x370870a0

0800f19c <initJoinLoop>:
        LMIC.dndr = DR_SF7CR;                                           \
    LMIC.rps = dndr2rps(LMIC.dndr);                                     \
}

#if !defined(LMIC_DISABLE_JOIN)
static void initJoinLoop (void) {
 800f19c:	b580      	push	{r7, lr}
 800f19e:	af00      	add	r7, sp, #0
    LMIC.chRnd = 0;
 800f1a0:	4b10      	ldr	r3, [pc, #64]	; (800f1e4 <initJoinLoop+0x48>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	86da      	strh	r2, [r3, #54]	; 0x36
    LMIC.txChnl = 0;
 800f1a6:	4b0f      	ldr	r3, [pc, #60]	; (800f1e4 <initJoinLoop+0x48>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LMIC.adrTxPow = 20;
 800f1ae:	4b0d      	ldr	r3, [pc, #52]	; (800f1e4 <initJoinLoop+0x48>)
 800f1b0:	2214      	movs	r2, #20
 800f1b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 800f1b6:	4b0b      	ldr	r3, [pc, #44]	; (800f1e4 <initJoinLoop+0x48>)
 800f1b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f1bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d004      	beq.n	800f1ce <initJoinLoop+0x32>
 800f1c4:	f240 3193 	movw	r1, #915	; 0x393
 800f1c8:	4807      	ldr	r0, [pc, #28]	; (800f1e8 <initJoinLoop+0x4c>)
 800f1ca:	f003 fb95 	bl	80128f8 <hal_failed>
    LMIC.txend = os_getTime();
 800f1ce:	f002 f91b 	bl	8011408 <os_getTime>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	4a03      	ldr	r2, [pc, #12]	; (800f1e4 <initJoinLoop+0x48>)
 800f1d6:	6013      	str	r3, [r2, #0]
    setDrJoin(DRCHG_SET, DR_SF7);
 800f1d8:	2103      	movs	r1, #3
 800f1da:	2000      	movs	r0, #0
 800f1dc:	f7ff fcf4 	bl	800ebc8 <setDrJoin>
}
 800f1e0:	bf00      	nop
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	20000c04 	.word	0x20000c04
 800f1e8:	08018278 	.word	0x08018278

0800f1ec <nextJoinState>:

static ostime_t nextJoinState (void) {
 800f1ec:	b590      	push	{r4, r7, lr}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
    // Try the following:
    //   SF7/8/9/10  on a random channel 0..63
    //   SF8C        on a random channel 64..71
    //
    uint8_t failed = 0;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	71fb      	strb	r3, [r7, #7]
    if( LMIC.datarate != DR_SF8C ) {
 800f1f6:	4b2c      	ldr	r3, [pc, #176]	; (800f2a8 <nextJoinState+0xbc>)
 800f1f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f1fc:	2b04      	cmp	r3, #4
 800f1fe:	d00f      	beq.n	800f220 <nextJoinState+0x34>
        LMIC.txChnl = 64+(LMIC.txChnl&7);
 800f200:	4b29      	ldr	r3, [pc, #164]	; (800f2a8 <nextJoinState+0xbc>)
 800f202:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f206:	f003 0307 	and.w	r3, r3, #7
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	3340      	adds	r3, #64	; 0x40
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	4b25      	ldr	r3, [pc, #148]	; (800f2a8 <nextJoinState+0xbc>)
 800f212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        setDrJoin(DRCHG_SET, DR_SF8C);
 800f216:	2104      	movs	r1, #4
 800f218:	2000      	movs	r0, #0
 800f21a:	f7ff fcd5 	bl	800ebc8 <setDrJoin>
 800f21e:	e024      	b.n	800f26a <nextJoinState+0x7e>
    } else {
        LMIC.txChnl = os_getRndU1() & 0x3F;
 800f220:	f002 ff88 	bl	8012134 <radio_rand1>
 800f224:	4603      	mov	r3, r0
 800f226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f22a:	b2da      	uxtb	r2, r3
 800f22c:	4b1e      	ldr	r3, [pc, #120]	; (800f2a8 <nextJoinState+0xbc>)
 800f22e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        int8_t dr = DR_SF7 - ++LMIC.txCnt;
 800f232:	4b1d      	ldr	r3, [pc, #116]	; (800f2a8 <nextJoinState+0xbc>)
 800f234:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800f238:	3301      	adds	r3, #1
 800f23a:	b2da      	uxtb	r2, r3
 800f23c:	4b1a      	ldr	r3, [pc, #104]	; (800f2a8 <nextJoinState+0xbc>)
 800f23e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 800f242:	4b19      	ldr	r3, [pc, #100]	; (800f2a8 <nextJoinState+0xbc>)
 800f244:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800f248:	f1c3 0303 	rsb	r3, r3, #3
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	71bb      	strb	r3, [r7, #6]
        if( dr < DR_SF10 ) {
 800f250:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f254:	2b00      	cmp	r3, #0
 800f256:	da03      	bge.n	800f260 <nextJoinState+0x74>
            dr = DR_SF10;
 800f258:	2300      	movs	r3, #0
 800f25a:	71bb      	strb	r3, [r7, #6]
            failed = 1; // All DR exhausted - signal failed
 800f25c:	2301      	movs	r3, #1
 800f25e:	71fb      	strb	r3, [r7, #7]
        }
        setDrJoin(DRCHG_SET, dr);
 800f260:	79bb      	ldrb	r3, [r7, #6]
 800f262:	4619      	mov	r1, r3
 800f264:	2000      	movs	r0, #0
 800f266:	f7ff fcaf 	bl	800ebc8 <setDrJoin>
    }
    LMIC.opmode &= ~OP_NEXTCHNL;
 800f26a:	4b0f      	ldr	r3, [pc, #60]	; (800f2a8 <nextJoinState+0xbc>)
 800f26c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f274:	b29a      	uxth	r2, r3
 800f276:	4b0c      	ldr	r3, [pc, #48]	; (800f2a8 <nextJoinState+0xbc>)
 800f278:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    LMIC.txend = os_getTime() +
 800f27c:	f002 f8c4 	bl	8011408 <os_getTime>
 800f280:	4604      	mov	r4, r0
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT being sent by GW (but we missed it - GW is still busy)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF10:16, SF9=8,..SF8C:1secs
         : rndDelay(16>>LMIC.datarate));
 800f282:	4b09      	ldr	r3, [pc, #36]	; (800f2a8 <nextJoinState+0xbc>)
 800f284:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f288:	461a      	mov	r2, r3
 800f28a:	2310      	movs	r3, #16
 800f28c:	4113      	asrs	r3, r2
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	4618      	mov	r0, r3
 800f292:	f7ff fc2d 	bl	800eaf0 <rndDelay>
 800f296:	4603      	mov	r3, r0
    LMIC.txend = os_getTime() +
 800f298:	4423      	add	r3, r4
 800f29a:	4a03      	ldr	r2, [pc, #12]	; (800f2a8 <nextJoinState+0xbc>)
 800f29c:	6013      	str	r3, [r2, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 800f29e:	79fb      	ldrb	r3, [r7, #7]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd90      	pop	{r4, r7, pc}
 800f2a8:	20000c04 	.word	0x20000c04

0800f2ac <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (osjob_t *osjob) {
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
    engineUpdate();
 800f2b4:	f001 fd7a 	bl	8010dac <engineUpdate>
}
 800f2b8:	bf00      	nop
 800f2ba:	3708      	adds	r7, #8
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <reportEvent>:


static void reportEvent (ev_t ev) {
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 800f2ca:	79fb      	ldrb	r3, [r7, #7]
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7f4 fa77 	bl	80037c0 <onEvent>
    engineUpdate();
 800f2d2:	f001 fd6b 	bl	8010dac <engineUpdate>
}
 800f2d6:	bf00      	nop
 800f2d8:	3708      	adds	r7, #8
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <runReset>:


static void runReset (osjob_t *osjob) {
 800f2de:	b580      	push	{r7, lr}
 800f2e0:	b082      	sub	sp, #8
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 800f2e6:	f001 ff6f 	bl	80111c8 <LMIC_reset>
#if !defined(LMIC_DISABLE_JOIN)
    LMIC_startJoining();
 800f2ea:	f001 facd 	bl	8010888 <LMIC_startJoining>
#endif // !LMIC_DISABLE_JOIN
    reportEvent(EV_RESET);
 800f2ee:	200c      	movs	r0, #12
 800f2f0:	f7ff ffe6 	bl	800f2c0 <reportEvent>
}
 800f2f4:	bf00      	nop
 800f2f6:	3708      	adds	r7, #8
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <stateJustJoined>:

static void stateJustJoined (void) {
 800f2fc:	b480      	push	{r7}
 800f2fe:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 800f300:	4b2c      	ldr	r3, [pc, #176]	; (800f3b4 <stateJustJoined+0xb8>)
 800f302:	2200      	movs	r2, #0
 800f304:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800f308:	4b2a      	ldr	r3, [pc, #168]	; (800f3b4 <stateJustJoined+0xb8>)
 800f30a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f30e:	4a29      	ldr	r2, [pc, #164]	; (800f3b4 <stateJustJoined+0xb8>)
 800f310:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    LMIC.rejoinCnt   = 0;
 800f314:	4b27      	ldr	r3, [pc, #156]	; (800f3b4 <stateJustJoined+0xb8>)
 800f316:	2200      	movs	r2, #0
 800f318:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 800f31c:	4b25      	ldr	r3, [pc, #148]	; (800f3b4 <stateJustJoined+0xb8>)
 800f31e:	2200      	movs	r2, #0
 800f320:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 800f324:	4b23      	ldr	r3, [pc, #140]	; (800f3b4 <stateJustJoined+0xb8>)
 800f326:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 800f32a:	4b22      	ldr	r3, [pc, #136]	; (800f3b4 <stateJustJoined+0xb8>)
 800f32c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 800f330:	4b20      	ldr	r3, [pc, #128]	; (800f3b4 <stateJustJoined+0xb8>)
 800f332:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800f336:	461a      	mov	r2, r3
 800f338:	4b1e      	ldr	r3, [pc, #120]	; (800f3b4 <stateJustJoined+0xb8>)
 800f33a:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 800f33e:	4b1d      	ldr	r3, [pc, #116]	; (800f3b4 <stateJustJoined+0xb8>)
 800f340:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 800f344:	4b1b      	ldr	r3, [pc, #108]	; (800f3b4 <stateJustJoined+0xb8>)
 800f346:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
#if !defined(LMIC_DISABLE_MCMD_SNCH_REQ)
    LMIC.snchAns     = 0;
 800f34a:	4b1a      	ldr	r3, [pc, #104]	; (800f3b4 <stateJustJoined+0xb8>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
#endif
#if !defined(LMIC_DISABLE_MCMD_DN2P_SET)
    LMIC.dn2Ans      = 0;
 800f352:	4b18      	ldr	r3, [pc, #96]	; (800f3b4 <stateJustJoined+0xb8>)
 800f354:	2200      	movs	r2, #0
 800f356:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
#endif
    LMIC.moreData    = 0;
 800f35a:	4b16      	ldr	r3, [pc, #88]	; (800f3b4 <stateJustJoined+0xb8>)
 800f35c:	2200      	movs	r2, #0
 800f35e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
#if !defined(LMIC_DISABLE_MCMD_DCAP_REQ)
    LMIC.dutyCapAns  = 0;
 800f362:	4b14      	ldr	r3, [pc, #80]	; (800f3b4 <stateJustJoined+0xb8>)
 800f364:	2200      	movs	r2, #0
 800f366:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
#endif
#if !defined(LMIC_DISABLE_MCMD_PING_SET) && !defined(LMIC_DISABLE_PING)
    LMIC.pingSetAns  = 0;
 800f36a:	4b12      	ldr	r3, [pc, #72]	; (800f3b4 <stateJustJoined+0xb8>)
 800f36c:	2200      	movs	r2, #0
 800f36e:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
#endif
    LMIC.upRepeat    = 0;
 800f372:	4b10      	ldr	r3, [pc, #64]	; (800f3b4 <stateJustJoined+0xb8>)
 800f374:	2200      	movs	r2, #0
 800f376:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 800f37a:	4b0e      	ldr	r3, [pc, #56]	; (800f3b4 <stateJustJoined+0xb8>)
 800f37c:	22f4      	movs	r2, #244	; 0xf4
 800f37e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
    LMIC.dn2Dr       = DR_DNW2;
 800f382:	4b0c      	ldr	r3, [pc, #48]	; (800f3b4 <stateJustJoined+0xb8>)
 800f384:	2208      	movs	r2, #8
 800f386:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
    LMIC.dn2Freq     = FREQ_DNW2;
 800f38a:	4b0a      	ldr	r3, [pc, #40]	; (800f3b4 <stateJustJoined+0xb8>)
 800f38c:	4a0a      	ldr	r2, [pc, #40]	; (800f3b8 <stateJustJoined+0xbc>)
 800f38e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#if !defined(LMIC_DISABLE_BEACONS)
    LMIC.bcnChnl     = CHNL_BCN;
 800f392:	4b08      	ldr	r3, [pc, #32]	; (800f3b4 <stateJustJoined+0xb8>)
 800f394:	2200      	movs	r2, #0
 800f396:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
#endif
#if !defined(LMIC_DISABLE_PING)
    LMIC.ping.freq   = FREQ_PING;
 800f39a:	4b06      	ldr	r3, [pc, #24]	; (800f3b4 <stateJustJoined+0xb8>)
 800f39c:	4a06      	ldr	r2, [pc, #24]	; (800f3b8 <stateJustJoined+0xbc>)
 800f39e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    LMIC.ping.dr     = DR_PING;
 800f3a2:	4b04      	ldr	r3, [pc, #16]	; (800f3b4 <stateJustJoined+0xb8>)
 800f3a4:	220a      	movs	r2, #10
 800f3a6:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
#endif
}
 800f3aa:	bf00      	nop
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr
 800f3b4:	20000c04 	.word	0x20000c04
 800f3b8:	370870a0 	.word	0x370870a0

0800f3bc <decodeBeacon>:
// Decoding frames


#if !defined(LMIC_DISABLE_BEACONS)
// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 800f3bc:	b590      	push	{r4, r7, lr}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 800f3c2:	4b48      	ldr	r3, [pc, #288]	; (800f4e4 <decodeBeacon+0x128>)
 800f3c4:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 800f3c8:	2b13      	cmp	r3, #19
 800f3ca:	d004      	beq.n	800f3d6 <decodeBeacon+0x1a>
 800f3cc:	f240 31fd 	movw	r1, #1021	; 0x3fd
 800f3d0:	4845      	ldr	r0, [pc, #276]	; (800f4e8 <decodeBeacon+0x12c>)
 800f3d2:	f003 fa91 	bl	80128f8 <hal_failed>
    uint8_t *d = LMIC.frame;
 800f3d6:	4b45      	ldr	r3, [pc, #276]	; (800f4ec <decodeBeacon+0x130>)
 800f3d8:	607b      	str	r3, [r7, #4]
    if(
#if LMIC_EU686
        d[OFF_BCN_CRC1] != (uint8_t)os_crc16(d,OFF_BCN_CRC1)
#elif LMIC_US915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	3307      	adds	r3, #7
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fe fea7 	bl	800e132 <os_rlsbf2>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	461c      	mov	r4, r3
 800f3e8:	2107      	movs	r1, #7
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7fe ff4f 	bl	800e28e <os_crc16>
 800f3f0:	4603      	mov	r3, r0
    if(
 800f3f2:	429c      	cmp	r4, r3
 800f3f4:	d001      	beq.n	800f3fa <decodeBeacon+0x3e>
#endif
        )
        return 0;   // first (common) part fails CRC check
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	e06f      	b.n	800f4da <decodeBeacon+0x11e>
    // First set of fields is ok
    uint32_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f7fe feae 	bl	800e15c <os_rlsbf4>
 800f400:	4603      	mov	r3, r0
 800f402:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f406:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 800f408:	4b36      	ldr	r3, [pc, #216]	; (800f4e4 <decodeBeacon+0x128>)
 800f40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f40c:	683a      	ldr	r2, [r7, #0]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d002      	beq.n	800f418 <decodeBeacon+0x5c>
        return -1;  // not the beacon we're looking for
 800f412:	f04f 33ff 	mov.w	r3, #4294967295
 800f416:	e060      	b.n	800f4da <decodeBeacon+0x11e>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 800f418:	4b32      	ldr	r3, [pc, #200]	; (800f4e4 <decodeBeacon+0x128>)
 800f41a:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 800f41e:	f023 0303 	bic.w	r3, r3, #3
 800f422:	b2da      	uxtb	r2, r3
 800f424:	4b2f      	ldr	r3, [pc, #188]	; (800f4e4 <decodeBeacon+0x128>)
 800f426:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 800f42a:	4b2e      	ldr	r3, [pc, #184]	; (800f4e4 <decodeBeacon+0x128>)
 800f42c:	f993 200d 	ldrsb.w	r2, [r3, #13]
 800f430:	4b2c      	ldr	r3, [pc, #176]	; (800f4e4 <decodeBeacon+0x128>)
 800f432:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
    LMIC.bcninfo.rssi   = LMIC.rssi;
 800f436:	4b2b      	ldr	r3, [pc, #172]	; (800f4e4 <decodeBeacon+0x128>)
 800f438:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800f43c:	4b29      	ldr	r3, [pc, #164]	; (800f4e4 <decodeBeacon+0x128>)
 800f43e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 800f442:	4b28      	ldr	r3, [pc, #160]	; (800f4e4 <decodeBeacon+0x128>)
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	f6a3 1306 	subw	r3, r3, #2310	; 0x906
 800f44a:	4a26      	ldr	r2, [pc, #152]	; (800f4e4 <decodeBeacon+0x128>)
 800f44c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	3303      	adds	r3, #3
 800f454:	4618      	mov	r0, r3
 800f456:	f7fe fe81 	bl	800e15c <os_rlsbf4>
 800f45a:	4603      	mov	r3, r0
 800f45c:	4a21      	ldr	r2, [pc, #132]	; (800f4e4 <decodeBeacon+0x128>)
 800f45e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 800f462:	4b20      	ldr	r3, [pc, #128]	; (800f4e4 <decodeBeacon+0x128>)
 800f464:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 800f468:	f043 0301 	orr.w	r3, r3, #1
 800f46c:	b2da      	uxtb	r2, r3
 800f46e:	4b1d      	ldr	r3, [pc, #116]	; (800f4e4 <decodeBeacon+0x128>)
 800f470:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	3311      	adds	r3, #17
 800f478:	4618      	mov	r0, r3
 800f47a:	f7fe fe5a 	bl	800e132 <os_rlsbf2>
 800f47e:	4603      	mov	r3, r0
 800f480:	461c      	mov	r4, r3
 800f482:	2111      	movs	r1, #17
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f7fe ff02 	bl	800e28e <os_crc16>
 800f48a:	4603      	mov	r3, r0
 800f48c:	429c      	cmp	r4, r3
 800f48e:	d001      	beq.n	800f494 <decodeBeacon+0xd8>
        return 1;
 800f490:	2301      	movs	r3, #1
 800f492:	e022      	b.n	800f4da <decodeBeacon+0x11e>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (int32_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	3309      	adds	r3, #9
 800f498:	4618      	mov	r0, r3
 800f49a:	f7fe fe5f 	bl	800e15c <os_rlsbf4>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	121b      	asrs	r3, r3, #8
 800f4a2:	4a10      	ldr	r2, [pc, #64]	; (800f4e4 <decodeBeacon+0x128>)
 800f4a4:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
    LMIC.bcninfo.lon    = (int32_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	330c      	adds	r3, #12
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fe fe55 	bl	800e15c <os_rlsbf4>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	121b      	asrs	r3, r3, #8
 800f4b6:	4a0b      	ldr	r2, [pc, #44]	; (800f4e4 <decodeBeacon+0x128>)
 800f4b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	7a5a      	ldrb	r2, [r3, #9]
 800f4c0:	4b08      	ldr	r3, [pc, #32]	; (800f4e4 <decodeBeacon+0x128>)
 800f4c2:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    LMIC.bcninfo.flags |= BCN_FULL;
 800f4c6:	4b07      	ldr	r3, [pc, #28]	; (800f4e4 <decodeBeacon+0x128>)
 800f4c8:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 800f4cc:	f043 0302 	orr.w	r3, r3, #2
 800f4d0:	b2da      	uxtb	r2, r3
 800f4d2:	4b04      	ldr	r3, [pc, #16]	; (800f4e4 <decodeBeacon+0x128>)
 800f4d4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    return 2;
 800f4d8:	2302      	movs	r3, #2
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	370c      	adds	r7, #12
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd90      	pop	{r4, r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20000c04 	.word	0x20000c04
 800f4e8:	08018278 	.word	0x08018278
 800f4ec:	20000ce8 	.word	0x20000ce8

0800f4f0 <decodeFrame>:
#endif // !LMIC_DISABLE_BEACONS


static bool decodeFrame (void) {
 800f4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f4:	b09b      	sub	sp, #108	; 0x6c
 800f4f6:	af02      	add	r7, sp, #8
    uint8_t *d = LMIC.frame;
 800f4f8:	4ba6      	ldr	r3, [pc, #664]	; (800f794 <decodeFrame+0x2a4>)
 800f4fa:	64bb      	str	r3, [r7, #72]	; 0x48
    uint8_t hdr    = d[0];
 800f4fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t ftype  = hdr & HDR_FTYPE;
 800f504:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f508:	f023 031f 	bic.w	r3, r3, #31
 800f50c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    int  dlen   = LMIC.dataLen;
 800f510:	4ba1      	ldr	r3, [pc, #644]	; (800f798 <decodeFrame+0x2a8>)
 800f512:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 800f516:	643b      	str	r3, [r7, #64]	; 0x40
    const char *window = (LMIC.txrxFlags & TXRX_DNW1) ? "RX1" : ((LMIC.txrxFlags & TXRX_DNW2) ? "RX2" : "Other");
 800f518:	4b9f      	ldr	r3, [pc, #636]	; (800f798 <decodeFrame+0x2a8>)
 800f51a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800f51e:	f003 0301 	and.w	r3, r3, #1
 800f522:	2b00      	cmp	r3, #0
 800f524:	d10a      	bne.n	800f53c <decodeFrame+0x4c>
 800f526:	4b9c      	ldr	r3, [pc, #624]	; (800f798 <decodeFrame+0x2a8>)
 800f528:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800f52c:	f003 0302 	and.w	r3, r3, #2
 800f530:	2b00      	cmp	r3, #0
 800f532:	d001      	beq.n	800f538 <decodeFrame+0x48>
 800f534:	4b99      	ldr	r3, [pc, #612]	; (800f79c <decodeFrame+0x2ac>)
 800f536:	e002      	b.n	800f53e <decodeFrame+0x4e>
 800f538:	4b99      	ldr	r3, [pc, #612]	; (800f7a0 <decodeFrame+0x2b0>)
 800f53a:	e000      	b.n	800f53e <decodeFrame+0x4e>
 800f53c:	4b99      	ldr	r3, [pc, #612]	; (800f7a4 <decodeFrame+0x2b4>)
 800f53e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if( dlen < OFF_DAT_OPTS+4 ||
 800f540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f542:	2b0b      	cmp	r3, #11
 800f544:	dd0d      	ble.n	800f562 <decodeFrame+0x72>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 800f546:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f54a:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d107      	bne.n	800f562 <decodeFrame+0x72>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 800f552:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f556:	2b60      	cmp	r3, #96	; 0x60
 800f558:	d01c      	beq.n	800f594 <decodeFrame+0xa4>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 800f55a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f55e:	2ba0      	cmp	r3, #160	; 0xa0
 800f560:	d018      	beq.n	800f594 <decodeFrame+0xa4>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 800f562:	bf00      	nop
 800f564:	e008      	b.n	800f578 <decodeFrame+0x88>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 800f566:	bf00      	nop
 800f568:	e006      	b.n	800f578 <decodeFrame+0x88>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 800f56a:	bf00      	nop
 800f56c:	e004      	b.n	800f578 <decodeFrame+0x88>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 800f56e:	bf00      	nop
 800f570:	e002      	b.n	800f578 <decodeFrame+0x88>
        if( (int32_t)seqno > (int32_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn,
                                e_.info2  = seqno));
            goto norx;
 800f572:	bf00      	nop
 800f574:	e000      	b.n	800f578 <decodeFrame+0x88>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn,
                                e_.info2  = seqno));
            goto norx;
 800f576:	bf00      	nop
        lmic_printf("%lu: Invalid downlink, window=%s\n", os_getTime(), window);
 800f578:	f001 ff46 	bl	8011408 <os_getTime>
 800f57c:	4603      	mov	r3, r0
 800f57e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f580:	4619      	mov	r1, r3
 800f582:	4889      	ldr	r0, [pc, #548]	; (800f7a8 <decodeFrame+0x2b8>)
 800f584:	f002 ff16 	bl	80123b4 <printf>
        LMIC.dataLen = 0;
 800f588:	4b83      	ldr	r3, [pc, #524]	; (800f798 <decodeFrame+0x2a8>)
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
        return 0;
 800f590:	2300      	movs	r3, #0
 800f592:	e34c      	b.n	800fc2e <decodeFrame+0x73e>
    int  fct   = d[OFF_DAT_FCT];
 800f594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f596:	3305      	adds	r3, #5
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 800f59c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f59e:	3301      	adds	r3, #1
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fe fddb 	bl	800e15c <os_rlsbf4>
 800f5a6:	6378      	str	r0, [r7, #52]	; 0x34
    uint32_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 800f5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5aa:	3306      	adds	r3, #6
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7fe fdc0 	bl	800e132 <os_rlsbf2>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	633b      	str	r3, [r7, #48]	; 0x30
    int  olen  = fct & FCT_OPTLEN;
 800f5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b8:	f003 030f 	and.w	r3, r3, #15
 800f5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 800f5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c0:	115b      	asrs	r3, r3, #5
 800f5c2:	f003 0301 	and.w	r3, r3, #1
 800f5c6:	62bb      	str	r3, [r7, #40]	; 0x28
    int  poff  = OFF_DAT_OPTS+olen;
 800f5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ca:	3308      	adds	r3, #8
 800f5cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    int  pend  = dlen-4;  // MIC
 800f5ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5d0:	3b04      	subs	r3, #4
 800f5d2:	627b      	str	r3, [r7, #36]	; 0x24
    if( addr != LMIC.devaddr ) {
 800f5d4:	4b70      	ldr	r3, [pc, #448]	; (800f798 <decodeFrame+0x2a8>)
 800f5d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f5da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d1c2      	bne.n	800f566 <decodeFrame+0x76>
    if( poff > pend ) {
 800f5e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	dcc0      	bgt.n	800f56a <decodeFrame+0x7a>
    int port = -1;
 800f5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ec:	65bb      	str	r3, [r7, #88]	; 0x58
    int replayConf = 0;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	657b      	str	r3, [r7, #84]	; 0x54
    if( pend > poff )
 800f5f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	dd07      	ble.n	800f60a <decodeFrame+0x11a>
        port = d[poff++];
 800f5fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5fc:	1c5a      	adds	r2, r3, #1
 800f5fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f600:	461a      	mov	r2, r3
 800f602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f604:	4413      	add	r3, r2
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	65bb      	str	r3, [r7, #88]	; 0x58
    seqno = LMIC.seqnoDn + (uint16_t)(seqno - LMIC.seqnoDn);
 800f60a:	4b63      	ldr	r3, [pc, #396]	; (800f798 <decodeFrame+0x2a8>)
 800f60c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f612:	b291      	uxth	r1, r2
 800f614:	4a60      	ldr	r2, [pc, #384]	; (800f798 <decodeFrame+0x2a8>)
 800f616:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 800f61a:	b292      	uxth	r2, r2
 800f61c:	1a8a      	subs	r2, r1, r2
 800f61e:	b292      	uxth	r2, r2
 800f620:	4413      	add	r3, r2
 800f622:	633b      	str	r3, [r7, #48]	; 0x30
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 800f624:	4b5c      	ldr	r3, [pc, #368]	; (800f798 <decodeFrame+0x2a8>)
 800f626:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800f62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62c:	9301      	str	r3, [sp, #4]
 800f62e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	2301      	movs	r3, #1
 800f634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f636:	485d      	ldr	r0, [pc, #372]	; (800f7ac <decodeFrame+0x2bc>)
 800f638:	f7fe fe9c 	bl	800e374 <aes_verifyMic>
 800f63c:	4603      	mov	r3, r0
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d095      	beq.n	800f56e <decodeFrame+0x7e>
    if( seqno < LMIC.seqnoDn ) {
 800f642:	4b55      	ldr	r3, [pc, #340]	; (800f798 <decodeFrame+0x2a8>)
 800f644:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d21a      	bcs.n	800f684 <decodeFrame+0x194>
        if( (int32_t)seqno > (int32_t)LMIC.seqnoDn ) {
 800f64e:	4b52      	ldr	r3, [pc, #328]	; (800f798 <decodeFrame+0x2a8>)
 800f650:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f654:	461a      	mov	r2, r3
 800f656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f658:	429a      	cmp	r2, r3
 800f65a:	db8a      	blt.n	800f572 <decodeFrame+0x82>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 800f65c:	4b4e      	ldr	r3, [pc, #312]	; (800f798 <decodeFrame+0x2a8>)
 800f65e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f662:	3b01      	subs	r3, #1
 800f664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f666:	429a      	cmp	r2, r3
 800f668:	d185      	bne.n	800f576 <decodeFrame+0x86>
 800f66a:	4b4b      	ldr	r3, [pc, #300]	; (800f798 <decodeFrame+0x2a8>)
 800f66c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800f670:	2b00      	cmp	r3, #0
 800f672:	d080      	beq.n	800f576 <decodeFrame+0x86>
 800f674:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f678:	2ba0      	cmp	r3, #160	; 0xa0
 800f67a:	f47f af7c 	bne.w	800f576 <decodeFrame+0x86>
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 800f67e:	2301      	movs	r3, #1
 800f680:	657b      	str	r3, [r7, #84]	; 0x54
 800f682:	e00e      	b.n	800f6a2 <decodeFrame+0x1b2>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn,
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 800f684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f686:	3301      	adds	r3, #1
 800f688:	4a43      	ldr	r2, [pc, #268]	; (800f798 <decodeFrame+0x2a8>)
 800f68a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 800f68e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f692:	2ba0      	cmp	r3, #160	; 0xa0
 800f694:	d101      	bne.n	800f69a <decodeFrame+0x1aa>
 800f696:	2220      	movs	r2, #32
 800f698:	e000      	b.n	800f69c <decodeFrame+0x1ac>
 800f69a:	2200      	movs	r2, #0
 800f69c:	4b3e      	ldr	r3, [pc, #248]	; (800f798 <decodeFrame+0x2a8>)
 800f69e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 800f6a2:	4b3d      	ldr	r3, [pc, #244]	; (800f798 <decodeFrame+0x2a8>)
 800f6a4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d104      	bne.n	800f6b6 <decodeFrame+0x1c6>
 800f6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ae:	f003 0310 	and.w	r3, r3, #16
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d008      	beq.n	800f6c8 <decodeFrame+0x1d8>
        LMIC.opmode |= OP_POLL;
 800f6b6:	4b38      	ldr	r3, [pc, #224]	; (800f798 <decodeFrame+0x2a8>)
 800f6b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f6bc:	f043 0310 	orr.w	r3, r3, #16
 800f6c0:	b29a      	uxth	r2, r3
 800f6c2:	4b35      	ldr	r3, [pc, #212]	; (800f798 <decodeFrame+0x2a8>)
 800f6c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 800f6c8:	4b33      	ldr	r3, [pc, #204]	; (800f798 <decodeFrame+0x2a8>)
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800f6d0:	4b31      	ldr	r3, [pc, #196]	; (800f798 <decodeFrame+0x2a8>)
 800f6d2:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800f6d6:	4b30      	ldr	r3, [pc, #192]	; (800f798 <decodeFrame+0x2a8>)
 800f6d8:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 800f6dc:	4b2e      	ldr	r3, [pc, #184]	; (800f798 <decodeFrame+0x2a8>)
 800f6de:	f993 30bd 	ldrsb.w	r3, [r3, #189]	; 0xbd
 800f6e2:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800f6e6:	d003      	beq.n	800f6f0 <decodeFrame+0x200>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 800f6e8:	4b2b      	ldr	r3, [pc, #172]	; (800f798 <decodeFrame+0x2a8>)
 800f6ea:	22f4      	movs	r2, #244	; 0xf4
 800f6ec:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 800f6f0:	4b29      	ldr	r3, [pc, #164]	; (800f798 <decodeFrame+0x2a8>)
 800f6f2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f6f6:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
 800f6fa:	4b27      	ldr	r3, [pc, #156]	; (800f798 <decodeFrame+0x2a8>)
 800f6fc:	89db      	ldrh	r3, [r3, #14]
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fe ff62 	bl	800e5c8 <getSensitivity>
 800f704:	4603      	mov	r3, r0
 800f706:	1af3      	subs	r3, r6, r3
 800f708:	623b      	str	r3, [r7, #32]
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 800f70a:	6a3b      	ldr	r3, [r7, #32]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	db05      	blt.n	800f71c <decodeFrame+0x22c>
 800f710:	6a3b      	ldr	r3, [r7, #32]
 800f712:	2bfe      	cmp	r3, #254	; 0xfe
 800f714:	bfa8      	it	ge
 800f716:	23fe      	movge	r3, #254	; 0xfe
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	e000      	b.n	800f71e <decodeFrame+0x22e>
 800f71c:	2300      	movs	r3, #0
 800f71e:	4a1e      	ldr	r2, [pc, #120]	; (800f798 <decodeFrame+0x2a8>)
 800f720:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0

    uint8_t *opts = &d[OFF_DAT_OPTS];
 800f724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f726:	3308      	adds	r3, #8
 800f728:	61fb      	str	r3, [r7, #28]
    int oidx = 0;
 800f72a:	2300      	movs	r3, #0
 800f72c:	653b      	str	r3, [r7, #80]	; 0x50
    while( oidx < olen ) {
 800f72e:	e206      	b.n	800fb3e <decodeFrame+0x64e>
        switch( opts[oidx] ) {
 800f730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f732:	69fa      	ldr	r2, [r7, #28]
 800f734:	4413      	add	r3, r2
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	3b02      	subs	r3, #2
 800f73a:	2b10      	cmp	r3, #16
 800f73c:	f200 8205 	bhi.w	800fb4a <decodeFrame+0x65a>
 800f740:	a201      	add	r2, pc, #4	; (adr r2, 800f748 <decodeFrame+0x258>)
 800f742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f746:	bf00      	nop
 800f748:	0800f78d 	.word	0x0800f78d
 800f74c:	0800f7b1 	.word	0x0800f7b1
 800f750:	0800f92b 	.word	0x0800f92b
 800f754:	0800f8a9 	.word	0x0800f8a9
 800f758:	0800f899 	.word	0x0800f899
 800f75c:	0800f977 	.word	0x0800f977
 800f760:	0800fb4b 	.word	0x0800fb4b
 800f764:	0800fb4b 	.word	0x0800fb4b
 800f768:	0800fb4b 	.word	0x0800fb4b
 800f76c:	0800fb4b 	.word	0x0800fb4b
 800f770:	0800fb4b 	.word	0x0800fb4b
 800f774:	0800fb4b 	.word	0x0800fb4b
 800f778:	0800fb4b 	.word	0x0800fb4b
 800f77c:	0800fb4b 	.word	0x0800fb4b
 800f780:	0800fb4b 	.word	0x0800fb4b
 800f784:	0800fa03 	.word	0x0800fa03
 800f788:	0800fa49 	.word	0x0800fa49
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 800f78c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f78e:	3303      	adds	r3, #3
 800f790:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 800f792:	e1d4      	b.n	800fb3e <decodeFrame+0x64e>
 800f794:	20000ce8 	.word	0x20000ce8
 800f798:	20000c04 	.word	0x20000c04
 800f79c:	08018288 	.word	0x08018288
 800f7a0:	0801828c 	.word	0x0801828c
 800f7a4:	08018294 	.word	0x08018294
 800f7a8:	08018298 	.word	0x08018298
 800f7ac:	20000c92 	.word	0x20000c92
        }
        case MCMD_LADR_REQ: {
            uint8_t p1     = opts[oidx+1];            // txpow + DR
 800f7b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	69fa      	ldr	r2, [r7, #28]
 800f7b6:	4413      	add	r3, r2
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	71bb      	strb	r3, [r7, #6]
            uint16_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 800f7bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7be:	3302      	adds	r3, #2
 800f7c0:	69fa      	ldr	r2, [r7, #28]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7fe fcb4 	bl	800e132 <os_rlsbf2>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	80bb      	strh	r3, [r7, #4]
            uint8_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 800f7ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	69fa      	ldr	r2, [r7, #28]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	f023 030f 	bic.w	r3, r3, #15
 800f7dc:	70fb      	strb	r3, [r7, #3]
            uint8_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 800f7de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7e0:	3304      	adds	r3, #4
 800f7e2:	69fa      	ldr	r2, [r7, #28]
 800f7e4:	4413      	add	r3, r2
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	f003 030f 	and.w	r3, r3, #15
 800f7ec:	70bb      	strb	r3, [r7, #2]
            oidx += 5;
 800f7ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7f0:	3305      	adds	r3, #5
 800f7f2:	653b      	str	r3, [r7, #80]	; 0x50

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 800f7f4:	4b93      	ldr	r3, [pc, #588]	; (800fa44 <decodeFrame+0x554>)
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 800f7fc:	88ba      	ldrh	r2, [r7, #4]
 800f7fe:	78fb      	ldrb	r3, [r7, #3]
 800f800:	4611      	mov	r1, r2
 800f802:	4618      	mov	r0, r3
 800f804:	f7ff fb8c 	bl	800ef20 <mapChannels>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d10c      	bne.n	800f828 <decodeFrame+0x338>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 800f80e:	4b8d      	ldr	r3, [pc, #564]	; (800fa44 <decodeFrame+0x554>)
 800f810:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800f814:	f023 0301 	bic.w	r3, r3, #1
 800f818:	2b00      	cmp	r3, #0
 800f81a:	bf14      	ite	ne
 800f81c:	2301      	movne	r3, #1
 800f81e:	2300      	moveq	r3, #0
 800f820:	b2da      	uxtb	r2, r3
 800f822:	4b88      	ldr	r3, [pc, #544]	; (800fa44 <decodeFrame+0x554>)
 800f824:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 800f828:	79bb      	ldrb	r3, [r7, #6]
 800f82a:	091b      	lsrs	r3, r3, #4
 800f82c:	707b      	strb	r3, [r7, #1]
            if( !validDR(dr) ) {
 800f82e:	787b      	ldrb	r3, [r7, #1]
 800f830:	4618      	mov	r0, r3
 800f832:	f7fe fc4d 	bl	800e0d0 <validDR>
 800f836:	4603      	mov	r3, r0
 800f838:	f083 0301 	eor.w	r3, r3, #1
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00c      	beq.n	800f85c <decodeFrame+0x36c>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 800f842:	4b80      	ldr	r3, [pc, #512]	; (800fa44 <decodeFrame+0x554>)
 800f844:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800f848:	f023 0302 	bic.w	r3, r3, #2
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	bf14      	ite	ne
 800f850:	2301      	movne	r3, #1
 800f852:	2300      	moveq	r3, #0
 800f854:	b2da      	uxtb	r2, r3
 800f856:	4b7b      	ldr	r3, [pc, #492]	; (800fa44 <decodeFrame+0x554>)
 800f858:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 800f85c:	4b79      	ldr	r3, [pc, #484]	; (800fa44 <decodeFrame+0x554>)
 800f85e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800f862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f866:	2b07      	cmp	r3, #7
 800f868:	d111      	bne.n	800f88e <decodeFrame+0x39e>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 800f86a:	4a76      	ldr	r2, [pc, #472]	; (800fa44 <decodeFrame+0x554>)
 800f86c:	78bb      	ldrb	r3, [r7, #2]
 800f86e:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 800f872:	79bb      	ldrb	r3, [r7, #6]
 800f874:	005b      	lsls	r3, r3, #1
 800f876:	b2db      	uxtb	r3, r3
 800f878:	43db      	mvns	r3, r3
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	b25b      	sxtb	r3, r3
 800f87e:	f003 031e 	and.w	r3, r3, #30
 800f882:	b25a      	sxtb	r2, r3
 800f884:	787b      	ldrb	r3, [r7, #1]
 800f886:	4619      	mov	r1, r3
 800f888:	2004      	movs	r0, #4
 800f88a:	f7ff f9b1 	bl	800ebf0 <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 800f88e:	4b6d      	ldr	r3, [pc, #436]	; (800fa44 <decodeFrame+0x554>)
 800f890:	2201      	movs	r2, #1
 800f892:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
            continue;
 800f896:	e152      	b.n	800fb3e <decodeFrame+0x64e>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 800f898:	4b6a      	ldr	r3, [pc, #424]	; (800fa44 <decodeFrame+0x554>)
 800f89a:	2201      	movs	r2, #1
 800f89c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
            oidx += 1;
 800f8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 800f8a6:	e14a      	b.n	800fb3e <decodeFrame+0x64e>
        }
        case MCMD_DN2P_SET: {
#if !defined(LMIC_DISABLE_MCMD_DN2P_SET)
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 800f8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	69fa      	ldr	r2, [r7, #28]
 800f8ae:	4413      	add	r3, r2
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	f003 030f 	and.w	r3, r3, #15
 800f8b6:	73bb      	strb	r3, [r7, #14]
            uint32_t freq = convFreq(&opts[oidx+2]);
 800f8b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ba:	3302      	adds	r3, #2
 800f8bc:	69fa      	ldr	r2, [r7, #28]
 800f8be:	4413      	add	r3, r2
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7ff f9e3 	bl	800ec8c <convFreq>
 800f8c6:	60b8      	str	r0, [r7, #8]
            LMIC.dn2Ans = 0x80;   // answer pending
 800f8c8:	4b5e      	ldr	r3, [pc, #376]	; (800fa44 <decodeFrame+0x554>)
 800f8ca:	2280      	movs	r2, #128	; 0x80
 800f8cc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            if( validDR(dr) )
 800f8d0:	7bbb      	ldrb	r3, [r7, #14]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fe fbfc 	bl	800e0d0 <validDR>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d008      	beq.n	800f8f0 <decodeFrame+0x400>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 800f8de:	4b59      	ldr	r3, [pc, #356]	; (800fa44 <decodeFrame+0x554>)
 800f8e0:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f8e4:	f043 0302 	orr.w	r3, r3, #2
 800f8e8:	b2da      	uxtb	r2, r3
 800f8ea:	4b56      	ldr	r3, [pc, #344]	; (800fa44 <decodeFrame+0x554>)
 800f8ec:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            if( freq != 0 )
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d008      	beq.n	800f908 <decodeFrame+0x418>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 800f8f6:	4b53      	ldr	r3, [pc, #332]	; (800fa44 <decodeFrame+0x554>)
 800f8f8:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f8fc:	f043 0301 	orr.w	r3, r3, #1
 800f900:	b2da      	uxtb	r2, r3
 800f902:	4b50      	ldr	r3, [pc, #320]	; (800fa44 <decodeFrame+0x554>)
 800f904:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 800f908:	4b4e      	ldr	r3, [pc, #312]	; (800fa44 <decodeFrame+0x554>)
 800f90a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f90e:	2b83      	cmp	r3, #131	; 0x83
 800f910:	d107      	bne.n	800f922 <decodeFrame+0x432>
                LMIC.dn2Dr = dr;
 800f912:	4a4c      	ldr	r2, [pc, #304]	; (800fa44 <decodeFrame+0x554>)
 800f914:	7bbb      	ldrb	r3, [r7, #14]
 800f916:	f882 30c7 	strb.w	r3, [r2, #199]	; 0xc7
                LMIC.dn2Freq = freq;
 800f91a:	4a4a      	ldr	r2, [pc, #296]	; (800fa44 <decodeFrame+0x554>)
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
#endif // !LMIC_DISABLE_MCMD_DN2P_SET
            oidx += 5;
 800f922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f924:	3305      	adds	r3, #5
 800f926:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 800f928:	e109      	b.n	800fb3e <decodeFrame+0x64e>
        }
        case MCMD_DCAP_REQ: {
#if !defined(LMIC_DISABLE_MCMD_DCAP_REQ)
            uint8_t cap = opts[oidx+1];
 800f92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f92c:	3301      	adds	r3, #1
 800f92e:	69fa      	ldr	r2, [r7, #28]
 800f930:	4413      	add	r3, r2
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	71fb      	strb	r3, [r7, #7]
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	2bff      	cmp	r3, #255	; 0xff
 800f93a:	d108      	bne.n	800f94e <decodeFrame+0x45e>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 800f93c:	4b41      	ldr	r3, [pc, #260]	; (800fa44 <decodeFrame+0x554>)
 800f93e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f946:	b29a      	uxth	r2, r3
 800f948:	4b3e      	ldr	r3, [pc, #248]	; (800fa44 <decodeFrame+0x554>)
 800f94a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
            LMIC.globalDutyRate  = cap & 0xF;
 800f94e:	79fb      	ldrb	r3, [r7, #7]
 800f950:	f003 030f 	and.w	r3, r3, #15
 800f954:	b2da      	uxtb	r2, r3
 800f956:	4b3b      	ldr	r3, [pc, #236]	; (800fa44 <decodeFrame+0x554>)
 800f958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            LMIC.globalDutyAvail = os_getTime();
 800f95c:	f001 fd54 	bl	8011408 <os_getTime>
 800f960:	4603      	mov	r3, r0
 800f962:	4a38      	ldr	r2, [pc, #224]	; (800fa44 <decodeFrame+0x554>)
 800f964:	63d3      	str	r3, [r2, #60]	; 0x3c
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 800f966:	4b37      	ldr	r3, [pc, #220]	; (800fa44 <decodeFrame+0x554>)
 800f968:	2201      	movs	r2, #1
 800f96a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            oidx += 2;
 800f96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f970:	3302      	adds	r3, #2
 800f972:	653b      	str	r3, [r7, #80]	; 0x50
#endif // !LMIC_DISABLE_MCMD_DCAP_REQ
            continue;
 800f974:	e0e3      	b.n	800fb3e <decodeFrame+0x64e>
        }
        case MCMD_SNCH_REQ: {
#if !defined(LMIC_DISABLE_MCMD_SNCH_REQ)
            uint8_t chidx = opts[oidx+1];  // channel
 800f976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f978:	3301      	adds	r3, #1
 800f97a:	69fa      	ldr	r2, [r7, #28]
 800f97c:	4413      	add	r3, r2
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	75fb      	strb	r3, [r7, #23]
            uint32_t freq  = convFreq(&opts[oidx+2]); // freq
 800f982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f984:	3302      	adds	r3, #2
 800f986:	69fa      	ldr	r2, [r7, #28]
 800f988:	4413      	add	r3, r2
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7ff f97e 	bl	800ec8c <convFreq>
 800f990:	6138      	str	r0, [r7, #16]
            uint8_t drs   = opts[oidx+5];  // datarate span
 800f992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f994:	3305      	adds	r3, #5
 800f996:	69fa      	ldr	r2, [r7, #28]
 800f998:	4413      	add	r3, r2
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	73fb      	strb	r3, [r7, #15]
            LMIC.snchAns = 0x80;
 800f99e:	4b29      	ldr	r3, [pc, #164]	; (800fa44 <decodeFrame+0x554>)
 800f9a0:	2280      	movs	r2, #128	; 0x80
 800f9a2:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d026      	beq.n	800f9fa <decodeFrame+0x50a>
 800f9ac:	7bfb      	ldrb	r3, [r7, #15]
 800f9ae:	f003 030f 	and.w	r3, r3, #15
 800f9b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9b6:	fa02 f303 	lsl.w	r3, r2, r3
 800f9ba:	b21a      	sxth	r2, r3
 800f9bc:	7bfb      	ldrb	r3, [r7, #15]
 800f9be:	091b      	lsrs	r3, r3, #4
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	f1c3 030f 	rsb	r3, r3, #15
 800f9c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f9ca:	fa41 f303 	asr.w	r3, r1, r3
 800f9ce:	b21b      	sxth	r3, r3
 800f9d0:	4013      	ands	r3, r2
 800f9d2:	b21b      	sxth	r3, r3
 800f9d4:	b29a      	uxth	r2, r3
 800f9d6:	7df8      	ldrb	r0, [r7, #23]
 800f9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f9dc:	6939      	ldr	r1, [r7, #16]
 800f9de:	f7ff f977 	bl	800ecd0 <LMIC_setupChannel>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d008      	beq.n	800f9fa <decodeFrame+0x50a>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 800f9e8:	4b16      	ldr	r3, [pc, #88]	; (800fa44 <decodeFrame+0x554>)
 800f9ea:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800f9ee:	f043 0303 	orr.w	r3, r3, #3
 800f9f2:	b2da      	uxtb	r2, r3
 800f9f4:	4b13      	ldr	r3, [pc, #76]	; (800fa44 <decodeFrame+0x554>)
 800f9f6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
#endif // !LMIC_DISABLE_MCMD_SNCH_REQ
            oidx += 6;
 800f9fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9fc:	3306      	adds	r3, #6
 800f9fe:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 800fa00:	e09d      	b.n	800fb3e <decodeFrame+0x64e>
        }
        case MCMD_PING_SET: {
#if !defined(LMIC_DISABLE_MCMD_PING_SET) && !defined(LMIC_DISABLE_PING)
            uint32_t freq = convFreq(&opts[oidx+1]);
 800fa02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa04:	3301      	adds	r3, #1
 800fa06:	69fa      	ldr	r2, [r7, #28]
 800fa08:	4413      	add	r3, r2
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7ff f93e 	bl	800ec8c <convFreq>
 800fa10:	61b8      	str	r0, [r7, #24]
            uint8_t flags = 0x80;
 800fa12:	2380      	movs	r3, #128	; 0x80
 800fa14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if( freq != 0 ) {
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d009      	beq.n	800fa32 <decodeFrame+0x542>
                flags |= MCMD_PING_ANS_FQACK;
 800fa1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa22:	f043 0301 	orr.w	r3, r3, #1
 800fa26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                LMIC.ping.freq = freq;
 800fa2a:	4a06      	ldr	r2, [pc, #24]	; (800fa44 <decodeFrame+0x554>)
 800fa2c:	69bb      	ldr	r3, [r7, #24]
 800fa2e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 800fa32:	4a04      	ldr	r2, [pc, #16]	; (800fa44 <decodeFrame+0x554>)
 800fa34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa38:	f882 30cf 	strb.w	r3, [r2, #207]	; 0xcf
#endif // !LMIC_DISABLE_MCMD_PING_SET && !LMIC_DISABLE_PING
            oidx += 4;
 800fa3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa3e:	3304      	adds	r3, #4
 800fa40:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 800fa42:	e07c      	b.n	800fb3e <decodeFrame+0x64e>
 800fa44:	20000c04 	.word	0x20000c04
        }
        case MCMD_BCNI_ANS: {
#if !defined(LMIC_DISABLE_MCMD_BCNI_ANS) && !defined(LMIC_DISABLE_BEACONS)
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 800fa48:	4b7b      	ldr	r3, [pc, #492]	; (800fc38 <decodeFrame+0x748>)
 800fa4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800fa4e:	f003 0302 	and.w	r3, r3, #2
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d16f      	bne.n	800fb36 <decodeFrame+0x646>
                LMIC.bcnChnl = opts[oidx+3];
 800fa56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa58:	3303      	adds	r3, #3
 800fa5a:	69fa      	ldr	r2, [r7, #28]
 800fa5c:	4413      	add	r3, r2
 800fa5e:	781a      	ldrb	r2, [r3, #0]
 800fa60:	4b75      	ldr	r3, [pc, #468]	; (800fc38 <decodeFrame+0x748>)
 800fa62:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 800fa66:	4b74      	ldr	r3, [pc, #464]	; (800fc38 <decodeFrame+0x748>)
 800fa68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800fa6c:	f043 0302 	orr.w	r3, r3, #2
 800fa70:	b29a      	uxth	r2, r3
 800fa72:	4b71      	ldr	r3, [pc, #452]	; (800fc38 <decodeFrame+0x748>)
 800fa74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 800fa78:	4b6f      	ldr	r3, [pc, #444]	; (800fc38 <decodeFrame+0x748>)
 800fa7a:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d104      	bne.n	800fa8c <decodeFrame+0x59c>
 800fa82:	f240 41f9 	movw	r1, #1273	; 0x4f9
 800fa86:	486d      	ldr	r0, [pc, #436]	; (800fc3c <decodeFrame+0x74c>)
 800fa88:	f002 ff36 	bl	80128f8 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 800fa8c:	4b6a      	ldr	r3, [pc, #424]	; (800fc38 <decodeFrame+0x748>)
 800fa8e:	685e      	ldr	r6, [r3, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 800fa90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa92:	3301      	adds	r3, #1
 800fa94:	69fa      	ldr	r2, [r7, #28]
 800fa96:	4413      	add	r3, r2
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7fe fb4a 	bl	800e132 <os_rlsbf2>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	461a      	mov	r2, r3
 800faa2:	4613      	mov	r3, r2
 800faa4:	011b      	lsls	r3, r3, #4
 800faa6:	1a9b      	subs	r3, r3, r2
 800faa8:	005b      	lsls	r3, r3, #1
 800faaa:	17da      	asrs	r2, r3, #31
 800faac:	4698      	mov	r8, r3
 800faae:	4691      	mov	r9, r2
 800fab0:	4642      	mov	r2, r8
 800fab2:	464b      	mov	r3, r9
 800fab4:	f04f 0000 	mov.w	r0, #0
 800fab8:	f04f 0100 	mov.w	r1, #0
 800fabc:	0159      	lsls	r1, r3, #5
 800fabe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fac2:	0150      	lsls	r0, r2, #5
 800fac4:	4602      	mov	r2, r0
 800fac6:	460b      	mov	r3, r1
 800fac8:	ebb2 0408 	subs.w	r4, r2, r8
 800facc:	eb63 0509 	sbc.w	r5, r3, r9
 800fad0:	f04f 0200 	mov.w	r2, #0
 800fad4:	f04f 0300 	mov.w	r3, #0
 800fad8:	00ab      	lsls	r3, r5, #2
 800fada:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800fade:	00a2      	lsls	r2, r4, #2
 800fae0:	4614      	mov	r4, r2
 800fae2:	461d      	mov	r5, r3
 800fae4:	eb14 0a08 	adds.w	sl, r4, r8
 800fae8:	eb45 0b09 	adc.w	fp, r5, r9
 800faec:	f04f 0200 	mov.w	r2, #0
 800faf0:	f04f 0300 	mov.w	r3, #0
 800faf4:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800faf8:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800fafc:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800fb00:	4692      	mov	sl, r2
 800fb02:	469b      	mov	fp, r3
 800fb04:	4650      	mov	r0, sl
 800fb06:	4659      	mov	r1, fp
 800fb08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fb0c:	f04f 0300 	mov.w	r3, #0
 800fb10:	f7f1 f8c2 	bl	8000c98 <__aeabi_uldivmod>
 800fb14:	4602      	mov	r2, r0
 800fb16:	460b      	mov	r3, r1
 800fb18:	4613      	mov	r3, r2
 800fb1a:	18f2      	adds	r2, r6, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 800fb1c:	4b48      	ldr	r3, [pc, #288]	; (800fc40 <decodeFrame+0x750>)
 800fb1e:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 800fb20:	4a45      	ldr	r2, [pc, #276]	; (800fc38 <decodeFrame+0x748>)
 800fb22:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 800fb26:	4b44      	ldr	r3, [pc, #272]	; (800fc38 <decodeFrame+0x748>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms
 800fb2e:	2101      	movs	r1, #1
 800fb30:	201e      	movs	r0, #30
 800fb32:	f7fe fe5f 	bl	800e7f4 <calcBcnRxWindowFromMillis>
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
#endif // !LMIC_DISABLE_MCMD_BCNI_ANS && !LMIC_DISABLE_BEACONS
            oidx += 4;
 800fb36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb38:	3304      	adds	r3, #4
 800fb3a:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 800fb3c:	bf00      	nop
    while( oidx < olen ) {
 800fb3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb42:	429a      	cmp	r2, r3
 800fb44:	f6ff adf4 	blt.w	800f730 <decodeFrame+0x240>
 800fb48:	e000      	b.n	800fb4c <decodeFrame+0x65c>
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 800fb4a:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 800fb4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d11d      	bne.n	800fb8e <decodeFrame+0x69e>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 800fb52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	db1a      	blt.n	800fb8e <decodeFrame+0x69e>
 800fb58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb5c:	1ad3      	subs	r3, r2, r3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	dd15      	ble.n	800fb8e <decodeFrame+0x69e>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 800fb62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	dc01      	bgt.n	800fb6c <decodeFrame+0x67c>
 800fb68:	4836      	ldr	r0, [pc, #216]	; (800fc44 <decodeFrame+0x754>)
 800fb6a:	e000      	b.n	800fb6e <decodeFrame+0x67e>
 800fb6c:	4836      	ldr	r0, [pc, #216]	; (800fc48 <decodeFrame+0x758>)
 800fb6e:	4b32      	ldr	r3, [pc, #200]	; (800fc38 <decodeFrame+0x748>)
 800fb70:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 800fb74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb78:	4413      	add	r3, r2
 800fb7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fb7e:	1a8a      	subs	r2, r1, r2
 800fb80:	9201      	str	r2, [sp, #4]
 800fb82:	9300      	str	r3, [sp, #0]
 800fb84:	2301      	movs	r3, #1
 800fb86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb88:	4621      	mov	r1, r4
 800fb8a:	f7fe fc9d 	bl	800e4c8 <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 800fb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb90:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 800fb92:	4b29      	ldr	r3, [pc, #164]	; (800fc38 <decodeFrame+0x748>)
 800fb94:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d010      	beq.n	800fbbe <decodeFrame+0x6ce>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 800fb9c:	4b26      	ldr	r3, [pc, #152]	; (800fc38 <decodeFrame+0x748>)
 800fb9e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800fba2:	b25b      	sxtb	r3, r3
 800fba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fba6:	2a00      	cmp	r2, #0
 800fba8:	d002      	beq.n	800fbb0 <decodeFrame+0x6c0>
 800fbaa:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800fbae:	e000      	b.n	800fbb2 <decodeFrame+0x6c2>
 800fbb0:	2240      	movs	r2, #64	; 0x40
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	b25b      	sxtb	r3, r3
 800fbb6:	b2da      	uxtb	r2, r3
 800fbb8:	4b1f      	ldr	r3, [pc, #124]	; (800fc38 <decodeFrame+0x748>)
 800fbba:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

    if( port < 0 ) {
 800fbbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	da12      	bge.n	800fbea <decodeFrame+0x6fa>
        LMIC.txrxFlags |= TXRX_NOPORT;
 800fbc4:	4b1c      	ldr	r3, [pc, #112]	; (800fc38 <decodeFrame+0x748>)
 800fbc6:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800fbca:	f043 0320 	orr.w	r3, r3, #32
 800fbce:	b2da      	uxtb	r2, r3
 800fbd0:	4b19      	ldr	r3, [pc, #100]	; (800fc38 <decodeFrame+0x748>)
 800fbd2:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
        LMIC.dataBeg = poff;
 800fbd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbd8:	b2da      	uxtb	r2, r3
 800fbda:	4b17      	ldr	r3, [pc, #92]	; (800fc38 <decodeFrame+0x748>)
 800fbdc:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
        LMIC.dataLen = 0;
 800fbe0:	4b15      	ldr	r3, [pc, #84]	; (800fc38 <decodeFrame+0x748>)
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 800fbe8:	e016      	b.n	800fc18 <decodeFrame+0x728>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 800fbea:	4b13      	ldr	r3, [pc, #76]	; (800fc38 <decodeFrame+0x748>)
 800fbec:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800fbf0:	f043 0310 	orr.w	r3, r3, #16
 800fbf4:	b2da      	uxtb	r2, r3
 800fbf6:	4b10      	ldr	r3, [pc, #64]	; (800fc38 <decodeFrame+0x748>)
 800fbf8:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
        LMIC.dataBeg = poff;
 800fbfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbfe:	b2da      	uxtb	r2, r3
 800fc00:	4b0d      	ldr	r3, [pc, #52]	; (800fc38 <decodeFrame+0x748>)
 800fc02:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
        LMIC.dataLen = pend-poff;
 800fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc08:	b2da      	uxtb	r2, r3
 800fc0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc0c:	b2db      	uxtb	r3, r3
 800fc0e:	1ad3      	subs	r3, r2, r3
 800fc10:	b2da      	uxtb	r2, r3
 800fc12:	4b09      	ldr	r3, [pc, #36]	; (800fc38 <decodeFrame+0x748>)
 800fc14:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
    }
#if LMIC_DEBUG_LEVEL > 0
    lmic_printf("%lu: Received downlink, window=%s, port=%d, ack=%d\n", os_getTime(), window, port, ackup);
 800fc18:	f001 fbf6 	bl	8011408 <os_getTime>
 800fc1c:	4601      	mov	r1, r0
 800fc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc20:	9300      	str	r3, [sp, #0]
 800fc22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc26:	4809      	ldr	r0, [pc, #36]	; (800fc4c <decodeFrame+0x75c>)
 800fc28:	f002 fbc4 	bl	80123b4 <printf>
#endif
    return 1;
 800fc2c:	2301      	movs	r3, #1
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3764      	adds	r7, #100	; 0x64
 800fc32:	46bd      	mov	sp, r7
 800fc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc38:	20000c04 	.word	0x20000c04
 800fc3c:	08018278 	.word	0x08018278
 800fc40:	ffc181e0 	.word	0xffc181e0
 800fc44:	20000c92 	.word	0x20000c92
 800fc48:	20000ca2 	.word	0x20000ca2
 800fc4c:	080182bc 	.word	0x080182bc

0800fc50 <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 800fc50:	b580      	push	{r7, lr}
 800fc52:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 800fc54:	4b0d      	ldr	r3, [pc, #52]	; (800fc8c <setupRx2+0x3c>)
 800fc56:	2202      	movs	r2, #2
 800fc58:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 800fc5c:	4b0b      	ldr	r3, [pc, #44]	; (800fc8c <setupRx2+0x3c>)
 800fc5e:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fe fa08 	bl	800e078 <dndr2rps>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	4b07      	ldr	r3, [pc, #28]	; (800fc8c <setupRx2+0x3c>)
 800fc6e:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 800fc70:	4b06      	ldr	r3, [pc, #24]	; (800fc8c <setupRx2+0x3c>)
 800fc72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800fc76:	4a05      	ldr	r2, [pc, #20]	; (800fc8c <setupRx2+0x3c>)
 800fc78:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 800fc7a:	4b04      	ldr	r3, [pc, #16]	; (800fc8c <setupRx2+0x3c>)
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
    os_radio(RADIO_RX);
 800fc82:	2002      	movs	r0, #2
 800fc84:	f002 fb6a 	bl	801235c <os_radio>
}
 800fc88:	bf00      	nop
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	20000c04 	.word	0x20000c04

0800fc90 <schedRx12>:


static void schedRx12 (ostime_t delay, osjobcb_t func, uint8_t dr) {
 800fc90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fc94:	b088      	sub	sp, #32
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6178      	str	r0, [r7, #20]
 800fc9a:	6139      	str	r1, [r7, #16]
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	73fb      	strb	r3, [r7, #15]
    ostime_t hsym = dr2hsym(dr);
 800fca0:	7bfb      	ldrb	r3, [r7, #15]
 800fca2:	f003 0307 	and.w	r3, r3, #7
 800fca6:	4619      	mov	r1, r3
 800fca8:	4837      	ldr	r0, [pc, #220]	; (800fd88 <schedRx12+0xf8>)
 800fcaa:	f7fd fb7c 	bl	800d3a6 <table_get_ostime>
 800fcae:	61f8      	str	r0, [r7, #28]

    LMIC.rxsyms = MINRX_SYMS;
 800fcb0:	4b36      	ldr	r3, [pc, #216]	; (800fd8c <schedRx12+0xfc>)
 800fcb2:	2205      	movs	r2, #5
 800fcb4:	741a      	strb	r2, [r3, #16]

    // If a clock error is specified, compensate for it by extending the
    // receive window
    if (LMIC.clockError != 0) {
 800fcb6:	4b35      	ldr	r3, [pc, #212]	; (800fd8c <schedRx12+0xfc>)
 800fcb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d046      	beq.n	800fd4e <schedRx12+0xbe>
        // Calculate how much the clock will drift maximally after delay has
        // passed. This indicates the amount of time we can be early
        // _or_ late.
        ostime_t drift = (int64_t)delay * LMIC.clockError / MAX_CLOCK_ERROR;
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	469a      	mov	sl, r3
 800fcc6:	4693      	mov	fp, r2
 800fcc8:	4b30      	ldr	r3, [pc, #192]	; (800fd8c <schedRx12+0xfc>)
 800fcca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	4698      	mov	r8, r3
 800fcd4:	4691      	mov	r9, r2
 800fcd6:	fb08 f20b 	mul.w	r2, r8, fp
 800fcda:	fb0a f309 	mul.w	r3, sl, r9
 800fcde:	4413      	add	r3, r2
 800fce0:	fbaa 4508 	umull	r4, r5, sl, r8
 800fce4:	442b      	add	r3, r5
 800fce6:	461d      	mov	r5, r3
 800fce8:	4622      	mov	r2, r4
 800fcea:	462b      	mov	r3, r5
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	da08      	bge.n	800fd02 <schedRx12+0x72>
 800fcf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fcf4:	1851      	adds	r1, r2, r1
 800fcf6:	6039      	str	r1, [r7, #0]
 800fcf8:	f143 0300 	adc.w	r3, r3, #0
 800fcfc:	607b      	str	r3, [r7, #4]
 800fcfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd02:	f04f 0000 	mov.w	r0, #0
 800fd06:	f04f 0100 	mov.w	r1, #0
 800fd0a:	0c10      	lsrs	r0, r2, #16
 800fd0c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800fd10:	1419      	asrs	r1, r3, #16
 800fd12:	4602      	mov	r2, r0
 800fd14:	460b      	mov	r3, r1
 800fd16:	4613      	mov	r3, r2
 800fd18:	61bb      	str	r3, [r7, #24]
        // compensate for a slow or a fast clock).
        // decrease the rxtime to compensate for. Note that hsym is a
        // *half* symbol time, so the factor 2 is hidden. First check if
        // this would overflow (which can happen if the drift is very
        // high, or the symbol time is low at high datarates).
        if ((255 - LMIC.rxsyms) * hsym < drift)
 800fd1a:	4b1c      	ldr	r3, [pc, #112]	; (800fd8c <schedRx12+0xfc>)
 800fd1c:	7c1b      	ldrb	r3, [r3, #16]
 800fd1e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800fd22:	461a      	mov	r2, r3
 800fd24:	69fb      	ldr	r3, [r7, #28]
 800fd26:	fb02 f303 	mul.w	r3, r2, r3
 800fd2a:	69ba      	ldr	r2, [r7, #24]
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d903      	bls.n	800fd38 <schedRx12+0xa8>
            LMIC.rxsyms = 255;
 800fd30:	4b16      	ldr	r3, [pc, #88]	; (800fd8c <schedRx12+0xfc>)
 800fd32:	22ff      	movs	r2, #255	; 0xff
 800fd34:	741a      	strb	r2, [r3, #16]
 800fd36:	e00a      	b.n	800fd4e <schedRx12+0xbe>
        else
            LMIC.rxsyms += drift / hsym;
 800fd38:	4b14      	ldr	r3, [pc, #80]	; (800fd8c <schedRx12+0xfc>)
 800fd3a:	7c1a      	ldrb	r2, [r3, #16]
 800fd3c:	69b9      	ldr	r1, [r7, #24]
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	fbb1 f3f3 	udiv	r3, r1, r3
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	4413      	add	r3, r2
 800fd48:	b2da      	uxtb	r2, r3
 800fd4a:	4b10      	ldr	r3, [pc, #64]	; (800fd8c <schedRx12+0xfc>)
 800fd4c:	741a      	strb	r2, [r3, #16]

    }

    // Center the receive window on the center of the expected preamble
    // (again note that hsym is half a sumbol time, so no /2 needed)
    LMIC.rxtime = LMIC.txend + delay + PAMBL_SYMS * hsym - LMIC.rxsyms * hsym;
 800fd4e:	4b0f      	ldr	r3, [pc, #60]	; (800fd8c <schedRx12+0xfc>)
 800fd50:	681a      	ldr	r2, [r3, #0]
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	441a      	add	r2, r3
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	00db      	lsls	r3, r3, #3
 800fd5a:	441a      	add	r2, r3
 800fd5c:	4b0b      	ldr	r3, [pc, #44]	; (800fd8c <schedRx12+0xfc>)
 800fd5e:	7c1b      	ldrb	r3, [r3, #16]
 800fd60:	4619      	mov	r1, r3
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	fb01 f303 	mul.w	r3, r1, r3
 800fd68:	1ad3      	subs	r3, r2, r3
 800fd6a:	4a08      	ldr	r2, [pc, #32]	; (800fd8c <schedRx12+0xfc>)
 800fd6c:	6053      	str	r3, [r2, #4]

    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 800fd6e:	4b07      	ldr	r3, [pc, #28]	; (800fd8c <schedRx12+0xfc>)
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	3b40      	subs	r3, #64	; 0x40
 800fd74:	693a      	ldr	r2, [r7, #16]
 800fd76:	4619      	mov	r1, r3
 800fd78:	4805      	ldr	r0, [pc, #20]	; (800fd90 <schedRx12+0x100>)
 800fd7a:	f001 fbcb 	bl	8011514 <os_setTimedCallback>
}
 800fd7e:	bf00      	nop
 800fd80:	3720      	adds	r7, #32
 800fd82:	46bd      	mov	sp, r7
 800fd84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fd88:	080198ac 	.word	0x080198ac
 800fd8c:	20000c04 	.word	0x20000c04
 800fd90:	20000c18 	.word	0x20000c18

0800fd94 <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 800fd9c:	4b0d      	ldr	r3, [pc, #52]	; (800fdd4 <setupRx1+0x40>)
 800fd9e:	2201      	movs	r2, #1
 800fda0:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 800fda4:	4b0b      	ldr	r3, [pc, #44]	; (800fdd4 <setupRx1+0x40>)
 800fda6:	89db      	ldrh	r3, [r3, #14]
 800fda8:	2101      	movs	r1, #1
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7fe f913 	bl	800dfd6 <setNocrc>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	4b07      	ldr	r3, [pc, #28]	; (800fdd4 <setupRx1+0x40>)
 800fdb6:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 800fdb8:	4b06      	ldr	r3, [pc, #24]	; (800fdd4 <setupRx1+0x40>)
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
    LMIC.osjob.func = func;
 800fdc0:	4a04      	ldr	r2, [pc, #16]	; (800fdd4 <setupRx1+0x40>)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 800fdc6:	2002      	movs	r0, #2
 800fdc8:	f002 fac8 	bl	801235c <os_radio>
}
 800fdcc:	bf00      	nop
 800fdce:	3708      	adds	r7, #8
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	20000c04 	.word	0x20000c04

0800fdd8 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
#if !defined(LMIC_DISABLE_PING)
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 800fde2:	4b25      	ldr	r3, [pc, #148]	; (800fe78 <txDone+0xa0>)
 800fde4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800fde8:	461a      	mov	r2, r3
 800fdea:	f240 6302 	movw	r3, #1538	; 0x602
 800fdee:	4013      	ands	r3, r2
 800fdf0:	f240 4202 	movw	r2, #1026	; 0x402
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d10b      	bne.n	800fe10 <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 800fdf8:	4820      	ldr	r0, [pc, #128]	; (800fe7c <txDone+0xa4>)
 800fdfa:	f7fe fd85 	bl	800e908 <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 800fdfe:	4b1e      	ldr	r3, [pc, #120]	; (800fe78 <txDone+0xa0>)
 800fe00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800fe04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fe08:	b29a      	uxth	r2, r3
 800fe0a:	4b1b      	ldr	r3, [pc, #108]	; (800fe78 <txDone+0xa0>)
 800fe0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }
#endif // !LMIC_DISABLE_PING

    // Change RX frequency / rps (US only) before we increment txChnl
    setRx1Params();
 800fe10:	4b19      	ldr	r3, [pc, #100]	; (800fe78 <txDone+0xa0>)
 800fe12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fe16:	f003 0307 	and.w	r3, r3, #7
 800fe1a:	4a19      	ldr	r2, [pc, #100]	; (800fe80 <txDone+0xa8>)
 800fe1c:	fb03 f202 	mul.w	r2, r3, r2
 800fe20:	4b18      	ldr	r3, [pc, #96]	; (800fe84 <txDone+0xac>)
 800fe22:	4413      	add	r3, r2
 800fe24:	461a      	mov	r2, r3
 800fe26:	4b14      	ldr	r3, [pc, #80]	; (800fe78 <txDone+0xa0>)
 800fe28:	609a      	str	r2, [r3, #8]
 800fe2a:	4b13      	ldr	r3, [pc, #76]	; (800fe78 <txDone+0xa0>)
 800fe2c:	7c5b      	ldrb	r3, [r3, #17]
 800fe2e:	2b03      	cmp	r3, #3
 800fe30:	d806      	bhi.n	800fe40 <txDone+0x68>
 800fe32:	4b11      	ldr	r3, [pc, #68]	; (800fe78 <txDone+0xa0>)
 800fe34:	7c5b      	ldrb	r3, [r3, #17]
 800fe36:	330a      	adds	r3, #10
 800fe38:	b2da      	uxtb	r2, r3
 800fe3a:	4b0f      	ldr	r3, [pc, #60]	; (800fe78 <txDone+0xa0>)
 800fe3c:	745a      	strb	r2, [r3, #17]
 800fe3e:	e006      	b.n	800fe4e <txDone+0x76>
 800fe40:	4b0d      	ldr	r3, [pc, #52]	; (800fe78 <txDone+0xa0>)
 800fe42:	7c5b      	ldrb	r3, [r3, #17]
 800fe44:	2b04      	cmp	r3, #4
 800fe46:	d102      	bne.n	800fe4e <txDone+0x76>
 800fe48:	4b0b      	ldr	r3, [pc, #44]	; (800fe78 <txDone+0xa0>)
 800fe4a:	220d      	movs	r2, #13
 800fe4c:	745a      	strb	r2, [r3, #17]
 800fe4e:	4b0a      	ldr	r3, [pc, #40]	; (800fe78 <txDone+0xa0>)
 800fe50:	7c5b      	ldrb	r3, [r3, #17]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fe f910 	bl	800e078 <dndr2rps>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	4b06      	ldr	r3, [pc, #24]	; (800fe78 <txDone+0xa0>)
 800fe5e:	81da      	strh	r2, [r3, #14]
        os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
    }
    else
#endif
    {
        schedRx12(delay, func, LMIC.dndr);
 800fe60:	4b05      	ldr	r3, [pc, #20]	; (800fe78 <txDone+0xa0>)
 800fe62:	7c5b      	ldrb	r3, [r3, #17]
 800fe64:	461a      	mov	r2, r3
 800fe66:	6839      	ldr	r1, [r7, #0]
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7ff ff11 	bl	800fc90 <schedRx12>
    }
}
 800fe6e:	bf00      	nop
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	20000c04 	.word	0x20000c04
 800fe7c:	20000cd4 	.word	0x20000cd4
 800fe80:	000927c0 	.word	0x000927c0
 800fe84:	370870a0 	.word	0x370870a0

0800fe88 <onJoinFailed>:

// ======================================== Join frames


#if !defined(LMIC_DISABLE_JOIN)
static void onJoinFailed (osjob_t *osjob) {
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 800fe90:	2008      	movs	r0, #8
 800fe92:	f7ff fa15 	bl	800f2c0 <reportEvent>
}
 800fe96:	bf00      	nop
 800fe98:	3708      	adds	r7, #8
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
	...

0800fea0 <processJoinAccept>:


static bool processJoinAccept (void) {
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b084      	sub	sp, #16
 800fea4:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 800fea6:	4b8e      	ldr	r3, [pc, #568]	; (80100e0 <processJoinAccept+0x240>)
 800fea8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800feac:	2b01      	cmp	r3, #1
 800feae:	d109      	bne.n	800fec4 <processJoinAccept+0x24>
 800feb0:	4b8b      	ldr	r3, [pc, #556]	; (80100e0 <processJoinAccept+0x240>)
 800feb2:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d104      	bne.n	800fec4 <processJoinAccept+0x24>
 800feba:	f240 51b2 	movw	r1, #1458	; 0x5b2
 800febe:	4889      	ldr	r0, [pc, #548]	; (80100e4 <processJoinAccept+0x244>)
 800fec0:	f002 fd1a 	bl	80128f8 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 800fec4:	4b86      	ldr	r3, [pc, #536]	; (80100e0 <processJoinAccept+0x240>)
 800fec6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800feca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d104      	bne.n	800fedc <processJoinAccept+0x3c>
 800fed2:	f240 51b3 	movw	r1, #1459	; 0x5b3
 800fed6:	4883      	ldr	r0, [pc, #524]	; (80100e4 <processJoinAccept+0x244>)
 800fed8:	f002 fd0e 	bl	80128f8 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 800fedc:	4b80      	ldr	r3, [pc, #512]	; (80100e0 <processJoinAccept+0x240>)
 800fede:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d14f      	bne.n	800ff86 <processJoinAccept+0xe6>
      nojoinframe:
 800fee6:	bf00      	nop
 800fee8:	e000      	b.n	800feec <processJoinAccept+0x4c>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 800feea:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 800feec:	4b7c      	ldr	r3, [pc, #496]	; (80100e0 <processJoinAccept+0x240>)
 800feee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800fef2:	f003 0304 	and.w	r3, r3, #4
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d126      	bne.n	800ff48 <processJoinAccept+0xa8>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 800fefa:	4b79      	ldr	r3, [pc, #484]	; (80100e0 <processJoinAccept+0x240>)
 800fefc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ff00:	f003 0320 	and.w	r3, r3, #32
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d104      	bne.n	800ff12 <processJoinAccept+0x72>
 800ff08:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
 800ff0c:	4875      	ldr	r0, [pc, #468]	; (80100e4 <processJoinAccept+0x244>)
 800ff0e:	f002 fcf3 	bl	80128f8 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 800ff12:	4b73      	ldr	r3, [pc, #460]	; (80100e0 <processJoinAccept+0x240>)
 800ff14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ff18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ff1c:	b29a      	uxth	r2, r3
 800ff1e:	4b70      	ldr	r3, [pc, #448]	; (80100e0 <processJoinAccept+0x240>)
 800ff20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
            if( LMIC.rejoinCnt < 10 )
 800ff24:	4b6e      	ldr	r3, [pc, #440]	; (80100e0 <processJoinAccept+0x240>)
 800ff26:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800ff2a:	2b09      	cmp	r3, #9
 800ff2c:	d807      	bhi.n	800ff3e <processJoinAccept+0x9e>
                LMIC.rejoinCnt++;
 800ff2e:	4b6c      	ldr	r3, [pc, #432]	; (80100e0 <processJoinAccept+0x240>)
 800ff30:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800ff34:	3301      	adds	r3, #1
 800ff36:	b2da      	uxtb	r2, r3
 800ff38:	4b69      	ldr	r3, [pc, #420]	; (80100e0 <processJoinAccept+0x240>)
 800ff3a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            reportEvent(EV_REJOIN_FAILED);
 800ff3e:	2009      	movs	r0, #9
 800ff40:	f7ff f9be 	bl	800f2c0 <reportEvent>
            return 1;
 800ff44:	2301      	movs	r3, #1
 800ff46:	e0c6      	b.n	80100d6 <processJoinAccept+0x236>
        LMIC.opmode &= ~OP_TXRXPEND;
 800ff48:	4b65      	ldr	r3, [pc, #404]	; (80100e0 <processJoinAccept+0x240>)
 800ff4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ff4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	4b62      	ldr	r3, [pc, #392]	; (80100e0 <processJoinAccept+0x240>)
 800ff56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        ostime_t delay = nextJoinState();
 800ff5a:	f7ff f947 	bl	800f1ec <nextJoinState>
 800ff5e:	6038      	str	r0, [r7, #0]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800ff60:	f001 fa52 	bl	8011408 <os_getTime>
 800ff64:	4602      	mov	r2, r0
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d001      	beq.n	800ff78 <processJoinAccept+0xd8>
 800ff74:	4b5c      	ldr	r3, [pc, #368]	; (80100e8 <processJoinAccept+0x248>)
 800ff76:	e000      	b.n	800ff7a <processJoinAccept+0xda>
 800ff78:	4b5c      	ldr	r3, [pc, #368]	; (80100ec <processJoinAccept+0x24c>)
 800ff7a:	461a      	mov	r2, r3
 800ff7c:	485c      	ldr	r0, [pc, #368]	; (80100f0 <processJoinAccept+0x250>)
 800ff7e:	f001 fac9 	bl	8011514 <os_setTimedCallback>
        return 1;
 800ff82:	2301      	movs	r3, #1
 800ff84:	e0a7      	b.n	80100d6 <processJoinAccept+0x236>
    uint8_t hdr  = LMIC.frame[0];
 800ff86:	4b56      	ldr	r3, [pc, #344]	; (80100e0 <processJoinAccept+0x240>)
 800ff88:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800ff8c:	73fb      	strb	r3, [r7, #15]
    uint8_t dlen = LMIC.dataLen;
 800ff8e:	4b54      	ldr	r3, [pc, #336]	; (80100e0 <processJoinAccept+0x240>)
 800ff90:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 800ff94:	73bb      	strb	r3, [r7, #14]
    uint32_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 800ff96:	7bbb      	ldrb	r3, [r7, #14]
 800ff98:	3b04      	subs	r3, #4
 800ff9a:	33e0      	adds	r3, #224	; 0xe0
 800ff9c:	4a50      	ldr	r2, [pc, #320]	; (80100e0 <processJoinAccept+0x240>)
 800ff9e:	4413      	add	r3, r2
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fe f8da 	bl	800e15c <os_rlsbf4>
 800ffa8:	60b8      	str	r0, [r7, #8]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 800ffaa:	7bbb      	ldrb	r3, [r7, #14]
 800ffac:	2b11      	cmp	r3, #17
 800ffae:	d002      	beq.n	800ffb6 <processJoinAccept+0x116>
 800ffb0:	7bbb      	ldrb	r3, [r7, #14]
 800ffb2:	2b21      	cmp	r3, #33	; 0x21
 800ffb4:	d104      	bne.n	800ffc0 <processJoinAccept+0x120>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 800ffb6:	7bfb      	ldrb	r3, [r7, #15]
 800ffb8:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 800ffbc:	2b20      	cmp	r3, #32
 800ffbe:	d00d      	beq.n	800ffdc <processJoinAccept+0x13c>
      badframe:
 800ffc0:	bf00      	nop
 800ffc2:	e002      	b.n	800ffca <processJoinAccept+0x12a>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 800ffc4:	bf00      	nop
 800ffc6:	e000      	b.n	800ffca <processJoinAccept+0x12a>
#if defined(LMIC_EU686)
    initDefaultChannels(0);
#endif
    if( dlen > LEN_JA ) {
#if defined(LMIC_US915)
        goto badframe;
 800ffc8:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 800ffca:	4b45      	ldr	r3, [pc, #276]	; (80100e0 <processJoinAccept+0x240>)
 800ffcc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800ffd0:	f003 0301 	and.w	r3, r3, #1
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d088      	beq.n	800feea <processJoinAccept+0x4a>
            return 0;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	e07c      	b.n	80100d6 <processJoinAccept+0x236>
    aes_encrypt(LMIC.frame+1, dlen-1);
 800ffdc:	4a45      	ldr	r2, [pc, #276]	; (80100f4 <processJoinAccept+0x254>)
 800ffde:	7bbb      	ldrb	r3, [r7, #14]
 800ffe0:	3b01      	subs	r3, #1
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	4610      	mov	r0, r2
 800ffe6:	f7fe fa59 	bl	800e49c <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 800ffea:	7bbb      	ldrb	r3, [r7, #14]
 800ffec:	3b04      	subs	r3, #4
 800ffee:	4619      	mov	r1, r3
 800fff0:	4841      	ldr	r0, [pc, #260]	; (80100f8 <processJoinAccept+0x258>)
 800fff2:	f7fe fa31 	bl	800e458 <aes_verifyMic0>
 800fff6:	4603      	mov	r3, r0
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d0e3      	beq.n	800ffc4 <processJoinAccept+0x124>
    uint32_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 800fffc:	4b3f      	ldr	r3, [pc, #252]	; (80100fc <processJoinAccept+0x25c>)
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fe f8ac 	bl	800e15c <os_rlsbf4>
 8010004:	6078      	str	r0, [r7, #4]
    LMIC.devaddr = addr;
 8010006:	4a36      	ldr	r2, [pc, #216]	; (80100e0 <processJoinAccept+0x240>)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 801000e:	483c      	ldr	r0, [pc, #240]	; (8010100 <processJoinAccept+0x260>)
 8010010:	f7fe f8a4 	bl	800e15c <os_rlsbf4>
 8010014:	4603      	mov	r3, r0
 8010016:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801001a:	4a31      	ldr	r2, [pc, #196]	; (80100e0 <processJoinAccept+0x240>)
 801001c:	6413      	str	r3, [r2, #64]	; 0x40
    if( dlen > LEN_JA ) {
 801001e:	7bbb      	ldrb	r3, [r7, #14]
 8010020:	2b11      	cmp	r3, #17
 8010022:	d8d1      	bhi.n	800ffc8 <processJoinAccept+0x128>
            }
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 8010024:	4b2e      	ldr	r3, [pc, #184]	; (80100e0 <processJoinAccept+0x240>)
 8010026:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 801002a:	3b01      	subs	r3, #1
 801002c:	b298      	uxth	r0, r3
 801002e:	4b35      	ldr	r3, [pc, #212]	; (8010104 <processJoinAccept+0x264>)
 8010030:	4a35      	ldr	r2, [pc, #212]	; (8010108 <processJoinAccept+0x268>)
 8010032:	4930      	ldr	r1, [pc, #192]	; (80100f4 <processJoinAccept+0x254>)
 8010034:	f7fe fa8c 	bl	800e550 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));

    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 8010038:	4b29      	ldr	r3, [pc, #164]	; (80100e0 <processJoinAccept+0x240>)
 801003a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801003e:	f003 0324 	and.w	r3, r3, #36	; 0x24
 8010042:	2b00      	cmp	r3, #0
 8010044:	d104      	bne.n	8010050 <processJoinAccept+0x1b0>
 8010046:	f240 610c 	movw	r1, #1548	; 0x60c
 801004a:	4826      	ldr	r0, [pc, #152]	; (80100e4 <processJoinAccept+0x244>)
 801004c:	f002 fc54 	bl	80128f8 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8010050:	4b23      	ldr	r3, [pc, #140]	; (80100e0 <processJoinAccept+0x240>)
 8010052:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010056:	f003 0320 	and.w	r3, r3, #32
 801005a:	2b00      	cmp	r3, #0
 801005c:	d00e      	beq.n	801007c <processJoinAccept+0x1dc>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 801005e:	4b20      	ldr	r3, [pc, #128]	; (80100e0 <processJoinAccept+0x240>)
 8010060:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010064:	4a1e      	ldr	r2, [pc, #120]	; (80100e0 <processJoinAccept+0x240>)
 8010066:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 801006a:	4611      	mov	r1, r2
 801006c:	4618      	mov	r0, r3
 801006e:	f7fe f847 	bl	800e100 <lowerDR>
 8010072:	4603      	mov	r3, r0
 8010074:	461a      	mov	r2, r3
 8010076:	4b1a      	ldr	r3, [pc, #104]	; (80100e0 <processJoinAccept+0x240>)
 8010078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 801007c:	4b18      	ldr	r3, [pc, #96]	; (80100e0 <processJoinAccept+0x240>)
 801007e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010082:	f423 7329 	bic.w	r3, r3, #676	; 0x2a4
 8010086:	f023 0302 	bic.w	r3, r3, #2
 801008a:	b29a      	uxth	r2, r3
 801008c:	4b14      	ldr	r3, [pc, #80]	; (80100e0 <processJoinAccept+0x240>)
 801008e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    LMIC.txCnt = 0;
 8010092:	4b13      	ldr	r3, [pc, #76]	; (80100e0 <processJoinAccept+0x240>)
 8010094:	2200      	movs	r2, #0
 8010096:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    stateJustJoined();
 801009a:	f7ff f92f 	bl	800f2fc <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 801009e:	4b10      	ldr	r3, [pc, #64]	; (80100e0 <processJoinAccept+0x240>)
 80100a0:	f893 30ef 	ldrb.w	r3, [r3, #239]	; 0xef
 80100a4:	f003 030f 	and.w	r3, r3, #15
 80100a8:	b2da      	uxtb	r2, r3
 80100aa:	4b0d      	ldr	r3, [pc, #52]	; (80100e0 <processJoinAccept+0x240>)
 80100ac:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 80100b0:	4b0b      	ldr	r3, [pc, #44]	; (80100e0 <processJoinAccept+0x240>)
 80100b2:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 80100b6:	4b0a      	ldr	r3, [pc, #40]	; (80100e0 <processJoinAccept+0x240>)
 80100b8:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;
 80100bc:	4b08      	ldr	r3, [pc, #32]	; (80100e0 <processJoinAccept+0x240>)
 80100be:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d103      	bne.n	80100ce <processJoinAccept+0x22e>
 80100c6:	4b06      	ldr	r3, [pc, #24]	; (80100e0 <processJoinAccept+0x240>)
 80100c8:	2201      	movs	r2, #1
 80100ca:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
    reportEvent(EV_JOINED);
 80100ce:	2006      	movs	r0, #6
 80100d0:	f7ff f8f6 	bl	800f2c0 <reportEvent>
    return 1;
 80100d4:	2301      	movs	r3, #1
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	20000c04 	.word	0x20000c04
 80100e4:	08018278 	.word	0x08018278
 80100e8:	0800fe89 	.word	0x0800fe89
 80100ec:	0800f2ad 	.word	0x0800f2ad
 80100f0:	20000c18 	.word	0x20000c18
 80100f4:	20000ce9 	.word	0x20000ce9
 80100f8:	20000ce8 	.word	0x20000ce8
 80100fc:	20000cef 	.word	0x20000cef
 8010100:	20000cec 	.word	0x20000cec
 8010104:	20000ca2 	.word	0x20000ca2
 8010108:	20000c92 	.word	0x20000c92

0801010c <processRx2Jacc>:


static void processRx2Jacc (osjob_t *osjob) {
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 8010114:	4b07      	ldr	r3, [pc, #28]	; (8010134 <processRx2Jacc+0x28>)
 8010116:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 801011a:	2b00      	cmp	r3, #0
 801011c:	d103      	bne.n	8010126 <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 801011e:	4b05      	ldr	r3, [pc, #20]	; (8010134 <processRx2Jacc+0x28>)
 8010120:	2200      	movs	r2, #0
 8010122:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    processJoinAccept();
 8010126:	f7ff febb 	bl	800fea0 <processJoinAccept>
}
 801012a:	bf00      	nop
 801012c:	3708      	adds	r7, #8
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	20000c04 	.word	0x20000c04

08010138 <setupRx2Jacc>:


static void setupRx2Jacc (osjob_t *osjob) {
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 8010140:	4b04      	ldr	r3, [pc, #16]	; (8010154 <setupRx2Jacc+0x1c>)
 8010142:	4a05      	ldr	r2, [pc, #20]	; (8010158 <setupRx2Jacc+0x20>)
 8010144:	61da      	str	r2, [r3, #28]
    setupRx2();
 8010146:	f7ff fd83 	bl	800fc50 <setupRx2>
}
 801014a:	bf00      	nop
 801014c:	3708      	adds	r7, #8
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}
 8010152:	bf00      	nop
 8010154:	20000c04 	.word	0x20000c04
 8010158:	0801010d 	.word	0x0801010d

0801015c <processRx1Jacc>:


static void processRx1Jacc (osjob_t *osjob) {
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 8010164:	4b0c      	ldr	r3, [pc, #48]	; (8010198 <processRx1Jacc+0x3c>)
 8010166:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 801016a:	2b00      	cmp	r3, #0
 801016c:	d007      	beq.n	801017e <processRx1Jacc+0x22>
 801016e:	f7ff fe97 	bl	800fea0 <processJoinAccept>
 8010172:	4603      	mov	r3, r0
 8010174:	f083 0301 	eor.w	r3, r3, #1
 8010178:	b2db      	uxtb	r3, r3
 801017a:	2b00      	cmp	r3, #0
 801017c:	d007      	beq.n	801018e <processRx1Jacc+0x32>
        schedRx12(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc), LMIC.dn2Dr);
 801017e:	4b06      	ldr	r3, [pc, #24]	; (8010198 <processRx1Jacc+0x3c>)
 8010180:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8010184:	461a      	mov	r2, r3
 8010186:	4905      	ldr	r1, [pc, #20]	; (801019c <processRx1Jacc+0x40>)
 8010188:	4805      	ldr	r0, [pc, #20]	; (80101a0 <processRx1Jacc+0x44>)
 801018a:	f7ff fd81 	bl	800fc90 <schedRx12>
}
 801018e:	bf00      	nop
 8010190:	3708      	adds	r7, #8
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	20000c04 	.word	0x20000c04
 801019c:	08010139 	.word	0x08010139
 80101a0:	0002ee00 	.word	0x0002ee00

080101a4 <setupRx1Jacc>:


static void setupRx1Jacc (osjob_t *osjob) {
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 80101ac:	4803      	ldr	r0, [pc, #12]	; (80101bc <setupRx1Jacc+0x18>)
 80101ae:	f7ff fdf1 	bl	800fd94 <setupRx1>
}
 80101b2:	bf00      	nop
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	0801015d 	.word	0x0801015d

080101c0 <jreqDone>:


static void jreqDone (osjob_t *osjob) {
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 80101c8:	4903      	ldr	r1, [pc, #12]	; (80101d8 <jreqDone+0x18>)
 80101ca:	4804      	ldr	r0, [pc, #16]	; (80101dc <jreqDone+0x1c>)
 80101cc:	f7ff fe04 	bl	800fdd8 <txDone>
}
 80101d0:	bf00      	nop
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}
 80101d8:	080101a5 	.word	0x080101a5
 80101dc:	00027100 	.word	0x00027100

080101e0 <processRx2DnData>:
// ======================================== Data frames

// Fwd decl.
static bool processDnData(void);

static void processRx2DnData (osjob_t *osjob) {
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 80101e8:	4b0c      	ldr	r3, [pc, #48]	; (801021c <processRx2DnData+0x3c>)
 80101ea:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d10d      	bne.n	801020e <processRx2DnData+0x2e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 80101f2:	4b0a      	ldr	r3, [pc, #40]	; (801021c <processRx2DnData+0x3c>)
 80101f4:	2200      	movs	r2, #0
 80101f6:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
        // It could be that the gateway *is* sending a reply, but we
        // just didn't pick it up. To avoid TX'ing again while the
        // gateay is not listening anyway, delay the next transmission
        // until DNW2_SAFETY_ZONE from now, and add up to 2 seconds of
        // extra randomization.
        txDelay(os_getTime() + DNW2_SAFETY_ZONE, 2);
 80101fa:	f001 f905 	bl	8011408 <os_getTime>
 80101fe:	4603      	mov	r3, r0
 8010200:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8010204:	3340      	adds	r3, #64	; 0x40
 8010206:	2102      	movs	r1, #2
 8010208:	4618      	mov	r0, r3
 801020a:	f7fe fcb1 	bl	800eb70 <txDelay>
    }
    processDnData();
 801020e:	f000 fba1 	bl	8010954 <processDnData>
}
 8010212:	bf00      	nop
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	20000c04 	.word	0x20000c04

08010220 <setupRx2DnData>:


static void setupRx2DnData (osjob_t *osjob) {
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 8010228:	4b04      	ldr	r3, [pc, #16]	; (801023c <setupRx2DnData+0x1c>)
 801022a:	4a05      	ldr	r2, [pc, #20]	; (8010240 <setupRx2DnData+0x20>)
 801022c:	61da      	str	r2, [r3, #28]
    setupRx2();
 801022e:	f7ff fd0f 	bl	800fc50 <setupRx2>
}
 8010232:	bf00      	nop
 8010234:	3708      	adds	r7, #8
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
 801023a:	bf00      	nop
 801023c:	20000c04 	.word	0x20000c04
 8010240:	080101e1 	.word	0x080101e1

08010244 <processRx1DnData>:


static void processRx1DnData (osjob_t *osjob) {
 8010244:	b5b0      	push	{r4, r5, r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 801024c:	4b11      	ldr	r3, [pc, #68]	; (8010294 <processRx1DnData+0x50>)
 801024e:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8010252:	2b00      	cmp	r3, #0
 8010254:	d007      	beq.n	8010266 <processRx1DnData+0x22>
 8010256:	f000 fb7d 	bl	8010954 <processDnData>
 801025a:	4603      	mov	r3, r0
 801025c:	f083 0301 	eor.w	r3, r3, #1
 8010260:	b2db      	uxtb	r3, r3
 8010262:	2b00      	cmp	r3, #0
 8010264:	d012      	beq.n	801028c <processRx1DnData+0x48>
        schedRx12(sec2osticks(LMIC.rxDelay +(int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData), LMIC.dn2Dr);
 8010266:	4b0b      	ldr	r3, [pc, #44]	; (8010294 <processRx1DnData+0x50>)
 8010268:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 801026c:	3301      	adds	r3, #1
 801026e:	17da      	asrs	r2, r3, #31
 8010270:	461c      	mov	r4, r3
 8010272:	4615      	mov	r5, r2
 8010274:	4622      	mov	r2, r4
 8010276:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801027a:	fb02 f303 	mul.w	r3, r2, r3
 801027e:	4a05      	ldr	r2, [pc, #20]	; (8010294 <processRx1DnData+0x50>)
 8010280:	f892 20c7 	ldrb.w	r2, [r2, #199]	; 0xc7
 8010284:	4904      	ldr	r1, [pc, #16]	; (8010298 <processRx1DnData+0x54>)
 8010286:	4618      	mov	r0, r3
 8010288:	f7ff fd02 	bl	800fc90 <schedRx12>
}
 801028c:	bf00      	nop
 801028e:	3708      	adds	r7, #8
 8010290:	46bd      	mov	sp, r7
 8010292:	bdb0      	pop	{r4, r5, r7, pc}
 8010294:	20000c04 	.word	0x20000c04
 8010298:	08010221 	.word	0x08010221

0801029c <setupRx1DnData>:


static void setupRx1DnData (osjob_t *osjob) {
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 80102a4:	4803      	ldr	r0, [pc, #12]	; (80102b4 <setupRx1DnData+0x18>)
 80102a6:	f7ff fd75 	bl	800fd94 <setupRx1>
}
 80102aa:	bf00      	nop
 80102ac:	3708      	adds	r7, #8
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}
 80102b2:	bf00      	nop
 80102b4:	08010245 	.word	0x08010245

080102b8 <updataDone>:


static void updataDone (osjob_t *osjob) {
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 80102c0:	4b07      	ldr	r3, [pc, #28]	; (80102e0 <updataDone+0x28>)
 80102c2:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80102c6:	461a      	mov	r2, r3
 80102c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80102cc:	fb02 f303 	mul.w	r3, r2, r3
 80102d0:	4904      	ldr	r1, [pc, #16]	; (80102e4 <updataDone+0x2c>)
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7ff fd80 	bl	800fdd8 <txDone>
}
 80102d8:	bf00      	nop
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	20000c04 	.word	0x20000c04
 80102e4:	0801029d 	.word	0x0801029d

080102e8 <buildDataFrame>:

// ========================================


static void buildDataFrame (void) {
 80102e8:	b590      	push	{r4, r7, lr}
 80102ea:	b087      	sub	sp, #28
 80102ec:	af02      	add	r7, sp, #8
    bool txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 80102ee:	4b9f      	ldr	r3, [pc, #636]	; (801056c <buildDataFrame+0x284>)
 80102f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80102f4:	f003 0318 	and.w	r3, r3, #24
 80102f8:	2b10      	cmp	r3, #16
 80102fa:	bf14      	ite	ne
 80102fc:	2301      	movne	r3, #1
 80102fe:	2300      	moveq	r3, #0
 8010300:	73fb      	strb	r3, [r7, #15]
    uint8_t dlen = txdata ? LMIC.pendTxLen : 0;
 8010302:	7bfb      	ldrb	r3, [r7, #15]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d003      	beq.n	8010310 <buildDataFrame+0x28>
 8010308:	4b98      	ldr	r3, [pc, #608]	; (801056c <buildDataFrame+0x284>)
 801030a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801030e:	e000      	b.n	8010312 <buildDataFrame+0x2a>
 8010310:	2300      	movs	r3, #0
 8010312:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 8010314:	2308      	movs	r3, #8
 8010316:	60bb      	str	r3, [r7, #8]
#if !defined(LMIC_DISABLE_PING)
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 8010318:	4b94      	ldr	r3, [pc, #592]	; (801056c <buildDataFrame+0x284>)
 801031a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801031e:	461a      	mov	r2, r3
 8010320:	f240 4302 	movw	r3, #1026	; 0x402
 8010324:	4013      	ands	r3, r2
 8010326:	f240 4202 	movw	r2, #1026	; 0x402
 801032a:	4293      	cmp	r3, r2
 801032c:	d11b      	bne.n	8010366 <buildDataFrame+0x7e>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 801032e:	4a8f      	ldr	r2, [pc, #572]	; (801056c <buildDataFrame+0x284>)
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	4413      	add	r3, r2
 8010334:	33e4      	adds	r3, #228	; 0xe4
 8010336:	2210      	movs	r2, #16
 8010338:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 801033a:	4b8c      	ldr	r3, [pc, #560]	; (801056c <buildDataFrame+0x284>)
 801033c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8010340:	b25a      	sxtb	r2, r3
 8010342:	4b8a      	ldr	r3, [pc, #552]	; (801056c <buildDataFrame+0x284>)
 8010344:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8010348:	011b      	lsls	r3, r3, #4
 801034a:	b25b      	sxtb	r3, r3
 801034c:	4313      	orrs	r3, r2
 801034e:	b25a      	sxtb	r2, r3
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	3301      	adds	r3, #1
 8010354:	b2d1      	uxtb	r1, r2
 8010356:	4a85      	ldr	r2, [pc, #532]	; (801056c <buildDataFrame+0x284>)
 8010358:	4413      	add	r3, r2
 801035a:	460a      	mov	r2, r1
 801035c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        end += 2;
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	3302      	adds	r3, #2
 8010364:	60bb      	str	r3, [r7, #8]
    }
#endif // !LMIC_DISABLE_PING
#if !defined(LMIC_DISABLE_MCMD_DCAP_REQ)
    if( LMIC.dutyCapAns ) {
 8010366:	4b81      	ldr	r3, [pc, #516]	; (801056c <buildDataFrame+0x284>)
 8010368:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 801036c:	2b00      	cmp	r3, #0
 801036e:	d00c      	beq.n	801038a <buildDataFrame+0xa2>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 8010370:	4a7e      	ldr	r2, [pc, #504]	; (801056c <buildDataFrame+0x284>)
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	4413      	add	r3, r2
 8010376:	33e4      	adds	r3, #228	; 0xe4
 8010378:	2204      	movs	r2, #4
 801037a:	701a      	strb	r2, [r3, #0]
        end += 1;
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	3301      	adds	r3, #1
 8010380:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 8010382:	4b7a      	ldr	r3, [pc, #488]	; (801056c <buildDataFrame+0x284>)
 8010384:	2200      	movs	r2, #0
 8010386:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
    }
#endif // !LMIC_DISABLE_MCMD_DCAP_REQ
#if !defined(LMIC_DISABLE_MCMD_DN2P_SET)
    if( LMIC.dn2Ans ) {
 801038a:	4b78      	ldr	r3, [pc, #480]	; (801056c <buildDataFrame+0x284>)
 801038c:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8010390:	2b00      	cmp	r3, #0
 8010392:	d019      	beq.n	80103c8 <buildDataFrame+0xe0>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 8010394:	4a75      	ldr	r2, [pc, #468]	; (801056c <buildDataFrame+0x284>)
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	4413      	add	r3, r2
 801039a:	33e4      	adds	r3, #228	; 0xe4
 801039c:	2205      	movs	r2, #5
 801039e:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 80103a0:	4b72      	ldr	r3, [pc, #456]	; (801056c <buildDataFrame+0x284>)
 80103a2:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	3301      	adds	r3, #1
 80103aa:	f002 0203 	and.w	r2, r2, #3
 80103ae:	b2d1      	uxtb	r1, r2
 80103b0:	4a6e      	ldr	r2, [pc, #440]	; (801056c <buildDataFrame+0x284>)
 80103b2:	4413      	add	r3, r2
 80103b4:	460a      	mov	r2, r1
 80103b6:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        end += 2;
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	3302      	adds	r3, #2
 80103be:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 80103c0:	4b6a      	ldr	r3, [pc, #424]	; (801056c <buildDataFrame+0x284>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    }
#endif // !LMIC_DISABLE_MCMD_DN2P_SET
    if( LMIC.devsAns ) {  // answer to device status
 80103c8:	4b68      	ldr	r3, [pc, #416]	; (801056c <buildDataFrame+0x284>)
 80103ca:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d020      	beq.n	8010414 <buildDataFrame+0x12c>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 80103d2:	4a66      	ldr	r2, [pc, #408]	; (801056c <buildDataFrame+0x284>)
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	4413      	add	r3, r2
 80103d8:	33e4      	adds	r3, #228	; 0xe4
 80103da:	2206      	movs	r2, #6
 80103dc:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	1c5c      	adds	r4, r3, #1
 80103e2:	f7fd ff4c 	bl	800e27e <os_getBattLevel>
 80103e6:	4603      	mov	r3, r0
 80103e8:	461a      	mov	r2, r3
 80103ea:	4b60      	ldr	r3, [pc, #384]	; (801056c <buildDataFrame+0x284>)
 80103ec:	4423      	add	r3, r4
 80103ee:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        LMIC.frame[end+2] = LMIC.margin;
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	3302      	adds	r3, #2
 80103f6:	4a5d      	ldr	r2, [pc, #372]	; (801056c <buildDataFrame+0x284>)
 80103f8:	f892 10c0 	ldrb.w	r1, [r2, #192]	; 0xc0
 80103fc:	4a5b      	ldr	r2, [pc, #364]	; (801056c <buildDataFrame+0x284>)
 80103fe:	4413      	add	r3, r2
 8010400:	460a      	mov	r2, r1
 8010402:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        end += 3;
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	3303      	adds	r3, #3
 801040a:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 801040c:	4b57      	ldr	r3, [pc, #348]	; (801056c <buildDataFrame+0x284>)
 801040e:	2200      	movs	r2, #0
 8010410:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 8010414:	4b55      	ldr	r3, [pc, #340]	; (801056c <buildDataFrame+0x284>)
 8010416:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 801041a:	2b00      	cmp	r3, #0
 801041c:	d017      	beq.n	801044e <buildDataFrame+0x166>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 801041e:	4a53      	ldr	r2, [pc, #332]	; (801056c <buildDataFrame+0x284>)
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	4413      	add	r3, r2
 8010424:	33e4      	adds	r3, #228	; 0xe4
 8010426:	2203      	movs	r2, #3
 8010428:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 801042a:	4b50      	ldr	r3, [pc, #320]	; (801056c <buildDataFrame+0x284>)
 801042c:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	3301      	adds	r3, #1
 8010434:	4611      	mov	r1, r2
 8010436:	4a4d      	ldr	r2, [pc, #308]	; (801056c <buildDataFrame+0x284>)
 8010438:	4413      	add	r3, r2
 801043a:	460a      	mov	r2, r1
 801043c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        end += 2;
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	3302      	adds	r3, #2
 8010444:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 8010446:	4b49      	ldr	r3, [pc, #292]	; (801056c <buildDataFrame+0x284>)
 8010448:	2200      	movs	r2, #0
 801044a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
    }
#if !defined(LMIC_DISABLE_BEACONS)
    if( LMIC.bcninfoTries > 0 ) {
 801044e:	4b47      	ldr	r3, [pc, #284]	; (801056c <buildDataFrame+0x284>)
 8010450:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8010454:	2b00      	cmp	r3, #0
 8010456:	d008      	beq.n	801046a <buildDataFrame+0x182>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 8010458:	4a44      	ldr	r2, [pc, #272]	; (801056c <buildDataFrame+0x284>)
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	4413      	add	r3, r2
 801045e:	33e4      	adds	r3, #228	; 0xe4
 8010460:	2212      	movs	r2, #18
 8010462:	701a      	strb	r2, [r3, #0]
        end += 1;
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	3301      	adds	r3, #1
 8010468:	60bb      	str	r3, [r7, #8]
    }
#endif // !LMIC_DISABLE_BEACONS
    if( LMIC.adrChanged ) {
 801046a:	4b40      	ldr	r3, [pc, #256]	; (801056c <buildDataFrame+0x284>)
 801046c:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8010470:	2b00      	cmp	r3, #0
 8010472:	d00c      	beq.n	801048e <buildDataFrame+0x1a6>
        if( LMIC.adrAckReq < 0 )
 8010474:	4b3d      	ldr	r3, [pc, #244]	; (801056c <buildDataFrame+0x284>)
 8010476:	f993 30bd 	ldrsb.w	r3, [r3, #189]	; 0xbd
 801047a:	2b00      	cmp	r3, #0
 801047c:	da03      	bge.n	8010486 <buildDataFrame+0x19e>
            LMIC.adrAckReq = 0;
 801047e:	4b3b      	ldr	r3, [pc, #236]	; (801056c <buildDataFrame+0x284>)
 8010480:	2200      	movs	r2, #0
 8010482:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
        LMIC.adrChanged = 0;
 8010486:	4b39      	ldr	r3, [pc, #228]	; (801056c <buildDataFrame+0x284>)
 8010488:	2200      	movs	r2, #0
 801048a:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    }
#if !defined(LMIC_DISABLE_MCMD_PING_SET) && !defined(LMIC_DISABLE_PING)
    if( LMIC.pingSetAns != 0 ) {
 801048e:	4b37      	ldr	r3, [pc, #220]	; (801056c <buildDataFrame+0x284>)
 8010490:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8010494:	2b00      	cmp	r3, #0
 8010496:	d019      	beq.n	80104cc <buildDataFrame+0x1e4>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 8010498:	4a34      	ldr	r2, [pc, #208]	; (801056c <buildDataFrame+0x284>)
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	4413      	add	r3, r2
 801049e:	33e4      	adds	r3, #228	; 0xe4
 80104a0:	2211      	movs	r2, #17
 80104a2:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 80104a4:	4b31      	ldr	r3, [pc, #196]	; (801056c <buildDataFrame+0x284>)
 80104a6:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	3301      	adds	r3, #1
 80104ae:	f002 0201 	and.w	r2, r2, #1
 80104b2:	b2d1      	uxtb	r1, r2
 80104b4:	4a2d      	ldr	r2, [pc, #180]	; (801056c <buildDataFrame+0x284>)
 80104b6:	4413      	add	r3, r2
 80104b8:	460a      	mov	r2, r1
 80104ba:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        end += 2;
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	3302      	adds	r3, #2
 80104c2:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 80104c4:	4b29      	ldr	r3, [pc, #164]	; (801056c <buildDataFrame+0x284>)
 80104c6:	2200      	movs	r2, #0
 80104c8:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
    }
#endif // !LMIC_DISABLE_MCMD_PING_SET && !LMIC_DISABLE_PING
#if !defined(LMIC_DISABLE_MCMD_SNCH_REQ)
    if( LMIC.snchAns ) {
 80104cc:	4b27      	ldr	r3, [pc, #156]	; (801056c <buildDataFrame+0x284>)
 80104ce:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d019      	beq.n	801050a <buildDataFrame+0x222>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 80104d6:	4a25      	ldr	r2, [pc, #148]	; (801056c <buildDataFrame+0x284>)
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	4413      	add	r3, r2
 80104dc:	33e4      	adds	r3, #228	; 0xe4
 80104de:	2207      	movs	r2, #7
 80104e0:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 80104e2:	4b22      	ldr	r3, [pc, #136]	; (801056c <buildDataFrame+0x284>)
 80104e4:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	3301      	adds	r3, #1
 80104ec:	f002 0203 	and.w	r2, r2, #3
 80104f0:	b2d1      	uxtb	r1, r2
 80104f2:	4a1e      	ldr	r2, [pc, #120]	; (801056c <buildDataFrame+0x284>)
 80104f4:	4413      	add	r3, r2
 80104f6:	460a      	mov	r2, r1
 80104f8:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        end += 2;
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	3302      	adds	r3, #2
 8010500:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 8010502:	4b1a      	ldr	r3, [pc, #104]	; (801056c <buildDataFrame+0x284>)
 8010504:	2200      	movs	r2, #0
 8010506:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    }
#endif // !LMIC_DISABLE_MCMD_SNCH_REQ
    ASSERT(end <= OFF_DAT_OPTS+16);
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	2b18      	cmp	r3, #24
 801050e:	dd04      	ble.n	801051a <buildDataFrame+0x232>
 8010510:	f240 61ab 	movw	r1, #1707	; 0x6ab
 8010514:	4816      	ldr	r0, [pc, #88]	; (8010570 <buildDataFrame+0x288>)
 8010516:	f002 f9ef 	bl	80128f8 <hal_failed>

    uint8_t flen = end + (txdata ? 5+dlen : 4);
 801051a:	7bfb      	ldrb	r3, [r7, #15]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d003      	beq.n	8010528 <buildDataFrame+0x240>
 8010520:	79bb      	ldrb	r3, [r7, #6]
 8010522:	3305      	adds	r3, #5
 8010524:	b2db      	uxtb	r3, r3
 8010526:	e000      	b.n	801052a <buildDataFrame+0x242>
 8010528:	2304      	movs	r3, #4
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	b2d2      	uxtb	r2, r2
 801052e:	4413      	add	r3, r2
 8010530:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 8010532:	79fb      	ldrb	r3, [r7, #7]
 8010534:	2b40      	cmp	r3, #64	; 0x40
 8010536:	d905      	bls.n	8010544 <buildDataFrame+0x25c>
        // Options and payload too big - delay payload
        txdata = 0;
 8010538:	2300      	movs	r3, #0
 801053a:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	b2db      	uxtb	r3, r3
 8010540:	3304      	adds	r3, #4
 8010542:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 8010544:	4b09      	ldr	r3, [pc, #36]	; (801056c <buildDataFrame+0x284>)
 8010546:	2240      	movs	r2, #64	; 0x40
 8010548:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 801054c:	4b07      	ldr	r3, [pc, #28]	; (801056c <buildDataFrame+0x284>)
 801054e:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 8010552:	4b06      	ldr	r3, [pc, #24]	; (801056c <buildDataFrame+0x284>)
 8010554:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 8010558:	4313      	orrs	r3, r2
 801055a:	b2db      	uxtb	r3, r3
 801055c:	b25b      	sxtb	r3, r3
 801055e:	4a03      	ldr	r2, [pc, #12]	; (801056c <buildDataFrame+0x284>)
 8010560:	f992 20bd 	ldrsb.w	r2, [r2, #189]	; 0xbd
 8010564:	2a00      	cmp	r2, #0
 8010566:	db05      	blt.n	8010574 <buildDataFrame+0x28c>
 8010568:	2240      	movs	r2, #64	; 0x40
 801056a:	e004      	b.n	8010576 <buildDataFrame+0x28e>
 801056c:	20000c04 	.word	0x20000c04
 8010570:	08018278 	.word	0x08018278
 8010574:	2200      	movs	r2, #0
 8010576:	4313      	orrs	r3, r2
 8010578:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	b2db      	uxtb	r3, r3
 801057e:	3b08      	subs	r3, #8
 8010580:	b2db      	uxtb	r3, r3
 8010582:	b25b      	sxtb	r3, r3
 8010584:	4313      	orrs	r3, r2
 8010586:	b25b      	sxtb	r3, r3
 8010588:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 801058a:	4b3f      	ldr	r3, [pc, #252]	; (8010688 <buildDataFrame+0x3a0>)
 801058c:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 8010590:	4a3e      	ldr	r2, [pc, #248]	; (801068c <buildDataFrame+0x3a4>)
 8010592:	4b3d      	ldr	r3, [pc, #244]	; (8010688 <buildDataFrame+0x3a0>)
 8010594:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010598:	4619      	mov	r1, r3
 801059a:	4610      	mov	r0, r2
 801059c:	f7fd fe2d 	bl	800e1fa <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 80105a0:	4b39      	ldr	r3, [pc, #228]	; (8010688 <buildDataFrame+0x3a0>)
 80105a2:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d106      	bne.n	80105b8 <buildDataFrame+0x2d0>
        LMIC.seqnoUp += 1;
 80105aa:	4b37      	ldr	r3, [pc, #220]	; (8010688 <buildDataFrame+0x3a0>)
 80105ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80105b0:	3301      	adds	r3, #1
 80105b2:	4a35      	ldr	r2, [pc, #212]	; (8010688 <buildDataFrame+0x3a0>)
 80105b4:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (TABLE_GET_U1(DRADJUST, LMIC.txCnt+1) << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 80105b8:	4a35      	ldr	r2, [pc, #212]	; (8010690 <buildDataFrame+0x3a8>)
 80105ba:	4b33      	ldr	r3, [pc, #204]	; (8010688 <buildDataFrame+0x3a0>)
 80105bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	3b01      	subs	r3, #1
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	4619      	mov	r1, r3
 80105c8:	4610      	mov	r0, r2
 80105ca:	f7fd fdff 	bl	800e1cc <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 80105ce:	4b2e      	ldr	r3, [pc, #184]	; (8010688 <buildDataFrame+0x3a0>)
 80105d0:	2200      	movs	r2, #0
 80105d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

    if( txdata ) {
 80105d6:	7bfb      	ldrb	r3, [r7, #15]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d03d      	beq.n	8010658 <buildDataFrame+0x370>
        if( LMIC.pendTxConf ) {
 80105dc:	4b2a      	ldr	r3, [pc, #168]	; (8010688 <buildDataFrame+0x3a0>)
 80105de:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d00c      	beq.n	8010600 <buildDataFrame+0x318>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 80105e6:	4b28      	ldr	r3, [pc, #160]	; (8010688 <buildDataFrame+0x3a0>)
 80105e8:	2280      	movs	r2, #128	; 0x80
 80105ea:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 80105ee:	4b26      	ldr	r3, [pc, #152]	; (8010688 <buildDataFrame+0x3a0>)
 80105f0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d103      	bne.n	8010600 <buildDataFrame+0x318>
 80105f8:	4b23      	ldr	r3, [pc, #140]	; (8010688 <buildDataFrame+0x3a0>)
 80105fa:	2201      	movs	r2, #1
 80105fc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 8010600:	4b21      	ldr	r3, [pc, #132]	; (8010688 <buildDataFrame+0x3a0>)
 8010602:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8010606:	4a20      	ldr	r2, [pc, #128]	; (8010688 <buildDataFrame+0x3a0>)
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	4413      	add	r3, r2
 801060c:	33e4      	adds	r3, #228	; 0xe4
 801060e:	460a      	mov	r2, r1
 8010610:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	3301      	adds	r3, #1
 8010616:	4a1f      	ldr	r2, [pc, #124]	; (8010694 <buildDataFrame+0x3ac>)
 8010618:	4413      	add	r3, r2
 801061a:	79ba      	ldrb	r2, [r7, #6]
 801061c:	491e      	ldr	r1, [pc, #120]	; (8010698 <buildDataFrame+0x3b0>)
 801061e:	4618      	mov	r0, r3
 8010620:	f003 fa4b 	bl	8013aba <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8010624:	4b18      	ldr	r3, [pc, #96]	; (8010688 <buildDataFrame+0x3a0>)
 8010626:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801062a:	2b00      	cmp	r3, #0
 801062c:	d101      	bne.n	8010632 <buildDataFrame+0x34a>
 801062e:	481b      	ldr	r0, [pc, #108]	; (801069c <buildDataFrame+0x3b4>)
 8010630:	e000      	b.n	8010634 <buildDataFrame+0x34c>
 8010632:	481b      	ldr	r0, [pc, #108]	; (80106a0 <buildDataFrame+0x3b8>)
 8010634:	4b14      	ldr	r3, [pc, #80]	; (8010688 <buildDataFrame+0x3a0>)
 8010636:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
                   LMIC.devaddr, LMIC.seqnoUp-1,
 801063a:	4b13      	ldr	r3, [pc, #76]	; (8010688 <buildDataFrame+0x3a0>)
 801063c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8010640:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8010646:	4a13      	ldr	r2, [pc, #76]	; (8010694 <buildDataFrame+0x3ac>)
 8010648:	4413      	add	r3, r2
 801064a:	79ba      	ldrb	r2, [r7, #6]
 801064c:	9201      	str	r2, [sp, #4]
 801064e:	9300      	str	r3, [sp, #0]
 8010650:	2300      	movs	r3, #0
 8010652:	4622      	mov	r2, r4
 8010654:	f7fd ff38 	bl	800e4c8 <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 8010658:	4b0b      	ldr	r3, [pc, #44]	; (8010688 <buildDataFrame+0x3a0>)
 801065a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 801065e:	4b0a      	ldr	r3, [pc, #40]	; (8010688 <buildDataFrame+0x3a0>)
 8010660:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010664:	1e5a      	subs	r2, r3, #1
 8010666:	79fb      	ldrb	r3, [r7, #7]
 8010668:	3b04      	subs	r3, #4
 801066a:	9301      	str	r3, [sp, #4]
 801066c:	4b09      	ldr	r3, [pc, #36]	; (8010694 <buildDataFrame+0x3ac>)
 801066e:	9300      	str	r3, [sp, #0]
 8010670:	2300      	movs	r3, #0
 8010672:	480a      	ldr	r0, [pc, #40]	; (801069c <buildDataFrame+0x3b4>)
 8010674:	f7fd feaa 	bl	800e3cc <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 8010678:	4a03      	ldr	r2, [pc, #12]	; (8010688 <buildDataFrame+0x3a0>)
 801067a:	79fb      	ldrb	r3, [r7, #7]
 801067c:	f882 30e3 	strb.w	r3, [r2, #227]	; 0xe3
}
 8010680:	bf00      	nop
 8010682:	3714      	adds	r7, #20
 8010684:	46bd      	mov	sp, r7
 8010686:	bd90      	pop	{r4, r7, pc}
 8010688:	20000c04 	.word	0x20000c04
 801068c:	20000ce9 	.word	0x20000ce9
 8010690:	20000cee 	.word	0x20000cee
 8010694:	20000ce8 	.word	0x20000ce8
 8010698:	20000c5b 	.word	0x20000c5b
 801069c:	20000c92 	.word	0x20000c92
 80106a0:	20000ca2 	.word	0x20000ca2

080106a4 <onBcnRx>:


#if !defined(LMIC_DISABLE_BEACONS)
// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (osjob_t *job) {
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b082      	sub	sp, #8
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 80106ac:	2000      	movs	r0, #0
 80106ae:	f001 fe55 	bl	801235c <os_radio>
    os_clearCallback(&LMIC.osjob);
 80106b2:	4823      	ldr	r0, [pc, #140]	; (8010740 <onBcnRx+0x9c>)
 80106b4:	f000 fece 	bl	8011454 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 80106b8:	4b22      	ldr	r3, [pc, #136]	; (8010744 <onBcnRx+0xa0>)
 80106ba:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d10c      	bne.n	80106dc <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 80106c2:	4b20      	ldr	r3, [pc, #128]	; (8010744 <onBcnRx+0xa0>)
 80106c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80106c8:	f023 0303 	bic.w	r3, r3, #3
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	4b1d      	ldr	r3, [pc, #116]	; (8010744 <onBcnRx+0xa0>)
 80106d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        reportEvent(EV_SCAN_TIMEOUT);
 80106d4:	2001      	movs	r0, #1
 80106d6:	f7fe fdf3 	bl	800f2c0 <reportEvent>
        return;
 80106da:	e02d      	b.n	8010738 <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 80106dc:	f7fe fe6e 	bl	800f3bc <decodeBeacon>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	dc0f      	bgt.n	8010706 <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 80106e6:	4b17      	ldr	r3, [pc, #92]	; (8010744 <onBcnRx+0xa0>)
 80106e8:	2200      	movs	r2, #0
 80106ea:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
        os_radio(RADIO_RXON);
 80106ee:	2003      	movs	r0, #3
 80106f0:	f001 fe34 	bl	801235c <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 80106f4:	4b13      	ldr	r3, [pc, #76]	; (8010744 <onBcnRx+0xa0>)
 80106f6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80106fa:	4a13      	ldr	r2, [pc, #76]	; (8010748 <onBcnRx+0xa4>)
 80106fc:	4619      	mov	r1, r3
 80106fe:	4810      	ldr	r0, [pc, #64]	; (8010740 <onBcnRx+0x9c>)
 8010700:	f000 ff08 	bl	8011514 <os_setTimedCallback>
        return;
 8010704:	e018      	b.n	8010738 <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 8010706:	2101      	movs	r1, #1
 8010708:	200d      	movs	r0, #13
 801070a:	f7fe f873 	bl	800e7f4 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 801070e:	4b0d      	ldr	r3, [pc, #52]	; (8010744 <onBcnRx+0xa0>)
 8010710:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010714:	f023 0301 	bic.w	r3, r3, #1
 8010718:	b29a      	uxth	r2, r3
 801071a:	4b0a      	ldr	r3, [pc, #40]	; (8010744 <onBcnRx+0xa0>)
 801071c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 8010720:	4b08      	ldr	r3, [pc, #32]	; (8010744 <onBcnRx+0xa0>)
 8010722:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010726:	f043 0302 	orr.w	r3, r3, #2
 801072a:	b29a      	uxth	r2, r3
 801072c:	4b05      	ldr	r3, [pc, #20]	; (8010744 <onBcnRx+0xa0>)
 801072e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8010732:	2002      	movs	r0, #2
 8010734:	f7fe fdc4 	bl	800f2c0 <reportEvent>
}
 8010738:	3708      	adds	r7, #8
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	20000c18 	.word	0x20000c18
 8010744:	20000c04 	.word	0x20000c04
 8010748:	080106a5 	.word	0x080106a5

0801074c <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 801074c:	b580      	push	{r7, lr}
 801074e:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 8010750:	4b28      	ldr	r3, [pc, #160]	; (80107f4 <startScan+0xa8>)
 8010752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d006      	beq.n	8010768 <startScan+0x1c>
 801075a:	4b26      	ldr	r3, [pc, #152]	; (80107f4 <startScan+0xa8>)
 801075c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010760:	f003 0304 	and.w	r3, r3, #4
 8010764:	2b00      	cmp	r3, #0
 8010766:	d004      	beq.n	8010772 <startScan+0x26>
 8010768:	f240 7109 	movw	r1, #1801	; 0x709
 801076c:	4822      	ldr	r0, [pc, #136]	; (80107f8 <startScan+0xac>)
 801076e:	f002 f8c3 	bl	80128f8 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 8010772:	4b20      	ldr	r3, [pc, #128]	; (80107f4 <startScan+0xa8>)
 8010774:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801077c:	2b00      	cmp	r3, #0
 801077e:	d137      	bne.n	80107f0 <startScan+0xa4>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 8010780:	4b1c      	ldr	r3, [pc, #112]	; (80107f4 <startScan+0xa8>)
 8010782:	2200      	movs	r2, #0
 8010784:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8010788:	4b1a      	ldr	r3, [pc, #104]	; (80107f4 <startScan+0xa8>)
 801078a:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
 801078e:	4b19      	ldr	r3, [pc, #100]	; (80107f4 <startScan+0xa8>)
 8010790:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8010794:	4b17      	ldr	r3, [pc, #92]	; (80107f4 <startScan+0xa8>)
 8010796:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 801079a:	4b16      	ldr	r3, [pc, #88]	; (80107f4 <startScan+0xa8>)
 801079c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 80107a0:	4b14      	ldr	r3, [pc, #80]	; (80107f4 <startScan+0xa8>)
 80107a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80107a6:	f043 0301 	orr.w	r3, r3, #1
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80107b0:	b29a      	uxth	r2, r3
 80107b2:	4b10      	ldr	r3, [pc, #64]	; (80107f4 <startScan+0xa8>)
 80107b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    setBcnRxParams();
 80107b8:	f7fe fcc4 	bl	800f144 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 80107bc:	f000 fe24 	bl	8011408 <os_getTime>
 80107c0:	4603      	mov	r3, r0
 80107c2:	f503 137b 	add.w	r3, r3, #4112384	; 0x3ec000
 80107c6:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 80107ca:	4a0a      	ldr	r2, [pc, #40]	; (80107f4 <startScan+0xa8>)
 80107cc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
 80107d0:	4b08      	ldr	r3, [pc, #32]	; (80107f4 <startScan+0xa8>)
 80107d2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80107d6:	4a07      	ldr	r2, [pc, #28]	; (80107f4 <startScan+0xa8>)
 80107d8:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 80107da:	4b06      	ldr	r3, [pc, #24]	; (80107f4 <startScan+0xa8>)
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	4a07      	ldr	r2, [pc, #28]	; (80107fc <startScan+0xb0>)
 80107e0:	4619      	mov	r1, r3
 80107e2:	4807      	ldr	r0, [pc, #28]	; (8010800 <startScan+0xb4>)
 80107e4:	f000 fe96 	bl	8011514 <os_setTimedCallback>
    os_radio(RADIO_RXON);
 80107e8:	2003      	movs	r0, #3
 80107ea:	f001 fdb7 	bl	801235c <os_radio>
 80107ee:	e000      	b.n	80107f2 <startScan+0xa6>
        return;
 80107f0:	bf00      	nop
}
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	20000c04 	.word	0x20000c04
 80107f8:	08018278 	.word	0x08018278
 80107fc:	080106a5 	.word	0x080106a5
 8010800:	20000c18 	.word	0x20000c18

08010804 <buildJoinRequest>:
// Join stuff
//
// ================================================================================

#if !defined(LMIC_DISABLE_JOIN)
static void buildJoinRequest (uint8_t ftype) {
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	4603      	mov	r3, r0
 801080c:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    uint8_t *d = LMIC.frame;
 801080e:	4b16      	ldr	r3, [pc, #88]	; (8010868 <buildJoinRequest+0x64>)
 8010810:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	79fa      	ldrb	r2, [r7, #7]
 8010816:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	3301      	adds	r3, #1
 801081c:	4618      	mov	r0, r3
 801081e:	f7f2 fe13 	bl	8003448 <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	3309      	adds	r3, #9
 8010826:	4618      	mov	r0, r3
 8010828:	f7f2 fe22 	bl	8003470 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	3311      	adds	r3, #17
 8010830:	4a0e      	ldr	r2, [pc, #56]	; (801086c <buildJoinRequest+0x68>)
 8010832:	f8b2 208c 	ldrh.w	r2, [r2, #140]	; 0x8c
 8010836:	4611      	mov	r1, r2
 8010838:	4618      	mov	r0, r3
 801083a:	f7fd fcc7 	bl	800e1cc <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 801083e:	2113      	movs	r1, #19
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f7fd fdeb 	bl	800e41c <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 8010846:	4b09      	ldr	r3, [pc, #36]	; (801086c <buildJoinRequest+0x68>)
 8010848:	2217      	movs	r2, #23
 801084a:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
    LMIC.devNonce++;
 801084e:	4b07      	ldr	r3, [pc, #28]	; (801086c <buildJoinRequest+0x68>)
 8010850:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8010854:	3301      	adds	r3, #1
 8010856:	b29a      	uxth	r2, r3
 8010858:	4b04      	ldr	r3, [pc, #16]	; (801086c <buildJoinRequest+0x68>)
 801085a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 801085e:	bf00      	nop
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	20000ce8 	.word	0x20000ce8
 801086c:	20000c04 	.word	0x20000c04

08010870 <startJoining>:

static void startJoining (osjob_t *osjob) {
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 8010878:	2005      	movs	r0, #5
 801087a:	f7fe fd21 	bl	800f2c0 <reportEvent>
}
 801087e:	bf00      	nop
 8010880:	3708      	adds	r7, #8
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
	...

08010888 <LMIC_startJoining>:

// Start join procedure if not already joined.
bool LMIC_startJoining (void) {
 8010888:	b580      	push	{r7, lr}
 801088a:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 801088c:	4b1e      	ldr	r3, [pc, #120]	; (8010908 <LMIC_startJoining+0x80>)
 801088e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d135      	bne.n	8010902 <LMIC_startJoining+0x7a>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 8010896:	4b1c      	ldr	r3, [pc, #112]	; (8010908 <LMIC_startJoining+0x80>)
 8010898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801089c:	f003 0390 	and.w	r3, r3, #144	; 0x90
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d004      	beq.n	80108ae <LMIC_startJoining+0x26>
 80108a4:	f240 714f 	movw	r1, #1871	; 0x74f
 80108a8:	4818      	ldr	r0, [pc, #96]	; (801090c <LMIC_startJoining+0x84>)
 80108aa:	f002 f825 	bl	80128f8 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 80108ae:	4b16      	ldr	r3, [pc, #88]	; (8010908 <LMIC_startJoining+0x80>)
 80108b0:	2200      	movs	r2, #0
 80108b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 80108b6:	4b14      	ldr	r3, [pc, #80]	; (8010908 <LMIC_startJoining+0x80>)
 80108b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80108bc:	f423 53c1 	bic.w	r3, r3, #6176	; 0x1820
 80108c0:	f023 0301 	bic.w	r3, r3, #1
 80108c4:	b29a      	uxth	r2, r3
 80108c6:	4b10      	ldr	r3, [pc, #64]	; (8010908 <LMIC_startJoining+0x80>)
 80108c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = 0;
 80108cc:	4b0e      	ldr	r3, [pc, #56]	; (8010908 <LMIC_startJoining+0x80>)
 80108ce:	2200      	movs	r2, #0
 80108d0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 80108d4:	4b0c      	ldr	r3, [pc, #48]	; (8010908 <LMIC_startJoining+0x80>)
 80108d6:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
 80108da:	4b0b      	ldr	r3, [pc, #44]	; (8010908 <LMIC_startJoining+0x80>)
 80108dc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        initJoinLoop();
 80108e0:	f7fe fc5c 	bl	800f19c <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 80108e4:	4b08      	ldr	r3, [pc, #32]	; (8010908 <LMIC_startJoining+0x80>)
 80108e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80108ea:	f043 0304 	orr.w	r3, r3, #4
 80108ee:	b29a      	uxth	r2, r3
 80108f0:	4b05      	ldr	r3, [pc, #20]	; (8010908 <LMIC_startJoining+0x80>)
 80108f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 80108f6:	4906      	ldr	r1, [pc, #24]	; (8010910 <LMIC_startJoining+0x88>)
 80108f8:	4806      	ldr	r0, [pc, #24]	; (8010914 <LMIC_startJoining+0x8c>)
 80108fa:	f000 fddb 	bl	80114b4 <os_setCallback>
        return 1;
 80108fe:	2301      	movs	r3, #1
 8010900:	e000      	b.n	8010904 <LMIC_startJoining+0x7c>
    }
    return 0; // already joined
 8010902:	2300      	movs	r3, #0
}
 8010904:	4618      	mov	r0, r3
 8010906:	bd80      	pop	{r7, pc}
 8010908:	20000c04 	.word	0x20000c04
 801090c:	08018278 	.word	0x08018278
 8010910:	08010871 	.word	0x08010871
 8010914:	20000c18 	.word	0x20000c18

08010918 <processPingRx>:
//
//
// ================================================================================

#if !defined(LMIC_DISABLE_PING)
static void processPingRx (osjob_t *osjob) {
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 8010920:	4b0b      	ldr	r3, [pc, #44]	; (8010950 <processPingRx+0x38>)
 8010922:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8010926:	2b00      	cmp	r3, #0
 8010928:	d00c      	beq.n	8010944 <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 801092a:	4b09      	ldr	r3, [pc, #36]	; (8010950 <processPingRx+0x38>)
 801092c:	2204      	movs	r2, #4
 801092e:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
        if( decodeFrame() ) {
 8010932:	f7fe fddd 	bl	800f4f0 <decodeFrame>
 8010936:	4603      	mov	r3, r0
 8010938:	2b00      	cmp	r3, #0
 801093a:	d003      	beq.n	8010944 <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 801093c:	200d      	movs	r0, #13
 801093e:	f7fe fcbf 	bl	800f2c0 <reportEvent>
            return;
 8010942:	e001      	b.n	8010948 <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 8010944:	f000 fa32 	bl	8010dac <engineUpdate>
}
 8010948:	3708      	adds	r7, #8
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
 801094e:	bf00      	nop
 8010950:	20000c04 	.word	0x20000c04

08010954 <processDnData>:
#endif // !LMIC_DISABLE_PING


static bool processDnData (void) {
 8010954:	b598      	push	{r3, r4, r7, lr}
 8010956:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8010958:	4b7a      	ldr	r3, [pc, #488]	; (8010b44 <processDnData+0x1f0>)
 801095a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010962:	2b00      	cmp	r3, #0
 8010964:	d104      	bne.n	8010970 <processDnData+0x1c>
 8010966:	f240 7177 	movw	r1, #1911	; 0x777
 801096a:	4877      	ldr	r0, [pc, #476]	; (8010b48 <processDnData+0x1f4>)
 801096c:	f001 ffc4 	bl	80128f8 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8010970:	4b74      	ldr	r3, [pc, #464]	; (8010b44 <processDnData+0x1f0>)
 8010972:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8010976:	2b00      	cmp	r3, #0
 8010978:	f040 80d0 	bne.w	8010b1c <processDnData+0x1c8>
      norx:
 801097c:	bf00      	nop
 801097e:	e000      	b.n	8010982 <processDnData+0x2e>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 8010980:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 8010982:	4b70      	ldr	r3, [pc, #448]	; (8010b44 <processDnData+0x1f0>)
 8010984:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8010988:	2b00      	cmp	r3, #0
 801098a:	d03a      	beq.n	8010a02 <processDnData+0xae>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 801098c:	4b6d      	ldr	r3, [pc, #436]	; (8010b44 <processDnData+0x1f0>)
 801098e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8010992:	2b07      	cmp	r3, #7
 8010994:	d830      	bhi.n	80109f8 <processDnData+0xa4>
                LMIC.txCnt += 1;
 8010996:	4b6b      	ldr	r3, [pc, #428]	; (8010b44 <processDnData+0x1f0>)
 8010998:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 801099c:	3301      	adds	r3, #1
 801099e:	b2da      	uxtb	r2, r3
 80109a0:	4b68      	ldr	r3, [pc, #416]	; (8010b44 <processDnData+0x1f0>)
 80109a2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, TABLE_GET_U1(DRADJUST, LMIC.txCnt)), KEEP_TXPOW);
 80109a6:	4b67      	ldr	r3, [pc, #412]	; (8010b44 <processDnData+0x1f0>)
 80109a8:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
 80109ac:	4b65      	ldr	r3, [pc, #404]	; (8010b44 <processDnData+0x1f0>)
 80109ae:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80109b2:	4619      	mov	r1, r3
 80109b4:	4865      	ldr	r0, [pc, #404]	; (8010b4c <processDnData+0x1f8>)
 80109b6:	f7fc fcc7 	bl	800d348 <table_get_u1>
 80109ba:	4603      	mov	r3, r0
 80109bc:	4619      	mov	r1, r3
 80109be:	4620      	mov	r0, r4
 80109c0:	f7fd fb9e 	bl	800e100 <lowerDR>
 80109c4:	4603      	mov	r3, r0
 80109c6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80109ca:	4619      	mov	r1, r3
 80109cc:	2002      	movs	r0, #2
 80109ce:	f7fe f90f 	bl	800ebf0 <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 80109d2:	4b5c      	ldr	r3, [pc, #368]	; (8010b44 <processDnData+0x1f0>)
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	2103      	movs	r1, #3
 80109d8:	4618      	mov	r0, r3
 80109da:	f7fe f8c9 	bl	800eb70 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 80109de:	4b59      	ldr	r3, [pc, #356]	; (8010b44 <processDnData+0x1f0>)
 80109e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80109e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	4b56      	ldr	r3, [pc, #344]	; (8010b44 <processDnData+0x1f0>)
 80109ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                engineUpdate();
 80109f0:	f000 f9dc 	bl	8010dac <engineUpdate>
                return 1;
 80109f4:	2301      	movs	r3, #1
 80109f6:	e0a2      	b.n	8010b3e <processDnData+0x1ea>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 80109f8:	4b52      	ldr	r3, [pc, #328]	; (8010b44 <processDnData+0x1f0>)
 80109fa:	2260      	movs	r2, #96	; 0x60
 80109fc:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8010a00:	e003      	b.n	8010a0a <processDnData+0xb6>
            LMIC.txrxFlags = TXRX_NOPORT;
 8010a02:	4b50      	ldr	r3, [pc, #320]	; (8010b44 <processDnData+0x1f0>)
 8010a04:	2220      	movs	r2, #32
 8010a06:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8010a0a:	4b4e      	ldr	r3, [pc, #312]	; (8010b44 <processDnData+0x1f0>)
 8010a0c:	f993 30bd 	ldrsb.w	r3, [r3, #189]	; 0xbd
 8010a10:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8010a14:	d009      	beq.n	8010a2a <processDnData+0xd6>
            LMIC.adrAckReq += 1;
 8010a16:	4b4b      	ldr	r3, [pc, #300]	; (8010b44 <processDnData+0x1f0>)
 8010a18:	f993 30bd 	ldrsb.w	r3, [r3, #189]	; 0xbd
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	3301      	adds	r3, #1
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	b25a      	sxtb	r2, r3
 8010a24:	4b47      	ldr	r3, [pc, #284]	; (8010b44 <processDnData+0x1f0>)
 8010a26:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
        LMIC.dataBeg = LMIC.dataLen = 0;
 8010a2a:	4b46      	ldr	r3, [pc, #280]	; (8010b44 <processDnData+0x1f0>)
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8010a32:	4b44      	ldr	r3, [pc, #272]	; (8010b44 <processDnData+0x1f0>)
 8010a34:	f893 20e3 	ldrb.w	r2, [r3, #227]	; 0xe3
 8010a38:	4b42      	ldr	r3, [pc, #264]	; (8010b44 <processDnData+0x1f0>)
 8010a3a:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8010a3e:	e000      	b.n	8010a42 <processDnData+0xee>
    }
    goto txcomplete;
 8010a40:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8010a42:	4b40      	ldr	r3, [pc, #256]	; (8010b44 <processDnData+0x1f0>)
 8010a44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010a48:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	4b3d      	ldr	r3, [pc, #244]	; (8010b44 <processDnData+0x1f0>)
 8010a50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8010a54:	4b3b      	ldr	r3, [pc, #236]	; (8010b44 <processDnData+0x1f0>)
 8010a56:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8010a5a:	f003 0307 	and.w	r3, r3, #7
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d012      	beq.n	8010a88 <processDnData+0x134>
 8010a62:	4b38      	ldr	r3, [pc, #224]	; (8010b44 <processDnData+0x1f0>)
 8010a64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d00b      	beq.n	8010a88 <processDnData+0x134>
            LMIC.opmode &= ~OP_LINKDEAD;
 8010a70:	4b34      	ldr	r3, [pc, #208]	; (8010b44 <processDnData+0x1f0>)
 8010a72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a7a:	b29a      	uxth	r2, r3
 8010a7c:	4b31      	ldr	r3, [pc, #196]	; (8010b44 <processDnData+0x1f0>)
 8010a7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
            reportEvent(EV_LINK_ALIVE);
 8010a82:	200f      	movs	r0, #15
 8010a84:	f7fe fc1c 	bl	800f2c0 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 8010a88:	200a      	movs	r0, #10
 8010a8a:	f7fe fc19 	bl	800f2c0 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 8010a8e:	4b2d      	ldr	r3, [pc, #180]	; (8010b44 <processDnData+0x1f0>)
 8010a90:	f993 30bd 	ldrsb.w	r3, [r3, #189]	; 0xbd
 8010a94:	2b18      	cmp	r3, #24
 8010a96:	dd1c      	ble.n	8010ad2 <processDnData+0x17e>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 8010a98:	4b2a      	ldr	r3, [pc, #168]	; (8010b44 <processDnData+0x1f0>)
 8010a9a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fd fafe 	bl	800e0a0 <decDR>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8010aaa:	4619      	mov	r1, r3
 8010aac:	2003      	movs	r0, #3
 8010aae:	f7fe f89f 	bl	800ebf0 <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 8010ab2:	4b24      	ldr	r3, [pc, #144]	; (8010b44 <processDnData+0x1f0>)
 8010ab4:	220c      	movs	r2, #12
 8010ab6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8010aba:	4b22      	ldr	r3, [pc, #136]	; (8010b44 <processDnData+0x1f0>)
 8010abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010ac0:	f443 5381 	orr.w	r3, r3, #4128	; 0x1020
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	4b1f      	ldr	r3, [pc, #124]	; (8010b44 <processDnData+0x1f0>)
 8010ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
            reportEvent(EV_LINK_DEAD);
 8010acc:	200e      	movs	r0, #14
 8010ace:	f7fe fbf7 	bl	800f2c0 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 8010ad2:	4b1c      	ldr	r3, [pc, #112]	; (8010b44 <processDnData+0x1f0>)
 8010ad4:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d01d      	beq.n	8010b18 <processDnData+0x1c4>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8010adc:	4b19      	ldr	r3, [pc, #100]	; (8010b44 <processDnData+0x1f0>)
 8010ade:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010ae2:	f003 0302 	and.w	r3, r3, #2
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d007      	beq.n	8010afa <processDnData+0x1a6>
                reportEvent(EV_BEACON_FOUND);
 8010aea:	2002      	movs	r0, #2
 8010aec:	f7fe fbe8 	bl	800f2c0 <reportEvent>
                LMIC.bcninfoTries = 0;
 8010af0:	4b14      	ldr	r3, [pc, #80]	; (8010b44 <processDnData+0x1f0>)
 8010af2:	2200      	movs	r2, #0
 8010af4:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 8010af8:	e00e      	b.n	8010b18 <processDnData+0x1c4>
            else if( --LMIC.bcninfoTries == 0 ) {
 8010afa:	4b12      	ldr	r3, [pc, #72]	; (8010b44 <processDnData+0x1f0>)
 8010afc:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8010b00:	3b01      	subs	r3, #1
 8010b02:	b2da      	uxtb	r2, r3
 8010b04:	4b0f      	ldr	r3, [pc, #60]	; (8010b44 <processDnData+0x1f0>)
 8010b06:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 8010b0a:	4b0e      	ldr	r3, [pc, #56]	; (8010b44 <processDnData+0x1f0>)
 8010b0c:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d101      	bne.n	8010b18 <processDnData+0x1c4>
                startScan();   // NWK did not answer - try scan
 8010b14:	f7ff fe1a 	bl	801074c <startScan>
        return 1;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	e010      	b.n	8010b3e <processDnData+0x1ea>
    if( !decodeFrame() ) {
 8010b1c:	f7fe fce8 	bl	800f4f0 <decodeFrame>
 8010b20:	4603      	mov	r3, r0
 8010b22:	f083 0301 	eor.w	r3, r3, #1
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d089      	beq.n	8010a40 <processDnData+0xec>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8010b2c:	4b05      	ldr	r3, [pc, #20]	; (8010b44 <processDnData+0x1f0>)
 8010b2e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8010b32:	f003 0301 	and.w	r3, r3, #1
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	f43f af22 	beq.w	8010980 <processDnData+0x2c>
            return 0;
 8010b3c:	2300      	movs	r3, #0
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	bd98      	pop	{r3, r4, r7, pc}
 8010b42:	bf00      	nop
 8010b44:	20000c04 	.word	0x20000c04
 8010b48:	08018278 	.word	0x08018278
 8010b4c:	080198a0 	.word	0x080198a0

08010b50 <processBeacon>:


#if !defined(LMIC_DISABLE_BEACONS)
static void processBeacon (osjob_t *osjob) {
 8010b50:	b590      	push	{r4, r7, lr}
 8010b52:	b087      	sub	sp, #28
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 8010b58:	4b88      	ldr	r3, [pc, #544]	; (8010d7c <processBeacon+0x22c>)
 8010b5a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8010b5e:	60fb      	str	r3, [r7, #12]
    uint8_t flags = LMIC.bcninfo.flags;
 8010b60:	4b86      	ldr	r3, [pc, #536]	; (8010d7c <processBeacon+0x22c>)
 8010b62:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8010b66:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8010b68:	4b84      	ldr	r3, [pc, #528]	; (8010d7c <processBeacon+0x22c>)
 8010b6a:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	f000 808a 	beq.w	8010c88 <processBeacon+0x138>
 8010b74:	f7fe fc22 	bl	800f3bc <decodeBeacon>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	f340 8084 	ble.w	8010c88 <processBeacon+0x138>
        ev = EV_BEACON_TRACKED;
 8010b80:	2304      	movs	r3, #4
 8010b82:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8010b84:	7afb      	ldrb	r3, [r7, #11]
 8010b86:	f003 0303 	and.w	r3, r3, #3
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d104      	bne.n	8010b98 <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8010b8e:	2100      	movs	r1, #0
 8010b90:	200d      	movs	r0, #13
 8010b92:	f7fd fe2f 	bl	800e7f4 <calcBcnRxWindowFromMillis>
            goto rev;
 8010b96:	e0d5      	b.n	8010d44 <processBeacon+0x1f4>
        }
        // We have a previous BEACON to calculate some drift
        int16_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	4b77      	ldr	r3, [pc, #476]	; (8010d7c <processBeacon+0x22c>)
 8010b9e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	1ad3      	subs	r3, r2, r3
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 8010bb0:	4b72      	ldr	r3, [pc, #456]	; (8010d7c <processBeacon+0x22c>)
 8010bb2:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d013      	beq.n	8010be2 <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 8010bba:	4b70      	ldr	r3, [pc, #448]	; (8010d7c <processBeacon+0x22c>)
 8010bbc:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010bc6:	496d      	ldr	r1, [pc, #436]	; (8010d7c <processBeacon+0x22c>)
 8010bc8:	f9b1 104c 	ldrsh.w	r1, [r1, #76]	; 0x4c
 8010bcc:	1a59      	subs	r1, r3, r1
 8010bce:	4b6b      	ldr	r3, [pc, #428]	; (8010d7c <processBeacon+0x22c>)
 8010bd0:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8010bd4:	3301      	adds	r3, #1
 8010bd6:	fb91 f3f3 	sdiv	r3, r1, r3
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	4413      	add	r3, r2
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 8010be2:	4b66      	ldr	r3, [pc, #408]	; (8010d7c <processBeacon+0x22c>)
 8010be4:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8010be8:	f003 0304 	and.w	r3, r3, #4
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d127      	bne.n	8010c40 <processBeacon+0xf0>
            int16_t diff = LMIC.drift - drift;
 8010bf0:	4b62      	ldr	r3, [pc, #392]	; (8010d7c <processBeacon+0x22c>)
 8010bf2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	8abb      	ldrh	r3, [r7, #20]
 8010bfa:	1ad3      	subs	r3, r2, r3
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 8010c00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	da03      	bge.n	8010c10 <processBeacon+0xc0>
 8010c08:	8a7b      	ldrh	r3, [r7, #18]
 8010c0a:	425b      	negs	r3, r3
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 8010c10:	4a5a      	ldr	r2, [pc, #360]	; (8010d7c <processBeacon+0x22c>)
 8010c12:	8a7b      	ldrh	r3, [r7, #18]
 8010c14:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
            if( LMIC.maxDriftDiff < diff )
 8010c18:	4b58      	ldr	r3, [pc, #352]	; (8010d7c <processBeacon+0x22c>)
 8010c1a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8010c1e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8010c22:	429a      	cmp	r2, r3
 8010c24:	dd03      	ble.n	8010c2e <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 8010c26:	4a55      	ldr	r2, [pc, #340]	; (8010d7c <processBeacon+0x22c>)
 8010c28:	8a7b      	ldrh	r3, [r7, #18]
 8010c2a:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8010c2e:	4b53      	ldr	r3, [pc, #332]	; (8010d7c <processBeacon+0x22c>)
 8010c30:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8010c34:	f023 0308 	bic.w	r3, r3, #8
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	4b50      	ldr	r3, [pc, #320]	; (8010d7c <processBeacon+0x22c>)
 8010c3c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
        }
        LMIC.drift = drift;
 8010c40:	4a4e      	ldr	r2, [pc, #312]	; (8010d7c <processBeacon+0x22c>)
 8010c42:	8abb      	ldrh	r3, [r7, #20]
 8010c44:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8010c48:	4b4c      	ldr	r3, [pc, #304]	; (8010d7c <processBeacon+0x22c>)
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8010c50:	4b4a      	ldr	r3, [pc, #296]	; (8010d7c <processBeacon+0x22c>)
 8010c52:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8010c56:	4b49      	ldr	r3, [pc, #292]	; (8010d7c <processBeacon+0x22c>)
 8010c58:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8010c5c:	4b47      	ldr	r3, [pc, #284]	; (8010d7c <processBeacon+0x22c>)
 8010c5e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8010c62:	f023 0304 	bic.w	r3, r3, #4
 8010c66:	b2da      	uxtb	r2, r3
 8010c68:	4b44      	ldr	r3, [pc, #272]	; (8010d7c <processBeacon+0x22c>)
 8010c6a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8010c6e:	4b43      	ldr	r3, [pc, #268]	; (8010d7c <processBeacon+0x22c>)
 8010c70:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8010c74:	f003 0303 	and.w	r3, r3, #3
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d14f      	bne.n	8010d1c <processBeacon+0x1cc>
 8010c7c:	f240 71da 	movw	r1, #2010	; 0x7da
 8010c80:	483f      	ldr	r0, [pc, #252]	; (8010d80 <processBeacon+0x230>)
 8010c82:	f001 fe39 	bl	80128f8 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8010c86:	e049      	b.n	8010d1c <processBeacon+0x1cc>
    } else {
        ev = EV_BEACON_MISSED;
 8010c88:	2303      	movs	r3, #3
 8010c8a:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 8010c8c:	4b3b      	ldr	r3, [pc, #236]	; (8010d7c <processBeacon+0x22c>)
 8010c8e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8010c92:	4a3a      	ldr	r2, [pc, #232]	; (8010d7c <processBeacon+0x22c>)
 8010c94:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8010c98:	1a9b      	subs	r3, r3, r2
 8010c9a:	f503 137a 	add.w	r3, r3, #4096000	; 0x3e8000
 8010c9e:	4a37      	ldr	r2, [pc, #220]	; (8010d7c <processBeacon+0x22c>)
 8010ca0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
        LMIC.bcninfo.time   += BCN_INTV_sec;
 8010ca4:	4b35      	ldr	r3, [pc, #212]	; (8010d7c <processBeacon+0x22c>)
 8010ca6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010caa:	3380      	adds	r3, #128	; 0x80
 8010cac:	4a33      	ldr	r2, [pc, #204]	; (8010d7c <processBeacon+0x22c>)
 8010cae:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
        LMIC.missedBcns++;
 8010cb2:	4b32      	ldr	r3, [pc, #200]	; (8010d7c <processBeacon+0x22c>)
 8010cb4:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8010cb8:	3301      	adds	r3, #1
 8010cba:	b2da      	uxtb	r2, r3
 8010cbc:	4b2f      	ldr	r3, [pc, #188]	; (8010d7c <processBeacon+0x22c>)
 8010cbe:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8010cc2:	4b2e      	ldr	r3, [pc, #184]	; (8010d7c <processBeacon+0x22c>)
 8010cc4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8010cc8:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8010ccc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010cd0:	2104      	movs	r1, #4
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fd ff4c 	bl	800eb70 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 8010cd8:	4b28      	ldr	r3, [pc, #160]	; (8010d7c <processBeacon+0x22c>)
 8010cda:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8010cde:	2b14      	cmp	r3, #20
 8010ce0:	d908      	bls.n	8010cf4 <processBeacon+0x1a4>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8010ce2:	4b26      	ldr	r3, [pc, #152]	; (8010d7c <processBeacon+0x22c>)
 8010ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010ce8:	f043 0320 	orr.w	r3, r3, #32
 8010cec:	b29a      	uxth	r2, r3
 8010cee:	4b23      	ldr	r3, [pc, #140]	; (8010d7c <processBeacon+0x22c>)
 8010cf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 8010cf4:	4b21      	ldr	r3, [pc, #132]	; (8010d7c <processBeacon+0x22c>)
 8010cf6:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8010cfa:	2b64      	cmp	r3, #100	; 0x64
 8010cfc:	d90f      	bls.n	8010d1e <processBeacon+0x1ce>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 8010cfe:	4b1f      	ldr	r3, [pc, #124]	; (8010d7c <processBeacon+0x22c>)
 8010d00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010d04:	f423 63c4 	bic.w	r3, r3, #1568	; 0x620
 8010d08:	f023 0302 	bic.w	r3, r3, #2
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	4b1b      	ldr	r3, [pc, #108]	; (8010d7c <processBeacon+0x22c>)
 8010d10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
            reportEvent(EV_LOST_TSYNC);
 8010d14:	200b      	movs	r0, #11
 8010d16:	f7fe fad3 	bl	800f2c0 <reportEvent>
            return;
 8010d1a:	e02c      	b.n	8010d76 <processBeacon+0x226>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8010d1c:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 8010d1e:	4b17      	ldr	r3, [pc, #92]	; (8010d7c <processBeacon+0x22c>)
 8010d20:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
 8010d24:	210a      	movs	r1, #10
 8010d26:	2000      	movs	r0, #0
 8010d28:	f7fd fd08 	bl	800e73c <calcRxWindow>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	1ae3      	subs	r3, r4, r3
 8010d30:	f503 137a 	add.w	r3, r3, #4096000	; 0x3e8000
 8010d34:	4a11      	ldr	r2, [pc, #68]	; (8010d7c <processBeacon+0x22c>)
 8010d36:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    LMIC.bcnRxsyms = LMIC.rxsyms;
 8010d3a:	4b10      	ldr	r3, [pc, #64]	; (8010d7c <processBeacon+0x22c>)
 8010d3c:	7c1a      	ldrb	r2, [r3, #16]
 8010d3e:	4b0f      	ldr	r3, [pc, #60]	; (8010d7c <processBeacon+0x22c>)
 8010d40:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
  rev:
#if LMIC_US915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
 8010d44:	4b0d      	ldr	r3, [pc, #52]	; (8010d7c <processBeacon+0x22c>)
 8010d46:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	f003 0307 	and.w	r3, r3, #7
 8010d52:	b2da      	uxtb	r2, r3
 8010d54:	4b09      	ldr	r3, [pc, #36]	; (8010d7c <processBeacon+0x22c>)
 8010d56:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
#endif
#if !defined(LMIC_DISABLE_PING)
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 8010d5a:	4b08      	ldr	r3, [pc, #32]	; (8010d7c <processBeacon+0x22c>)
 8010d5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d002      	beq.n	8010d6e <processBeacon+0x21e>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8010d68:	4806      	ldr	r0, [pc, #24]	; (8010d84 <processBeacon+0x234>)
 8010d6a:	f7fd fdcd 	bl	800e908 <rxschedInit>
#endif // !LMIC_DISABLE_PING
    reportEvent(ev);
 8010d6e:	7dfb      	ldrb	r3, [r7, #23]
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fe faa5 	bl	800f2c0 <reportEvent>
}
 8010d76:	371c      	adds	r7, #28
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd90      	pop	{r4, r7, pc}
 8010d7c:	20000c04 	.word	0x20000c04
 8010d80:	08018278 	.word	0x08018278
 8010d84:	20000cd4 	.word	0x20000cd4

08010d88 <startRxPing>:
}
#endif // !LMIC_DISABLE_BEACONS


#if !defined(LMIC_DISABLE_PING)
static void startRxPing (osjob_t *osjob) {
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 8010d90:	4b04      	ldr	r3, [pc, #16]	; (8010da4 <startRxPing+0x1c>)
 8010d92:	4a05      	ldr	r2, [pc, #20]	; (8010da8 <startRxPing+0x20>)
 8010d94:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8010d96:	2002      	movs	r0, #2
 8010d98:	f001 fae0 	bl	801235c <os_radio>
}
 8010d9c:	bf00      	nop
 8010d9e:	3708      	adds	r7, #8
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	20000c04 	.word	0x20000c04
 8010da8:	08010919 	.word	0x08010919

08010dac <engineUpdate>:
#endif // !LMIC_DISABLE_PING


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b086      	sub	sp, #24
 8010db0:	af00      	add	r7, sp, #0
#if LMIC_DEBUG_LEVEL > 0
    lmic_printf("%lu: engineUpdate, opmode=0x%x\n", os_getTime(), LMIC.opmode);
 8010db2:	f000 fb29 	bl	8011408 <os_getTime>
 8010db6:	4603      	mov	r3, r0
 8010db8:	4ab2      	ldr	r2, [pc, #712]	; (8011084 <engineUpdate+0x2d8>)
 8010dba:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	48b1      	ldr	r0, [pc, #708]	; (8011088 <engineUpdate+0x2dc>)
 8010dc2:	f001 faf7 	bl	80123b4 <printf>
#endif
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 )
 8010dc6:	4baf      	ldr	r3, [pc, #700]	; (8011084 <engineUpdate+0x2d8>)
 8010dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010dcc:	f003 03c1 	and.w	r3, r3, #193	; 0xc1
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	f040 81d3 	bne.w	801117c <engineUpdate+0x3d0>
        return;

#if !defined(LMIC_DISABLE_JOIN)
    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 8010dd6:	4bab      	ldr	r3, [pc, #684]	; (8011084 <engineUpdate+0x2d8>)
 8010dd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d109      	bne.n	8010df4 <engineUpdate+0x48>
 8010de0:	4ba8      	ldr	r3, [pc, #672]	; (8011084 <engineUpdate+0x2d8>)
 8010de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010de6:	f003 0304 	and.w	r3, r3, #4
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d102      	bne.n	8010df4 <engineUpdate+0x48>
        LMIC_startJoining();
 8010dee:	f7ff fd4b 	bl	8010888 <LMIC_startJoining>
        return;
 8010df2:	e1c6      	b.n	8011182 <engineUpdate+0x3d6>
    }
#endif // !LMIC_DISABLE_JOIN

    ostime_t now    = os_getTime();
 8010df4:	f000 fb08 	bl	8011408 <os_getTime>
 8010df8:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	613b      	str	r3, [r7, #16]

#if !defined(LMIC_DISABLE_BEACONS)
    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8010e02:	4ba0      	ldr	r3, [pc, #640]	; (8011084 <engineUpdate+0x2d8>)
 8010e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010e08:	f003 0302 	and.w	r3, r3, #2
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d011      	beq.n	8010e34 <engineUpdate+0x88>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8010e10:	4b9c      	ldr	r3, [pc, #624]	; (8011084 <engineUpdate+0x2d8>)
 8010e12:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8010e16:	68ba      	ldr	r2, [r7, #8]
 8010e18:	1ad3      	subs	r3, r2, r3
 8010e1a:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8010e1e:	d004      	beq.n	8010e2a <engineUpdate+0x7e>
 8010e20:	f640 011e 	movw	r1, #2078	; 0x81e
 8010e24:	4899      	ldr	r0, [pc, #612]	; (801108c <engineUpdate+0x2e0>)
 8010e26:	f001 fd67 	bl	80128f8 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 8010e2a:	4b96      	ldr	r3, [pc, #600]	; (8011084 <engineUpdate+0x2d8>)
 8010e2c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8010e30:	3b40      	subs	r3, #64	; 0x40
 8010e32:	617b      	str	r3, [r7, #20]
    }
#endif // !LMIC_DISABLE_BEACONS

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8010e34:	4b93      	ldr	r3, [pc, #588]	; (8011084 <engineUpdate+0x2d8>)
 8010e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010e3a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	f000 8142 	beq.w	80110c8 <engineUpdate+0x31c>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bool jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 8010e44:	4b8f      	ldr	r3, [pc, #572]	; (8011084 <engineUpdate+0x2d8>)
 8010e46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010e4a:	f003 0324 	and.w	r3, r3, #36	; 0x24
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	bf14      	ite	ne
 8010e52:	2301      	movne	r3, #1
 8010e54:	2300      	moveq	r3, #0
 8010e56:	71fb      	strb	r3, [r7, #7]
        #if LMIC_DEBUG_LEVEL > 1
            if (jacc)
 8010e58:	79fb      	ldrb	r3, [r7, #7]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d007      	beq.n	8010e6e <engineUpdate+0xc2>
                lmic_printf("%lu: Uplink join pending\n", os_getTime());
 8010e5e:	f000 fad3 	bl	8011408 <os_getTime>
 8010e62:	4603      	mov	r3, r0
 8010e64:	4619      	mov	r1, r3
 8010e66:	488a      	ldr	r0, [pc, #552]	; (8011090 <engineUpdate+0x2e4>)
 8010e68:	f001 faa4 	bl	80123b4 <printf>
 8010e6c:	e006      	b.n	8010e7c <engineUpdate+0xd0>
            else
                lmic_printf("%lu: Uplink data pending\n", os_getTime());
 8010e6e:	f000 facb 	bl	8011408 <os_getTime>
 8010e72:	4603      	mov	r3, r0
 8010e74:	4619      	mov	r1, r3
 8010e76:	4887      	ldr	r0, [pc, #540]	; (8011094 <engineUpdate+0x2e8>)
 8010e78:	f001 fa9c 	bl	80123b4 <printf>
        #endif
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 8010e7c:	4b81      	ldr	r3, [pc, #516]	; (8011084 <engineUpdate+0x2d8>)
 8010e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d019      	beq.n	8010ebe <engineUpdate+0x112>
            txbeg = LMIC.txend = nextTx(now);
 8010e8a:	f7fe f8eb 	bl	800f064 <_nextTx>
 8010e8e:	4a7d      	ldr	r2, [pc, #500]	; (8011084 <engineUpdate+0x2d8>)
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	6013      	str	r3, [r2, #0]
 8010e94:	4b7b      	ldr	r3, [pc, #492]	; (8011084 <engineUpdate+0x2d8>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 8010e9a:	4b7a      	ldr	r3, [pc, #488]	; (8011084 <engineUpdate+0x2d8>)
 8010e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ea4:	b29a      	uxth	r2, r3
 8010ea6:	4b77      	ldr	r3, [pc, #476]	; (8011084 <engineUpdate+0x2d8>)
 8010ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
            #if LMIC_DEBUG_LEVEL > 1
                lmic_printf("%lu: Airtime available at %lu (channel duty limit)\n", os_getTime(), txbeg);
 8010eac:	f000 faac 	bl	8011408 <os_getTime>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	693a      	ldr	r2, [r7, #16]
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	4878      	ldr	r0, [pc, #480]	; (8011098 <engineUpdate+0x2ec>)
 8010eb8:	f001 fa7c 	bl	80123b4 <printf>
 8010ebc:	e00a      	b.n	8010ed4 <engineUpdate+0x128>
            #endif
        } else {
            txbeg = LMIC.txend;
 8010ebe:	4b71      	ldr	r3, [pc, #452]	; (8011084 <engineUpdate+0x2d8>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	613b      	str	r3, [r7, #16]
            #if LMIC_DEBUG_LEVEL > 1
                lmic_printf("%lu: Airtime available at %lu (previously determined)\n", os_getTime(), txbeg);
 8010ec4:	f000 faa0 	bl	8011408 <os_getTime>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	693a      	ldr	r2, [r7, #16]
 8010ecc:	4619      	mov	r1, r3
 8010ece:	4873      	ldr	r0, [pc, #460]	; (801109c <engineUpdate+0x2f0>)
 8010ed0:	f001 fa70 	bl	80123b4 <printf>
            #endif
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (ostimediff_t)(txbeg - LMIC.globalDutyAvail) < 0 ) {
 8010ed4:	4b6b      	ldr	r3, [pc, #428]	; (8011084 <engineUpdate+0x2d8>)
 8010ed6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d106      	bne.n	8010eec <engineUpdate+0x140>
 8010ede:	4b69      	ldr	r3, [pc, #420]	; (8011084 <engineUpdate+0x2d8>)
 8010ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d010      	beq.n	8010f0e <engineUpdate+0x162>
 8010eec:	4b65      	ldr	r3, [pc, #404]	; (8011084 <engineUpdate+0x2d8>)
 8010eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ef0:	693a      	ldr	r2, [r7, #16]
 8010ef2:	1ad3      	subs	r3, r2, r3
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	da0a      	bge.n	8010f0e <engineUpdate+0x162>
            txbeg = LMIC.globalDutyAvail;
 8010ef8:	4b62      	ldr	r3, [pc, #392]	; (8011084 <engineUpdate+0x2d8>)
 8010efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010efc:	613b      	str	r3, [r7, #16]
            #if LMIC_DEBUG_LEVEL > 1
                lmic_printf("%lu: Airtime available at %lu (global duty limit)\n", os_getTime(), txbeg);
 8010efe:	f000 fa83 	bl	8011408 <os_getTime>
 8010f02:	4603      	mov	r3, r0
 8010f04:	693a      	ldr	r2, [r7, #16]
 8010f06:	4619      	mov	r1, r3
 8010f08:	4865      	ldr	r0, [pc, #404]	; (80110a0 <engineUpdate+0x2f4>)
 8010f0a:	f001 fa53 	bl	80123b4 <printf>
            #endif
        }
#if !defined(LMIC_DISABLE_BEACONS)
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8010f0e:	4b5d      	ldr	r3, [pc, #372]	; (8011084 <engineUpdate+0x2d8>)
 8010f10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010f14:	f003 0302 	and.w	r3, r3, #2
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d01e      	beq.n	8010f5a <engineUpdate+0x1ae>
            (ostimediff_t)(txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime) > 0 ) {
 8010f1c:	79fb      	ldrb	r3, [r7, #7]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d001      	beq.n	8010f26 <engineUpdate+0x17a>
 8010f22:	4a60      	ldr	r2, [pc, #384]	; (80110a4 <engineUpdate+0x2f8>)
 8010f24:	e000      	b.n	8010f28 <engineUpdate+0x17c>
 8010f26:	4a60      	ldr	r2, [pc, #384]	; (80110a8 <engineUpdate+0x2fc>)
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	441a      	add	r2, r3
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	dd12      	ble.n	8010f5a <engineUpdate+0x1ae>

            #if LMIC_DEBUG_LEVEL > 1
                lmic_printf("%lu: Awaiting beacon before uplink\n", os_getTime());
 8010f34:	f000 fa68 	bl	8011408 <os_getTime>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	485b      	ldr	r0, [pc, #364]	; (80110ac <engineUpdate+0x300>)
 8010f3e:	f001 fa39 	bl	80123b4 <printf>
            #endif

            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8010f48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010f4c:	2110      	movs	r1, #16
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fd fe0e 	bl	800eb70 <txDelay>
            txbeg = 0;
 8010f54:	2300      	movs	r3, #0
 8010f56:	613b      	str	r3, [r7, #16]
            goto checkrx;
 8010f58:	e0be      	b.n	80110d8 <engineUpdate+0x32c>
        }
#endif // !LMIC_DISABLE_BEACONS
        // Earliest possible time vs overhead to setup radio
        if( (ostimediff_t)(txbeg - (now + TX_RAMPUP)) < 0 ) {
 8010f5a:	693a      	ldr	r2, [r7, #16]
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	1ad3      	subs	r3, r2, r3
 8010f60:	3b40      	subs	r3, #64	; 0x40
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	da77      	bge.n	8011056 <engineUpdate+0x2aa>
            #if LMIC_DEBUG_LEVEL > 1
                lmic_printf("%lu: Ready for uplink\n", os_getTime());
 8010f66:	f000 fa4f 	bl	8011408 <os_getTime>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	4850      	ldr	r0, [pc, #320]	; (80110b0 <engineUpdate+0x304>)
 8010f70:	f001 fa20 	bl	80123b4 <printf>
            #endif
            // We could send right now!
            txbeg = now;
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8010f78:	4b42      	ldr	r3, [pc, #264]	; (8011084 <engineUpdate+0x2d8>)
 8010f7a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010f7e:	73fb      	strb	r3, [r7, #15]
#if !defined(LMIC_DISABLE_JOIN)
            if( jacc ) {
 8010f80:	79fb      	ldrb	r3, [r7, #7]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d01d      	beq.n	8010fc2 <engineUpdate+0x216>
                uint8_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8010f86:	4b3f      	ldr	r3, [pc, #252]	; (8011084 <engineUpdate+0x2d8>)
 8010f88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010f8c:	f003 0320 	and.w	r3, r3, #32
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d00c      	beq.n	8010fae <engineUpdate+0x202>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8010f94:	4b3b      	ldr	r3, [pc, #236]	; (8011084 <engineUpdate+0x2d8>)
 8010f96:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8010f9a:	7bfb      	ldrb	r3, [r7, #15]
 8010f9c:	4611      	mov	r1, r2
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7fd f8ae 	bl	800e100 <lowerDR>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 8010fa8:	23c0      	movs	r3, #192	; 0xc0
 8010faa:	73bb      	strb	r3, [r7, #14]
 8010fac:	e001      	b.n	8010fb2 <engineUpdate+0x206>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 8010fae:	2300      	movs	r3, #0
 8010fb0:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 8010fb2:	7bbb      	ldrb	r3, [r7, #14]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7ff fc25 	bl	8010804 <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 8010fba:	4b32      	ldr	r3, [pc, #200]	; (8011084 <engineUpdate+0x2d8>)
 8010fbc:	4a3d      	ldr	r2, [pc, #244]	; (80110b4 <engineUpdate+0x308>)
 8010fbe:	61da      	str	r2, [r3, #28]
 8010fc0:	e01d      	b.n	8010ffe <engineUpdate+0x252>
            } else
#endif // !LMIC_DISABLE_JOIN
            {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 8010fc2:	4b30      	ldr	r3, [pc, #192]	; (8011084 <engineUpdate+0x2d8>)
 8010fc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010fc8:	f113 0f81 	cmn.w	r3, #129	; 0x81
 8010fcc:	d907      	bls.n	8010fde <engineUpdate+0x232>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn,
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 8010fce:	bf00      	nop
 8010fd0:	e000      	b.n	8010fd4 <engineUpdate+0x228>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 8010fd2:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 8010fd4:	4938      	ldr	r1, [pc, #224]	; (80110b8 <engineUpdate+0x30c>)
 8010fd6:	4839      	ldr	r0, [pc, #228]	; (80110bc <engineUpdate+0x310>)
 8010fd8:	f000 fa6c 	bl	80114b4 <os_setCallback>
                    return;
 8010fdc:	e0d1      	b.n	8011182 <engineUpdate+0x3d6>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 8010fde:	4b29      	ldr	r3, [pc, #164]	; (8011084 <engineUpdate+0x2d8>)
 8010fe0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d105      	bne.n	8010ff4 <engineUpdate+0x248>
 8010fe8:	4b26      	ldr	r3, [pc, #152]	; (8011084 <engineUpdate+0x2d8>)
 8010fea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ff2:	d0ee      	beq.n	8010fd2 <engineUpdate+0x226>
                }
                buildDataFrame();
 8010ff4:	f7ff f978 	bl	80102e8 <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 8010ff8:	4b22      	ldr	r3, [pc, #136]	; (8011084 <engineUpdate+0x2d8>)
 8010ffa:	4a31      	ldr	r2, [pc, #196]	; (80110c0 <engineUpdate+0x314>)
 8010ffc:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 8010ffe:	7bfb      	ldrb	r3, [r7, #15]
 8011000:	4618      	mov	r0, r3
 8011002:	f7fd f825 	bl	800e050 <updr2rps>
 8011006:	4603      	mov	r3, r0
 8011008:	461a      	mov	r2, r3
 801100a:	4b1e      	ldr	r3, [pc, #120]	; (8011084 <engineUpdate+0x2d8>)
 801100c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8011010:	4619      	mov	r1, r3
 8011012:	4610      	mov	r0, r2
 8011014:	f7fc ffb6 	bl	800df84 <setCr>
 8011018:	4603      	mov	r3, r0
 801101a:	461a      	mov	r2, r3
 801101c:	4b19      	ldr	r3, [pc, #100]	; (8011084 <engineUpdate+0x2d8>)
 801101e:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 8011020:	4a18      	ldr	r2, [pc, #96]	; (8011084 <engineUpdate+0x2d8>)
 8011022:	7bfb      	ldrb	r3, [r7, #15]
 8011024:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 8011026:	4b17      	ldr	r3, [pc, #92]	; (8011084 <engineUpdate+0x2d8>)
 8011028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801102c:	b21b      	sxth	r3, r3
 801102e:	f423 6319 	bic.w	r3, r3, #2448	; 0x990
 8011032:	b21b      	sxth	r3, r3
 8011034:	f443 6308 	orr.w	r3, r3, #2176	; 0x880
 8011038:	b21b      	sxth	r3, r3
 801103a:	b29a      	uxth	r2, r3
 801103c:	4b11      	ldr	r3, [pc, #68]	; (8011084 <engineUpdate+0x2d8>)
 801103e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
            updateTx(txbeg);
 8011042:	6938      	ldr	r0, [r7, #16]
 8011044:	f7fd ffac 	bl	800efa0 <updateTx>
            reportEvent(EV_TXSTART);
 8011048:	2011      	movs	r0, #17
 801104a:	f7fe f939 	bl	800f2c0 <reportEvent>
            os_radio(RADIO_TX);
 801104e:	2001      	movs	r0, #1
 8011050:	f001 f984 	bl	801235c <os_radio>
            return;
 8011054:	e095      	b.n	8011182 <engineUpdate+0x3d6>
        }
        #if LMIC_DEBUG_LEVEL > 1
            lmic_printf("%lu: Uplink delayed until %lu\n", os_getTime(), txbeg);
 8011056:	f000 f9d7 	bl	8011408 <os_getTime>
 801105a:	4603      	mov	r3, r0
 801105c:	693a      	ldr	r2, [r7, #16]
 801105e:	4619      	mov	r1, r3
 8011060:	4818      	ldr	r0, [pc, #96]	; (80110c4 <engineUpdate+0x318>)
 8011062:	f001 f9a7 	bl	80123b4 <printf>
        #endif
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8011066:	4b07      	ldr	r3, [pc, #28]	; (8011084 <engineUpdate+0x2d8>)
 8011068:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801106c:	f003 0302 	and.w	r3, r3, #2
 8011070:	2b00      	cmp	r3, #0
 8011072:	d07a      	beq.n	801116a <engineUpdate+0x3be>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d12e      	bne.n	80110d8 <engineUpdate+0x32c>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	3301      	adds	r3, #1
 801107e:	613b      	str	r3, [r7, #16]
 8011080:	e02a      	b.n	80110d8 <engineUpdate+0x32c>
 8011082:	bf00      	nop
 8011084:	20000c04 	.word	0x20000c04
 8011088:	080182f0 	.word	0x080182f0
 801108c:	08018278 	.word	0x08018278
 8011090:	08018310 	.word	0x08018310
 8011094:	0801832c 	.word	0x0801832c
 8011098:	08018348 	.word	0x08018348
 801109c:	0801837c 	.word	0x0801837c
 80110a0:	080183b4 	.word	0x080183b4
 80110a4:	00046500 	.word	0x00046500
 80110a8:	0002ee00 	.word	0x0002ee00
 80110ac:	080183e8 	.word	0x080183e8
 80110b0:	0801840c 	.word	0x0801840c
 80110b4:	080101c1 	.word	0x080101c1
 80110b8:	0800f2df 	.word	0x0800f2df
 80110bc:	20000c18 	.word	0x20000c18
 80110c0:	080102b9 	.word	0x080102b9
 80110c4:	08018424 	.word	0x08018424
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 80110c8:	4b2f      	ldr	r3, [pc, #188]	; (8011188 <engineUpdate+0x3dc>)
 80110ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80110ce:	f003 0302 	and.w	r3, r3, #2
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d054      	beq.n	8011180 <engineUpdate+0x3d4>
            return;
    }

#if !defined(LMIC_DISABLE_BEACONS)
    // Are we pingable?
  checkrx:
 80110d6:	bf00      	nop
#if !defined(LMIC_DISABLE_PING)
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 80110d8:	4b2b      	ldr	r3, [pc, #172]	; (8011188 <engineUpdate+0x3dc>)
 80110da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80110de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d02e      	beq.n	8011144 <engineUpdate+0x398>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	3340      	adds	r3, #64	; 0x40
 80110ea:	4619      	mov	r1, r3
 80110ec:	4827      	ldr	r0, [pc, #156]	; (801118c <engineUpdate+0x3e0>)
 80110ee:	f7fd fcb1 	bl	800ea54 <rxschedNext>
 80110f2:	4603      	mov	r3, r0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d025      	beq.n	8011144 <engineUpdate+0x398>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 80110f8:	4b23      	ldr	r3, [pc, #140]	; (8011188 <engineUpdate+0x3dc>)
 80110fa:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
 80110fe:	4b22      	ldr	r3, [pc, #136]	; (8011188 <engineUpdate+0x3dc>)
 8011100:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 8011102:	4b21      	ldr	r3, [pc, #132]	; (8011188 <engineUpdate+0x3dc>)
 8011104:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011108:	4a1f      	ldr	r2, [pc, #124]	; (8011188 <engineUpdate+0x3dc>)
 801110a:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 801110c:	4b1e      	ldr	r3, [pc, #120]	; (8011188 <engineUpdate+0x3dc>)
 801110e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8011112:	4a1d      	ldr	r2, [pc, #116]	; (8011188 <engineUpdate+0x3dc>)
 8011114:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 8011116:	4b1c      	ldr	r3, [pc, #112]	; (8011188 <engineUpdate+0x3dc>)
 8011118:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 801111c:	4618      	mov	r0, r3
 801111e:	f7fc ffab 	bl	800e078 <dndr2rps>
 8011122:	4603      	mov	r3, r0
 8011124:	461a      	mov	r2, r3
 8011126:	4b18      	ldr	r3, [pc, #96]	; (8011188 <engineUpdate+0x3dc>)
 8011128:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 801112a:	4b17      	ldr	r3, [pc, #92]	; (8011188 <engineUpdate+0x3dc>)
 801112c:	2200      	movs	r2, #0
 801112e:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 8011132:	4b15      	ldr	r3, [pc, #84]	; (8011188 <engineUpdate+0x3dc>)
 8011134:	685b      	ldr	r3, [r3, #4]
 8011136:	3b40      	subs	r3, #64	; 0x40
 8011138:	4a15      	ldr	r2, [pc, #84]	; (8011190 <engineUpdate+0x3e4>)
 801113a:	4619      	mov	r1, r3
 801113c:	4815      	ldr	r0, [pc, #84]	; (8011194 <engineUpdate+0x3e8>)
 801113e:	f000 f9e9 	bl	8011514 <os_setTimedCallback>
            return;
 8011142:	e01e      	b.n	8011182 <engineUpdate+0x3d6>
#endif // !LMIC_DISABLE_PING

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
        goto txdelay;

    setBcnRxParams();
 8011144:	f7fd fffe 	bl	800f144 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 8011148:	4b0f      	ldr	r3, [pc, #60]	; (8011188 <engineUpdate+0x3dc>)
 801114a:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 801114e:	4b0e      	ldr	r3, [pc, #56]	; (8011188 <engineUpdate+0x3dc>)
 8011150:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 8011152:	4b0d      	ldr	r3, [pc, #52]	; (8011188 <engineUpdate+0x3dc>)
 8011154:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8011158:	4a0b      	ldr	r2, [pc, #44]	; (8011188 <engineUpdate+0x3dc>)
 801115a:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 801115c:	4b0a      	ldr	r3, [pc, #40]	; (8011188 <engineUpdate+0x3dc>)
 801115e:	4a0e      	ldr	r2, [pc, #56]	; (8011198 <engineUpdate+0x3ec>)
 8011160:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 8011162:	2002      	movs	r0, #2
 8011164:	f001 f8fa 	bl	801235c <os_radio>
        return;
 8011168:	e00b      	b.n	8011182 <engineUpdate+0x3d6>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 801116a:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	3b40      	subs	r3, #64	; 0x40
 8011170:	4a0a      	ldr	r2, [pc, #40]	; (801119c <engineUpdate+0x3f0>)
 8011172:	4619      	mov	r1, r3
 8011174:	4807      	ldr	r0, [pc, #28]	; (8011194 <engineUpdate+0x3e8>)
 8011176:	f000 f9cd 	bl	8011514 <os_setTimedCallback>
 801117a:	e002      	b.n	8011182 <engineUpdate+0x3d6>
        return;
 801117c:	bf00      	nop
 801117e:	e000      	b.n	8011182 <engineUpdate+0x3d6>
            return;
 8011180:	bf00      	nop
}
 8011182:	3718      	adds	r7, #24
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}
 8011188:	20000c04 	.word	0x20000c04
 801118c:	20000cd4 	.word	0x20000cd4
 8011190:	08010d89 	.word	0x08010d89
 8011194:	20000c18 	.word	0x20000c18
 8011198:	08010b51 	.word	0x08010b51
 801119c:	0800f2ad 	.word	0x0800f2ad

080111a0 <LMIC_setDrTxpow>:
    LMIC.adrEnabled = enabled ? FCT_ADREN : 0;
}


//  Should we have/need an ext. API like this?
void LMIC_setDrTxpow (dr_t dr, int8_t txpow) {
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	4603      	mov	r3, r0
 80111a8:	460a      	mov	r2, r1
 80111aa:	71fb      	strb	r3, [r7, #7]
 80111ac:	4613      	mov	r3, r2
 80111ae:	71bb      	strb	r3, [r7, #6]
    setDrTxpow(DRCHG_SET, dr, txpow);
 80111b0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80111b4:	79fb      	ldrb	r3, [r7, #7]
 80111b6:	4619      	mov	r1, r3
 80111b8:	2000      	movs	r0, #0
 80111ba:	f7fd fd19 	bl	800ebf0 <setDrTxpow>
}
 80111be:	bf00      	nop
 80111c0:	3708      	adds	r7, #8
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
	...

080111c8 <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 80111c8:	b598      	push	{r3, r4, r7, lr}
 80111ca:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 80111cc:	2000      	movs	r0, #0
 80111ce:	f001 f8c5 	bl	801235c <os_radio>
    os_clearCallback(&LMIC.osjob);
 80111d2:	4822      	ldr	r0, [pc, #136]	; (801125c <LMIC_reset+0x94>)
 80111d4:	f000 f93e 	bl	8011454 <os_clearCallback>

    os_clearMem((uint8_t*)&LMIC,SIZEOFEXPR(LMIC));
 80111d8:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80111dc:	2100      	movs	r1, #0
 80111de:	4820      	ldr	r0, [pc, #128]	; (8011260 <LMIC_reset+0x98>)
 80111e0:	f002 fbde 	bl	80139a0 <memset>
    LMIC.devaddr      =  0;
 80111e4:	4b1e      	ldr	r3, [pc, #120]	; (8011260 <LMIC_reset+0x98>)
 80111e6:	2200      	movs	r2, #0
 80111e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    LMIC.devNonce     =  os_getRndU2();
 80111ec:	f000 ffa2 	bl	8012134 <radio_rand1>
 80111f0:	4603      	mov	r3, r0
 80111f2:	021b      	lsls	r3, r3, #8
 80111f4:	b21c      	sxth	r4, r3
 80111f6:	f000 ff9d 	bl	8012134 <radio_rand1>
 80111fa:	4603      	mov	r3, r0
 80111fc:	b21b      	sxth	r3, r3
 80111fe:	4323      	orrs	r3, r4
 8011200:	b21b      	sxth	r3, r3
 8011202:	b29a      	uxth	r2, r3
 8011204:	4b16      	ldr	r3, [pc, #88]	; (8011260 <LMIC_reset+0x98>)
 8011206:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
    LMIC.opmode       =  OP_NONE;
 801120a:	4b15      	ldr	r3, [pc, #84]	; (8011260 <LMIC_reset+0x98>)
 801120c:	2200      	movs	r2, #0
 801120e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    LMIC.errcr        =  CR_4_5;
 8011212:	4b13      	ldr	r3, [pc, #76]	; (8011260 <LMIC_reset+0x98>)
 8011214:	2200      	movs	r2, #0
 8011216:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    LMIC.adrEnabled   =  FCT_ADREN;
 801121a:	4b11      	ldr	r3, [pc, #68]	; (8011260 <LMIC_reset+0x98>)
 801121c:	2280      	movs	r2, #128	; 0x80
 801121e:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 8011222:	4b0f      	ldr	r3, [pc, #60]	; (8011260 <LMIC_reset+0x98>)
 8011224:	2208      	movs	r2, #8
 8011226:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 801122a:	4b0d      	ldr	r3, [pc, #52]	; (8011260 <LMIC_reset+0x98>)
 801122c:	4a0d      	ldr	r2, [pc, #52]	; (8011264 <LMIC_reset+0x9c>)
 801122e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    LMIC.rxDelay      =  DELAY_DNW1;
 8011232:	4b0b      	ldr	r3, [pc, #44]	; (8011260 <LMIC_reset+0x98>)
 8011234:	2201      	movs	r2, #1
 8011236:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
#if !defined(LMIC_DISABLE_PING)
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 801123a:	4b09      	ldr	r3, [pc, #36]	; (8011260 <LMIC_reset+0x98>)
 801123c:	4a09      	ldr	r2, [pc, #36]	; (8011264 <LMIC_reset+0x9c>)
 801123e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    LMIC.ping.dr      =  DR_PING;   // ditto
 8011242:	4b07      	ldr	r3, [pc, #28]	; (8011260 <LMIC_reset+0x98>)
 8011244:	220a      	movs	r2, #10
 8011246:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
    LMIC.ping.intvExp =  0xFF;
 801124a:	4b05      	ldr	r3, [pc, #20]	; (8011260 <LMIC_reset+0x98>)
 801124c:	22ff      	movs	r2, #255	; 0xff
 801124e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
#endif // !LMIC_DISABLE_PING
#if defined(LMIC_US915)
    initDefaultChannels();
 8011252:	f7fd fcfb 	bl	800ec4c <initDefaultChannels>
#if !defined(LMIC_DISABLE_PING)
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
#endif // !LMIC_DISABLE_PING
}
 8011256:	bf00      	nop
 8011258:	bd98      	pop	{r3, r4, r7, pc}
 801125a:	bf00      	nop
 801125c:	20000c18 	.word	0x20000c18
 8011260:	20000c04 	.word	0x20000c04
 8011264:	370870a0 	.word	0x370870a0

08011268 <LMIC_init>:


void LMIC_init (void) {
 8011268:	b480      	push	{r7}
 801126a:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 801126c:	4b04      	ldr	r3, [pc, #16]	; (8011280 <LMIC_init+0x18>)
 801126e:	2240      	movs	r2, #64	; 0x40
 8011270:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8011274:	bf00      	nop
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr
 801127e:	bf00      	nop
 8011280:	20000c04 	.word	0x20000c04

08011284 <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 8011284:	b580      	push	{r7, lr}
 8011286:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 8011288:	4b0b      	ldr	r3, [pc, #44]	; (80112b8 <LMIC_setTxData+0x34>)
 801128a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801128e:	f043 0308 	orr.w	r3, r3, #8
 8011292:	b29a      	uxth	r2, r3
 8011294:	4b08      	ldr	r3, [pc, #32]	; (80112b8 <LMIC_setTxData+0x34>)
 8011296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if( (LMIC.opmode & OP_JOINING) == 0 )
 801129a:	4b07      	ldr	r3, [pc, #28]	; (80112b8 <LMIC_setTxData+0x34>)
 801129c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80112a0:	f003 0304 	and.w	r3, r3, #4
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d103      	bne.n	80112b0 <LMIC_setTxData+0x2c>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 80112a8:	4b03      	ldr	r3, [pc, #12]	; (80112b8 <LMIC_setTxData+0x34>)
 80112aa:	2200      	movs	r2, #0
 80112ac:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    engineUpdate();
 80112b0:	f7ff fd7c 	bl	8010dac <engineUpdate>
}
 80112b4:	bf00      	nop
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	20000c04 	.word	0x20000c04

080112bc <LMIC_setTxData2>:


//
int LMIC_setTxData2 (uint8_t port, uint8_t *data, uint8_t dlen, uint8_t confirmed) {
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6039      	str	r1, [r7, #0]
 80112c4:	4611      	mov	r1, r2
 80112c6:	461a      	mov	r2, r3
 80112c8:	4603      	mov	r3, r0
 80112ca:	71fb      	strb	r3, [r7, #7]
 80112cc:	460b      	mov	r3, r1
 80112ce:	71bb      	strb	r3, [r7, #6]
 80112d0:	4613      	mov	r3, r2
 80112d2:	717b      	strb	r3, [r7, #5]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 80112d4:	79bb      	ldrb	r3, [r7, #6]
 80112d6:	2b34      	cmp	r3, #52	; 0x34
 80112d8:	d902      	bls.n	80112e0 <LMIC_setTxData2+0x24>
        return -2;
 80112da:	f06f 0301 	mvn.w	r3, #1
 80112de:	e017      	b.n	8011310 <LMIC_setTxData2+0x54>
    if( data != (uint8_t*)0)
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d005      	beq.n	80112f2 <LMIC_setTxData2+0x36>
        os_copyMem(LMIC.pendTxData, data, dlen);
 80112e6:	79bb      	ldrb	r3, [r7, #6]
 80112e8:	461a      	mov	r2, r3
 80112ea:	6839      	ldr	r1, [r7, #0]
 80112ec:	480a      	ldr	r0, [pc, #40]	; (8011318 <LMIC_setTxData2+0x5c>)
 80112ee:	f002 fbe4 	bl	8013aba <memcpy>
    LMIC.pendTxConf = confirmed;
 80112f2:	4a0a      	ldr	r2, [pc, #40]	; (801131c <LMIC_setTxData2+0x60>)
 80112f4:	797b      	ldrb	r3, [r7, #5]
 80112f6:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
    LMIC.pendTxPort = port;
 80112fa:	4a08      	ldr	r2, [pc, #32]	; (801131c <LMIC_setTxData2+0x60>)
 80112fc:	79fb      	ldrb	r3, [r7, #7]
 80112fe:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
    LMIC.pendTxLen  = dlen;
 8011302:	4a06      	ldr	r2, [pc, #24]	; (801131c <LMIC_setTxData2+0x60>)
 8011304:	79bb      	ldrb	r3, [r7, #6]
 8011306:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
    LMIC_setTxData();
 801130a:	f7ff ffbb 	bl	8011284 <LMIC_setTxData>
    return 0;
 801130e:	2300      	movs	r3, #0
}
 8011310:	4618      	mov	r0, r3
 8011312:	3708      	adds	r7, #8
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}
 8011318:	20000c5b 	.word	0x20000c5b
 801131c:	20000c04 	.word	0x20000c04

08011320 <LMIC_setSession>:
//!    to ensure that different devices use different numbers with high probability.
//! \param nwkKey  the 16 byte network session key used for message integrity.
//!     If NULL the caller has copied the key into `LMIC.nwkKey` before.
//! \param artKey  the 16 byte application router session key used for message confidentiality.
//!     If NULL the caller has copied the key into `LMIC.artKey` before.
void LMIC_setSession (uint32_t netid, devaddr_t devaddr, uint8_t *nwkKey, uint8_t *artKey) {
 8011320:	b590      	push	{r4, r7, lr}
 8011322:	b085      	sub	sp, #20
 8011324:	af00      	add	r7, sp, #0
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	607a      	str	r2, [r7, #4]
 801132c:	603b      	str	r3, [r7, #0]
    LMIC.netid = netid;
 801132e:	4a1e      	ldr	r2, [pc, #120]	; (80113a8 <LMIC_setSession+0x88>)
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	6413      	str	r3, [r2, #64]	; 0x40
    LMIC.devaddr = devaddr;
 8011334:	4a1c      	ldr	r2, [pc, #112]	; (80113a8 <LMIC_setSession+0x88>)
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    if( nwkKey != (uint8_t*)0)
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d00a      	beq.n	8011358 <LMIC_setSession+0x38>
        os_copyMem(LMIC.nwkKey, nwkKey, 16);
 8011342:	4b19      	ldr	r3, [pc, #100]	; (80113a8 <LMIC_setSession+0x88>)
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	338e      	adds	r3, #142	; 0x8e
 8011348:	6814      	ldr	r4, [r2, #0]
 801134a:	6850      	ldr	r0, [r2, #4]
 801134c:	6891      	ldr	r1, [r2, #8]
 801134e:	68d2      	ldr	r2, [r2, #12]
 8011350:	601c      	str	r4, [r3, #0]
 8011352:	6058      	str	r0, [r3, #4]
 8011354:	6099      	str	r1, [r3, #8]
 8011356:	60da      	str	r2, [r3, #12]
    if( artKey != (uint8_t*)0)
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00a      	beq.n	8011374 <LMIC_setSession+0x54>
        os_copyMem(LMIC.artKey, artKey, 16);
 801135e:	4b12      	ldr	r3, [pc, #72]	; (80113a8 <LMIC_setSession+0x88>)
 8011360:	683a      	ldr	r2, [r7, #0]
 8011362:	339e      	adds	r3, #158	; 0x9e
 8011364:	6814      	ldr	r4, [r2, #0]
 8011366:	6850      	ldr	r0, [r2, #4]
 8011368:	6891      	ldr	r1, [r2, #8]
 801136a:	68d2      	ldr	r2, [r2, #12]
 801136c:	601c      	str	r4, [r3, #0]
 801136e:	6058      	str	r0, [r3, #4]
 8011370:	6099      	str	r1, [r3, #8]
 8011372:	60da      	str	r2, [r3, #12]

#if defined(LMIC_EU686)
    initDefaultChannels(0);
#endif

    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI);
 8011374:	4b0c      	ldr	r3, [pc, #48]	; (80113a8 <LMIC_setSession+0x88>)
 8011376:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801137a:	f423 7329 	bic.w	r3, r3, #676	; 0x2a4
 801137e:	f023 0302 	bic.w	r3, r3, #2
 8011382:	b29a      	uxth	r2, r3
 8011384:	4b08      	ldr	r3, [pc, #32]	; (80113a8 <LMIC_setSession+0x88>)
 8011386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    LMIC.opmode |= OP_NEXTCHNL;
 801138a:	4b07      	ldr	r3, [pc, #28]	; (80113a8 <LMIC_setSession+0x88>)
 801138c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011394:	b29a      	uxth	r2, r3
 8011396:	4b04      	ldr	r3, [pc, #16]	; (80113a8 <LMIC_setSession+0x88>)
 8011398:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    stateJustJoined();
 801139c:	f7fd ffae 	bl	800f2fc <stateJustJoined>
    DO_DEVDB(LMIC.devaddr, devaddr);
    DO_DEVDB(LMIC.nwkKey,  nwkkey);
    DO_DEVDB(LMIC.artKey,  artkey);
    DO_DEVDB(LMIC.seqnoUp, seqnoUp);
    DO_DEVDB(LMIC.seqnoDn, seqnoDn);
}
 80113a0:	bf00      	nop
 80113a2:	3714      	adds	r7, #20
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd90      	pop	{r4, r7, pc}
 80113a8:	20000c04 	.word	0x20000c04

080113ac <LMIC_setLinkCheckMode>:
// connectivity with a span of UP frames. If this no such prove is coming
// then the datarate is lowered and a LINK_DEAD event is generated.
// This mode can be disabled and no connectivity prove (ADRACKREQ) is requested
// nor is the datarate changed.
// This must be called only if a session is established (e.g. after EV_JOINED)
void LMIC_setLinkCheckMode (bool enabled) {
 80113ac:	b480      	push	{r7}
 80113ae:	b083      	sub	sp, #12
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	4603      	mov	r3, r0
 80113b4:	71fb      	strb	r3, [r7, #7]
    LMIC.adrChanged = 0;
 80113b6:	4b0a      	ldr	r3, [pc, #40]	; (80113e0 <LMIC_setLinkCheckMode+0x34>)
 80113b8:	2200      	movs	r2, #0
 80113ba:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    LMIC.adrAckReq = enabled ? LINK_CHECK_INIT : LINK_CHECK_OFF;
 80113be:	79fb      	ldrb	r3, [r7, #7]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d002      	beq.n	80113ca <LMIC_setLinkCheckMode+0x1e>
 80113c4:	f06f 020b 	mvn.w	r2, #11
 80113c8:	e001      	b.n	80113ce <LMIC_setLinkCheckMode+0x22>
 80113ca:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80113ce:	4b04      	ldr	r3, [pc, #16]	; (80113e0 <LMIC_setLinkCheckMode+0x34>)
 80113d0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
}
 80113d4:	bf00      	nop
 80113d6:	370c      	adds	r7, #12
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr
 80113e0:	20000c04 	.word	0x20000c04

080113e4 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 80113e4:	b580      	push	{r7, lr}
 80113e6:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 80113e8:	2208      	movs	r2, #8
 80113ea:	2100      	movs	r1, #0
 80113ec:	4805      	ldr	r0, [pc, #20]	; (8011404 <os_init+0x20>)
 80113ee:	f002 fad7 	bl	80139a0 <memset>
    hal_init();
 80113f2:	f001 fa69 	bl	80128c8 <hal_init>
    radio_init();
 80113f6:	f000 fde1 	bl	8011fbc <radio_init>
    LMIC_init();
 80113fa:	f7ff ff35 	bl	8011268 <LMIC_init>
}
 80113fe:	bf00      	nop
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	20000d4c 	.word	0x20000d4c

08011408 <os_getTime>:

ostime_t os_getTime () {
 8011408:	b580      	push	{r7, lr}
 801140a:	af00      	add	r7, sp, #0
    return hal_ticks();
 801140c:	f001 f968 	bl	80126e0 <hal_ticks>
 8011410:	4603      	mov	r3, r0
}
 8011412:	4618      	mov	r0, r3
 8011414:	bd80      	pop	{r7, pc}

08011416 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 8011416:	b480      	push	{r7}
 8011418:	b083      	sub	sp, #12
 801141a:	af00      	add	r7, sp, #0
 801141c:	6078      	str	r0, [r7, #4]
 801141e:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8011420:	e00d      	b.n	801143e <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	683a      	ldr	r2, [r7, #0]
 8011428:	429a      	cmp	r2, r3
 801142a:	d105      	bne.n	8011438 <unlinkjob+0x22>
            *pnext = job->next;
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	601a      	str	r2, [r3, #0]
            return 1;
 8011434:	2301      	movs	r3, #1
 8011436:	e007      	b.n	8011448 <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	607b      	str	r3, [r7, #4]
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1ed      	bne.n	8011422 <unlinkjob+0xc>
        }
    }
    return 0;
 8011446:	2300      	movs	r3, #0
}
 8011448:	4618      	mov	r0, r3
 801144a:	370c      	adds	r7, #12
 801144c:	46bd      	mov	sp, r7
 801144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011452:	4770      	bx	lr

08011454 <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 8011454:	b580      	push	{r7, lr}
 8011456:	b084      	sub	sp, #16
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 801145c:	f001 fa06 	bl	801286c <hal_disableIRQs>
    uint8_t res = unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8011460:	6879      	ldr	r1, [r7, #4]
 8011462:	4811      	ldr	r0, [pc, #68]	; (80114a8 <os_clearCallback+0x54>)
 8011464:	f7ff ffd7 	bl	8011416 <unlinkjob>
 8011468:	4603      	mov	r3, r0
 801146a:	2b00      	cmp	r3, #0
 801146c:	d106      	bne.n	801147c <os_clearCallback+0x28>
 801146e:	6879      	ldr	r1, [r7, #4]
 8011470:	480e      	ldr	r0, [pc, #56]	; (80114ac <os_clearCallback+0x58>)
 8011472:	f7ff ffd0 	bl	8011416 <unlinkjob>
 8011476:	4603      	mov	r3, r0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d001      	beq.n	8011480 <os_clearCallback+0x2c>
 801147c:	2301      	movs	r3, #1
 801147e:	e000      	b.n	8011482 <os_clearCallback+0x2e>
 8011480:	2300      	movs	r3, #0
 8011482:	73fb      	strb	r3, [r7, #15]
    hal_enableIRQs();
 8011484:	f001 fa02 	bl	801288c <hal_enableIRQs>
    #if LMIC_DEBUG_LEVEL > 1
        if (res)
 8011488:	7bfb      	ldrb	r3, [r7, #15]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d007      	beq.n	801149e <os_clearCallback+0x4a>
            lmic_printf("%lu: Cleared job %p\n", os_getTime(), job);
 801148e:	f7ff ffbb 	bl	8011408 <os_getTime>
 8011492:	4603      	mov	r3, r0
 8011494:	687a      	ldr	r2, [r7, #4]
 8011496:	4619      	mov	r1, r3
 8011498:	4805      	ldr	r0, [pc, #20]	; (80114b0 <os_clearCallback+0x5c>)
 801149a:	f000 ff8b 	bl	80123b4 <printf>
    #else
        (void)res; // Prevent unused variable warning
    #endif
}
 801149e:	bf00      	nop
 80114a0:	3710      	adds	r7, #16
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}
 80114a6:	bf00      	nop
 80114a8:	20000d4c 	.word	0x20000d4c
 80114ac:	20000d50 	.word	0x20000d50
 80114b0:	08018444 	.word	0x08018444

080114b4 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b084      	sub	sp, #16
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
 80114bc:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 80114be:	f001 f9d5 	bl	801286c <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 80114c2:	6879      	ldr	r1, [r7, #4]
 80114c4:	4811      	ldr	r0, [pc, #68]	; (801150c <os_setCallback+0x58>)
 80114c6:	f7ff ffa6 	bl	8011416 <unlinkjob>
    // fill-in job
    job->func = cb;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	683a      	ldr	r2, [r7, #0]
 80114ce:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2200      	movs	r2, #0
 80114d4:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 80114d6:	4b0d      	ldr	r3, [pc, #52]	; (801150c <os_setCallback+0x58>)
 80114d8:	60fb      	str	r3, [r7, #12]
 80114da:	e002      	b.n	80114e2 <os_setCallback+0x2e>
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	60fb      	str	r3, [r7, #12]
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d1f8      	bne.n	80114dc <os_setCallback+0x28>
    *pnext = job;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 80114f0:	f001 f9cc 	bl	801288c <hal_enableIRQs>
    #if LMIC_DEBUG_LEVEL > 1
        lmic_printf("%lu: Scheduled job %p, cb %p ASAP\n", os_getTime(), job, cb);
 80114f4:	f7ff ff88 	bl	8011408 <os_getTime>
 80114f8:	4601      	mov	r1, r0
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	4804      	ldr	r0, [pc, #16]	; (8011510 <os_setCallback+0x5c>)
 8011500:	f000 ff58 	bl	80123b4 <printf>
    #endif
}
 8011504:	bf00      	nop
 8011506:	3710      	adds	r7, #16
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}
 801150c:	20000d50 	.word	0x20000d50
 8011510:	0801845c 	.word	0x0801845c

08011514 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 8011514:	b580      	push	{r7, lr}
 8011516:	b088      	sub	sp, #32
 8011518:	af02      	add	r7, sp, #8
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 8011520:	f001 f9a4 	bl	801286c <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 8011524:	68f9      	ldr	r1, [r7, #12]
 8011526:	481a      	ldr	r0, [pc, #104]	; (8011590 <os_setTimedCallback+0x7c>)
 8011528:	f7ff ff75 	bl	8011416 <unlinkjob>
    // fill-in job
    job->deadline = time;
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	68ba      	ldr	r2, [r7, #8]
 8011530:	605a      	str	r2, [r3, #4]
    job->func = cb;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	687a      	ldr	r2, [r7, #4]
 8011536:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	2200      	movs	r2, #0
 801153c:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 801153e:	4b14      	ldr	r3, [pc, #80]	; (8011590 <os_setTimedCallback+0x7c>)
 8011540:	617b      	str	r3, [r7, #20]
 8011542:	e00d      	b.n	8011560 <os_setTimedCallback+0x4c>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	68ba      	ldr	r2, [r7, #8]
 801154c:	429a      	cmp	r2, r3
 801154e:	d004      	beq.n	801155a <os_setTimedCallback+0x46>
            // enqueue before next element and stop
            job->next = *pnext;
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	601a      	str	r2, [r3, #0]
            break;
 8011558:	e006      	b.n	8011568 <os_setTimedCallback+0x54>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	617b      	str	r3, [r7, #20]
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d1ed      	bne.n	8011544 <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	68fa      	ldr	r2, [r7, #12]
 801156c:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 801156e:	f001 f98d 	bl	801288c <hal_enableIRQs>
    #if LMIC_DEBUG_LEVEL > 1
        lmic_printf("%lu: Scheduled job %p, cb %p at %lu\n", os_getTime(), job, cb, time);
 8011572:	f7ff ff49 	bl	8011408 <os_getTime>
 8011576:	4601      	mov	r1, r0
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	68fa      	ldr	r2, [r7, #12]
 8011580:	4804      	ldr	r0, [pc, #16]	; (8011594 <os_setTimedCallback+0x80>)
 8011582:	f000 ff17 	bl	80123b4 <printf>
    #endif
}
 8011586:	bf00      	nop
 8011588:	3718      	adds	r7, #24
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
 801158e:	bf00      	nop
 8011590:	20000d4c 	.word	0x20000d4c
 8011594:	08018480 	.word	0x08018480

08011598 <os_runloop_once>:
    while(1) {
        os_runloop_once();
    }
}

void os_runloop_once() {
 8011598:	b580      	push	{r7, lr}
 801159a:	b084      	sub	sp, #16
 801159c:	af02      	add	r7, sp, #8
    osjob_t* j = NULL;
 801159e:	2300      	movs	r3, #0
 80115a0:	607b      	str	r3, [r7, #4]
    ostime_t deadline = 0;
 80115a2:	2300      	movs	r3, #0
 80115a4:	603b      	str	r3, [r7, #0]
    hal_disableIRQs();
 80115a6:	f001 f961 	bl	801286c <hal_disableIRQs>
    // check for runnable jobs
    if(OS.runnablejobs) {
 80115aa:	4b1f      	ldr	r3, [pc, #124]	; (8011628 <os_runloop_once+0x90>)
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d007      	beq.n	80115c2 <os_runloop_once+0x2a>
        j = OS.runnablejobs;
 80115b2:	4b1d      	ldr	r3, [pc, #116]	; (8011628 <os_runloop_once+0x90>)
 80115b4:	685b      	ldr	r3, [r3, #4]
 80115b6:	607b      	str	r3, [r7, #4]
        OS.runnablejobs = j->next;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	4a1a      	ldr	r2, [pc, #104]	; (8011628 <os_runloop_once+0x90>)
 80115be:	6053      	str	r3, [r2, #4]
 80115c0:	e019      	b.n	80115f6 <os_runloop_once+0x5e>
    } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 80115c2:	4b19      	ldr	r3, [pc, #100]	; (8011628 <os_runloop_once+0x90>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d013      	beq.n	80115f2 <os_runloop_once+0x5a>
 80115ca:	4b17      	ldr	r3, [pc, #92]	; (8011628 <os_runloop_once+0x90>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	4618      	mov	r0, r3
 80115d2:	f001 f8e3 	bl	801279c <hal_checkTimer>
 80115d6:	4603      	mov	r3, r0
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d00a      	beq.n	80115f2 <os_runloop_once+0x5a>
        j = OS.scheduledjobs;
 80115dc:	4b12      	ldr	r3, [pc, #72]	; (8011628 <os_runloop_once+0x90>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	607b      	str	r3, [r7, #4]
        deadline = j->deadline;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	685b      	ldr	r3, [r3, #4]
 80115e6:	603b      	str	r3, [r7, #0]
        OS.scheduledjobs = j->next;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	4a0e      	ldr	r2, [pc, #56]	; (8011628 <os_runloop_once+0x90>)
 80115ee:	6013      	str	r3, [r2, #0]
 80115f0:	e001      	b.n	80115f6 <os_runloop_once+0x5e>
    } else { // nothing pending
        hal_sleep(); // wake by irq (timer already restarted)
 80115f2:	f001 f95f 	bl	80128b4 <hal_sleep>
    }
    hal_enableIRQs();
 80115f6:	f001 f949 	bl	801288c <hal_enableIRQs>
    if(j) { // run job callback
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d00f      	beq.n	8011620 <os_runloop_once+0x88>
        #if LMIC_DEBUG_LEVEL > 1
            lmic_printf("%lu: Running job %p, cb %p, deadline %lu\n", os_getTime(), j, j->func, deadline);
 8011600:	f7ff ff02 	bl	8011408 <os_getTime>
 8011604:	4601      	mov	r1, r0
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	689a      	ldr	r2, [r3, #8]
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	9300      	str	r3, [sp, #0]
 801160e:	4613      	mov	r3, r2
 8011610:	687a      	ldr	r2, [r7, #4]
 8011612:	4806      	ldr	r0, [pc, #24]	; (801162c <os_runloop_once+0x94>)
 8011614:	f000 fece 	bl	80123b4 <printf>
        #else
            (void)deadline; // Prevent unused variable warning
        #endif
        j->func(j);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	689b      	ldr	r3, [r3, #8]
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	4798      	blx	r3
    }
}
 8011620:	bf00      	nop
 8011622:	3708      	adds	r7, #8
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}
 8011628:	20000d4c 	.word	0x20000d4c
 801162c:	080184a8 	.word	0x080184a8

08011630 <writeReg>:
#else
#error Missing LMIC_SX1272/LMIC_SX1276
#endif


static void writeReg (uint8_t addr, uint8_t data ) {
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	4603      	mov	r3, r0
 8011638:	460a      	mov	r2, r1
 801163a:	71fb      	strb	r3, [r7, #7]
 801163c:	4613      	mov	r3, r2
 801163e:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8011640:	2000      	movs	r0, #0
 8011642:	f000 ffd7 	bl	80125f4 <hal_pin_nss>
    SPIWrite8bit(addr | 0x80);
 8011646:	79fb      	ldrb	r3, [r7, #7]
 8011648:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801164c:	b2db      	uxtb	r3, r3
 801164e:	4618      	mov	r0, r3
 8011650:	f001 f816 	bl	8012680 <SPIWrite8bit>
    SPIWrite8bit(data);
 8011654:	79bb      	ldrb	r3, [r7, #6]
 8011656:	4618      	mov	r0, r3
 8011658:	f001 f812 	bl	8012680 <SPIWrite8bit>
    hal_pin_nss(1);
 801165c:	2001      	movs	r0, #1
 801165e:	f000 ffc9 	bl	80125f4 <hal_pin_nss>
}
 8011662:	bf00      	nop
 8011664:	3708      	adds	r7, #8
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}

0801166a <readReg>:

static uint8_t readReg (uint8_t addr) {
 801166a:	b580      	push	{r7, lr}
 801166c:	b084      	sub	sp, #16
 801166e:	af00      	add	r7, sp, #0
 8011670:	4603      	mov	r3, r0
 8011672:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 8011674:	2000      	movs	r0, #0
 8011676:	f000 ffbd 	bl	80125f4 <hal_pin_nss>
    SPIWrite8bit(addr & 0x7F);
 801167a:	79fb      	ldrb	r3, [r7, #7]
 801167c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011680:	b2db      	uxtb	r3, r3
 8011682:	4618      	mov	r0, r3
 8011684:	f000 fffc 	bl	8012680 <SPIWrite8bit>
    uint8_t val = SPIRead8bit(0x00);
 8011688:	2000      	movs	r0, #0
 801168a:	f001 f80d 	bl	80126a8 <SPIRead8bit>
 801168e:	4603      	mov	r3, r0
 8011690:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 8011692:	2001      	movs	r0, #1
 8011694:	f000 ffae 	bl	80125f4 <hal_pin_nss>
    return val;
 8011698:	7bfb      	ldrb	r3, [r7, #15]
}
 801169a:	4618      	mov	r0, r3
 801169c:	3710      	adds	r7, #16
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}

080116a2 <writeBuf>:

static void writeBuf (uint8_t addr, uint8_t *buf, uint8_t len) {
 80116a2:	b580      	push	{r7, lr}
 80116a4:	b084      	sub	sp, #16
 80116a6:	af00      	add	r7, sp, #0
 80116a8:	4603      	mov	r3, r0
 80116aa:	6039      	str	r1, [r7, #0]
 80116ac:	71fb      	strb	r3, [r7, #7]
 80116ae:	4613      	mov	r3, r2
 80116b0:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 80116b2:	2000      	movs	r0, #0
 80116b4:	f000 ff9e 	bl	80125f4 <hal_pin_nss>
    SPIWrite8bit(addr | 0x80);
 80116b8:	79fb      	ldrb	r3, [r7, #7]
 80116ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80116be:	b2db      	uxtb	r3, r3
 80116c0:	4618      	mov	r0, r3
 80116c2:	f000 ffdd 	bl	8012680 <SPIWrite8bit>
    for (uint8_t i=0; i<len; i++) {
 80116c6:	2300      	movs	r3, #0
 80116c8:	73fb      	strb	r3, [r7, #15]
 80116ca:	e009      	b.n	80116e0 <writeBuf+0x3e>
    	SPIWrite8bit(buf[i]);
 80116cc:	7bfb      	ldrb	r3, [r7, #15]
 80116ce:	683a      	ldr	r2, [r7, #0]
 80116d0:	4413      	add	r3, r2
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	4618      	mov	r0, r3
 80116d6:	f000 ffd3 	bl	8012680 <SPIWrite8bit>
    for (uint8_t i=0; i<len; i++) {
 80116da:	7bfb      	ldrb	r3, [r7, #15]
 80116dc:	3301      	adds	r3, #1
 80116de:	73fb      	strb	r3, [r7, #15]
 80116e0:	7bfa      	ldrb	r2, [r7, #15]
 80116e2:	79bb      	ldrb	r3, [r7, #6]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d3f1      	bcc.n	80116cc <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 80116e8:	2001      	movs	r0, #1
 80116ea:	f000 ff83 	bl	80125f4 <hal_pin_nss>
}
 80116ee:	bf00      	nop
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <readBuf>:

static void readBuf (uint8_t addr, uint8_t *buf, uint8_t len) {
 80116f6:	b590      	push	{r4, r7, lr}
 80116f8:	b085      	sub	sp, #20
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	4603      	mov	r3, r0
 80116fe:	6039      	str	r1, [r7, #0]
 8011700:	71fb      	strb	r3, [r7, #7]
 8011702:	4613      	mov	r3, r2
 8011704:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8011706:	2000      	movs	r0, #0
 8011708:	f000 ff74 	bl	80125f4 <hal_pin_nss>
    SPIWrite8bit(addr & 0x7F);
 801170c:	79fb      	ldrb	r3, [r7, #7]
 801170e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011712:	b2db      	uxtb	r3, r3
 8011714:	4618      	mov	r0, r3
 8011716:	f000 ffb3 	bl	8012680 <SPIWrite8bit>
    for (uint8_t i=0; i<len; i++) {
 801171a:	2300      	movs	r3, #0
 801171c:	73fb      	strb	r3, [r7, #15]
 801171e:	e00a      	b.n	8011736 <readBuf+0x40>
        buf[i] = SPIRead8bit(0x00);
 8011720:	7bfb      	ldrb	r3, [r7, #15]
 8011722:	683a      	ldr	r2, [r7, #0]
 8011724:	18d4      	adds	r4, r2, r3
 8011726:	2000      	movs	r0, #0
 8011728:	f000 ffbe 	bl	80126a8 <SPIRead8bit>
 801172c:	4603      	mov	r3, r0
 801172e:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<len; i++) {
 8011730:	7bfb      	ldrb	r3, [r7, #15]
 8011732:	3301      	adds	r3, #1
 8011734:	73fb      	strb	r3, [r7, #15]
 8011736:	7bfa      	ldrb	r2, [r7, #15]
 8011738:	79bb      	ldrb	r3, [r7, #6]
 801173a:	429a      	cmp	r2, r3
 801173c:	d3f0      	bcc.n	8011720 <readBuf+0x2a>
    }
    hal_pin_nss(1);
 801173e:	2001      	movs	r0, #1
 8011740:	f000 ff58 	bl	80125f4 <hal_pin_nss>
}
 8011744:	bf00      	nop
 8011746:	3714      	adds	r7, #20
 8011748:	46bd      	mov	sp, r7
 801174a:	bd90      	pop	{r4, r7, pc}

0801174c <opmode>:

static void opmode (uint8_t mode) {
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
 8011752:	4603      	mov	r3, r0
 8011754:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 8011756:	2001      	movs	r0, #1
 8011758:	f7ff ff87 	bl	801166a <readReg>
 801175c:	4603      	mov	r3, r0
 801175e:	b25b      	sxtb	r3, r3
 8011760:	f023 0307 	bic.w	r3, r3, #7
 8011764:	b25a      	sxtb	r2, r3
 8011766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801176a:	4313      	orrs	r3, r2
 801176c:	b25b      	sxtb	r3, r3
 801176e:	b2db      	uxtb	r3, r3
 8011770:	4619      	mov	r1, r3
 8011772:	2001      	movs	r0, #1
 8011774:	f7ff ff5c 	bl	8011630 <writeReg>
}
 8011778:	bf00      	nop
 801177a:	3708      	adds	r7, #8
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <opmodeLora>:

static void opmodeLora() {
 8011780:	b580      	push	{r7, lr}
 8011782:	b082      	sub	sp, #8
 8011784:	af00      	add	r7, sp, #0
    uint8_t u = OPMODE_LORA;
 8011786:	2380      	movs	r3, #128	; 0x80
 8011788:	71fb      	strb	r3, [r7, #7]
#ifdef LMIC_SX1276
    u |= 0x8;   // TBD: sx1276 high freq
 801178a:	79fb      	ldrb	r3, [r7, #7]
 801178c:	f043 0308 	orr.w	r3, r3, #8
 8011790:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8011792:	79fb      	ldrb	r3, [r7, #7]
 8011794:	4619      	mov	r1, r3
 8011796:	2001      	movs	r0, #1
 8011798:	f7ff ff4a 	bl	8011630 <writeReg>
}
 801179c:	bf00      	nop
 801179e:	3708      	adds	r7, #8
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bd80      	pop	{r7, pc}

080117a4 <opmodeFSK>:

static void opmodeFSK() {
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b082      	sub	sp, #8
 80117a8:	af00      	add	r7, sp, #0
    uint8_t u = 0;
 80117aa:	2300      	movs	r3, #0
 80117ac:	71fb      	strb	r3, [r7, #7]
#ifdef LMIC_SX1276
    u |= 0x8;   // TBD: sx1276 high freq
 80117ae:	79fb      	ldrb	r3, [r7, #7]
 80117b0:	f043 0308 	orr.w	r3, r3, #8
 80117b4:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 80117b6:	79fb      	ldrb	r3, [r7, #7]
 80117b8:	4619      	mov	r1, r3
 80117ba:	2001      	movs	r0, #1
 80117bc:	f7ff ff38 	bl	8011630 <writeReg>
}
 80117c0:	bf00      	nop
 80117c2:	3708      	adds	r7, #8
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}

080117c8 <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 80117ce:	4b56      	ldr	r3, [pc, #344]	; (8011928 <configLoraModem+0x160>)
 80117d0:	89db      	ldrh	r3, [r3, #14]
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7fc fba2 	bl	800df1c <getSf>
 80117d8:	4603      	mov	r3, r0
 80117da:	713b      	strb	r3, [r7, #4]

#ifdef LMIC_SX1276
        uint8_t mc1 = 0, mc2 = 0, mc3 = 0;
 80117dc:	2300      	movs	r3, #0
 80117de:	71fb      	strb	r3, [r7, #7]
 80117e0:	2300      	movs	r3, #0
 80117e2:	71bb      	strb	r3, [r7, #6]
 80117e4:	2300      	movs	r3, #0
 80117e6:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 80117e8:	4b4f      	ldr	r3, [pc, #316]	; (8011928 <configLoraModem+0x160>)
 80117ea:	89db      	ldrh	r3, [r3, #14]
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7fc fba5 	bl	800df3c <getBw>
 80117f2:	4603      	mov	r3, r0
 80117f4:	2b02      	cmp	r3, #2
 80117f6:	d010      	beq.n	801181a <configLoraModem+0x52>
 80117f8:	2b02      	cmp	r3, #2
 80117fa:	dc13      	bgt.n	8011824 <configLoraModem+0x5c>
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d002      	beq.n	8011806 <configLoraModem+0x3e>
 8011800:	2b01      	cmp	r3, #1
 8011802:	d005      	beq.n	8011810 <configLoraModem+0x48>
 8011804:	e00e      	b.n	8011824 <configLoraModem+0x5c>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 8011806:	79fb      	ldrb	r3, [r7, #7]
 8011808:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801180c:	71fb      	strb	r3, [r7, #7]
 801180e:	e00e      	b.n	801182e <configLoraModem+0x66>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 8011810:	79fb      	ldrb	r3, [r7, #7]
 8011812:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011816:	71fb      	strb	r3, [r7, #7]
 8011818:	e009      	b.n	801182e <configLoraModem+0x66>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 801181a:	79fb      	ldrb	r3, [r7, #7]
 801181c:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8011820:	71fb      	strb	r3, [r7, #7]
 8011822:	e004      	b.n	801182e <configLoraModem+0x66>
        default:
            ASSERT(0);
 8011824:	f240 1159 	movw	r1, #345	; 0x159
 8011828:	4840      	ldr	r0, [pc, #256]	; (801192c <configLoraModem+0x164>)
 801182a:	f001 f865 	bl	80128f8 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 801182e:	4b3e      	ldr	r3, [pc, #248]	; (8011928 <configLoraModem+0x160>)
 8011830:	89db      	ldrh	r3, [r3, #14]
 8011832:	4618      	mov	r0, r3
 8011834:	f7fc fb94 	bl	800df60 <getCr>
 8011838:	4603      	mov	r3, r0
 801183a:	2b03      	cmp	r3, #3
 801183c:	d81e      	bhi.n	801187c <configLoraModem+0xb4>
 801183e:	a201      	add	r2, pc, #4	; (adr r2, 8011844 <configLoraModem+0x7c>)
 8011840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011844:	08011855 	.word	0x08011855
 8011848:	0801185f 	.word	0x0801185f
 801184c:	08011869 	.word	0x08011869
 8011850:	08011873 	.word	0x08011873
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 8011854:	79fb      	ldrb	r3, [r7, #7]
 8011856:	f043 0302 	orr.w	r3, r3, #2
 801185a:	71fb      	strb	r3, [r7, #7]
 801185c:	e013      	b.n	8011886 <configLoraModem+0xbe>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 801185e:	79fb      	ldrb	r3, [r7, #7]
 8011860:	f043 0304 	orr.w	r3, r3, #4
 8011864:	71fb      	strb	r3, [r7, #7]
 8011866:	e00e      	b.n	8011886 <configLoraModem+0xbe>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8011868:	79fb      	ldrb	r3, [r7, #7]
 801186a:	f043 0306 	orr.w	r3, r3, #6
 801186e:	71fb      	strb	r3, [r7, #7]
 8011870:	e009      	b.n	8011886 <configLoraModem+0xbe>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 8011872:	79fb      	ldrb	r3, [r7, #7]
 8011874:	f043 0308 	orr.w	r3, r3, #8
 8011878:	71fb      	strb	r3, [r7, #7]
 801187a:	e004      	b.n	8011886 <configLoraModem+0xbe>
        default:
            ASSERT(0);
 801187c:	f240 1161 	movw	r1, #353	; 0x161
 8011880:	482a      	ldr	r0, [pc, #168]	; (801192c <configLoraModem+0x164>)
 8011882:	f001 f839 	bl	80128f8 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 8011886:	4b28      	ldr	r3, [pc, #160]	; (8011928 <configLoraModem+0x160>)
 8011888:	89db      	ldrh	r3, [r3, #14]
 801188a:	4618      	mov	r0, r3
 801188c:	f7fc fbba 	bl	800e004 <getIh>
 8011890:	4603      	mov	r3, r0
 8011892:	2b00      	cmp	r3, #0
 8011894:	d00e      	beq.n	80118b4 <configLoraModem+0xec>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 8011896:	79fb      	ldrb	r3, [r7, #7]
 8011898:	f043 0301 	orr.w	r3, r3, #1
 801189c:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 801189e:	4b22      	ldr	r3, [pc, #136]	; (8011928 <configLoraModem+0x160>)
 80118a0:	89db      	ldrh	r3, [r3, #14]
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fc fbae 	bl	800e004 <getIh>
 80118a8:	4603      	mov	r3, r0
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	4619      	mov	r1, r3
 80118ae:	2022      	movs	r0, #34	; 0x22
 80118b0:	f7ff febe 	bl	8011630 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 80118b4:	79fb      	ldrb	r3, [r7, #7]
 80118b6:	4619      	mov	r1, r3
 80118b8:	201d      	movs	r0, #29
 80118ba:	f7ff feb9 	bl	8011630 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 80118be:	793b      	ldrb	r3, [r7, #4]
 80118c0:	3b01      	subs	r3, #1
 80118c2:	b2db      	uxtb	r3, r3
 80118c4:	011b      	lsls	r3, r3, #4
 80118c6:	b2db      	uxtb	r3, r3
 80118c8:	3370      	adds	r3, #112	; 0x70
 80118ca:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 80118cc:	4b16      	ldr	r3, [pc, #88]	; (8011928 <configLoraModem+0x160>)
 80118ce:	89db      	ldrh	r3, [r3, #14]
 80118d0:	4618      	mov	r0, r3
 80118d2:	f7fc fb70 	bl	800dfb6 <getNocrc>
 80118d6:	4603      	mov	r3, r0
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d103      	bne.n	80118e4 <configLoraModem+0x11c>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 80118dc:	79bb      	ldrb	r3, [r7, #6]
 80118de:	f043 0304 	orr.w	r3, r3, #4
 80118e2:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 80118e4:	79bb      	ldrb	r3, [r7, #6]
 80118e6:	4619      	mov	r1, r3
 80118e8:	201e      	movs	r0, #30
 80118ea:	f7ff fea1 	bl	8011630 <writeReg>

        mc3 = SX1276_MC3_AGCAUTO;
 80118ee:	2304      	movs	r3, #4
 80118f0:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 80118f2:	793b      	ldrb	r3, [r7, #4]
 80118f4:	2b05      	cmp	r3, #5
 80118f6:	d002      	beq.n	80118fe <configLoraModem+0x136>
 80118f8:	793b      	ldrb	r3, [r7, #4]
 80118fa:	2b06      	cmp	r3, #6
 80118fc:	d10b      	bne.n	8011916 <configLoraModem+0x14e>
 80118fe:	4b0a      	ldr	r3, [pc, #40]	; (8011928 <configLoraModem+0x160>)
 8011900:	89db      	ldrh	r3, [r3, #14]
 8011902:	4618      	mov	r0, r3
 8011904:	f7fc fb1a 	bl	800df3c <getBw>
 8011908:	4603      	mov	r3, r0
 801190a:	2b00      	cmp	r3, #0
 801190c:	d103      	bne.n	8011916 <configLoraModem+0x14e>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 801190e:	797b      	ldrb	r3, [r7, #5]
 8011910:	f043 0308 	orr.w	r3, r3, #8
 8011914:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 8011916:	797b      	ldrb	r3, [r7, #5]
 8011918:	4619      	mov	r1, r3
 801191a:	2026      	movs	r0, #38	; 0x26
 801191c:	f7ff fe88 	bl	8011630 <writeReg>
#endif

#else
#error Missing LMIC_SX1272/LMIC_SX1276
#endif /* LMIC_SX1272 */
}
 8011920:	bf00      	nop
 8011922:	3708      	adds	r7, #8
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	20000c04 	.word	0x20000c04
 801192c:	080184d4 	.word	0x080184d4

08011930 <configChannel>:

static void configChannel () {
 8011930:	b5b0      	push	{r4, r5, r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    uint64_t frf = ((uint64_t)LMIC.freq << 19) / 32000000;
 8011936:	4c1b      	ldr	r4, [pc, #108]	; (80119a4 <configChannel+0x74>)
 8011938:	68a4      	ldr	r4, [r4, #8]
 801193a:	2500      	movs	r5, #0
 801193c:	4622      	mov	r2, r4
 801193e:	462b      	mov	r3, r5
 8011940:	0b51      	lsrs	r1, r2, #13
 8011942:	04d0      	lsls	r0, r2, #19
 8011944:	4a18      	ldr	r2, [pc, #96]	; (80119a8 <configChannel+0x78>)
 8011946:	f04f 0300 	mov.w	r3, #0
 801194a:	f7ef f9a5 	bl	8000c98 <__aeabi_uldivmod>
 801194e:	4602      	mov	r2, r0
 8011950:	460b      	mov	r3, r1
 8011952:	e9c7 2300 	strd	r2, r3, [r7]
    writeReg(RegFrfMsb, (uint8_t)(frf>>16));
 8011956:	e9d7 0100 	ldrd	r0, r1, [r7]
 801195a:	f04f 0200 	mov.w	r2, #0
 801195e:	f04f 0300 	mov.w	r3, #0
 8011962:	0c02      	lsrs	r2, r0, #16
 8011964:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011968:	0c0b      	lsrs	r3, r1, #16
 801196a:	b2d3      	uxtb	r3, r2
 801196c:	4619      	mov	r1, r3
 801196e:	2006      	movs	r0, #6
 8011970:	f7ff fe5e 	bl	8011630 <writeReg>
    writeReg(RegFrfMid, (uint8_t)(frf>> 8));
 8011974:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011978:	f04f 0200 	mov.w	r2, #0
 801197c:	f04f 0300 	mov.w	r3, #0
 8011980:	0a02      	lsrs	r2, r0, #8
 8011982:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011986:	0a0b      	lsrs	r3, r1, #8
 8011988:	b2d3      	uxtb	r3, r2
 801198a:	4619      	mov	r1, r3
 801198c:	2007      	movs	r0, #7
 801198e:	f7ff fe4f 	bl	8011630 <writeReg>
    writeReg(RegFrfLsb, (uint8_t)(frf>> 0));
 8011992:	783b      	ldrb	r3, [r7, #0]
 8011994:	4619      	mov	r1, r3
 8011996:	2008      	movs	r0, #8
 8011998:	f7ff fe4a 	bl	8011630 <writeReg>
}
 801199c:	bf00      	nop
 801199e:	3708      	adds	r7, #8
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bdb0      	pop	{r4, r5, r7, pc}
 80119a4:	20000c04 	.word	0x20000c04
 80119a8:	01e84800 	.word	0x01e84800

080119ac <configPower>:



static void configPower () {
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b082      	sub	sp, #8
 80119b0:	af00      	add	r7, sp, #0
#ifdef LMIC_SX1276
    // no boost used for now
    int8_t pw = (int8_t)LMIC.txpow;
 80119b2:	4b15      	ldr	r3, [pc, #84]	; (8011a08 <configPower+0x5c>)
 80119b4:	7c9b      	ldrb	r3, [r3, #18]
 80119b6:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 80119b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80119bc:	2b10      	cmp	r3, #16
 80119be:	dd02      	ble.n	80119c6 <configPower+0x1a>
        pw = 15;
 80119c0:	230f      	movs	r3, #15
 80119c2:	71fb      	strb	r3, [r7, #7]
 80119c4:	e005      	b.n	80119d2 <configPower+0x26>
    } else if(pw < 2) {
 80119c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80119ca:	2b01      	cmp	r3, #1
 80119cc:	dc01      	bgt.n	80119d2 <configPower+0x26>
        pw = 2;
 80119ce:	2302      	movs	r3, #2
 80119d0:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (uint8_t)(0x80|(pw&0xf)));
 80119d2:	79fb      	ldrb	r3, [r7, #7]
 80119d4:	f003 030f 	and.w	r3, r3, #15
 80119d8:	b25b      	sxtb	r3, r3
 80119da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119de:	b25b      	sxtb	r3, r3
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	4619      	mov	r1, r3
 80119e4:	2009      	movs	r0, #9
 80119e6:	f7ff fe23 	bl	8011630 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 80119ea:	205a      	movs	r0, #90	; 0x5a
 80119ec:	f7ff fe3d 	bl	801166a <readReg>
 80119f0:	4603      	mov	r3, r0
 80119f2:	f043 0304 	orr.w	r3, r3, #4
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	4619      	mov	r1, r3
 80119fa:	205a      	movs	r0, #90	; 0x5a
 80119fc:	f7ff fe18 	bl	8011630 <writeReg>
    }
    writeReg(RegPaConfig, (uint8_t)(0x80|(pw-2)));
#else
#error Missing LMIC_SX1272/LMIC_SX1276
#endif /* LMIC_SX1272 */
}
 8011a00:	bf00      	nop
 8011a02:	3708      	adds	r7, #8
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}
 8011a08:	20000c04 	.word	0x20000c04

08011a0c <txfsk>:

static void txfsk () {
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 8011a10:	2110      	movs	r1, #16
 8011a12:	2001      	movs	r0, #1
 8011a14:	f7ff fe0c 	bl	8011630 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 8011a18:	2001      	movs	r0, #1
 8011a1a:	f7ff fe26 	bl	801166a <readReg>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	2b10      	cmp	r3, #16
 8011a22:	d004      	beq.n	8011a2e <txfsk+0x22>
 8011a24:	f240 11c5 	movw	r1, #453	; 0x1c5
 8011a28:	482e      	ldr	r0, [pc, #184]	; (8011ae4 <txfsk+0xd8>)
 8011a2a:	f000 ff65 	bl	80128f8 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8011a2e:	2001      	movs	r0, #1
 8011a30:	f7ff fe8c 	bl	801174c <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8011a34:	2102      	movs	r1, #2
 8011a36:	2002      	movs	r0, #2
 8011a38:	f7ff fdfa 	bl	8011630 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8011a3c:	2180      	movs	r1, #128	; 0x80
 8011a3e:	2003      	movs	r0, #3
 8011a40:	f7ff fdf6 	bl	8011630 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8011a44:	2101      	movs	r1, #1
 8011a46:	2004      	movs	r0, #4
 8011a48:	f7ff fdf2 	bl	8011630 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8011a4c:	2199      	movs	r1, #153	; 0x99
 8011a4e:	2005      	movs	r0, #5
 8011a50:	f7ff fdee 	bl	8011630 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 8011a54:	2100      	movs	r1, #0
 8011a56:	2025      	movs	r0, #37	; 0x25
 8011a58:	f7ff fdea 	bl	8011630 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 8011a5c:	2105      	movs	r1, #5
 8011a5e:	2026      	movs	r0, #38	; 0x26
 8011a60:	f7ff fde6 	bl	8011630 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 8011a64:	2112      	movs	r1, #18
 8011a66:	2027      	movs	r0, #39	; 0x27
 8011a68:	f7ff fde2 	bl	8011630 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 8011a6c:	21d0      	movs	r1, #208	; 0xd0
 8011a6e:	2030      	movs	r0, #48	; 0x30
 8011a70:	f7ff fdde 	bl	8011630 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 8011a74:	2140      	movs	r1, #64	; 0x40
 8011a76:	2031      	movs	r0, #49	; 0x31
 8011a78:	f7ff fdda 	bl	8011630 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 8011a7c:	21c1      	movs	r1, #193	; 0xc1
 8011a7e:	2028      	movs	r0, #40	; 0x28
 8011a80:	f7ff fdd6 	bl	8011630 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8011a84:	2194      	movs	r1, #148	; 0x94
 8011a86:	2029      	movs	r0, #41	; 0x29
 8011a88:	f7ff fdd2 	bl	8011630 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8011a8c:	21c1      	movs	r1, #193	; 0xc1
 8011a8e:	202a      	movs	r0, #42	; 0x2a
 8011a90:	f7ff fdce 	bl	8011630 <writeReg>
    // configure frequency
    configChannel();
 8011a94:	f7ff ff4c 	bl	8011930 <configChannel>
    // configure output power
    configPower();
 8011a98:	f7ff ff88 	bl	80119ac <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 8011a9c:	2134      	movs	r1, #52	; 0x34
 8011a9e:	2040      	movs	r0, #64	; 0x40
 8011aa0:	f7ff fdc6 	bl	8011630 <writeReg>

    // initialize the payload size and address pointers
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 8011aa4:	4b10      	ldr	r3, [pc, #64]	; (8011ae8 <txfsk+0xdc>)
 8011aa6:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8011aaa:	3301      	adds	r3, #1
 8011aac:	b2db      	uxtb	r3, r3
 8011aae:	4619      	mov	r1, r3
 8011ab0:	2032      	movs	r0, #50	; 0x32
 8011ab2:	f7ff fdbd 	bl	8011630 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 8011ab6:	4b0c      	ldr	r3, [pc, #48]	; (8011ae8 <txfsk+0xdc>)
 8011ab8:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8011abc:	4619      	mov	r1, r3
 8011abe:	2000      	movs	r0, #0
 8011ac0:	f7ff fdb6 	bl	8011630 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8011ac4:	4b08      	ldr	r3, [pc, #32]	; (8011ae8 <txfsk+0xdc>)
 8011ac6:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8011aca:	461a      	mov	r2, r3
 8011acc:	4907      	ldr	r1, [pc, #28]	; (8011aec <txfsk+0xe0>)
 8011ace:	2000      	movs	r0, #0
 8011ad0:	f7ff fde7 	bl	80116a2 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8011ad4:	2001      	movs	r0, #1
 8011ad6:	f000 fd82 	bl	80125de <hal_pin_rxtx>

    // now we actually start the transmission
    opmode(OPMODE_TX);
 8011ada:	2003      	movs	r0, #3
 8011adc:	f7ff fe36 	bl	801174c <opmode>
}
 8011ae0:	bf00      	nop
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	080184d4 	.word	0x080184d4
 8011ae8:	20000c04 	.word	0x20000c04
 8011aec:	20000ce8 	.word	0x20000ce8

08011af0 <txlora>:

static void txlora () {
 8011af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011af4:	b089      	sub	sp, #36	; 0x24
 8011af6:	af04      	add	r7, sp, #16
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 8011af8:	f7ff fe42 	bl	8011780 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8011afc:	2001      	movs	r0, #1
 8011afe:	f7ff fdb4 	bl	801166a <readReg>
 8011b02:	4603      	mov	r3, r0
 8011b04:	b25b      	sxtb	r3, r3
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	db04      	blt.n	8011b14 <txlora+0x24>
 8011b0a:	f240 11f1 	movw	r1, #497	; 0x1f1
 8011b0e:	484d      	ldr	r0, [pc, #308]	; (8011c44 <txlora+0x154>)
 8011b10:	f000 fef2 	bl	80128f8 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8011b14:	2001      	movs	r0, #1
 8011b16:	f7ff fe19 	bl	801174c <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 8011b1a:	f7ff fe55 	bl	80117c8 <configLoraModem>
    // configure frequency
    configChannel();
 8011b1e:	f7ff ff07 	bl	8011930 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 8011b22:	200a      	movs	r0, #10
 8011b24:	f7ff fda1 	bl	801166a <readReg>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	b25b      	sxtb	r3, r3
 8011b2c:	f023 030f 	bic.w	r3, r3, #15
 8011b30:	b25b      	sxtb	r3, r3
 8011b32:	f043 0308 	orr.w	r3, r3, #8
 8011b36:	b25b      	sxtb	r3, r3
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	4619      	mov	r1, r3
 8011b3c:	200a      	movs	r0, #10
 8011b3e:	f7ff fd77 	bl	8011630 <writeReg>
    configPower();
 8011b42:	f7ff ff33 	bl	80119ac <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8011b46:	2134      	movs	r1, #52	; 0x34
 8011b48:	2039      	movs	r0, #57	; 0x39
 8011b4a:	f7ff fd71 	bl	8011630 <writeReg>

    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8011b4e:	21f0      	movs	r1, #240	; 0xf0
 8011b50:	2040      	movs	r0, #64	; 0x40
 8011b52:	f7ff fd6d 	bl	8011630 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8011b56:	21ff      	movs	r1, #255	; 0xff
 8011b58:	2012      	movs	r0, #18
 8011b5a:	f7ff fd69 	bl	8011630 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8011b5e:	21f7      	movs	r1, #247	; 0xf7
 8011b60:	2011      	movs	r0, #17
 8011b62:	f7ff fd65 	bl	8011630 <writeReg>

    // initialize the payload size and address pointers
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8011b66:	2100      	movs	r1, #0
 8011b68:	200e      	movs	r0, #14
 8011b6a:	f7ff fd61 	bl	8011630 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 8011b6e:	2100      	movs	r1, #0
 8011b70:	200d      	movs	r0, #13
 8011b72:	f7ff fd5d 	bl	8011630 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8011b76:	4b34      	ldr	r3, [pc, #208]	; (8011c48 <txlora+0x158>)
 8011b78:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	2022      	movs	r0, #34	; 0x22
 8011b80:	f7ff fd56 	bl	8011630 <writeReg>

    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8011b84:	4b30      	ldr	r3, [pc, #192]	; (8011c48 <txlora+0x158>)
 8011b86:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8011b8a:	461a      	mov	r2, r3
 8011b8c:	492f      	ldr	r1, [pc, #188]	; (8011c4c <txlora+0x15c>)
 8011b8e:	2000      	movs	r0, #0
 8011b90:	f7ff fd87 	bl	80116a2 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8011b94:	2001      	movs	r0, #1
 8011b96:	f000 fd22 	bl	80125de <hal_pin_rxtx>

    // now we actually start the transmission
    opmode(OPMODE_TX);
 8011b9a:	2003      	movs	r0, #3
 8011b9c:	f7ff fdd6 	bl	801174c <opmode>

#if LMIC_DEBUG_LEVEL > 0
    uint8_t sf = getSf(LMIC.rps) + 6; // 1 == SF7
 8011ba0:	4b29      	ldr	r3, [pc, #164]	; (8011c48 <txlora+0x158>)
 8011ba2:	89db      	ldrh	r3, [r3, #14]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f7fc f9b9 	bl	800df1c <getSf>
 8011baa:	4603      	mov	r3, r0
 8011bac:	3306      	adds	r3, #6
 8011bae:	73fb      	strb	r3, [r7, #15]
    uint8_t bw = getBw(LMIC.rps);
 8011bb0:	4b25      	ldr	r3, [pc, #148]	; (8011c48 <txlora+0x158>)
 8011bb2:	89db      	ldrh	r3, [r3, #14]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7fc f9c1 	bl	800df3c <getBw>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	73bb      	strb	r3, [r7, #14]
    uint8_t cr = getCr(LMIC.rps);
 8011bbe:	4b22      	ldr	r3, [pc, #136]	; (8011c48 <txlora+0x158>)
 8011bc0:	89db      	ldrh	r3, [r3, #14]
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7fc f9cc 	bl	800df60 <getCr>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	737b      	strb	r3, [r7, #13]
    lmic_printf("%lu: TXMODE, freq=%lu, len=%d, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 8011bcc:	f7ff fc1c 	bl	8011408 <os_getTime>
 8011bd0:	4680      	mov	r8, r0
 8011bd2:	4b1d      	ldr	r3, [pc, #116]	; (8011c48 <txlora+0x158>)
 8011bd4:	689b      	ldr	r3, [r3, #8]
 8011bd6:	607b      	str	r3, [r7, #4]
           os_getTime(), LMIC.freq, LMIC.dataLen, sf,
 8011bd8:	4b1b      	ldr	r3, [pc, #108]	; (8011c48 <txlora+0x158>)
 8011bda:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
    lmic_printf("%lu: TXMODE, freq=%lu, len=%d, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 8011bde:	4699      	mov	r9, r3
 8011be0:	7bfe      	ldrb	r6, [r7, #15]
 8011be2:	7bbb      	ldrb	r3, [r7, #14]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d007      	beq.n	8011bf8 <txlora+0x108>
           bw == BW125 ? 125 : (bw == BW250 ? 250 : 500),
 8011be8:	7bbb      	ldrb	r3, [r7, #14]
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d101      	bne.n	8011bf2 <txlora+0x102>
 8011bee:	25fa      	movs	r5, #250	; 0xfa
 8011bf0:	e003      	b.n	8011bfa <txlora+0x10a>
 8011bf2:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 8011bf6:	e000      	b.n	8011bfa <txlora+0x10a>
    lmic_printf("%lu: TXMODE, freq=%lu, len=%d, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 8011bf8:	257d      	movs	r5, #125	; 0x7d
 8011bfa:	7b7b      	ldrb	r3, [r7, #13]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d00b      	beq.n	8011c18 <txlora+0x128>
           cr == CR_4_5 ? 5 : (cr == CR_4_6 ? 6 : (cr == CR_4_7 ? 7 : 8)),
 8011c00:	7b7b      	ldrb	r3, [r7, #13]
 8011c02:	2b01      	cmp	r3, #1
 8011c04:	d006      	beq.n	8011c14 <txlora+0x124>
 8011c06:	7b7b      	ldrb	r3, [r7, #13]
 8011c08:	2b02      	cmp	r3, #2
 8011c0a:	d101      	bne.n	8011c10 <txlora+0x120>
 8011c0c:	2407      	movs	r4, #7
 8011c0e:	e004      	b.n	8011c1a <txlora+0x12a>
 8011c10:	2408      	movs	r4, #8
 8011c12:	e002      	b.n	8011c1a <txlora+0x12a>
 8011c14:	2406      	movs	r4, #6
 8011c16:	e000      	b.n	8011c1a <txlora+0x12a>
    lmic_printf("%lu: TXMODE, freq=%lu, len=%d, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 8011c18:	2405      	movs	r4, #5
 8011c1a:	4b0b      	ldr	r3, [pc, #44]	; (8011c48 <txlora+0x158>)
 8011c1c:	89db      	ldrh	r3, [r3, #14]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fc f9f0 	bl	800e004 <getIh>
 8011c24:	4603      	mov	r3, r0
 8011c26:	9303      	str	r3, [sp, #12]
 8011c28:	9402      	str	r4, [sp, #8]
 8011c2a:	9501      	str	r5, [sp, #4]
 8011c2c:	9600      	str	r6, [sp, #0]
 8011c2e:	464b      	mov	r3, r9
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	4641      	mov	r1, r8
 8011c34:	4806      	ldr	r0, [pc, #24]	; (8011c50 <txlora+0x160>)
 8011c36:	f000 fbbd 	bl	80123b4 <printf>
           getIh(LMIC.rps)
   );
#endif
}
 8011c3a:	bf00      	nop
 8011c3c:	3714      	adds	r7, #20
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c44:	080184d4 	.word	0x080184d4
 8011c48:	20000c04 	.word	0x20000c04
 8011c4c:	20000ce8 	.word	0x20000ce8
 8011c50:	080184e4 	.word	0x080184e4

08011c54 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 8011c54:	b580      	push	{r7, lr}
 8011c56:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8011c58:	2001      	movs	r0, #1
 8011c5a:	f7ff fd06 	bl	801166a <readReg>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	f003 0307 	and.w	r3, r3, #7
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d004      	beq.n	8011c72 <starttx+0x1e>
 8011c68:	f240 2123 	movw	r1, #547	; 0x223
 8011c6c:	4808      	ldr	r0, [pc, #32]	; (8011c90 <starttx+0x3c>)
 8011c6e:	f000 fe43 	bl	80128f8 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8011c72:	4b08      	ldr	r3, [pc, #32]	; (8011c94 <starttx+0x40>)
 8011c74:	89db      	ldrh	r3, [r3, #14]
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7fc f950 	bl	800df1c <getSf>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d102      	bne.n	8011c88 <starttx+0x34>
        txfsk();
 8011c82:	f7ff fec3 	bl	8011a0c <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 8011c86:	e001      	b.n	8011c8c <starttx+0x38>
        txlora();
 8011c88:	f7ff ff32 	bl	8011af0 <txlora>
}
 8011c8c:	bf00      	nop
 8011c8e:	bd80      	pop	{r7, pc}
 8011c90:	080184d4 	.word	0x080184d4
 8011c94:	20000c04 	.word	0x20000c04

08011c98 <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (uint8_t rxmode) {
 8011c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c9c:	b08a      	sub	sp, #40	; 0x28
 8011c9e:	af04      	add	r7, sp, #16
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	73fb      	strb	r3, [r7, #15]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 8011ca4:	f7ff fd6c 	bl	8011780 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8011ca8:	2001      	movs	r0, #1
 8011caa:	f7ff fcde 	bl	801166a <readReg>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	b25b      	sxtb	r3, r3
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	db04      	blt.n	8011cc0 <rxlora+0x28>
 8011cb6:	f240 2139 	movw	r1, #569	; 0x239
 8011cba:	4866      	ldr	r0, [pc, #408]	; (8011e54 <rxlora+0x1bc>)
 8011cbc:	f000 fe1c 	bl	80128f8 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8011cc0:	2001      	movs	r0, #1
 8011cc2:	f7ff fd43 	bl	801174c <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 8011cc6:	7bfb      	ldrb	r3, [r7, #15]
 8011cc8:	2b02      	cmp	r3, #2
 8011cca:	d108      	bne.n	8011cde <rxlora+0x46>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 8011ccc:	210a      	movs	r1, #10
 8011cce:	201d      	movs	r0, #29
 8011cd0:	f7ff fcae 	bl	8011630 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8011cd4:	2170      	movs	r1, #112	; 0x70
 8011cd6:	201e      	movs	r0, #30
 8011cd8:	f7ff fcaa 	bl	8011630 <writeReg>
 8011cdc:	e003      	b.n	8011ce6 <rxlora+0x4e>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 8011cde:	f7ff fd73 	bl	80117c8 <configLoraModem>
        // configure frequency
        configChannel();
 8011ce2:	f7ff fe25 	bl	8011930 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN);
 8011ce6:	2121      	movs	r1, #33	; 0x21
 8011ce8:	200c      	movs	r0, #12
 8011cea:	f7ff fca1 	bl	8011630 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 8011cee:	2140      	movs	r1, #64	; 0x40
 8011cf0:	2023      	movs	r0, #35	; 0x23
 8011cf2:	f7ff fc9d 	bl	8011630 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 8011cf6:	4b58      	ldr	r3, [pc, #352]	; (8011e58 <rxlora+0x1c0>)
 8011cf8:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d00b      	beq.n	8011d18 <rxlora+0x80>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 8011d00:	2033      	movs	r0, #51	; 0x33
 8011d02:	f7ff fcb2 	bl	801166a <readReg>
 8011d06:	4603      	mov	r3, r0
 8011d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d0c:	b2db      	uxtb	r3, r3
 8011d0e:	4619      	mov	r1, r3
 8011d10:	2033      	movs	r0, #51	; 0x33
 8011d12:	f7ff fc8d 	bl	8011630 <writeReg>
 8011d16:	e00a      	b.n	8011d2e <rxlora+0x96>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8011d18:	2033      	movs	r0, #51	; 0x33
 8011d1a:	f7ff fca6 	bl	801166a <readReg>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d24:	b2db      	uxtb	r3, r3
 8011d26:	4619      	mov	r1, r3
 8011d28:	2033      	movs	r0, #51	; 0x33
 8011d2a:	f7ff fc81 	bl	8011630 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8011d2e:	4b4a      	ldr	r3, [pc, #296]	; (8011e58 <rxlora+0x1c0>)
 8011d30:	7c1b      	ldrb	r3, [r3, #16]
 8011d32:	4619      	mov	r1, r3
 8011d34:	201f      	movs	r0, #31
 8011d36:	f7ff fc7b 	bl	8011630 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8011d3a:	2134      	movs	r1, #52	; 0x34
 8011d3c:	2039      	movs	r0, #57	; 0x39
 8011d3e:	f7ff fc77 	bl	8011630 <writeReg>

    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 8011d42:	21c0      	movs	r1, #192	; 0xc0
 8011d44:	2040      	movs	r0, #64	; 0x40
 8011d46:	f7ff fc73 	bl	8011630 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8011d4a:	21ff      	movs	r1, #255	; 0xff
 8011d4c:	2012      	movs	r0, #18
 8011d4e:	f7ff fc6f 	bl	8011630 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~TABLE_GET_U1(rxlorairqmask, rxmode));
 8011d52:	7bfb      	ldrb	r3, [r7, #15]
 8011d54:	4619      	mov	r1, r3
 8011d56:	4841      	ldr	r0, [pc, #260]	; (8011e5c <rxlora+0x1c4>)
 8011d58:	f7fb faf6 	bl	800d348 <table_get_u1>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	43db      	mvns	r3, r3
 8011d60:	b2db      	uxtb	r3, r3
 8011d62:	4619      	mov	r1, r3
 8011d64:	2011      	movs	r0, #17
 8011d66:	f7ff fc63 	bl	8011630 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8011d6a:	2000      	movs	r0, #0
 8011d6c:	f000 fc37 	bl	80125de <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8011d70:	7bfb      	ldrb	r3, [r7, #15]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d108      	bne.n	8011d88 <rxlora+0xf0>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8011d76:	4b38      	ldr	r3, [pc, #224]	; (8011e58 <rxlora+0x1c0>)
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f000 fcfd 	bl	801277a <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8011d80:	2006      	movs	r0, #6
 8011d82:	f7ff fce3 	bl	801174c <opmode>
 8011d86:	e002      	b.n	8011d8e <rxlora+0xf6>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX);
 8011d88:	2005      	movs	r0, #5
 8011d8a:	f7ff fcdf 	bl	801174c <opmode>
    }

#if LMIC_DEBUG_LEVEL > 0
    if (rxmode == RXMODE_RSSI) {
 8011d8e:	7bfb      	ldrb	r3, [r7, #15]
 8011d90:	2b02      	cmp	r3, #2
 8011d92:	d103      	bne.n	8011d9c <rxlora+0x104>
        lmic_printf("RXMODE_RSSI\n");
 8011d94:	4832      	ldr	r0, [pc, #200]	; (8011e60 <rxlora+0x1c8>)
 8011d96:	f001 fce9 	bl	801376c <puts>
               cr == CR_4_5 ? 5 : (cr == CR_4_6 ? 6 : (cr == CR_4_7 ? 7 : 8)),
               getIh(LMIC.rps)
       );
    }
#endif
}
 8011d9a:	e055      	b.n	8011e48 <rxlora+0x1b0>
        uint8_t sf = getSf(LMIC.rps) + 6; // 1 == SF7
 8011d9c:	4b2e      	ldr	r3, [pc, #184]	; (8011e58 <rxlora+0x1c0>)
 8011d9e:	89db      	ldrh	r3, [r3, #14]
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7fc f8bb 	bl	800df1c <getSf>
 8011da6:	4603      	mov	r3, r0
 8011da8:	3306      	adds	r3, #6
 8011daa:	75fb      	strb	r3, [r7, #23]
        uint8_t bw = getBw(LMIC.rps);
 8011dac:	4b2a      	ldr	r3, [pc, #168]	; (8011e58 <rxlora+0x1c0>)
 8011dae:	89db      	ldrh	r3, [r3, #14]
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7fc f8c3 	bl	800df3c <getBw>
 8011db6:	4603      	mov	r3, r0
 8011db8:	75bb      	strb	r3, [r7, #22]
        uint8_t cr = getCr(LMIC.rps);
 8011dba:	4b27      	ldr	r3, [pc, #156]	; (8011e58 <rxlora+0x1c0>)
 8011dbc:	89db      	ldrh	r3, [r3, #14]
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fc f8ce 	bl	800df60 <getCr>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	757b      	strb	r3, [r7, #21]
        lmic_printf("%lu: %s, freq=%lu, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 8011dc8:	f7ff fb1e 	bl	8011408 <os_getTime>
 8011dcc:	4680      	mov	r8, r0
 8011dce:	7bfb      	ldrb	r3, [r7, #15]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d006      	beq.n	8011de2 <rxlora+0x14a>
               rxmode == RXMODE_SINGLE ? "RXMODE_SINGLE" : (rxmode == RXMODE_SCAN ? "RXMODE_SCAN" : "UNKNOWN_RX"),
 8011dd4:	7bfb      	ldrb	r3, [r7, #15]
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d101      	bne.n	8011dde <rxlora+0x146>
 8011dda:	4e22      	ldr	r6, [pc, #136]	; (8011e64 <rxlora+0x1cc>)
 8011ddc:	e002      	b.n	8011de4 <rxlora+0x14c>
 8011dde:	4e22      	ldr	r6, [pc, #136]	; (8011e68 <rxlora+0x1d0>)
 8011de0:	e000      	b.n	8011de4 <rxlora+0x14c>
        lmic_printf("%lu: %s, freq=%lu, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 8011de2:	4e22      	ldr	r6, [pc, #136]	; (8011e6c <rxlora+0x1d4>)
 8011de4:	4b1c      	ldr	r3, [pc, #112]	; (8011e58 <rxlora+0x1c0>)
 8011de6:	689b      	ldr	r3, [r3, #8]
 8011de8:	60bb      	str	r3, [r7, #8]
 8011dea:	7dfb      	ldrb	r3, [r7, #23]
 8011dec:	607b      	str	r3, [r7, #4]
 8011dee:	7dbb      	ldrb	r3, [r7, #22]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d007      	beq.n	8011e04 <rxlora+0x16c>
               bw == BW125 ? 125 : (bw == BW250 ? 250 : 500),
 8011df4:	7dbb      	ldrb	r3, [r7, #22]
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	d101      	bne.n	8011dfe <rxlora+0x166>
 8011dfa:	25fa      	movs	r5, #250	; 0xfa
 8011dfc:	e003      	b.n	8011e06 <rxlora+0x16e>
 8011dfe:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 8011e02:	e000      	b.n	8011e06 <rxlora+0x16e>
        lmic_printf("%lu: %s, freq=%lu, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 8011e04:	257d      	movs	r5, #125	; 0x7d
 8011e06:	7d7b      	ldrb	r3, [r7, #21]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00b      	beq.n	8011e24 <rxlora+0x18c>
               cr == CR_4_5 ? 5 : (cr == CR_4_6 ? 6 : (cr == CR_4_7 ? 7 : 8)),
 8011e0c:	7d7b      	ldrb	r3, [r7, #21]
 8011e0e:	2b01      	cmp	r3, #1
 8011e10:	d006      	beq.n	8011e20 <rxlora+0x188>
 8011e12:	7d7b      	ldrb	r3, [r7, #21]
 8011e14:	2b02      	cmp	r3, #2
 8011e16:	d101      	bne.n	8011e1c <rxlora+0x184>
 8011e18:	2407      	movs	r4, #7
 8011e1a:	e004      	b.n	8011e26 <rxlora+0x18e>
 8011e1c:	2408      	movs	r4, #8
 8011e1e:	e002      	b.n	8011e26 <rxlora+0x18e>
 8011e20:	2406      	movs	r4, #6
 8011e22:	e000      	b.n	8011e26 <rxlora+0x18e>
        lmic_printf("%lu: %s, freq=%lu, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 8011e24:	2405      	movs	r4, #5
 8011e26:	4b0c      	ldr	r3, [pc, #48]	; (8011e58 <rxlora+0x1c0>)
 8011e28:	89db      	ldrh	r3, [r3, #14]
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f7fc f8ea 	bl	800e004 <getIh>
 8011e30:	4603      	mov	r3, r0
 8011e32:	9303      	str	r3, [sp, #12]
 8011e34:	9402      	str	r4, [sp, #8]
 8011e36:	9501      	str	r5, [sp, #4]
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	9300      	str	r3, [sp, #0]
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	4632      	mov	r2, r6
 8011e40:	4641      	mov	r1, r8
 8011e42:	480b      	ldr	r0, [pc, #44]	; (8011e70 <rxlora+0x1d8>)
 8011e44:	f000 fab6 	bl	80123b4 <printf>
}
 8011e48:	bf00      	nop
 8011e4a:	3718      	adds	r7, #24
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e52:	bf00      	nop
 8011e54:	080184d4 	.word	0x080184d4
 8011e58:	20000c04 	.word	0x20000c04
 8011e5c:	080198c4 	.word	0x080198c4
 8011e60:	08018524 	.word	0x08018524
 8011e64:	08018530 	.word	0x08018530
 8011e68:	0801853c 	.word	0x0801853c
 8011e6c:	08018548 	.word	0x08018548
 8011e70:	08018558 	.word	0x08018558

08011e74 <rxfsk>:

static void rxfsk (uint8_t rxmode) {
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 8011e7e:	79fb      	ldrb	r3, [r7, #7]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d004      	beq.n	8011e8e <rxfsk+0x1a>
 8011e84:	f240 217f 	movw	r1, #639	; 0x27f
 8011e88:	4834      	ldr	r0, [pc, #208]	; (8011f5c <rxfsk+0xe8>)
 8011e8a:	f000 fd35 	bl	80128f8 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 8011e8e:	f7ff fc89 	bl	80117a4 <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8011e92:	2001      	movs	r0, #1
 8011e94:	f7ff fbe9 	bl	801166a <readReg>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	b25b      	sxtb	r3, r3
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	da04      	bge.n	8011eaa <rxfsk+0x36>
 8011ea0:	f240 2183 	movw	r1, #643	; 0x283
 8011ea4:	482d      	ldr	r0, [pc, #180]	; (8011f5c <rxfsk+0xe8>)
 8011ea6:	f000 fd27 	bl	80128f8 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8011eaa:	2001      	movs	r0, #1
 8011eac:	f7ff fc4e 	bl	801174c <opmode>
    // configure frequency
    configChannel();
 8011eb0:	f7ff fd3e 	bl	8011930 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 8011eb4:	2121      	movs	r1, #33	; 0x21
 8011eb6:	200c      	movs	r0, #12
 8011eb8:	f7ff fbba 	bl	8011630 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 8011ebc:	211e      	movs	r1, #30
 8011ebe:	200d      	movs	r0, #13
 8011ec0:	f7ff fbb6 	bl	8011630 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8011ec4:	210b      	movs	r1, #11
 8011ec6:	2012      	movs	r0, #18
 8011ec8:	f7ff fbb2 	bl	8011630 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8011ecc:	2112      	movs	r1, #18
 8011ece:	2013      	movs	r0, #19
 8011ed0:	f7ff fbae 	bl	8011630 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8011ed4:	21aa      	movs	r1, #170	; 0xaa
 8011ed6:	201f      	movs	r0, #31
 8011ed8:	f7ff fbaa 	bl	8011630 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 8011edc:	2112      	movs	r1, #18
 8011ede:	2027      	movs	r0, #39	; 0x27
 8011ee0:	f7ff fba6 	bl	8011630 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8011ee4:	21d8      	movs	r1, #216	; 0xd8
 8011ee6:	2030      	movs	r0, #48	; 0x30
 8011ee8:	f7ff fba2 	bl	8011630 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8011eec:	2140      	movs	r1, #64	; 0x40
 8011eee:	2031      	movs	r0, #49	; 0x31
 8011ef0:	f7ff fb9e 	bl	8011630 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 8011ef4:	21c1      	movs	r1, #193	; 0xc1
 8011ef6:	2028      	movs	r0, #40	; 0x28
 8011ef8:	f7ff fb9a 	bl	8011630 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8011efc:	2194      	movs	r1, #148	; 0x94
 8011efe:	2029      	movs	r0, #41	; 0x29
 8011f00:	f7ff fb96 	bl	8011630 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8011f04:	21c1      	movs	r1, #193	; 0xc1
 8011f06:	202a      	movs	r0, #42	; 0x2a
 8011f08:	f7ff fb92 	bl	8011630 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 8011f0c:	21ff      	movs	r1, #255	; 0xff
 8011f0e:	2021      	movs	r0, #33	; 0x21
 8011f10:	f7ff fb8e 	bl	8011630 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8011f14:	2102      	movs	r1, #2
 8011f16:	2002      	movs	r0, #2
 8011f18:	f7ff fb8a 	bl	8011630 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8011f1c:	2180      	movs	r1, #128	; 0x80
 8011f1e:	2003      	movs	r0, #3
 8011f20:	f7ff fb86 	bl	8011630 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8011f24:	2101      	movs	r1, #1
 8011f26:	2004      	movs	r0, #4
 8011f28:	f7ff fb82 	bl	8011630 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8011f2c:	2199      	movs	r1, #153	; 0x99
 8011f2e:	2005      	movs	r0, #5
 8011f30:	f7ff fb7e 	bl	8011630 <writeReg>

    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 8011f34:	2138      	movs	r1, #56	; 0x38
 8011f36:	2040      	movs	r0, #64	; 0x40
 8011f38:	f7ff fb7a 	bl	8011630 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8011f3c:	2000      	movs	r0, #0
 8011f3e:	f000 fb4e 	bl	80125de <hal_pin_rxtx>

    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8011f42:	4b07      	ldr	r3, [pc, #28]	; (8011f60 <rxfsk+0xec>)
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	4618      	mov	r0, r3
 8011f48:	f000 fc17 	bl	801277a <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 8011f4c:	2005      	movs	r0, #5
 8011f4e:	f7ff fbfd 	bl	801174c <opmode>
}
 8011f52:	bf00      	nop
 8011f54:	3708      	adds	r7, #8
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}
 8011f5a:	bf00      	nop
 8011f5c:	080184d4 	.word	0x080184d4
 8011f60:	20000c04 	.word	0x20000c04

08011f64 <startrx>:

static void startrx (uint8_t rxmode) {
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8011f6e:	2001      	movs	r0, #1
 8011f70:	f7ff fb7b 	bl	801166a <readReg>
 8011f74:	4603      	mov	r3, r0
 8011f76:	f003 0307 	and.w	r3, r3, #7
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d004      	beq.n	8011f88 <startrx+0x24>
 8011f7e:	f240 21b1 	movw	r1, #689	; 0x2b1
 8011f82:	480c      	ldr	r0, [pc, #48]	; (8011fb4 <startrx+0x50>)
 8011f84:	f000 fcb8 	bl	80128f8 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8011f88:	4b0b      	ldr	r3, [pc, #44]	; (8011fb8 <startrx+0x54>)
 8011f8a:	89db      	ldrh	r3, [r3, #14]
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7fb ffc5 	bl	800df1c <getSf>
 8011f92:	4603      	mov	r3, r0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d104      	bne.n	8011fa2 <startrx+0x3e>
        rxfsk(rxmode);
 8011f98:	79fb      	ldrb	r3, [r7, #7]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7ff ff6a 	bl	8011e74 <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 8011fa0:	e003      	b.n	8011faa <startrx+0x46>
        rxlora(rxmode);
 8011fa2:	79fb      	ldrb	r3, [r7, #7]
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7ff fe77 	bl	8011c98 <rxlora>
}
 8011faa:	bf00      	nop
 8011fac:	3708      	adds	r7, #8
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	080184d4 	.word	0x080184d4
 8011fb8:	20000c04 	.word	0x20000c04

08011fbc <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 8011fbc:	b590      	push	{r4, r7, lr}
 8011fbe:	b087      	sub	sp, #28
 8011fc0:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8011fc2:	f000 fc53 	bl	801286c <hal_disableIRQs>

    // manually reset radio
#ifdef LMIC_SX1276
    hal_pin_rst(0); // drive RST pin low
 8011fc6:	2000      	movs	r0, #0
 8011fc8:	f000 fb26 	bl	8012618 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 8011fcc:	f7ff fa1c 	bl	8011408 <os_getTime>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	3320      	adds	r3, #32
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f000 fbd0 	bl	801277a <hal_waitUntil>
    hal_pin_rst(1); // configure RST pin floating!
 8011fda:	2001      	movs	r0, #1
 8011fdc:	f000 fb1c 	bl	8012618 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 8011fe0:	f7ff fa12 	bl	8011408 <os_getTime>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	33a0      	adds	r3, #160	; 0xa0
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f000 fbc6 	bl	801277a <hal_waitUntil>
    opmode(OPMODE_SLEEP);
 8011fee:	2000      	movs	r0, #0
 8011ff0:	f7ff fbac 	bl	801174c <opmode>

    // some sanity checks, e.g., read version number
    uint8_t v = readReg(RegVersion);
 8011ff4:	2042      	movs	r0, #66	; 0x42
 8011ff6:	f7ff fb38 	bl	801166a <readReg>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	73fb      	strb	r3, [r7, #15]
#ifdef LMIC_SX1276
    ASSERT(v == 0x12 );
 8011ffe:	7bfb      	ldrb	r3, [r7, #15]
 8012000:	2b12      	cmp	r3, #18
 8012002:	d004      	beq.n	801200e <radio_init+0x52>
 8012004:	f240 21cd 	movw	r1, #717	; 0x2cd
 8012008:	4847      	ldr	r0, [pc, #284]	; (8012128 <radio_init+0x16c>)
 801200a:	f000 fc75 	bl	80128f8 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing LMIC_SX1272/LMIC_SX1276
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 801200e:	2002      	movs	r0, #2
 8012010:	f7ff fe42 	bl	8011c98 <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 8012014:	bf00      	nop
 8012016:	2001      	movs	r0, #1
 8012018:	f7ff fb27 	bl	801166a <readReg>
 801201c:	4603      	mov	r3, r0
 801201e:	f003 0307 	and.w	r3, r3, #7
 8012022:	2b05      	cmp	r3, #5
 8012024:	d1f7      	bne.n	8012016 <radio_init+0x5a>
    for(int i=1; i<16; i++) {
 8012026:	2301      	movs	r3, #1
 8012028:	617b      	str	r3, [r7, #20]
 801202a:	e02c      	b.n	8012086 <radio_init+0xca>
        for(int j=0; j<8; j++) {
 801202c:	2300      	movs	r3, #0
 801202e:	613b      	str	r3, [r7, #16]
 8012030:	e023      	b.n	801207a <radio_init+0xbe>
            uint8_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 8012032:	bf00      	nop
 8012034:	202c      	movs	r0, #44	; 0x2c
 8012036:	f7ff fb18 	bl	801166a <readReg>
 801203a:	4603      	mov	r3, r0
 801203c:	f003 0301 	and.w	r3, r3, #1
 8012040:	71fb      	strb	r3, [r7, #7]
 8012042:	79fc      	ldrb	r4, [r7, #7]
 8012044:	202c      	movs	r0, #44	; 0x2c
 8012046:	f7ff fb10 	bl	801166a <readReg>
 801204a:	4603      	mov	r3, r0
 801204c:	f003 0301 	and.w	r3, r3, #1
 8012050:	429c      	cmp	r4, r3
 8012052:	d0ef      	beq.n	8012034 <radio_init+0x78>
            randbuf[i] = (randbuf[i] << 1) | b;
 8012054:	4a35      	ldr	r2, [pc, #212]	; (801212c <radio_init+0x170>)
 8012056:	697b      	ldr	r3, [r7, #20]
 8012058:	4413      	add	r3, r2
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	005b      	lsls	r3, r3, #1
 801205e:	b25a      	sxtb	r2, r3
 8012060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012064:	4313      	orrs	r3, r2
 8012066:	b25b      	sxtb	r3, r3
 8012068:	b2d9      	uxtb	r1, r3
 801206a:	4a30      	ldr	r2, [pc, #192]	; (801212c <radio_init+0x170>)
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	4413      	add	r3, r2
 8012070:	460a      	mov	r2, r1
 8012072:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	3301      	adds	r3, #1
 8012078:	613b      	str	r3, [r7, #16]
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	2b07      	cmp	r3, #7
 801207e:	ddd8      	ble.n	8012032 <radio_init+0x76>
    for(int i=1; i<16; i++) {
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	3301      	adds	r3, #1
 8012084:	617b      	str	r3, [r7, #20]
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	2b0f      	cmp	r3, #15
 801208a:	ddcf      	ble.n	801202c <radio_init+0x70>
        }
    }
    randbuf[0] = 16; // set initial index
 801208c:	4b27      	ldr	r3, [pc, #156]	; (801212c <radio_init+0x170>)
 801208e:	2210      	movs	r2, #16
 8012090:	701a      	strb	r2, [r3, #0]

#ifdef CFG_sx1276mb1_board
    // chain calibration
    writeReg(RegPaConfig, 0);
 8012092:	2100      	movs	r1, #0
 8012094:	2009      	movs	r0, #9
 8012096:	f7ff facb 	bl	8011630 <writeReg>

    // Launch Rx chain calibration for LF band
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
 801209a:	203b      	movs	r0, #59	; 0x3b
 801209c:	f7ff fae5 	bl	801166a <readReg>
 80120a0:	4603      	mov	r3, r0
 80120a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120a6:	b2db      	uxtb	r3, r3
 80120a8:	4619      	mov	r1, r3
 80120aa:	203b      	movs	r0, #59	; 0x3b
 80120ac:	f7ff fac0 	bl	8011630 <writeReg>
    while((readReg(FSKRegImageCal)&RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING){ ; }
 80120b0:	bf00      	nop
 80120b2:	203b      	movs	r0, #59	; 0x3b
 80120b4:	f7ff fad9 	bl	801166a <readReg>
 80120b8:	4603      	mov	r3, r0
 80120ba:	f003 0320 	and.w	r3, r3, #32
 80120be:	2b20      	cmp	r3, #32
 80120c0:	d0f7      	beq.n	80120b2 <radio_init+0xf6>

    // Sets a Frequency in HF band
    uint32_t frf = 903000000;
 80120c2:	4b1b      	ldr	r3, [pc, #108]	; (8012130 <radio_init+0x174>)
 80120c4:	60bb      	str	r3, [r7, #8]
    writeReg(RegFrfMsb, (uint8_t)(frf>>16));
 80120c6:	68bb      	ldr	r3, [r7, #8]
 80120c8:	0c1b      	lsrs	r3, r3, #16
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	4619      	mov	r1, r3
 80120ce:	2006      	movs	r0, #6
 80120d0:	f7ff faae 	bl	8011630 <writeReg>
    writeReg(RegFrfMid, (uint8_t)(frf>> 8));
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	0a1b      	lsrs	r3, r3, #8
 80120d8:	b2db      	uxtb	r3, r3
 80120da:	4619      	mov	r1, r3
 80120dc:	2007      	movs	r0, #7
 80120de:	f7ff faa7 	bl	8011630 <writeReg>
    writeReg(RegFrfLsb, (uint8_t)(frf>> 0));
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	4619      	mov	r1, r3
 80120e8:	2008      	movs	r0, #8
 80120ea:	f7ff faa1 	bl	8011630 <writeReg>

    // Launch Rx chain calibration for HF band
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
 80120ee:	203b      	movs	r0, #59	; 0x3b
 80120f0:	f7ff fabb 	bl	801166a <readReg>
 80120f4:	4603      	mov	r3, r0
 80120f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120fa:	b2db      	uxtb	r3, r3
 80120fc:	4619      	mov	r1, r3
 80120fe:	203b      	movs	r0, #59	; 0x3b
 8012100:	f7ff fa96 	bl	8011630 <writeReg>
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
 8012104:	bf00      	nop
 8012106:	203b      	movs	r0, #59	; 0x3b
 8012108:	f7ff faaf 	bl	801166a <readReg>
 801210c:	4603      	mov	r3, r0
 801210e:	f003 0320 	and.w	r3, r3, #32
 8012112:	2b20      	cmp	r3, #32
 8012114:	d0f7      	beq.n	8012106 <radio_init+0x14a>
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 8012116:	2000      	movs	r0, #0
 8012118:	f7ff fb18 	bl	801174c <opmode>

    hal_enableIRQs();
 801211c:	f000 fbb6 	bl	801288c <hal_enableIRQs>
}
 8012120:	bf00      	nop
 8012122:	371c      	adds	r7, #28
 8012124:	46bd      	mov	sp, r7
 8012126:	bd90      	pop	{r4, r7, pc}
 8012128:	080184d4 	.word	0x080184d4
 801212c:	20000d54 	.word	0x20000d54
 8012130:	35d2afc0 	.word	0x35d2afc0

08012134 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
uint8_t radio_rand1 () {
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
    uint8_t i = randbuf[0];
 801213a:	4b12      	ldr	r3, [pc, #72]	; (8012184 <radio_rand1+0x50>)
 801213c:	781b      	ldrb	r3, [r3, #0]
 801213e:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 8012140:	79fb      	ldrb	r3, [r7, #7]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d104      	bne.n	8012150 <radio_rand1+0x1c>
 8012146:	f240 21fb 	movw	r1, #763	; 0x2fb
 801214a:	480f      	ldr	r0, [pc, #60]	; (8012188 <radio_rand1+0x54>)
 801214c:	f000 fbd4 	bl	80128f8 <hal_failed>
    if( i==16 ) {
 8012150:	79fb      	ldrb	r3, [r7, #7]
 8012152:	2b10      	cmp	r3, #16
 8012154:	d106      	bne.n	8012164 <radio_rand1+0x30>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 8012156:	2210      	movs	r2, #16
 8012158:	490a      	ldr	r1, [pc, #40]	; (8012184 <radio_rand1+0x50>)
 801215a:	2000      	movs	r0, #0
 801215c:	f7fb f9b8 	bl	800d4d0 <os_aes>
        i = 0;
 8012160:	2300      	movs	r3, #0
 8012162:	71fb      	strb	r3, [r7, #7]
    }
    uint8_t v = randbuf[i++];
 8012164:	79fb      	ldrb	r3, [r7, #7]
 8012166:	1c5a      	adds	r2, r3, #1
 8012168:	71fa      	strb	r2, [r7, #7]
 801216a:	461a      	mov	r2, r3
 801216c:	4b05      	ldr	r3, [pc, #20]	; (8012184 <radio_rand1+0x50>)
 801216e:	5c9b      	ldrb	r3, [r3, r2]
 8012170:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 8012172:	4a04      	ldr	r2, [pc, #16]	; (8012184 <radio_rand1+0x50>)
 8012174:	79fb      	ldrb	r3, [r7, #7]
 8012176:	7013      	strb	r3, [r2, #0]
    return v;
 8012178:	79bb      	ldrb	r3, [r7, #6]
}
 801217a:	4618      	mov	r0, r3
 801217c:	3708      	adds	r7, #8
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	20000d54 	.word	0x20000d54
 8012188:	080184d4 	.word	0x080184d4

0801218c <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (uint8_t dio) {
 801218c:	b580      	push	{r7, lr}
 801218e:	b084      	sub	sp, #16
 8012190:	af00      	add	r7, sp, #0
 8012192:	4603      	mov	r3, r0
 8012194:	71fb      	strb	r3, [r7, #7]
    uint8_t s = readReg(RegOpMode);
    uint8_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#endif
    ostime_t now = os_getTime();
 8012196:	f7ff f937 	bl	8011408 <os_getTime>
 801219a:	60f8      	str	r0, [r7, #12]
    volatile uint8_t mode = readReg(RegOpMode);
 801219c:	2001      	movs	r0, #1
 801219e:	f7ff fa64 	bl	801166a <readReg>
 80121a2:	4603      	mov	r3, r0
 80121a4:	723b      	strb	r3, [r7, #8]
    if( ( mode & OPMODE_LORA) != 0) { // LORA modem
 80121a6:	7a3b      	ldrb	r3, [r7, #8]
 80121a8:	b2db      	uxtb	r3, r3
 80121aa:	b25b      	sxtb	r3, r3
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	da7b      	bge.n	80122a8 <radio_irq_handler+0x11c>
        uint8_t flags = readReg(LORARegIrqFlags);
 80121b0:	2012      	movs	r0, #18
 80121b2:	f7ff fa5a 	bl	801166a <readReg>
 80121b6:	4603      	mov	r3, r0
 80121b8:	727b      	strb	r3, [r7, #9]
        lmic_printf("%lu: irq: dio: 0x%x flags: 0x%x\n", now, dio, flags);
 80121ba:	79fa      	ldrb	r2, [r7, #7]
 80121bc:	7a7b      	ldrb	r3, [r7, #9]
 80121be:	68f9      	ldr	r1, [r7, #12]
 80121c0:	4860      	ldr	r0, [pc, #384]	; (8012344 <radio_irq_handler+0x1b8>)
 80121c2:	f000 f8f7 	bl	80123b4 <printf>
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 80121c6:	7a7b      	ldrb	r3, [r7, #9]
 80121c8:	f003 0308 	and.w	r3, r3, #8
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d004      	beq.n	80121da <radio_irq_handler+0x4e>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	3b01      	subs	r3, #1
 80121d4:	4a5c      	ldr	r2, [pc, #368]	; (8012348 <radio_irq_handler+0x1bc>)
 80121d6:	6013      	str	r3, [r2, #0]
 80121d8:	e05d      	b.n	8012296 <radio_irq_handler+0x10a>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 80121da:	7a7b      	ldrb	r3, [r7, #9]
 80121dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d050      	beq.n	8012286 <radio_irq_handler+0xfa>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 80121e4:	4b58      	ldr	r3, [pc, #352]	; (8012348 <radio_irq_handler+0x1bc>)
 80121e6:	89db      	ldrh	r3, [r3, #14]
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7fb fea7 	bl	800df3c <getBw>
 80121ee:	4603      	mov	r3, r0
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d10e      	bne.n	8012212 <radio_irq_handler+0x86>
                now -= TABLE_GET_U2(LORA_RXDONE_FIXUP, getSf(LMIC.rps));
 80121f4:	4b54      	ldr	r3, [pc, #336]	; (8012348 <radio_irq_handler+0x1bc>)
 80121f6:	89db      	ldrh	r3, [r3, #14]
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7fb fe8f 	bl	800df1c <getSf>
 80121fe:	4603      	mov	r3, r0
 8012200:	4619      	mov	r1, r3
 8012202:	4852      	ldr	r0, [pc, #328]	; (801234c <radio_irq_handler+0x1c0>)
 8012204:	f7fb f8af 	bl	800d366 <table_get_u2>
 8012208:	4603      	mov	r3, r0
 801220a:	461a      	mov	r2, r3
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	1a9b      	subs	r3, r3, r2
 8012210:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 8012212:	4a4d      	ldr	r2, [pc, #308]	; (8012348 <radio_irq_handler+0x1bc>)
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8012218:	201d      	movs	r0, #29
 801221a:	f7ff fa26 	bl	801166a <readReg>
 801221e:	4603      	mov	r3, r0
 8012220:	f003 0304 	and.w	r3, r3, #4
 8012224:	2b00      	cmp	r3, #0
 8012226:	d005      	beq.n	8012234 <radio_irq_handler+0xa8>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
 8012228:	2022      	movs	r0, #34	; 0x22
 801222a:	f7ff fa1e 	bl	801166a <readReg>
 801222e:	4603      	mov	r3, r0
 8012230:	461a      	mov	r2, r3
 8012232:	e004      	b.n	801223e <radio_irq_handler+0xb2>
 8012234:	2013      	movs	r0, #19
 8012236:	f7ff fa18 	bl	801166a <readReg>
 801223a:	4603      	mov	r3, r0
 801223c:	461a      	mov	r2, r3
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 801223e:	4b42      	ldr	r3, [pc, #264]	; (8012348 <radio_irq_handler+0x1bc>)
 8012240:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr));
 8012244:	2010      	movs	r0, #16
 8012246:	f7ff fa10 	bl	801166a <readReg>
 801224a:	4603      	mov	r3, r0
 801224c:	4619      	mov	r1, r3
 801224e:	200d      	movs	r0, #13
 8012250:	f7ff f9ee 	bl	8011630 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8012254:	4b3c      	ldr	r3, [pc, #240]	; (8012348 <radio_irq_handler+0x1bc>)
 8012256:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 801225a:	461a      	mov	r2, r3
 801225c:	493c      	ldr	r1, [pc, #240]	; (8012350 <radio_irq_handler+0x1c4>)
 801225e:	2000      	movs	r0, #0
 8012260:	f7ff fa49 	bl	80116f6 <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 8012264:	2019      	movs	r0, #25
 8012266:	f7ff fa00 	bl	801166a <readReg>
 801226a:	4603      	mov	r3, r0
 801226c:	b25a      	sxtb	r2, r3
 801226e:	4b36      	ldr	r3, [pc, #216]	; (8012348 <radio_irq_handler+0x1bc>)
 8012270:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 8012272:	201a      	movs	r0, #26
 8012274:	f7ff f9f9 	bl	801166a <readReg>
 8012278:	4603      	mov	r3, r0
 801227a:	3b3d      	subs	r3, #61	; 0x3d
 801227c:	b2db      	uxtb	r3, r3
 801227e:	b25a      	sxtb	r2, r3
 8012280:	4b31      	ldr	r3, [pc, #196]	; (8012348 <radio_irq_handler+0x1bc>)
 8012282:	731a      	strb	r2, [r3, #12]
 8012284:	e007      	b.n	8012296 <radio_irq_handler+0x10a>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 8012286:	f997 3009 	ldrsb.w	r3, [r7, #9]
 801228a:	2b00      	cmp	r3, #0
 801228c:	da03      	bge.n	8012296 <radio_irq_handler+0x10a>
            // indicate timeout
            LMIC.dataLen = 0;
 801228e:	4b2e      	ldr	r3, [pc, #184]	; (8012348 <radio_irq_handler+0x1bc>)
 8012290:	2200      	movs	r2, #0
 8012292:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 8012296:	21ff      	movs	r1, #255	; 0xff
 8012298:	2011      	movs	r0, #17
 801229a:	f7ff f9c9 	bl	8011630 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 801229e:	21ff      	movs	r1, #255	; 0xff
 80122a0:	2012      	movs	r0, #18
 80122a2:	f7ff f9c5 	bl	8011630 <writeReg>
 80122a6:	e040      	b.n	801232a <radio_irq_handler+0x19e>
    } else { // FSK modem
        uint8_t flags1 = readReg(FSKRegIrqFlags1);
 80122a8:	203e      	movs	r0, #62	; 0x3e
 80122aa:	f7ff f9de 	bl	801166a <readReg>
 80122ae:	4603      	mov	r3, r0
 80122b0:	72fb      	strb	r3, [r7, #11]
        uint8_t flags2 = readReg(FSKRegIrqFlags2);
 80122b2:	203f      	movs	r0, #63	; 0x3f
 80122b4:	f7ff f9d9 	bl	801166a <readReg>
 80122b8:	4603      	mov	r3, r0
 80122ba:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 80122bc:	7abb      	ldrb	r3, [r7, #10]
 80122be:	f003 0308 	and.w	r3, r3, #8
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d003      	beq.n	80122ce <radio_irq_handler+0x142>
            // save exact tx time
            LMIC.txend = now;
 80122c6:	4a20      	ldr	r2, [pc, #128]	; (8012348 <radio_irq_handler+0x1bc>)
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6013      	str	r3, [r2, #0]
 80122cc:	e02d      	b.n	801232a <radio_irq_handler+0x19e>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 80122ce:	7abb      	ldrb	r3, [r7, #10]
 80122d0:	f003 0304 	and.w	r3, r3, #4
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d019      	beq.n	801230c <radio_irq_handler+0x180>
            // save exact rx time
            LMIC.rxtime = now;
 80122d8:	4a1b      	ldr	r2, [pc, #108]	; (8012348 <radio_irq_handler+0x1bc>)
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 80122de:	2032      	movs	r0, #50	; 0x32
 80122e0:	f7ff f9c3 	bl	801166a <readReg>
 80122e4:	4603      	mov	r3, r0
 80122e6:	461a      	mov	r2, r3
 80122e8:	4b17      	ldr	r3, [pc, #92]	; (8012348 <radio_irq_handler+0x1bc>)
 80122ea:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80122ee:	4b16      	ldr	r3, [pc, #88]	; (8012348 <radio_irq_handler+0x1bc>)
 80122f0:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80122f4:	461a      	mov	r2, r3
 80122f6:	4916      	ldr	r1, [pc, #88]	; (8012350 <radio_irq_handler+0x1c4>)
 80122f8:	2000      	movs	r0, #0
 80122fa:	f7ff f9fc 	bl	80116f6 <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 80122fe:	4b12      	ldr	r3, [pc, #72]	; (8012348 <radio_irq_handler+0x1bc>)
 8012300:	2200      	movs	r2, #0
 8012302:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 8012304:	4b10      	ldr	r3, [pc, #64]	; (8012348 <radio_irq_handler+0x1bc>)
 8012306:	2200      	movs	r2, #0
 8012308:	731a      	strb	r2, [r3, #12]
 801230a:	e00e      	b.n	801232a <radio_irq_handler+0x19e>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 801230c:	7afb      	ldrb	r3, [r7, #11]
 801230e:	f003 0304 	and.w	r3, r3, #4
 8012312:	2b00      	cmp	r3, #0
 8012314:	d004      	beq.n	8012320 <radio_irq_handler+0x194>
            // indicate timeout
            LMIC.dataLen = 0;
 8012316:	4b0c      	ldr	r3, [pc, #48]	; (8012348 <radio_irq_handler+0x1bc>)
 8012318:	2200      	movs	r2, #0
 801231a:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 801231e:	e004      	b.n	801232a <radio_irq_handler+0x19e>
        } else {
            ASSERT(0);
 8012320:	f240 3157 	movw	r1, #855	; 0x357
 8012324:	480b      	ldr	r0, [pc, #44]	; (8012354 <radio_irq_handler+0x1c8>)
 8012326:	f000 fae7 	bl	80128f8 <hal_failed>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 801232a:	2000      	movs	r0, #0
 801232c:	f7ff fa0e 	bl	801174c <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8012330:	4b05      	ldr	r3, [pc, #20]	; (8012348 <radio_irq_handler+0x1bc>)
 8012332:	69db      	ldr	r3, [r3, #28]
 8012334:	4619      	mov	r1, r3
 8012336:	4808      	ldr	r0, [pc, #32]	; (8012358 <radio_irq_handler+0x1cc>)
 8012338:	f7ff f8bc 	bl	80114b4 <os_setCallback>
}
 801233c:	bf00      	nop
 801233e:	3710      	adds	r7, #16
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}
 8012344:	0801858c 	.word	0x0801858c
 8012348:	20000c04 	.word	0x20000c04
 801234c:	080198c8 	.word	0x080198c8
 8012350:	20000ce8 	.word	0x20000ce8
 8012354:	080184d4 	.word	0x080184d4
 8012358:	20000c18 	.word	0x20000c18

0801235c <os_radio>:

void os_radio (uint8_t mode) {
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	4603      	mov	r3, r0
 8012364:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 8012366:	f000 fa81 	bl	801286c <hal_disableIRQs>
    switch (mode) {
 801236a:	79fb      	ldrb	r3, [r7, #7]
 801236c:	2b03      	cmp	r3, #3
 801236e:	d81a      	bhi.n	80123a6 <os_radio+0x4a>
 8012370:	a201      	add	r2, pc, #4	; (adr r2, 8012378 <os_radio+0x1c>)
 8012372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012376:	bf00      	nop
 8012378:	08012389 	.word	0x08012389
 801237c:	08012391 	.word	0x08012391
 8012380:	08012397 	.word	0x08012397
 8012384:	0801239f 	.word	0x0801239f
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 8012388:	2000      	movs	r0, #0
 801238a:	f7ff f9df 	bl	801174c <opmode>
        break;
 801238e:	e00a      	b.n	80123a6 <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 8012390:	f7ff fc60 	bl	8011c54 <starttx>
        break;
 8012394:	e007      	b.n	80123a6 <os_radio+0x4a>

      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 8012396:	2000      	movs	r0, #0
 8012398:	f7ff fde4 	bl	8011f64 <startrx>
        break;
 801239c:	e003      	b.n	80123a6 <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 801239e:	2001      	movs	r0, #1
 80123a0:	f7ff fde0 	bl	8011f64 <startrx>
        break;
 80123a4:	bf00      	nop
    }
    hal_enableIRQs();
 80123a6:	f000 fa71 	bl	801288c <hal_enableIRQs>
}
 80123aa:	bf00      	nop
 80123ac:	3708      	adds	r7, #8
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop

080123b4 <printf>:
#define USART_TX_PORT   GPIOA
#define USART_TX_PIN    2
#define GPIO_AF_USART1  0x07

int printf(const char *format, ...)
{
 80123b4:	b40f      	push	{r0, r1, r2, r3}
 80123b6:	b580      	push	{r7, lr}
 80123b8:	b09a      	sub	sp, #104	; 0x68
 80123ba:	af00      	add	r7, sp, #0
  char buf[100];
  va_list ap;
  va_start(ap, format);
 80123bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80123c0:	603b      	str	r3, [r7, #0]
  vsnprintf(buf, sizeof(buf), format, ap);
 80123c2:	1d38      	adds	r0, r7, #4
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80123c8:	2164      	movs	r1, #100	; 0x64
 80123ca:	f001 fa45 	bl	8013858 <vsniprintf>
  HAL_UART_Transmit(&huart2, (const uint8_t *) buf, strlen(buf), 5);
 80123ce:	1d3b      	adds	r3, r7, #4
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7ed ff05 	bl	80001e0 <strlen>
 80123d6:	4603      	mov	r3, r0
 80123d8:	b29a      	uxth	r2, r3
 80123da:	1d39      	adds	r1, r7, #4
 80123dc:	2305      	movs	r3, #5
 80123de:	4805      	ldr	r0, [pc, #20]	; (80123f4 <printf+0x40>)
 80123e0:	f7f9 fd3c 	bl	800be5c <HAL_UART_Transmit>
  va_end(ap);
  return 0;
 80123e4:	2300      	movs	r3, #0
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3768      	adds	r7, #104	; 0x68
 80123ea:	46bd      	mov	sp, r7
 80123ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80123f0:	b004      	add	sp, #16
 80123f2:	4770      	bx	lr
 80123f4:	20000a7c 	.word	0x20000a7c

080123f8 <debug_init>:

void debug_init () {
 80123f8:	b580      	push	{r7, lr}
 80123fa:	af00      	add	r7, sp, #0
    USART1->BRR = 277; // 115200
    USART1->CR1 = USART_CR1_UE | USART_CR1_TE; // usart+transmitter enable
*/

    // print banner
    debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 80123fc:	4802      	ldr	r0, [pc, #8]	; (8012408 <debug_init+0x10>)
 80123fe:	f000 f83d 	bl	801247c <debug_str>
}
 8012402:	bf00      	nop
 8012404:	bd80      	pop	{r7, pc}
 8012406:	bf00      	nop
 8012408:	080185b0 	.word	0x080185b0

0801240c <debug_char>:

void debug_led (int val) {
    hw_set_pin(LED_PORT, LED_PIN, val);
}

void debug_char (char c) {
 801240c:	b580      	push	{r7, lr}
 801240e:	b082      	sub	sp, #8
 8012410:	af00      	add	r7, sp, #0
 8012412:	4603      	mov	r3, r0
 8012414:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (const uint8_t *) &c, 1, 0);
 8012416:	1df9      	adds	r1, r7, #7
 8012418:	2300      	movs	r3, #0
 801241a:	2201      	movs	r2, #1
 801241c:	4803      	ldr	r0, [pc, #12]	; (801242c <debug_char+0x20>)
 801241e:	f7f9 fd1d 	bl	800be5c <HAL_UART_Transmit>
}
 8012422:	bf00      	nop
 8012424:	3708      	adds	r7, #8
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}
 801242a:	bf00      	nop
 801242c:	20000a7c 	.word	0x20000a7c

08012430 <debug_int>:
    for(int8_t n=24; n>=0; n-=8) {
        debug_hex(v>>n);
    }
}

void debug_int (int32_t v) {
 8012430:	b580      	push	{r7, lr}
 8012432:	b08a      	sub	sp, #40	; 0x28
 8012434:	af02      	add	r7, sp, #8
 8012436:	6078      	str	r0, [r7, #4]
    char buf[10], *p = buf;
 8012438:	f107 030c 	add.w	r3, r7, #12
 801243c:	61fb      	str	r3, [r7, #28]
    int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
 801243e:	f107 000c 	add.w	r0, r7, #12
 8012442:	2300      	movs	r3, #0
 8012444:	9301      	str	r3, [sp, #4]
 8012446:	2300      	movs	r3, #0
 8012448:	9300      	str	r3, [sp, #0]
 801244a:	230a      	movs	r3, #10
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	210a      	movs	r1, #10
 8012450:	f000 f828 	bl	80124a4 <debug_fmt>
 8012454:	61b8      	str	r0, [r7, #24]
    while(n--)
 8012456:	e006      	b.n	8012466 <debug_int+0x36>
        debug_char(*p++);
 8012458:	69fb      	ldr	r3, [r7, #28]
 801245a:	1c5a      	adds	r2, r3, #1
 801245c:	61fa      	str	r2, [r7, #28]
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	4618      	mov	r0, r3
 8012462:	f7ff ffd3 	bl	801240c <debug_char>
    while(n--)
 8012466:	69bb      	ldr	r3, [r7, #24]
 8012468:	1e5a      	subs	r2, r3, #1
 801246a:	61ba      	str	r2, [r7, #24]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d1f3      	bne.n	8012458 <debug_int+0x28>
}
 8012470:	bf00      	nop
 8012472:	bf00      	nop
 8012474:	3720      	adds	r7, #32
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
	...

0801247c <debug_str>:

void debug_str (const char* str) {
 801247c:	b580      	push	{r7, lr}
 801247e:	b082      	sub	sp, #8
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (const uint8_t *) str, strlen(str), 5);
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f7ed feab 	bl	80001e0 <strlen>
 801248a:	4603      	mov	r3, r0
 801248c:	b29a      	uxth	r2, r3
 801248e:	2305      	movs	r3, #5
 8012490:	6879      	ldr	r1, [r7, #4]
 8012492:	4803      	ldr	r0, [pc, #12]	; (80124a0 <debug_str+0x24>)
 8012494:	f7f9 fce2 	bl	800be5c <HAL_UART_Transmit>

}
 8012498:	bf00      	nop
 801249a:	3708      	adds	r7, #8
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	20000a7c 	.word	0x20000a7c

080124a4 <debug_fmt>:
    debug_int(val);
    debug_char('\r');
    debug_char('\n');
}

int debug_fmt (char* buf, int max, int32_t val, int base, int width, char pad) {
 80124a4:	b480      	push	{r7}
 80124a6:	b093      	sub	sp, #76	; 0x4c
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	60f8      	str	r0, [r7, #12]
 80124ac:	60b9      	str	r1, [r7, #8]
 80124ae:	607a      	str	r2, [r7, #4]
 80124b0:	603b      	str	r3, [r7, #0]
    char num[33], *p = num, *b = buf;
 80124b2:	f107 0314 	add.w	r3, r7, #20
 80124b6:	647b      	str	r3, [r7, #68]	; 0x44
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t m, v;
    // special handling of negative decimals
    v = (base == 10 && val < 0) ? -val : val;
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	2b0a      	cmp	r3, #10
 80124c0:	d105      	bne.n	80124ce <debug_fmt+0x2a>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	da02      	bge.n	80124ce <debug_fmt+0x2a>
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	425b      	negs	r3, r3
 80124cc:	e000      	b.n	80124d0 <debug_fmt+0x2c>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    // generate digits backwards
    do {
        *p++ = ((m=v%base) <= 9) ? m+'0' : m+'A'-10;
 80124d2:	683a      	ldr	r2, [r7, #0]
 80124d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80124da:	fb01 f202 	mul.w	r2, r1, r2
 80124de:	1a9b      	subs	r3, r3, r2
 80124e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80124e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e4:	2b09      	cmp	r3, #9
 80124e6:	d804      	bhi.n	80124f2 <debug_fmt+0x4e>
 80124e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	3330      	adds	r3, #48	; 0x30
 80124ee:	b2da      	uxtb	r2, r3
 80124f0:	e003      	b.n	80124fa <debug_fmt+0x56>
 80124f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f4:	b2db      	uxtb	r3, r3
 80124f6:	3337      	adds	r3, #55	; 0x37
 80124f8:	b2da      	uxtb	r2, r3
 80124fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124fc:	1c59      	adds	r1, r3, #1
 80124fe:	6479      	str	r1, [r7, #68]	; 0x44
 8012500:	701a      	strb	r2, [r3, #0]
    } while( v /= base );
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012506:	fbb2 f3f3 	udiv	r3, r2, r3
 801250a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801250c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801250e:	2b00      	cmp	r3, #0
 8012510:	d1df      	bne.n	80124d2 <debug_fmt+0x2e>
    // prefix negative decimals with '-'
    if(base == 10 && val < 0) {
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	2b0a      	cmp	r3, #10
 8012516:	d10e      	bne.n	8012536 <debug_fmt+0x92>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2b00      	cmp	r3, #0
 801251c:	da0b      	bge.n	8012536 <debug_fmt+0x92>
        *p++ = '-';
 801251e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012520:	1c5a      	adds	r2, r3, #1
 8012522:	647a      	str	r2, [r7, #68]	; 0x44
 8012524:	222d      	movs	r2, #45	; 0x2d
 8012526:	701a      	strb	r2, [r3, #0]
    }
    // add leading zeroes or spaces
    while( b-buf < max-1 && b-buf < width-(p-num) ) {
 8012528:	e005      	b.n	8012536 <debug_fmt+0x92>
        *b++ = pad;
 801252a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801252c:	1c5a      	adds	r2, r3, #1
 801252e:	643a      	str	r2, [r7, #64]	; 0x40
 8012530:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8012534:	701a      	strb	r2, [r3, #0]
    while( b-buf < max-1 && b-buf < width-(p-num) ) {
 8012536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	1ad2      	subs	r2, r2, r3
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	3b01      	subs	r3, #1
 8012540:	429a      	cmp	r2, r3
 8012542:	da0a      	bge.n	801255a <debug_fmt+0xb6>
 8012544:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	1ad2      	subs	r2, r2, r3
 801254a:	f107 0314 	add.w	r3, r7, #20
 801254e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012550:	1acb      	subs	r3, r1, r3
 8012552:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012554:	1acb      	subs	r3, r1, r3
 8012556:	429a      	cmp	r2, r3
 8012558:	dbe7      	blt.n	801252a <debug_fmt+0x86>
    }
    // copy digits and sign forwards
    do *b++ = *--p;
 801255a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801255c:	3b01      	subs	r3, #1
 801255e:	647b      	str	r3, [r7, #68]	; 0x44
 8012560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012562:	1c5a      	adds	r2, r3, #1
 8012564:	643a      	str	r2, [r7, #64]	; 0x40
 8012566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012568:	7812      	ldrb	r2, [r2, #0]
 801256a:	701a      	strb	r2, [r3, #0]
    while( b-buf < max && p > num );
 801256c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	1ad3      	subs	r3, r2, r3
 8012572:	68ba      	ldr	r2, [r7, #8]
 8012574:	429a      	cmp	r2, r3
 8012576:	dd04      	ble.n	8012582 <debug_fmt+0xde>
 8012578:	f107 0314 	add.w	r3, r7, #20
 801257c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801257e:	429a      	cmp	r2, r3
 8012580:	d8eb      	bhi.n	801255a <debug_fmt+0xb6>
    // return number of characters written
    return b - buf;
 8012582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	1ad3      	subs	r3, r2, r3
}
 8012588:	4618      	mov	r0, r3
 801258a:	374c      	adds	r7, #76	; 0x4c
 801258c:	46bd      	mov	sp, r7
 801258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012592:	4770      	bx	lr

08012594 <debug_event>:

void debug_event (int ev) {
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
        [EV_LINK_DEAD]      = "LINK_DEAD",
        [EV_LINK_ALIVE]     = "LINK_ALIVE",
        [EV_SCAN_FOUND]     = "SCAN_FOUND",
        [EV_TXSTART]        = "EV_TXSTART",
    };
    debug_str((ev < sizeof(evnames)/sizeof(evnames[0])) ? evnames[ev] : "EV_UNKNOWN" );
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2b11      	cmp	r3, #17
 80125a0:	d804      	bhi.n	80125ac <debug_event+0x18>
 80125a2:	4a09      	ldr	r2, [pc, #36]	; (80125c8 <debug_event+0x34>)
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125aa:	e000      	b.n	80125ae <debug_event+0x1a>
 80125ac:	4b07      	ldr	r3, [pc, #28]	; (80125cc <debug_event+0x38>)
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7ff ff64 	bl	801247c <debug_str>
    debug_char('\r');
 80125b4:	200d      	movs	r0, #13
 80125b6:	f7ff ff29 	bl	801240c <debug_char>
    debug_char('\n');
 80125ba:	200a      	movs	r0, #10
 80125bc:	f7ff ff26 	bl	801240c <debug_char>
}
 80125c0:	bf00      	nop
 80125c2:	3708      	adds	r7, #8
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	2000015c 	.word	0x2000015c
 80125cc:	080185f4 	.word	0x080185f4

080125d0 <hal_io_init>:
} HAL;

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 80125d0:	b480      	push	{r7}
 80125d2:	af00      	add	r7, sp, #0
	// clock enable for GPIO ports A,B,C
	//set GPIO in init GPIO
}
 80125d4:	bf00      	nop
 80125d6:	46bd      	mov	sp, r7
 80125d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125dc:	4770      	bx	lr

080125de <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (uint8_t val) {
 80125de:	b480      	push	{r7}
 80125e0:	b083      	sub	sp, #12
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	4603      	mov	r3, r0
 80125e6:	71fb      	strb	r3, [r7, #7]
#ifndef CFG_sx1276mb1_board
    hw_set_pin(GPIOx(RX_PORT), RX_PIN, ~val);
#endif
    hw_set_pin(GPIOx(TX_PORT), TX_PIN, val);*/
	//endble disable antena switch for rx tx
}
 80125e8:	bf00      	nop
 80125ea:	370c      	adds	r7, #12
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr

080125f4 <hal_pin_nss>:


// set radio NSS pin to given value
void hal_pin_nss (uint8_t val) {
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b082      	sub	sp, #8
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	4603      	mov	r3, r0
 80125fc:	71fb      	strb	r3, [r7, #7]
	//hw_set_pin(GPIOx(NSS_PORT), NSS_PIN, val);
	HAL_GPIO_WritePin(lora_NSS_PIN_GPIO_Port,lora_NSS_PIN_Pin,val);
 80125fe:	79fb      	ldrb	r3, [r7, #7]
 8012600:	461a      	mov	r2, r3
 8012602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012606:	4803      	ldr	r0, [pc, #12]	; (8012614 <hal_pin_nss+0x20>)
 8012608:	f7f4 fe4e 	bl	80072a8 <HAL_GPIO_WritePin>
}
 801260c:	bf00      	nop
 801260e:	3708      	adds	r7, #8
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}
 8012614:	48000800 	.word	0x48000800

08012618 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (uint8_t val) {
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
 801261e:	4603      	mov	r3, r0
 8012620:	71fb      	strb	r3, [r7, #7]
		hw_cfg_pin(GPIOx(RST_PORT), RST_PIN, GPIOCFG_MODE_OUT | GPIOCFG_OSPEED_40MHz | GPIOCFG_OTYPE_PUPD | GPIOCFG_PUPD_PUP);
		hw_set_pin(GPIOx(RST_PORT), RST_PIN, val);
	} else { // keep pin floating
		hw_cfg_pin(GPIOx(RST_PORT), RST_PIN, GPIOCFG_MODE_INP | GPIOCFG_OSPEED_40MHz | GPIOCFG_OTYPE_OPEN);
	}*/
	HAL_GPIO_WritePin(lora_Reset_PIN_GPIO_Port,lora_Reset_PIN_Pin,val);
 8012622:	79fb      	ldrb	r3, [r7, #7]
 8012624:	461a      	mov	r2, r3
 8012626:	f44f 7100 	mov.w	r1, #512	; 0x200
 801262a:	4803      	ldr	r0, [pc, #12]	; (8012638 <hal_pin_rst+0x20>)
 801262c:	f7f4 fe3c 	bl	80072a8 <HAL_GPIO_WritePin>
}
 8012630:	bf00      	nop
 8012632:	3708      	adds	r7, #8
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}
 8012638:	48000800 	.word	0x48000800

0801263c <HAL_GPIO_EXTI_Callback>:
}*/

#if CFG_lmic_clib

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	4603      	mov	r3, r0
 8012644:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin == lora_DIO0_PIN_Pin)
 8012646:	88fb      	ldrh	r3, [r7, #6]
 8012648:	2b80      	cmp	r3, #128	; 0x80
 801264a:	d102      	bne.n	8012652 <HAL_GPIO_EXTI_Callback+0x16>
	{
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 801264c:	2000      	movs	r0, #0
 801264e:	f7ff fd9d 	bl	801218c <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin == lora_DIO1_PIN_Pin)
 8012652:	88fb      	ldrh	r3, [r7, #6]
 8012654:	2b01      	cmp	r3, #1
 8012656:	d102      	bne.n	801265e <HAL_GPIO_EXTI_Callback+0x22>
	{ // pending
		// invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8012658:	2001      	movs	r0, #1
 801265a:	f7ff fd97 	bl	801218c <radio_irq_handler>
	}
	// DIO 2
	if(GPIO_Pin == lora_DIO2_PIN_Pin)
 801265e:	88fb      	ldrh	r3, [r7, #6]
 8012660:	2b02      	cmp	r3, #2
 8012662:	d102      	bne.n	801266a <HAL_GPIO_EXTI_Callback+0x2e>
	{ // pending
		// invoke radio handler (on IRQ!)
		radio_irq_handler(2);
 8012664:	2002      	movs	r0, #2
 8012666:	f7ff fd91 	bl	801218c <radio_irq_handler>
	}
}
 801266a:	bf00      	nop
 801266c:	3708      	adds	r7, #8
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}

08012672 <hal_spi_init>:
#define MOSI_PORT  1 // MOSI: PB15
#define MOSI_PIN   15

#define GPIO_AF_SPI1        0x05

static void hal_spi_init () {
 8012672:	b480      	push	{r7}
 8012674:	af00      	add	r7, sp, #0
	//
	//	// configure and activate the SPI (master, internal slave select, software slave mgmt)
	//	// (use default mode: 8-bit, 2-wire, no crc, MSBF, PCLK/2, CPOL0, CPHA0)
	//	SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_SPE;
	//already Init SPI by cube mx
}
 8012676:	bf00      	nop
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr

08012680 <SPIWrite8bit>:

uint8_t SPIWrite8bit(uint8_t out)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b084      	sub	sp, #16
 8012684:	af00      	add	r7, sp, #0
 8012686:	4603      	mov	r3, r0
 8012688:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	ret = HAL_SPI_Transmit(&hspi2,&out,sizeof(out),10);
 801268a:	1df9      	adds	r1, r7, #7
 801268c:	230a      	movs	r3, #10
 801268e:	2201      	movs	r2, #1
 8012690:	4804      	ldr	r0, [pc, #16]	; (80126a4 <SPIWrite8bit+0x24>)
 8012692:	f7f7 f9d0 	bl	8009a36 <HAL_SPI_Transmit>
 8012696:	4603      	mov	r3, r0
 8012698:	73fb      	strb	r3, [r7, #15]
	return out;
 801269a:	79fb      	ldrb	r3, [r7, #7]
}
 801269c:	4618      	mov	r0, r3
 801269e:	3710      	adds	r7, #16
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	200007d0 	.word	0x200007d0

080126a8 <SPIRead8bit>:

uint8_t SPIRead8bit(uint8_t in)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b084      	sub	sp, #16
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	4603      	mov	r3, r0
 80126b0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	ret = HAL_SPI_Receive(&hspi2,&in,sizeof(in),10);
 80126b2:	1df9      	adds	r1, r7, #7
 80126b4:	230a      	movs	r3, #10
 80126b6:	2201      	movs	r2, #1
 80126b8:	4804      	ldr	r0, [pc, #16]	; (80126cc <SPIRead8bit+0x24>)
 80126ba:	f7f7 fb31 	bl	8009d20 <HAL_SPI_Receive>
 80126be:	4603      	mov	r3, r0
 80126c0:	73fb      	strb	r3, [r7, #15]
	return in;
 80126c2:	79fb      	ldrb	r3, [r7, #7]
}
 80126c4:	4618      	mov	r0, r3
 80126c6:	3710      	adds	r7, #16
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd80      	pop	{r7, pc}
 80126cc:	200007d0 	.word	0x200007d0

080126d0 <hal_time_init>:
#ifdef CFG_lmic_clib

// -----------------------------------------------------------------------------
// TIME

static void hal_time_init () {
 80126d0:	b480      	push	{r7}
 80126d2:	af00      	add	r7, sp, #0
	  //HAL_TIM_Base_Start_IT(&htim4);    // <-----------  change to your setup
}
 80126d4:	bf00      	nop
 80126d6:	46bd      	mov	sp, r7
 80126d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126dc:	4770      	bx	lr
	...

080126e0 <hal_ticks>:

uint32_t hal_ticks () {
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80126e6:	f000 f8c1 	bl	801286c <hal_disableIRQs>
    uint32_t t = HAL.ticks;
 80126ea:	4b13      	ldr	r3, [pc, #76]	; (8012738 <hal_ticks+0x58>)
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	607b      	str	r3, [r7, #4]
    uint16_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 80126f0:	4b12      	ldr	r3, [pc, #72]	; (801273c <hal_ticks+0x5c>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126f6:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 80126f8:	4b10      	ldr	r3, [pc, #64]	; (801273c <hal_ticks+0x5c>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	691b      	ldr	r3, [r3, #16]
 80126fe:	f003 0302 	and.w	r3, r3, #2
 8012702:	2b02      	cmp	r3, #2
 8012704:	d10d      	bne.n	8012722 <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 8012706:	4b0d      	ldr	r3, [pc, #52]	; (801273c <hal_ticks+0x5c>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	68db      	ldr	r3, [r3, #12]
 801270c:	f003 0302 	and.w	r3, r3, #2
 8012710:	2b02      	cmp	r3, #2
 8012712:	d106      	bne.n	8012722 <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8012714:	4b09      	ldr	r3, [pc, #36]	; (801273c <hal_ticks+0x5c>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801271a:	807b      	strh	r3, [r7, #2]
    		t++;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	3301      	adds	r3, #1
 8012720:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8012722:	f000 f8b3 	bl	801288c <hal_enableIRQs>
    return (t<<16)|cnt;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	041a      	lsls	r2, r3, #16
 801272a:	887b      	ldrh	r3, [r7, #2]
 801272c:	4313      	orrs	r3, r2
}
 801272e:	4618      	mov	r0, r3
 8012730:	3708      	adds	r7, #8
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
 8012736:	bf00      	nop
 8012738:	20000d64 	.word	0x20000d64
 801273c:	20000910 	.word	0x20000910

08012740 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static uint16_t deltaticks (uint32_t time) {
 8012740:	b580      	push	{r7, lr}
 8012742:	b084      	sub	sp, #16
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
	uint32_t t = hal_ticks();
 8012748:	f7ff ffca 	bl	80126e0 <hal_ticks>
 801274c:	60f8      	str	r0, [r7, #12]
	int32_t d = time - t;
 801274e:	687a      	ldr	r2, [r7, #4]
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	1ad3      	subs	r3, r2, r3
 8012754:	60bb      	str	r3, [r7, #8]
	if( d<=0 ) return 0;    // in the past
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	2b00      	cmp	r3, #0
 801275a:	dc01      	bgt.n	8012760 <deltaticks+0x20>
 801275c:	2300      	movs	r3, #0
 801275e:	e008      	b.n	8012772 <deltaticks+0x32>
	if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	141b      	asrs	r3, r3, #16
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <deltaticks+0x2e>
 8012768:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801276c:	e001      	b.n	8012772 <deltaticks+0x32>
	return (uint16_t)d;
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	b29b      	uxth	r3, r3
}
 8012772:	4618      	mov	r0, r3
 8012774:	3710      	adds	r7, #16
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}

0801277a <hal_waitUntil>:

void hal_waitUntil (uint32_t time) {
 801277a:	b580      	push	{r7, lr}
 801277c:	b082      	sub	sp, #8
 801277e:	af00      	add	r7, sp, #0
 8012780:	6078      	str	r0, [r7, #4]
	while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 8012782:	bf00      	nop
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f7ff ffdb 	bl	8012740 <deltaticks>
 801278a:	4603      	mov	r3, r0
 801278c:	2b00      	cmp	r3, #0
 801278e:	d1f9      	bne.n	8012784 <hal_waitUntil+0xa>
}
 8012790:	bf00      	nop
 8012792:	bf00      	nop
 8012794:	3708      	adds	r7, #8
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}
	...

0801279c <hal_checkTimer>:

// check and rewind for target time
uint8_t hal_checkTimer (uint32_t time) {
 801279c:	b580      	push	{r7, lr}
 801279e:	b084      	sub	sp, #16
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
    uint16_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 80127a4:	4b1b      	ldr	r3, [pc, #108]	; (8012814 <hal_checkTimer+0x78>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	691a      	ldr	r2, [r3, #16]
 80127aa:	4b1a      	ldr	r3, [pc, #104]	; (8012814 <hal_checkTimer+0x78>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	f022 0202 	bic.w	r2, r2, #2
 80127b2:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f7ff ffc3 	bl	8012740 <deltaticks>
 80127ba:	4603      	mov	r3, r0
 80127bc:	81fb      	strh	r3, [r7, #14]
 80127be:	89fb      	ldrh	r3, [r7, #14]
 80127c0:	2b04      	cmp	r3, #4
 80127c2:	d809      	bhi.n	80127d8 <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 80127c4:	4b13      	ldr	r3, [pc, #76]	; (8012814 <hal_checkTimer+0x78>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	68da      	ldr	r2, [r3, #12]
 80127ca:	4b12      	ldr	r3, [pc, #72]	; (8012814 <hal_checkTimer+0x78>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	f022 0202 	bic.w	r2, r2, #2
 80127d2:	60da      	str	r2, [r3, #12]
        return 1;
 80127d4:	2301      	movs	r3, #1
 80127d6:	e018      	b.n	801280a <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 80127d8:	4b0e      	ldr	r3, [pc, #56]	; (8012814 <hal_checkTimer+0x78>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80127de:	89fa      	ldrh	r2, [r7, #14]
 80127e0:	4b0c      	ldr	r3, [pc, #48]	; (8012814 <hal_checkTimer+0x78>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	440a      	add	r2, r1
 80127e6:	635a      	str	r2, [r3, #52]	; 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 80127e8:	4b0a      	ldr	r3, [pc, #40]	; (8012814 <hal_checkTimer+0x78>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	68da      	ldr	r2, [r3, #12]
 80127ee:	4b09      	ldr	r3, [pc, #36]	; (8012814 <hal_checkTimer+0x78>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	f042 0202 	orr.w	r2, r2, #2
 80127f6:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 80127f8:	4b06      	ldr	r3, [pc, #24]	; (8012814 <hal_checkTimer+0x78>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	6a1a      	ldr	r2, [r3, #32]
 80127fe:	4b05      	ldr	r3, [pc, #20]	; (8012814 <hal_checkTimer+0x78>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	f042 0201 	orr.w	r2, r2, #1
 8012806:	621a      	str	r2, [r3, #32]
        return 0;
 8012808:	2300      	movs	r3, #0
    }
}
 801280a:	4618      	mov	r0, r3
 801280c:	3710      	adds	r7, #16
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	20000910 	.word	0x20000910

08012818 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681a      	ldr	r2, [r3, #0]
 8012824:	4b0d      	ldr	r3, [pc, #52]	; (801285c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	429a      	cmp	r2, r3
 801282a:	d104      	bne.n	8012836 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 801282c:	4b0c      	ldr	r3, [pc, #48]	; (8012860 <HAL_TIM_PeriodElapsedCallback+0x48>)
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	3301      	adds	r3, #1
 8012832:	4a0b      	ldr	r2, [pc, #44]	; (8012860 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8012834:	6053      	str	r3, [r2, #4]
    }
	if (htim->Instance == WakeupTIMER.Instance)
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	4b0a      	ldr	r3, [pc, #40]	; (8012864 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	429a      	cmp	r2, r3
 8012840:	d101      	bne.n	8012846 <HAL_TIM_PeriodElapsedCallback+0x2e>
	  {
		  HAL_ResumeTick();
 8012842:	f7f3 f81b 	bl	800587c <HAL_ResumeTick>

	  }
	if(htim->Instance == TIM8){
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4a07      	ldr	r2, [pc, #28]	; (8012868 <HAL_TIM_PeriodElapsedCallback+0x50>)
 801284c:	4293      	cmp	r3, r2
 801284e:	d101      	bne.n	8012854 <HAL_TIM_PeriodElapsedCallback+0x3c>
		processingBatteryPercentage();
 8012850:	f7f1 fa7e 	bl	8003d50 <processingBatteryPercentage>
	}
}
 8012854:	bf00      	nop
 8012856:	3708      	adds	r7, #8
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}
 801285c:	20000910 	.word	0x20000910
 8012860:	20000d64 	.word	0x20000d64
 8012864:	2000095c 	.word	0x2000095c
 8012868:	40013400 	.word	0x40013400

0801286c <hal_disableIRQs>:


// -----------------------------------------------------------------------------
// IRQ

void hal_disableIRQs () {
 801286c:	b480      	push	{r7}
 801286e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8012870:	b672      	cpsid	i
}
 8012872:	bf00      	nop
	__disable_irq();
	HAL.irqlevel++;
 8012874:	4b04      	ldr	r3, [pc, #16]	; (8012888 <hal_disableIRQs+0x1c>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	3301      	adds	r3, #1
 801287a:	4a03      	ldr	r2, [pc, #12]	; (8012888 <hal_disableIRQs+0x1c>)
 801287c:	6013      	str	r3, [r2, #0]
}
 801287e:	bf00      	nop
 8012880:	46bd      	mov	sp, r7
 8012882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012886:	4770      	bx	lr
 8012888:	20000d64 	.word	0x20000d64

0801288c <hal_enableIRQs>:

void hal_enableIRQs () {
 801288c:	b480      	push	{r7}
 801288e:	af00      	add	r7, sp, #0
	if(--HAL.irqlevel == 0)
 8012890:	4b07      	ldr	r3, [pc, #28]	; (80128b0 <hal_enableIRQs+0x24>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	3b01      	subs	r3, #1
 8012896:	4a06      	ldr	r2, [pc, #24]	; (80128b0 <hal_enableIRQs+0x24>)
 8012898:	6013      	str	r3, [r2, #0]
 801289a:	4b05      	ldr	r3, [pc, #20]	; (80128b0 <hal_enableIRQs+0x24>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d101      	bne.n	80128a6 <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 80128a2:	b662      	cpsie	i
}
 80128a4:	bf00      	nop
	{
		__enable_irq();
	}
}
 80128a6:	bf00      	nop
 80128a8:	46bd      	mov	sp, r7
 80128aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ae:	4770      	bx	lr
 80128b0:	20000d64 	.word	0x20000d64

080128b4 <hal_sleep>:

void hal_sleep () {
 80128b4:	b580      	push	{r7, lr}
 80128b6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
	HAL_SuspendTick();
 80128b8:	f7f2 ffd0 	bl	800585c <HAL_SuspendTick>
	//__HAL_RCC_PWR_CLK_ENABLE();
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80128bc:	2101      	movs	r1, #1
 80128be:	2000      	movs	r0, #0
 80128c0:	f7f5 fb4a 	bl	8007f58 <HAL_PWR_EnterSLEEPMode>
	//SysTick_Config();
 }
 80128c4:	bf00      	nop
 80128c6:	bd80      	pop	{r7, pc}

080128c8 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 80128c8:	b580      	push	{r7, lr}
 80128ca:	af00      	add	r7, sp, #0
	memset(&HAL, 0x00, sizeof(HAL));
 80128cc:	2208      	movs	r2, #8
 80128ce:	2100      	movs	r1, #0
 80128d0:	4808      	ldr	r0, [pc, #32]	; (80128f4 <hal_init+0x2c>)
 80128d2:	f001 f865 	bl	80139a0 <memset>
	hal_disableIRQs();
 80128d6:	f7ff ffc9 	bl	801286c <hal_disableIRQs>

	// configure radio I/O and interrupt handler
	hal_io_init();
 80128da:	f7ff fe79 	bl	80125d0 <hal_io_init>
	// configure radio SPI
	hal_spi_init();
 80128de:	f7ff fec8 	bl	8012672 <hal_spi_init>
	// configure timer and interrupt handler
	hal_time_init();
 80128e2:	f7ff fef5 	bl	80126d0 <hal_time_init>

    // initialize debug library
    debug_init();
 80128e6:	f7ff fd87 	bl	80123f8 <debug_init>

	hal_enableIRQs();
 80128ea:	f7ff ffcf 	bl	801288c <hal_enableIRQs>
}
 80128ee:	bf00      	nop
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	bf00      	nop
 80128f4:	20000d64 	.word	0x20000d64

080128f8 <hal_failed>:

void hal_failed (const char * f/* file */, uint16_t l/* line */)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	460b      	mov	r3, r1
 8012902:	807b      	strh	r3, [r7, #2]
	// HALT...
	hal_disableIRQs();
 8012904:	f7ff ffb2 	bl	801286c <hal_disableIRQs>
	hal_sleep();
 8012908:	f7ff ffd4 	bl	80128b4 <hal_sleep>
	while(1);
 801290c:	e7fe      	b.n	801290c <hal_failed+0x14>

0801290e <sulp>:
 801290e:	b570      	push	{r4, r5, r6, lr}
 8012910:	4604      	mov	r4, r0
 8012912:	460d      	mov	r5, r1
 8012914:	ec45 4b10 	vmov	d0, r4, r5
 8012918:	4616      	mov	r6, r2
 801291a:	f002 f8b3 	bl	8014a84 <__ulp>
 801291e:	ec51 0b10 	vmov	r0, r1, d0
 8012922:	b17e      	cbz	r6, 8012944 <sulp+0x36>
 8012924:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012928:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801292c:	2b00      	cmp	r3, #0
 801292e:	dd09      	ble.n	8012944 <sulp+0x36>
 8012930:	051b      	lsls	r3, r3, #20
 8012932:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012936:	2400      	movs	r4, #0
 8012938:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801293c:	4622      	mov	r2, r4
 801293e:	462b      	mov	r3, r5
 8012940:	f7ed fe62 	bl	8000608 <__aeabi_dmul>
 8012944:	bd70      	pop	{r4, r5, r6, pc}
	...

08012948 <_strtod_l>:
 8012948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801294c:	ed2d 8b02 	vpush	{d8}
 8012950:	b09b      	sub	sp, #108	; 0x6c
 8012952:	4604      	mov	r4, r0
 8012954:	9213      	str	r2, [sp, #76]	; 0x4c
 8012956:	2200      	movs	r2, #0
 8012958:	9216      	str	r2, [sp, #88]	; 0x58
 801295a:	460d      	mov	r5, r1
 801295c:	f04f 0800 	mov.w	r8, #0
 8012960:	f04f 0900 	mov.w	r9, #0
 8012964:	460a      	mov	r2, r1
 8012966:	9215      	str	r2, [sp, #84]	; 0x54
 8012968:	7811      	ldrb	r1, [r2, #0]
 801296a:	292b      	cmp	r1, #43	; 0x2b
 801296c:	d04c      	beq.n	8012a08 <_strtod_l+0xc0>
 801296e:	d83a      	bhi.n	80129e6 <_strtod_l+0x9e>
 8012970:	290d      	cmp	r1, #13
 8012972:	d834      	bhi.n	80129de <_strtod_l+0x96>
 8012974:	2908      	cmp	r1, #8
 8012976:	d834      	bhi.n	80129e2 <_strtod_l+0x9a>
 8012978:	2900      	cmp	r1, #0
 801297a:	d03d      	beq.n	80129f8 <_strtod_l+0xb0>
 801297c:	2200      	movs	r2, #0
 801297e:	920a      	str	r2, [sp, #40]	; 0x28
 8012980:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8012982:	7832      	ldrb	r2, [r6, #0]
 8012984:	2a30      	cmp	r2, #48	; 0x30
 8012986:	f040 80b4 	bne.w	8012af2 <_strtod_l+0x1aa>
 801298a:	7872      	ldrb	r2, [r6, #1]
 801298c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8012990:	2a58      	cmp	r2, #88	; 0x58
 8012992:	d170      	bne.n	8012a76 <_strtod_l+0x12e>
 8012994:	9302      	str	r3, [sp, #8]
 8012996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012998:	9301      	str	r3, [sp, #4]
 801299a:	ab16      	add	r3, sp, #88	; 0x58
 801299c:	9300      	str	r3, [sp, #0]
 801299e:	4a8e      	ldr	r2, [pc, #568]	; (8012bd8 <_strtod_l+0x290>)
 80129a0:	ab17      	add	r3, sp, #92	; 0x5c
 80129a2:	a915      	add	r1, sp, #84	; 0x54
 80129a4:	4620      	mov	r0, r4
 80129a6:	f001 f953 	bl	8013c50 <__gethex>
 80129aa:	f010 070f 	ands.w	r7, r0, #15
 80129ae:	4605      	mov	r5, r0
 80129b0:	d005      	beq.n	80129be <_strtod_l+0x76>
 80129b2:	2f06      	cmp	r7, #6
 80129b4:	d12a      	bne.n	8012a0c <_strtod_l+0xc4>
 80129b6:	3601      	adds	r6, #1
 80129b8:	2300      	movs	r3, #0
 80129ba:	9615      	str	r6, [sp, #84]	; 0x54
 80129bc:	930a      	str	r3, [sp, #40]	; 0x28
 80129be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	f040 857f 	bne.w	80134c4 <_strtod_l+0xb7c>
 80129c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129c8:	b1db      	cbz	r3, 8012a02 <_strtod_l+0xba>
 80129ca:	4642      	mov	r2, r8
 80129cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80129d0:	ec43 2b10 	vmov	d0, r2, r3
 80129d4:	b01b      	add	sp, #108	; 0x6c
 80129d6:	ecbd 8b02 	vpop	{d8}
 80129da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129de:	2920      	cmp	r1, #32
 80129e0:	d1cc      	bne.n	801297c <_strtod_l+0x34>
 80129e2:	3201      	adds	r2, #1
 80129e4:	e7bf      	b.n	8012966 <_strtod_l+0x1e>
 80129e6:	292d      	cmp	r1, #45	; 0x2d
 80129e8:	d1c8      	bne.n	801297c <_strtod_l+0x34>
 80129ea:	2101      	movs	r1, #1
 80129ec:	910a      	str	r1, [sp, #40]	; 0x28
 80129ee:	1c51      	adds	r1, r2, #1
 80129f0:	9115      	str	r1, [sp, #84]	; 0x54
 80129f2:	7852      	ldrb	r2, [r2, #1]
 80129f4:	2a00      	cmp	r2, #0
 80129f6:	d1c3      	bne.n	8012980 <_strtod_l+0x38>
 80129f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80129fa:	9515      	str	r5, [sp, #84]	; 0x54
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	f040 855f 	bne.w	80134c0 <_strtod_l+0xb78>
 8012a02:	4642      	mov	r2, r8
 8012a04:	464b      	mov	r3, r9
 8012a06:	e7e3      	b.n	80129d0 <_strtod_l+0x88>
 8012a08:	2100      	movs	r1, #0
 8012a0a:	e7ef      	b.n	80129ec <_strtod_l+0xa4>
 8012a0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012a0e:	b13a      	cbz	r2, 8012a20 <_strtod_l+0xd8>
 8012a10:	2135      	movs	r1, #53	; 0x35
 8012a12:	a818      	add	r0, sp, #96	; 0x60
 8012a14:	f002 f933 	bl	8014c7e <__copybits>
 8012a18:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	f001 fd06 	bl	801442c <_Bfree>
 8012a20:	3f01      	subs	r7, #1
 8012a22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012a24:	2f04      	cmp	r7, #4
 8012a26:	d806      	bhi.n	8012a36 <_strtod_l+0xee>
 8012a28:	e8df f007 	tbb	[pc, r7]
 8012a2c:	201d0314 	.word	0x201d0314
 8012a30:	14          	.byte	0x14
 8012a31:	00          	.byte	0x00
 8012a32:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8012a36:	05e9      	lsls	r1, r5, #23
 8012a38:	bf48      	it	mi
 8012a3a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8012a3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012a42:	0d1b      	lsrs	r3, r3, #20
 8012a44:	051b      	lsls	r3, r3, #20
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d1b9      	bne.n	80129be <_strtod_l+0x76>
 8012a4a:	f001 f809 	bl	8013a60 <__errno>
 8012a4e:	2322      	movs	r3, #34	; 0x22
 8012a50:	6003      	str	r3, [r0, #0]
 8012a52:	e7b4      	b.n	80129be <_strtod_l+0x76>
 8012a54:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8012a58:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012a5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012a60:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8012a64:	e7e7      	b.n	8012a36 <_strtod_l+0xee>
 8012a66:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012be0 <_strtod_l+0x298>
 8012a6a:	e7e4      	b.n	8012a36 <_strtod_l+0xee>
 8012a6c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012a70:	f04f 38ff 	mov.w	r8, #4294967295
 8012a74:	e7df      	b.n	8012a36 <_strtod_l+0xee>
 8012a76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a78:	1c5a      	adds	r2, r3, #1
 8012a7a:	9215      	str	r2, [sp, #84]	; 0x54
 8012a7c:	785b      	ldrb	r3, [r3, #1]
 8012a7e:	2b30      	cmp	r3, #48	; 0x30
 8012a80:	d0f9      	beq.n	8012a76 <_strtod_l+0x12e>
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d09b      	beq.n	80129be <_strtod_l+0x76>
 8012a86:	2301      	movs	r3, #1
 8012a88:	f04f 0a00 	mov.w	sl, #0
 8012a8c:	9304      	str	r3, [sp, #16]
 8012a8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a92:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012a96:	46d3      	mov	fp, sl
 8012a98:	220a      	movs	r2, #10
 8012a9a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012a9c:	7806      	ldrb	r6, [r0, #0]
 8012a9e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012aa2:	b2d9      	uxtb	r1, r3
 8012aa4:	2909      	cmp	r1, #9
 8012aa6:	d926      	bls.n	8012af6 <_strtod_l+0x1ae>
 8012aa8:	494c      	ldr	r1, [pc, #304]	; (8012bdc <_strtod_l+0x294>)
 8012aaa:	2201      	movs	r2, #1
 8012aac:	f000 ff80 	bl	80139b0 <strncmp>
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	d030      	beq.n	8012b16 <_strtod_l+0x1ce>
 8012ab4:	2000      	movs	r0, #0
 8012ab6:	4632      	mov	r2, r6
 8012ab8:	9005      	str	r0, [sp, #20]
 8012aba:	465e      	mov	r6, fp
 8012abc:	4603      	mov	r3, r0
 8012abe:	2a65      	cmp	r2, #101	; 0x65
 8012ac0:	d001      	beq.n	8012ac6 <_strtod_l+0x17e>
 8012ac2:	2a45      	cmp	r2, #69	; 0x45
 8012ac4:	d113      	bne.n	8012aee <_strtod_l+0x1a6>
 8012ac6:	b91e      	cbnz	r6, 8012ad0 <_strtod_l+0x188>
 8012ac8:	9a04      	ldr	r2, [sp, #16]
 8012aca:	4302      	orrs	r2, r0
 8012acc:	d094      	beq.n	80129f8 <_strtod_l+0xb0>
 8012ace:	2600      	movs	r6, #0
 8012ad0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8012ad2:	1c6a      	adds	r2, r5, #1
 8012ad4:	9215      	str	r2, [sp, #84]	; 0x54
 8012ad6:	786a      	ldrb	r2, [r5, #1]
 8012ad8:	2a2b      	cmp	r2, #43	; 0x2b
 8012ada:	d074      	beq.n	8012bc6 <_strtod_l+0x27e>
 8012adc:	2a2d      	cmp	r2, #45	; 0x2d
 8012ade:	d078      	beq.n	8012bd2 <_strtod_l+0x28a>
 8012ae0:	f04f 0c00 	mov.w	ip, #0
 8012ae4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012ae8:	2909      	cmp	r1, #9
 8012aea:	d97f      	bls.n	8012bec <_strtod_l+0x2a4>
 8012aec:	9515      	str	r5, [sp, #84]	; 0x54
 8012aee:	2700      	movs	r7, #0
 8012af0:	e09e      	b.n	8012c30 <_strtod_l+0x2e8>
 8012af2:	2300      	movs	r3, #0
 8012af4:	e7c8      	b.n	8012a88 <_strtod_l+0x140>
 8012af6:	f1bb 0f08 	cmp.w	fp, #8
 8012afa:	bfd8      	it	le
 8012afc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012afe:	f100 0001 	add.w	r0, r0, #1
 8012b02:	bfda      	itte	le
 8012b04:	fb02 3301 	mlale	r3, r2, r1, r3
 8012b08:	9309      	strle	r3, [sp, #36]	; 0x24
 8012b0a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8012b0e:	f10b 0b01 	add.w	fp, fp, #1
 8012b12:	9015      	str	r0, [sp, #84]	; 0x54
 8012b14:	e7c1      	b.n	8012a9a <_strtod_l+0x152>
 8012b16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b18:	1c5a      	adds	r2, r3, #1
 8012b1a:	9215      	str	r2, [sp, #84]	; 0x54
 8012b1c:	785a      	ldrb	r2, [r3, #1]
 8012b1e:	f1bb 0f00 	cmp.w	fp, #0
 8012b22:	d037      	beq.n	8012b94 <_strtod_l+0x24c>
 8012b24:	9005      	str	r0, [sp, #20]
 8012b26:	465e      	mov	r6, fp
 8012b28:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012b2c:	2b09      	cmp	r3, #9
 8012b2e:	d912      	bls.n	8012b56 <_strtod_l+0x20e>
 8012b30:	2301      	movs	r3, #1
 8012b32:	e7c4      	b.n	8012abe <_strtod_l+0x176>
 8012b34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b36:	1c5a      	adds	r2, r3, #1
 8012b38:	9215      	str	r2, [sp, #84]	; 0x54
 8012b3a:	785a      	ldrb	r2, [r3, #1]
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	2a30      	cmp	r2, #48	; 0x30
 8012b40:	d0f8      	beq.n	8012b34 <_strtod_l+0x1ec>
 8012b42:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012b46:	2b08      	cmp	r3, #8
 8012b48:	f200 84c1 	bhi.w	80134ce <_strtod_l+0xb86>
 8012b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b4e:	9005      	str	r0, [sp, #20]
 8012b50:	2000      	movs	r0, #0
 8012b52:	930b      	str	r3, [sp, #44]	; 0x2c
 8012b54:	4606      	mov	r6, r0
 8012b56:	3a30      	subs	r2, #48	; 0x30
 8012b58:	f100 0301 	add.w	r3, r0, #1
 8012b5c:	d014      	beq.n	8012b88 <_strtod_l+0x240>
 8012b5e:	9905      	ldr	r1, [sp, #20]
 8012b60:	4419      	add	r1, r3
 8012b62:	9105      	str	r1, [sp, #20]
 8012b64:	4633      	mov	r3, r6
 8012b66:	eb00 0c06 	add.w	ip, r0, r6
 8012b6a:	210a      	movs	r1, #10
 8012b6c:	4563      	cmp	r3, ip
 8012b6e:	d113      	bne.n	8012b98 <_strtod_l+0x250>
 8012b70:	1833      	adds	r3, r6, r0
 8012b72:	2b08      	cmp	r3, #8
 8012b74:	f106 0601 	add.w	r6, r6, #1
 8012b78:	4406      	add	r6, r0
 8012b7a:	dc1a      	bgt.n	8012bb2 <_strtod_l+0x26a>
 8012b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b7e:	230a      	movs	r3, #10
 8012b80:	fb03 2301 	mla	r3, r3, r1, r2
 8012b84:	9309      	str	r3, [sp, #36]	; 0x24
 8012b86:	2300      	movs	r3, #0
 8012b88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012b8a:	1c51      	adds	r1, r2, #1
 8012b8c:	9115      	str	r1, [sp, #84]	; 0x54
 8012b8e:	7852      	ldrb	r2, [r2, #1]
 8012b90:	4618      	mov	r0, r3
 8012b92:	e7c9      	b.n	8012b28 <_strtod_l+0x1e0>
 8012b94:	4658      	mov	r0, fp
 8012b96:	e7d2      	b.n	8012b3e <_strtod_l+0x1f6>
 8012b98:	2b08      	cmp	r3, #8
 8012b9a:	f103 0301 	add.w	r3, r3, #1
 8012b9e:	dc03      	bgt.n	8012ba8 <_strtod_l+0x260>
 8012ba0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012ba2:	434f      	muls	r7, r1
 8012ba4:	9709      	str	r7, [sp, #36]	; 0x24
 8012ba6:	e7e1      	b.n	8012b6c <_strtod_l+0x224>
 8012ba8:	2b10      	cmp	r3, #16
 8012baa:	bfd8      	it	le
 8012bac:	fb01 fa0a 	mulle.w	sl, r1, sl
 8012bb0:	e7dc      	b.n	8012b6c <_strtod_l+0x224>
 8012bb2:	2e10      	cmp	r6, #16
 8012bb4:	bfdc      	itt	le
 8012bb6:	230a      	movle	r3, #10
 8012bb8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8012bbc:	e7e3      	b.n	8012b86 <_strtod_l+0x23e>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	9305      	str	r3, [sp, #20]
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	e780      	b.n	8012ac8 <_strtod_l+0x180>
 8012bc6:	f04f 0c00 	mov.w	ip, #0
 8012bca:	1caa      	adds	r2, r5, #2
 8012bcc:	9215      	str	r2, [sp, #84]	; 0x54
 8012bce:	78aa      	ldrb	r2, [r5, #2]
 8012bd0:	e788      	b.n	8012ae4 <_strtod_l+0x19c>
 8012bd2:	f04f 0c01 	mov.w	ip, #1
 8012bd6:	e7f8      	b.n	8012bca <_strtod_l+0x282>
 8012bd8:	080198e4 	.word	0x080198e4
 8012bdc:	080198d6 	.word	0x080198d6
 8012be0:	7ff00000 	.word	0x7ff00000
 8012be4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012be6:	1c51      	adds	r1, r2, #1
 8012be8:	9115      	str	r1, [sp, #84]	; 0x54
 8012bea:	7852      	ldrb	r2, [r2, #1]
 8012bec:	2a30      	cmp	r2, #48	; 0x30
 8012bee:	d0f9      	beq.n	8012be4 <_strtod_l+0x29c>
 8012bf0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8012bf4:	2908      	cmp	r1, #8
 8012bf6:	f63f af7a 	bhi.w	8012aee <_strtod_l+0x1a6>
 8012bfa:	3a30      	subs	r2, #48	; 0x30
 8012bfc:	9208      	str	r2, [sp, #32]
 8012bfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012c00:	920c      	str	r2, [sp, #48]	; 0x30
 8012c02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012c04:	1c57      	adds	r7, r2, #1
 8012c06:	9715      	str	r7, [sp, #84]	; 0x54
 8012c08:	7852      	ldrb	r2, [r2, #1]
 8012c0a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8012c0e:	f1be 0f09 	cmp.w	lr, #9
 8012c12:	d938      	bls.n	8012c86 <_strtod_l+0x33e>
 8012c14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012c16:	1a7f      	subs	r7, r7, r1
 8012c18:	2f08      	cmp	r7, #8
 8012c1a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012c1e:	dc03      	bgt.n	8012c28 <_strtod_l+0x2e0>
 8012c20:	9908      	ldr	r1, [sp, #32]
 8012c22:	428f      	cmp	r7, r1
 8012c24:	bfa8      	it	ge
 8012c26:	460f      	movge	r7, r1
 8012c28:	f1bc 0f00 	cmp.w	ip, #0
 8012c2c:	d000      	beq.n	8012c30 <_strtod_l+0x2e8>
 8012c2e:	427f      	negs	r7, r7
 8012c30:	2e00      	cmp	r6, #0
 8012c32:	d14f      	bne.n	8012cd4 <_strtod_l+0x38c>
 8012c34:	9904      	ldr	r1, [sp, #16]
 8012c36:	4301      	orrs	r1, r0
 8012c38:	f47f aec1 	bne.w	80129be <_strtod_l+0x76>
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	f47f aedb 	bne.w	80129f8 <_strtod_l+0xb0>
 8012c42:	2a69      	cmp	r2, #105	; 0x69
 8012c44:	d029      	beq.n	8012c9a <_strtod_l+0x352>
 8012c46:	dc26      	bgt.n	8012c96 <_strtod_l+0x34e>
 8012c48:	2a49      	cmp	r2, #73	; 0x49
 8012c4a:	d026      	beq.n	8012c9a <_strtod_l+0x352>
 8012c4c:	2a4e      	cmp	r2, #78	; 0x4e
 8012c4e:	f47f aed3 	bne.w	80129f8 <_strtod_l+0xb0>
 8012c52:	499b      	ldr	r1, [pc, #620]	; (8012ec0 <_strtod_l+0x578>)
 8012c54:	a815      	add	r0, sp, #84	; 0x54
 8012c56:	f001 fa3b 	bl	80140d0 <__match>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	f43f aecc 	beq.w	80129f8 <_strtod_l+0xb0>
 8012c60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	2b28      	cmp	r3, #40	; 0x28
 8012c66:	d12f      	bne.n	8012cc8 <_strtod_l+0x380>
 8012c68:	4996      	ldr	r1, [pc, #600]	; (8012ec4 <_strtod_l+0x57c>)
 8012c6a:	aa18      	add	r2, sp, #96	; 0x60
 8012c6c:	a815      	add	r0, sp, #84	; 0x54
 8012c6e:	f001 fa43 	bl	80140f8 <__hexnan>
 8012c72:	2805      	cmp	r0, #5
 8012c74:	d128      	bne.n	8012cc8 <_strtod_l+0x380>
 8012c76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012c78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012c7c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012c80:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012c84:	e69b      	b.n	80129be <_strtod_l+0x76>
 8012c86:	9f08      	ldr	r7, [sp, #32]
 8012c88:	210a      	movs	r1, #10
 8012c8a:	fb01 2107 	mla	r1, r1, r7, r2
 8012c8e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8012c92:	9208      	str	r2, [sp, #32]
 8012c94:	e7b5      	b.n	8012c02 <_strtod_l+0x2ba>
 8012c96:	2a6e      	cmp	r2, #110	; 0x6e
 8012c98:	e7d9      	b.n	8012c4e <_strtod_l+0x306>
 8012c9a:	498b      	ldr	r1, [pc, #556]	; (8012ec8 <_strtod_l+0x580>)
 8012c9c:	a815      	add	r0, sp, #84	; 0x54
 8012c9e:	f001 fa17 	bl	80140d0 <__match>
 8012ca2:	2800      	cmp	r0, #0
 8012ca4:	f43f aea8 	beq.w	80129f8 <_strtod_l+0xb0>
 8012ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012caa:	4988      	ldr	r1, [pc, #544]	; (8012ecc <_strtod_l+0x584>)
 8012cac:	3b01      	subs	r3, #1
 8012cae:	a815      	add	r0, sp, #84	; 0x54
 8012cb0:	9315      	str	r3, [sp, #84]	; 0x54
 8012cb2:	f001 fa0d 	bl	80140d0 <__match>
 8012cb6:	b910      	cbnz	r0, 8012cbe <_strtod_l+0x376>
 8012cb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cba:	3301      	adds	r3, #1
 8012cbc:	9315      	str	r3, [sp, #84]	; 0x54
 8012cbe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8012edc <_strtod_l+0x594>
 8012cc2:	f04f 0800 	mov.w	r8, #0
 8012cc6:	e67a      	b.n	80129be <_strtod_l+0x76>
 8012cc8:	4881      	ldr	r0, [pc, #516]	; (8012ed0 <_strtod_l+0x588>)
 8012cca:	f000 ff05 	bl	8013ad8 <nan>
 8012cce:	ec59 8b10 	vmov	r8, r9, d0
 8012cd2:	e674      	b.n	80129be <_strtod_l+0x76>
 8012cd4:	9b05      	ldr	r3, [sp, #20]
 8012cd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012cd8:	1afb      	subs	r3, r7, r3
 8012cda:	f1bb 0f00 	cmp.w	fp, #0
 8012cde:	bf08      	it	eq
 8012ce0:	46b3      	moveq	fp, r6
 8012ce2:	2e10      	cmp	r6, #16
 8012ce4:	9308      	str	r3, [sp, #32]
 8012ce6:	4635      	mov	r5, r6
 8012ce8:	bfa8      	it	ge
 8012cea:	2510      	movge	r5, #16
 8012cec:	f7ed fc12 	bl	8000514 <__aeabi_ui2d>
 8012cf0:	2e09      	cmp	r6, #9
 8012cf2:	4680      	mov	r8, r0
 8012cf4:	4689      	mov	r9, r1
 8012cf6:	dd13      	ble.n	8012d20 <_strtod_l+0x3d8>
 8012cf8:	4b76      	ldr	r3, [pc, #472]	; (8012ed4 <_strtod_l+0x58c>)
 8012cfa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012cfe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012d02:	f7ed fc81 	bl	8000608 <__aeabi_dmul>
 8012d06:	4680      	mov	r8, r0
 8012d08:	4650      	mov	r0, sl
 8012d0a:	4689      	mov	r9, r1
 8012d0c:	f7ed fc02 	bl	8000514 <__aeabi_ui2d>
 8012d10:	4602      	mov	r2, r0
 8012d12:	460b      	mov	r3, r1
 8012d14:	4640      	mov	r0, r8
 8012d16:	4649      	mov	r1, r9
 8012d18:	f7ed fac0 	bl	800029c <__adddf3>
 8012d1c:	4680      	mov	r8, r0
 8012d1e:	4689      	mov	r9, r1
 8012d20:	2e0f      	cmp	r6, #15
 8012d22:	dc38      	bgt.n	8012d96 <_strtod_l+0x44e>
 8012d24:	9b08      	ldr	r3, [sp, #32]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	f43f ae49 	beq.w	80129be <_strtod_l+0x76>
 8012d2c:	dd24      	ble.n	8012d78 <_strtod_l+0x430>
 8012d2e:	2b16      	cmp	r3, #22
 8012d30:	dc0b      	bgt.n	8012d4a <_strtod_l+0x402>
 8012d32:	4968      	ldr	r1, [pc, #416]	; (8012ed4 <_strtod_l+0x58c>)
 8012d34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d3c:	4642      	mov	r2, r8
 8012d3e:	464b      	mov	r3, r9
 8012d40:	f7ed fc62 	bl	8000608 <__aeabi_dmul>
 8012d44:	4680      	mov	r8, r0
 8012d46:	4689      	mov	r9, r1
 8012d48:	e639      	b.n	80129be <_strtod_l+0x76>
 8012d4a:	9a08      	ldr	r2, [sp, #32]
 8012d4c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8012d50:	4293      	cmp	r3, r2
 8012d52:	db20      	blt.n	8012d96 <_strtod_l+0x44e>
 8012d54:	4c5f      	ldr	r4, [pc, #380]	; (8012ed4 <_strtod_l+0x58c>)
 8012d56:	f1c6 060f 	rsb	r6, r6, #15
 8012d5a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8012d5e:	4642      	mov	r2, r8
 8012d60:	464b      	mov	r3, r9
 8012d62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d66:	f7ed fc4f 	bl	8000608 <__aeabi_dmul>
 8012d6a:	9b08      	ldr	r3, [sp, #32]
 8012d6c:	1b9e      	subs	r6, r3, r6
 8012d6e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8012d72:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012d76:	e7e3      	b.n	8012d40 <_strtod_l+0x3f8>
 8012d78:	9b08      	ldr	r3, [sp, #32]
 8012d7a:	3316      	adds	r3, #22
 8012d7c:	db0b      	blt.n	8012d96 <_strtod_l+0x44e>
 8012d7e:	9b05      	ldr	r3, [sp, #20]
 8012d80:	1bdf      	subs	r7, r3, r7
 8012d82:	4b54      	ldr	r3, [pc, #336]	; (8012ed4 <_strtod_l+0x58c>)
 8012d84:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d8c:	4640      	mov	r0, r8
 8012d8e:	4649      	mov	r1, r9
 8012d90:	f7ed fd64 	bl	800085c <__aeabi_ddiv>
 8012d94:	e7d6      	b.n	8012d44 <_strtod_l+0x3fc>
 8012d96:	9b08      	ldr	r3, [sp, #32]
 8012d98:	1b75      	subs	r5, r6, r5
 8012d9a:	441d      	add	r5, r3
 8012d9c:	2d00      	cmp	r5, #0
 8012d9e:	dd70      	ble.n	8012e82 <_strtod_l+0x53a>
 8012da0:	f015 030f 	ands.w	r3, r5, #15
 8012da4:	d00a      	beq.n	8012dbc <_strtod_l+0x474>
 8012da6:	494b      	ldr	r1, [pc, #300]	; (8012ed4 <_strtod_l+0x58c>)
 8012da8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012dac:	4642      	mov	r2, r8
 8012dae:	464b      	mov	r3, r9
 8012db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012db4:	f7ed fc28 	bl	8000608 <__aeabi_dmul>
 8012db8:	4680      	mov	r8, r0
 8012dba:	4689      	mov	r9, r1
 8012dbc:	f035 050f 	bics.w	r5, r5, #15
 8012dc0:	d04d      	beq.n	8012e5e <_strtod_l+0x516>
 8012dc2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8012dc6:	dd22      	ble.n	8012e0e <_strtod_l+0x4c6>
 8012dc8:	2500      	movs	r5, #0
 8012dca:	46ab      	mov	fp, r5
 8012dcc:	9509      	str	r5, [sp, #36]	; 0x24
 8012dce:	9505      	str	r5, [sp, #20]
 8012dd0:	2322      	movs	r3, #34	; 0x22
 8012dd2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012edc <_strtod_l+0x594>
 8012dd6:	6023      	str	r3, [r4, #0]
 8012dd8:	f04f 0800 	mov.w	r8, #0
 8012ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	f43f aded 	beq.w	80129be <_strtod_l+0x76>
 8012de4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012de6:	4620      	mov	r0, r4
 8012de8:	f001 fb20 	bl	801442c <_Bfree>
 8012dec:	9905      	ldr	r1, [sp, #20]
 8012dee:	4620      	mov	r0, r4
 8012df0:	f001 fb1c 	bl	801442c <_Bfree>
 8012df4:	4659      	mov	r1, fp
 8012df6:	4620      	mov	r0, r4
 8012df8:	f001 fb18 	bl	801442c <_Bfree>
 8012dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012dfe:	4620      	mov	r0, r4
 8012e00:	f001 fb14 	bl	801442c <_Bfree>
 8012e04:	4629      	mov	r1, r5
 8012e06:	4620      	mov	r0, r4
 8012e08:	f001 fb10 	bl	801442c <_Bfree>
 8012e0c:	e5d7      	b.n	80129be <_strtod_l+0x76>
 8012e0e:	4b32      	ldr	r3, [pc, #200]	; (8012ed8 <_strtod_l+0x590>)
 8012e10:	9304      	str	r3, [sp, #16]
 8012e12:	2300      	movs	r3, #0
 8012e14:	112d      	asrs	r5, r5, #4
 8012e16:	4640      	mov	r0, r8
 8012e18:	4649      	mov	r1, r9
 8012e1a:	469a      	mov	sl, r3
 8012e1c:	2d01      	cmp	r5, #1
 8012e1e:	dc21      	bgt.n	8012e64 <_strtod_l+0x51c>
 8012e20:	b10b      	cbz	r3, 8012e26 <_strtod_l+0x4de>
 8012e22:	4680      	mov	r8, r0
 8012e24:	4689      	mov	r9, r1
 8012e26:	492c      	ldr	r1, [pc, #176]	; (8012ed8 <_strtod_l+0x590>)
 8012e28:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012e2c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012e30:	4642      	mov	r2, r8
 8012e32:	464b      	mov	r3, r9
 8012e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e38:	f7ed fbe6 	bl	8000608 <__aeabi_dmul>
 8012e3c:	4b27      	ldr	r3, [pc, #156]	; (8012edc <_strtod_l+0x594>)
 8012e3e:	460a      	mov	r2, r1
 8012e40:	400b      	ands	r3, r1
 8012e42:	4927      	ldr	r1, [pc, #156]	; (8012ee0 <_strtod_l+0x598>)
 8012e44:	428b      	cmp	r3, r1
 8012e46:	4680      	mov	r8, r0
 8012e48:	d8be      	bhi.n	8012dc8 <_strtod_l+0x480>
 8012e4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012e4e:	428b      	cmp	r3, r1
 8012e50:	bf86      	itte	hi
 8012e52:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8012ee4 <_strtod_l+0x59c>
 8012e56:	f04f 38ff 	movhi.w	r8, #4294967295
 8012e5a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012e5e:	2300      	movs	r3, #0
 8012e60:	9304      	str	r3, [sp, #16]
 8012e62:	e07b      	b.n	8012f5c <_strtod_l+0x614>
 8012e64:	07ea      	lsls	r2, r5, #31
 8012e66:	d505      	bpl.n	8012e74 <_strtod_l+0x52c>
 8012e68:	9b04      	ldr	r3, [sp, #16]
 8012e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6e:	f7ed fbcb 	bl	8000608 <__aeabi_dmul>
 8012e72:	2301      	movs	r3, #1
 8012e74:	9a04      	ldr	r2, [sp, #16]
 8012e76:	3208      	adds	r2, #8
 8012e78:	f10a 0a01 	add.w	sl, sl, #1
 8012e7c:	106d      	asrs	r5, r5, #1
 8012e7e:	9204      	str	r2, [sp, #16]
 8012e80:	e7cc      	b.n	8012e1c <_strtod_l+0x4d4>
 8012e82:	d0ec      	beq.n	8012e5e <_strtod_l+0x516>
 8012e84:	426d      	negs	r5, r5
 8012e86:	f015 020f 	ands.w	r2, r5, #15
 8012e8a:	d00a      	beq.n	8012ea2 <_strtod_l+0x55a>
 8012e8c:	4b11      	ldr	r3, [pc, #68]	; (8012ed4 <_strtod_l+0x58c>)
 8012e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012e92:	4640      	mov	r0, r8
 8012e94:	4649      	mov	r1, r9
 8012e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9a:	f7ed fcdf 	bl	800085c <__aeabi_ddiv>
 8012e9e:	4680      	mov	r8, r0
 8012ea0:	4689      	mov	r9, r1
 8012ea2:	112d      	asrs	r5, r5, #4
 8012ea4:	d0db      	beq.n	8012e5e <_strtod_l+0x516>
 8012ea6:	2d1f      	cmp	r5, #31
 8012ea8:	dd1e      	ble.n	8012ee8 <_strtod_l+0x5a0>
 8012eaa:	2500      	movs	r5, #0
 8012eac:	46ab      	mov	fp, r5
 8012eae:	9509      	str	r5, [sp, #36]	; 0x24
 8012eb0:	9505      	str	r5, [sp, #20]
 8012eb2:	2322      	movs	r3, #34	; 0x22
 8012eb4:	f04f 0800 	mov.w	r8, #0
 8012eb8:	f04f 0900 	mov.w	r9, #0
 8012ebc:	6023      	str	r3, [r4, #0]
 8012ebe:	e78d      	b.n	8012ddc <_strtod_l+0x494>
 8012ec0:	080198e1 	.word	0x080198e1
 8012ec4:	080198f8 	.word	0x080198f8
 8012ec8:	080198d8 	.word	0x080198d8
 8012ecc:	080198db 	.word	0x080198db
 8012ed0:	08019c93 	.word	0x08019c93
 8012ed4:	08019a50 	.word	0x08019a50
 8012ed8:	08019a28 	.word	0x08019a28
 8012edc:	7ff00000 	.word	0x7ff00000
 8012ee0:	7ca00000 	.word	0x7ca00000
 8012ee4:	7fefffff 	.word	0x7fefffff
 8012ee8:	f015 0310 	ands.w	r3, r5, #16
 8012eec:	bf18      	it	ne
 8012eee:	236a      	movne	r3, #106	; 0x6a
 8012ef0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8013294 <_strtod_l+0x94c>
 8012ef4:	9304      	str	r3, [sp, #16]
 8012ef6:	4640      	mov	r0, r8
 8012ef8:	4649      	mov	r1, r9
 8012efa:	2300      	movs	r3, #0
 8012efc:	07ea      	lsls	r2, r5, #31
 8012efe:	d504      	bpl.n	8012f0a <_strtod_l+0x5c2>
 8012f00:	e9da 2300 	ldrd	r2, r3, [sl]
 8012f04:	f7ed fb80 	bl	8000608 <__aeabi_dmul>
 8012f08:	2301      	movs	r3, #1
 8012f0a:	106d      	asrs	r5, r5, #1
 8012f0c:	f10a 0a08 	add.w	sl, sl, #8
 8012f10:	d1f4      	bne.n	8012efc <_strtod_l+0x5b4>
 8012f12:	b10b      	cbz	r3, 8012f18 <_strtod_l+0x5d0>
 8012f14:	4680      	mov	r8, r0
 8012f16:	4689      	mov	r9, r1
 8012f18:	9b04      	ldr	r3, [sp, #16]
 8012f1a:	b1bb      	cbz	r3, 8012f4c <_strtod_l+0x604>
 8012f1c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012f20:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	4649      	mov	r1, r9
 8012f28:	dd10      	ble.n	8012f4c <_strtod_l+0x604>
 8012f2a:	2b1f      	cmp	r3, #31
 8012f2c:	f340 811e 	ble.w	801316c <_strtod_l+0x824>
 8012f30:	2b34      	cmp	r3, #52	; 0x34
 8012f32:	bfde      	ittt	le
 8012f34:	f04f 33ff 	movle.w	r3, #4294967295
 8012f38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012f3c:	4093      	lslle	r3, r2
 8012f3e:	f04f 0800 	mov.w	r8, #0
 8012f42:	bfcc      	ite	gt
 8012f44:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012f48:	ea03 0901 	andle.w	r9, r3, r1
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	2300      	movs	r3, #0
 8012f50:	4640      	mov	r0, r8
 8012f52:	4649      	mov	r1, r9
 8012f54:	f7ed fdc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8012f58:	2800      	cmp	r0, #0
 8012f5a:	d1a6      	bne.n	8012eaa <_strtod_l+0x562>
 8012f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f5e:	9300      	str	r3, [sp, #0]
 8012f60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012f62:	4633      	mov	r3, r6
 8012f64:	465a      	mov	r2, fp
 8012f66:	4620      	mov	r0, r4
 8012f68:	f001 fac8 	bl	80144fc <__s2b>
 8012f6c:	9009      	str	r0, [sp, #36]	; 0x24
 8012f6e:	2800      	cmp	r0, #0
 8012f70:	f43f af2a 	beq.w	8012dc8 <_strtod_l+0x480>
 8012f74:	9a08      	ldr	r2, [sp, #32]
 8012f76:	9b05      	ldr	r3, [sp, #20]
 8012f78:	2a00      	cmp	r2, #0
 8012f7a:	eba3 0307 	sub.w	r3, r3, r7
 8012f7e:	bfa8      	it	ge
 8012f80:	2300      	movge	r3, #0
 8012f82:	930c      	str	r3, [sp, #48]	; 0x30
 8012f84:	2500      	movs	r5, #0
 8012f86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012f8a:	9312      	str	r3, [sp, #72]	; 0x48
 8012f8c:	46ab      	mov	fp, r5
 8012f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f90:	4620      	mov	r0, r4
 8012f92:	6859      	ldr	r1, [r3, #4]
 8012f94:	f001 fa0a 	bl	80143ac <_Balloc>
 8012f98:	9005      	str	r0, [sp, #20]
 8012f9a:	2800      	cmp	r0, #0
 8012f9c:	f43f af18 	beq.w	8012dd0 <_strtod_l+0x488>
 8012fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fa2:	691a      	ldr	r2, [r3, #16]
 8012fa4:	3202      	adds	r2, #2
 8012fa6:	f103 010c 	add.w	r1, r3, #12
 8012faa:	0092      	lsls	r2, r2, #2
 8012fac:	300c      	adds	r0, #12
 8012fae:	f000 fd84 	bl	8013aba <memcpy>
 8012fb2:	ec49 8b10 	vmov	d0, r8, r9
 8012fb6:	aa18      	add	r2, sp, #96	; 0x60
 8012fb8:	a917      	add	r1, sp, #92	; 0x5c
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f001 fdd2 	bl	8014b64 <__d2b>
 8012fc0:	ec49 8b18 	vmov	d8, r8, r9
 8012fc4:	9016      	str	r0, [sp, #88]	; 0x58
 8012fc6:	2800      	cmp	r0, #0
 8012fc8:	f43f af02 	beq.w	8012dd0 <_strtod_l+0x488>
 8012fcc:	2101      	movs	r1, #1
 8012fce:	4620      	mov	r0, r4
 8012fd0:	f001 fb2c 	bl	801462c <__i2b>
 8012fd4:	4683      	mov	fp, r0
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	f43f aefa 	beq.w	8012dd0 <_strtod_l+0x488>
 8012fdc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012fde:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012fe0:	2e00      	cmp	r6, #0
 8012fe2:	bfab      	itete	ge
 8012fe4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8012fe6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8012fe8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012fea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8012fee:	bfac      	ite	ge
 8012ff0:	eb06 0a03 	addge.w	sl, r6, r3
 8012ff4:	1b9f      	sublt	r7, r3, r6
 8012ff6:	9b04      	ldr	r3, [sp, #16]
 8012ff8:	1af6      	subs	r6, r6, r3
 8012ffa:	4416      	add	r6, r2
 8012ffc:	4ba0      	ldr	r3, [pc, #640]	; (8013280 <_strtod_l+0x938>)
 8012ffe:	3e01      	subs	r6, #1
 8013000:	429e      	cmp	r6, r3
 8013002:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013006:	f280 80c4 	bge.w	8013192 <_strtod_l+0x84a>
 801300a:	1b9b      	subs	r3, r3, r6
 801300c:	2b1f      	cmp	r3, #31
 801300e:	eba2 0203 	sub.w	r2, r2, r3
 8013012:	f04f 0101 	mov.w	r1, #1
 8013016:	f300 80b0 	bgt.w	801317a <_strtod_l+0x832>
 801301a:	fa01 f303 	lsl.w	r3, r1, r3
 801301e:	930e      	str	r3, [sp, #56]	; 0x38
 8013020:	2300      	movs	r3, #0
 8013022:	930d      	str	r3, [sp, #52]	; 0x34
 8013024:	eb0a 0602 	add.w	r6, sl, r2
 8013028:	9b04      	ldr	r3, [sp, #16]
 801302a:	45b2      	cmp	sl, r6
 801302c:	4417      	add	r7, r2
 801302e:	441f      	add	r7, r3
 8013030:	4653      	mov	r3, sl
 8013032:	bfa8      	it	ge
 8013034:	4633      	movge	r3, r6
 8013036:	42bb      	cmp	r3, r7
 8013038:	bfa8      	it	ge
 801303a:	463b      	movge	r3, r7
 801303c:	2b00      	cmp	r3, #0
 801303e:	bfc2      	ittt	gt
 8013040:	1af6      	subgt	r6, r6, r3
 8013042:	1aff      	subgt	r7, r7, r3
 8013044:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801304a:	2b00      	cmp	r3, #0
 801304c:	dd17      	ble.n	801307e <_strtod_l+0x736>
 801304e:	4659      	mov	r1, fp
 8013050:	461a      	mov	r2, r3
 8013052:	4620      	mov	r0, r4
 8013054:	f001 fbaa 	bl	80147ac <__pow5mult>
 8013058:	4683      	mov	fp, r0
 801305a:	2800      	cmp	r0, #0
 801305c:	f43f aeb8 	beq.w	8012dd0 <_strtod_l+0x488>
 8013060:	4601      	mov	r1, r0
 8013062:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013064:	4620      	mov	r0, r4
 8013066:	f001 faf7 	bl	8014658 <__multiply>
 801306a:	900b      	str	r0, [sp, #44]	; 0x2c
 801306c:	2800      	cmp	r0, #0
 801306e:	f43f aeaf 	beq.w	8012dd0 <_strtod_l+0x488>
 8013072:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013074:	4620      	mov	r0, r4
 8013076:	f001 f9d9 	bl	801442c <_Bfree>
 801307a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801307c:	9316      	str	r3, [sp, #88]	; 0x58
 801307e:	2e00      	cmp	r6, #0
 8013080:	f300 808c 	bgt.w	801319c <_strtod_l+0x854>
 8013084:	9b08      	ldr	r3, [sp, #32]
 8013086:	2b00      	cmp	r3, #0
 8013088:	dd08      	ble.n	801309c <_strtod_l+0x754>
 801308a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801308c:	9905      	ldr	r1, [sp, #20]
 801308e:	4620      	mov	r0, r4
 8013090:	f001 fb8c 	bl	80147ac <__pow5mult>
 8013094:	9005      	str	r0, [sp, #20]
 8013096:	2800      	cmp	r0, #0
 8013098:	f43f ae9a 	beq.w	8012dd0 <_strtod_l+0x488>
 801309c:	2f00      	cmp	r7, #0
 801309e:	dd08      	ble.n	80130b2 <_strtod_l+0x76a>
 80130a0:	9905      	ldr	r1, [sp, #20]
 80130a2:	463a      	mov	r2, r7
 80130a4:	4620      	mov	r0, r4
 80130a6:	f001 fbdb 	bl	8014860 <__lshift>
 80130aa:	9005      	str	r0, [sp, #20]
 80130ac:	2800      	cmp	r0, #0
 80130ae:	f43f ae8f 	beq.w	8012dd0 <_strtod_l+0x488>
 80130b2:	f1ba 0f00 	cmp.w	sl, #0
 80130b6:	dd08      	ble.n	80130ca <_strtod_l+0x782>
 80130b8:	4659      	mov	r1, fp
 80130ba:	4652      	mov	r2, sl
 80130bc:	4620      	mov	r0, r4
 80130be:	f001 fbcf 	bl	8014860 <__lshift>
 80130c2:	4683      	mov	fp, r0
 80130c4:	2800      	cmp	r0, #0
 80130c6:	f43f ae83 	beq.w	8012dd0 <_strtod_l+0x488>
 80130ca:	9a05      	ldr	r2, [sp, #20]
 80130cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80130ce:	4620      	mov	r0, r4
 80130d0:	f001 fc4e 	bl	8014970 <__mdiff>
 80130d4:	4605      	mov	r5, r0
 80130d6:	2800      	cmp	r0, #0
 80130d8:	f43f ae7a 	beq.w	8012dd0 <_strtod_l+0x488>
 80130dc:	68c3      	ldr	r3, [r0, #12]
 80130de:	930b      	str	r3, [sp, #44]	; 0x2c
 80130e0:	2300      	movs	r3, #0
 80130e2:	60c3      	str	r3, [r0, #12]
 80130e4:	4659      	mov	r1, fp
 80130e6:	f001 fc27 	bl	8014938 <__mcmp>
 80130ea:	2800      	cmp	r0, #0
 80130ec:	da60      	bge.n	80131b0 <_strtod_l+0x868>
 80130ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130f0:	ea53 0308 	orrs.w	r3, r3, r8
 80130f4:	f040 8084 	bne.w	8013200 <_strtod_l+0x8b8>
 80130f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d17f      	bne.n	8013200 <_strtod_l+0x8b8>
 8013100:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013104:	0d1b      	lsrs	r3, r3, #20
 8013106:	051b      	lsls	r3, r3, #20
 8013108:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801310c:	d978      	bls.n	8013200 <_strtod_l+0x8b8>
 801310e:	696b      	ldr	r3, [r5, #20]
 8013110:	b913      	cbnz	r3, 8013118 <_strtod_l+0x7d0>
 8013112:	692b      	ldr	r3, [r5, #16]
 8013114:	2b01      	cmp	r3, #1
 8013116:	dd73      	ble.n	8013200 <_strtod_l+0x8b8>
 8013118:	4629      	mov	r1, r5
 801311a:	2201      	movs	r2, #1
 801311c:	4620      	mov	r0, r4
 801311e:	f001 fb9f 	bl	8014860 <__lshift>
 8013122:	4659      	mov	r1, fp
 8013124:	4605      	mov	r5, r0
 8013126:	f001 fc07 	bl	8014938 <__mcmp>
 801312a:	2800      	cmp	r0, #0
 801312c:	dd68      	ble.n	8013200 <_strtod_l+0x8b8>
 801312e:	9904      	ldr	r1, [sp, #16]
 8013130:	4a54      	ldr	r2, [pc, #336]	; (8013284 <_strtod_l+0x93c>)
 8013132:	464b      	mov	r3, r9
 8013134:	2900      	cmp	r1, #0
 8013136:	f000 8084 	beq.w	8013242 <_strtod_l+0x8fa>
 801313a:	ea02 0109 	and.w	r1, r2, r9
 801313e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013142:	dc7e      	bgt.n	8013242 <_strtod_l+0x8fa>
 8013144:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013148:	f77f aeb3 	ble.w	8012eb2 <_strtod_l+0x56a>
 801314c:	4b4e      	ldr	r3, [pc, #312]	; (8013288 <_strtod_l+0x940>)
 801314e:	4640      	mov	r0, r8
 8013150:	4649      	mov	r1, r9
 8013152:	2200      	movs	r2, #0
 8013154:	f7ed fa58 	bl	8000608 <__aeabi_dmul>
 8013158:	4b4a      	ldr	r3, [pc, #296]	; (8013284 <_strtod_l+0x93c>)
 801315a:	400b      	ands	r3, r1
 801315c:	4680      	mov	r8, r0
 801315e:	4689      	mov	r9, r1
 8013160:	2b00      	cmp	r3, #0
 8013162:	f47f ae3f 	bne.w	8012de4 <_strtod_l+0x49c>
 8013166:	2322      	movs	r3, #34	; 0x22
 8013168:	6023      	str	r3, [r4, #0]
 801316a:	e63b      	b.n	8012de4 <_strtod_l+0x49c>
 801316c:	f04f 32ff 	mov.w	r2, #4294967295
 8013170:	fa02 f303 	lsl.w	r3, r2, r3
 8013174:	ea03 0808 	and.w	r8, r3, r8
 8013178:	e6e8      	b.n	8012f4c <_strtod_l+0x604>
 801317a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801317e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013182:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013186:	36e2      	adds	r6, #226	; 0xe2
 8013188:	fa01 f306 	lsl.w	r3, r1, r6
 801318c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013190:	e748      	b.n	8013024 <_strtod_l+0x6dc>
 8013192:	2100      	movs	r1, #0
 8013194:	2301      	movs	r3, #1
 8013196:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801319a:	e743      	b.n	8013024 <_strtod_l+0x6dc>
 801319c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801319e:	4632      	mov	r2, r6
 80131a0:	4620      	mov	r0, r4
 80131a2:	f001 fb5d 	bl	8014860 <__lshift>
 80131a6:	9016      	str	r0, [sp, #88]	; 0x58
 80131a8:	2800      	cmp	r0, #0
 80131aa:	f47f af6b 	bne.w	8013084 <_strtod_l+0x73c>
 80131ae:	e60f      	b.n	8012dd0 <_strtod_l+0x488>
 80131b0:	46ca      	mov	sl, r9
 80131b2:	d171      	bne.n	8013298 <_strtod_l+0x950>
 80131b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80131b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131ba:	b352      	cbz	r2, 8013212 <_strtod_l+0x8ca>
 80131bc:	4a33      	ldr	r2, [pc, #204]	; (801328c <_strtod_l+0x944>)
 80131be:	4293      	cmp	r3, r2
 80131c0:	d12a      	bne.n	8013218 <_strtod_l+0x8d0>
 80131c2:	9b04      	ldr	r3, [sp, #16]
 80131c4:	4641      	mov	r1, r8
 80131c6:	b1fb      	cbz	r3, 8013208 <_strtod_l+0x8c0>
 80131c8:	4b2e      	ldr	r3, [pc, #184]	; (8013284 <_strtod_l+0x93c>)
 80131ca:	ea09 0303 	and.w	r3, r9, r3
 80131ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80131d2:	f04f 32ff 	mov.w	r2, #4294967295
 80131d6:	d81a      	bhi.n	801320e <_strtod_l+0x8c6>
 80131d8:	0d1b      	lsrs	r3, r3, #20
 80131da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80131de:	fa02 f303 	lsl.w	r3, r2, r3
 80131e2:	4299      	cmp	r1, r3
 80131e4:	d118      	bne.n	8013218 <_strtod_l+0x8d0>
 80131e6:	4b2a      	ldr	r3, [pc, #168]	; (8013290 <_strtod_l+0x948>)
 80131e8:	459a      	cmp	sl, r3
 80131ea:	d102      	bne.n	80131f2 <_strtod_l+0x8aa>
 80131ec:	3101      	adds	r1, #1
 80131ee:	f43f adef 	beq.w	8012dd0 <_strtod_l+0x488>
 80131f2:	4b24      	ldr	r3, [pc, #144]	; (8013284 <_strtod_l+0x93c>)
 80131f4:	ea0a 0303 	and.w	r3, sl, r3
 80131f8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80131fc:	f04f 0800 	mov.w	r8, #0
 8013200:	9b04      	ldr	r3, [sp, #16]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d1a2      	bne.n	801314c <_strtod_l+0x804>
 8013206:	e5ed      	b.n	8012de4 <_strtod_l+0x49c>
 8013208:	f04f 33ff 	mov.w	r3, #4294967295
 801320c:	e7e9      	b.n	80131e2 <_strtod_l+0x89a>
 801320e:	4613      	mov	r3, r2
 8013210:	e7e7      	b.n	80131e2 <_strtod_l+0x89a>
 8013212:	ea53 0308 	orrs.w	r3, r3, r8
 8013216:	d08a      	beq.n	801312e <_strtod_l+0x7e6>
 8013218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801321a:	b1e3      	cbz	r3, 8013256 <_strtod_l+0x90e>
 801321c:	ea13 0f0a 	tst.w	r3, sl
 8013220:	d0ee      	beq.n	8013200 <_strtod_l+0x8b8>
 8013222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013224:	9a04      	ldr	r2, [sp, #16]
 8013226:	4640      	mov	r0, r8
 8013228:	4649      	mov	r1, r9
 801322a:	b1c3      	cbz	r3, 801325e <_strtod_l+0x916>
 801322c:	f7ff fb6f 	bl	801290e <sulp>
 8013230:	4602      	mov	r2, r0
 8013232:	460b      	mov	r3, r1
 8013234:	ec51 0b18 	vmov	r0, r1, d8
 8013238:	f7ed f830 	bl	800029c <__adddf3>
 801323c:	4680      	mov	r8, r0
 801323e:	4689      	mov	r9, r1
 8013240:	e7de      	b.n	8013200 <_strtod_l+0x8b8>
 8013242:	4013      	ands	r3, r2
 8013244:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013248:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801324c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013250:	f04f 38ff 	mov.w	r8, #4294967295
 8013254:	e7d4      	b.n	8013200 <_strtod_l+0x8b8>
 8013256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013258:	ea13 0f08 	tst.w	r3, r8
 801325c:	e7e0      	b.n	8013220 <_strtod_l+0x8d8>
 801325e:	f7ff fb56 	bl	801290e <sulp>
 8013262:	4602      	mov	r2, r0
 8013264:	460b      	mov	r3, r1
 8013266:	ec51 0b18 	vmov	r0, r1, d8
 801326a:	f7ed f815 	bl	8000298 <__aeabi_dsub>
 801326e:	2200      	movs	r2, #0
 8013270:	2300      	movs	r3, #0
 8013272:	4680      	mov	r8, r0
 8013274:	4689      	mov	r9, r1
 8013276:	f7ed fc2f 	bl	8000ad8 <__aeabi_dcmpeq>
 801327a:	2800      	cmp	r0, #0
 801327c:	d0c0      	beq.n	8013200 <_strtod_l+0x8b8>
 801327e:	e618      	b.n	8012eb2 <_strtod_l+0x56a>
 8013280:	fffffc02 	.word	0xfffffc02
 8013284:	7ff00000 	.word	0x7ff00000
 8013288:	39500000 	.word	0x39500000
 801328c:	000fffff 	.word	0x000fffff
 8013290:	7fefffff 	.word	0x7fefffff
 8013294:	08019910 	.word	0x08019910
 8013298:	4659      	mov	r1, fp
 801329a:	4628      	mov	r0, r5
 801329c:	f001 fcbc 	bl	8014c18 <__ratio>
 80132a0:	ec57 6b10 	vmov	r6, r7, d0
 80132a4:	ee10 0a10 	vmov	r0, s0
 80132a8:	2200      	movs	r2, #0
 80132aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80132ae:	4639      	mov	r1, r7
 80132b0:	f7ed fc26 	bl	8000b00 <__aeabi_dcmple>
 80132b4:	2800      	cmp	r0, #0
 80132b6:	d071      	beq.n	801339c <_strtod_l+0xa54>
 80132b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d17c      	bne.n	80133b8 <_strtod_l+0xa70>
 80132be:	f1b8 0f00 	cmp.w	r8, #0
 80132c2:	d15a      	bne.n	801337a <_strtod_l+0xa32>
 80132c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d15d      	bne.n	8013388 <_strtod_l+0xa40>
 80132cc:	4b90      	ldr	r3, [pc, #576]	; (8013510 <_strtod_l+0xbc8>)
 80132ce:	2200      	movs	r2, #0
 80132d0:	4630      	mov	r0, r6
 80132d2:	4639      	mov	r1, r7
 80132d4:	f7ed fc0a 	bl	8000aec <__aeabi_dcmplt>
 80132d8:	2800      	cmp	r0, #0
 80132da:	d15c      	bne.n	8013396 <_strtod_l+0xa4e>
 80132dc:	4630      	mov	r0, r6
 80132de:	4639      	mov	r1, r7
 80132e0:	4b8c      	ldr	r3, [pc, #560]	; (8013514 <_strtod_l+0xbcc>)
 80132e2:	2200      	movs	r2, #0
 80132e4:	f7ed f990 	bl	8000608 <__aeabi_dmul>
 80132e8:	4606      	mov	r6, r0
 80132ea:	460f      	mov	r7, r1
 80132ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80132f0:	9606      	str	r6, [sp, #24]
 80132f2:	9307      	str	r3, [sp, #28]
 80132f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80132f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80132fc:	4b86      	ldr	r3, [pc, #536]	; (8013518 <_strtod_l+0xbd0>)
 80132fe:	ea0a 0303 	and.w	r3, sl, r3
 8013302:	930d      	str	r3, [sp, #52]	; 0x34
 8013304:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013306:	4b85      	ldr	r3, [pc, #532]	; (801351c <_strtod_l+0xbd4>)
 8013308:	429a      	cmp	r2, r3
 801330a:	f040 8090 	bne.w	801342e <_strtod_l+0xae6>
 801330e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013312:	ec49 8b10 	vmov	d0, r8, r9
 8013316:	f001 fbb5 	bl	8014a84 <__ulp>
 801331a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801331e:	ec51 0b10 	vmov	r0, r1, d0
 8013322:	f7ed f971 	bl	8000608 <__aeabi_dmul>
 8013326:	4642      	mov	r2, r8
 8013328:	464b      	mov	r3, r9
 801332a:	f7ec ffb7 	bl	800029c <__adddf3>
 801332e:	460b      	mov	r3, r1
 8013330:	4979      	ldr	r1, [pc, #484]	; (8013518 <_strtod_l+0xbd0>)
 8013332:	4a7b      	ldr	r2, [pc, #492]	; (8013520 <_strtod_l+0xbd8>)
 8013334:	4019      	ands	r1, r3
 8013336:	4291      	cmp	r1, r2
 8013338:	4680      	mov	r8, r0
 801333a:	d944      	bls.n	80133c6 <_strtod_l+0xa7e>
 801333c:	ee18 2a90 	vmov	r2, s17
 8013340:	4b78      	ldr	r3, [pc, #480]	; (8013524 <_strtod_l+0xbdc>)
 8013342:	429a      	cmp	r2, r3
 8013344:	d104      	bne.n	8013350 <_strtod_l+0xa08>
 8013346:	ee18 3a10 	vmov	r3, s16
 801334a:	3301      	adds	r3, #1
 801334c:	f43f ad40 	beq.w	8012dd0 <_strtod_l+0x488>
 8013350:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8013524 <_strtod_l+0xbdc>
 8013354:	f04f 38ff 	mov.w	r8, #4294967295
 8013358:	9916      	ldr	r1, [sp, #88]	; 0x58
 801335a:	4620      	mov	r0, r4
 801335c:	f001 f866 	bl	801442c <_Bfree>
 8013360:	9905      	ldr	r1, [sp, #20]
 8013362:	4620      	mov	r0, r4
 8013364:	f001 f862 	bl	801442c <_Bfree>
 8013368:	4659      	mov	r1, fp
 801336a:	4620      	mov	r0, r4
 801336c:	f001 f85e 	bl	801442c <_Bfree>
 8013370:	4629      	mov	r1, r5
 8013372:	4620      	mov	r0, r4
 8013374:	f001 f85a 	bl	801442c <_Bfree>
 8013378:	e609      	b.n	8012f8e <_strtod_l+0x646>
 801337a:	f1b8 0f01 	cmp.w	r8, #1
 801337e:	d103      	bne.n	8013388 <_strtod_l+0xa40>
 8013380:	f1b9 0f00 	cmp.w	r9, #0
 8013384:	f43f ad95 	beq.w	8012eb2 <_strtod_l+0x56a>
 8013388:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80134e0 <_strtod_l+0xb98>
 801338c:	4f60      	ldr	r7, [pc, #384]	; (8013510 <_strtod_l+0xbc8>)
 801338e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013392:	2600      	movs	r6, #0
 8013394:	e7ae      	b.n	80132f4 <_strtod_l+0x9ac>
 8013396:	4f5f      	ldr	r7, [pc, #380]	; (8013514 <_strtod_l+0xbcc>)
 8013398:	2600      	movs	r6, #0
 801339a:	e7a7      	b.n	80132ec <_strtod_l+0x9a4>
 801339c:	4b5d      	ldr	r3, [pc, #372]	; (8013514 <_strtod_l+0xbcc>)
 801339e:	4630      	mov	r0, r6
 80133a0:	4639      	mov	r1, r7
 80133a2:	2200      	movs	r2, #0
 80133a4:	f7ed f930 	bl	8000608 <__aeabi_dmul>
 80133a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133aa:	4606      	mov	r6, r0
 80133ac:	460f      	mov	r7, r1
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d09c      	beq.n	80132ec <_strtod_l+0x9a4>
 80133b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80133b6:	e79d      	b.n	80132f4 <_strtod_l+0x9ac>
 80133b8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80134e8 <_strtod_l+0xba0>
 80133bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80133c0:	ec57 6b17 	vmov	r6, r7, d7
 80133c4:	e796      	b.n	80132f4 <_strtod_l+0x9ac>
 80133c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80133ca:	9b04      	ldr	r3, [sp, #16]
 80133cc:	46ca      	mov	sl, r9
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d1c2      	bne.n	8013358 <_strtod_l+0xa10>
 80133d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80133d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80133d8:	0d1b      	lsrs	r3, r3, #20
 80133da:	051b      	lsls	r3, r3, #20
 80133dc:	429a      	cmp	r2, r3
 80133de:	d1bb      	bne.n	8013358 <_strtod_l+0xa10>
 80133e0:	4630      	mov	r0, r6
 80133e2:	4639      	mov	r1, r7
 80133e4:	f7ed fc70 	bl	8000cc8 <__aeabi_d2lz>
 80133e8:	f7ed f8e0 	bl	80005ac <__aeabi_l2d>
 80133ec:	4602      	mov	r2, r0
 80133ee:	460b      	mov	r3, r1
 80133f0:	4630      	mov	r0, r6
 80133f2:	4639      	mov	r1, r7
 80133f4:	f7ec ff50 	bl	8000298 <__aeabi_dsub>
 80133f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80133fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80133fe:	ea43 0308 	orr.w	r3, r3, r8
 8013402:	4313      	orrs	r3, r2
 8013404:	4606      	mov	r6, r0
 8013406:	460f      	mov	r7, r1
 8013408:	d054      	beq.n	80134b4 <_strtod_l+0xb6c>
 801340a:	a339      	add	r3, pc, #228	; (adr r3, 80134f0 <_strtod_l+0xba8>)
 801340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013410:	f7ed fb6c 	bl	8000aec <__aeabi_dcmplt>
 8013414:	2800      	cmp	r0, #0
 8013416:	f47f ace5 	bne.w	8012de4 <_strtod_l+0x49c>
 801341a:	a337      	add	r3, pc, #220	; (adr r3, 80134f8 <_strtod_l+0xbb0>)
 801341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013420:	4630      	mov	r0, r6
 8013422:	4639      	mov	r1, r7
 8013424:	f7ed fb80 	bl	8000b28 <__aeabi_dcmpgt>
 8013428:	2800      	cmp	r0, #0
 801342a:	d095      	beq.n	8013358 <_strtod_l+0xa10>
 801342c:	e4da      	b.n	8012de4 <_strtod_l+0x49c>
 801342e:	9b04      	ldr	r3, [sp, #16]
 8013430:	b333      	cbz	r3, 8013480 <_strtod_l+0xb38>
 8013432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013434:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013438:	d822      	bhi.n	8013480 <_strtod_l+0xb38>
 801343a:	a331      	add	r3, pc, #196	; (adr r3, 8013500 <_strtod_l+0xbb8>)
 801343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013440:	4630      	mov	r0, r6
 8013442:	4639      	mov	r1, r7
 8013444:	f7ed fb5c 	bl	8000b00 <__aeabi_dcmple>
 8013448:	b1a0      	cbz	r0, 8013474 <_strtod_l+0xb2c>
 801344a:	4639      	mov	r1, r7
 801344c:	4630      	mov	r0, r6
 801344e:	f7ed fbb3 	bl	8000bb8 <__aeabi_d2uiz>
 8013452:	2801      	cmp	r0, #1
 8013454:	bf38      	it	cc
 8013456:	2001      	movcc	r0, #1
 8013458:	f7ed f85c 	bl	8000514 <__aeabi_ui2d>
 801345c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801345e:	4606      	mov	r6, r0
 8013460:	460f      	mov	r7, r1
 8013462:	bb23      	cbnz	r3, 80134ae <_strtod_l+0xb66>
 8013464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013468:	9010      	str	r0, [sp, #64]	; 0x40
 801346a:	9311      	str	r3, [sp, #68]	; 0x44
 801346c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013470:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013478:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801347c:	1a9b      	subs	r3, r3, r2
 801347e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013480:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013484:	eeb0 0a48 	vmov.f32	s0, s16
 8013488:	eef0 0a68 	vmov.f32	s1, s17
 801348c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013490:	f001 faf8 	bl	8014a84 <__ulp>
 8013494:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013498:	ec53 2b10 	vmov	r2, r3, d0
 801349c:	f7ed f8b4 	bl	8000608 <__aeabi_dmul>
 80134a0:	ec53 2b18 	vmov	r2, r3, d8
 80134a4:	f7ec fefa 	bl	800029c <__adddf3>
 80134a8:	4680      	mov	r8, r0
 80134aa:	4689      	mov	r9, r1
 80134ac:	e78d      	b.n	80133ca <_strtod_l+0xa82>
 80134ae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80134b2:	e7db      	b.n	801346c <_strtod_l+0xb24>
 80134b4:	a314      	add	r3, pc, #80	; (adr r3, 8013508 <_strtod_l+0xbc0>)
 80134b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ba:	f7ed fb17 	bl	8000aec <__aeabi_dcmplt>
 80134be:	e7b3      	b.n	8013428 <_strtod_l+0xae0>
 80134c0:	2300      	movs	r3, #0
 80134c2:	930a      	str	r3, [sp, #40]	; 0x28
 80134c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80134c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134c8:	6013      	str	r3, [r2, #0]
 80134ca:	f7ff ba7c 	b.w	80129c6 <_strtod_l+0x7e>
 80134ce:	2a65      	cmp	r2, #101	; 0x65
 80134d0:	f43f ab75 	beq.w	8012bbe <_strtod_l+0x276>
 80134d4:	2a45      	cmp	r2, #69	; 0x45
 80134d6:	f43f ab72 	beq.w	8012bbe <_strtod_l+0x276>
 80134da:	2301      	movs	r3, #1
 80134dc:	f7ff bbaa 	b.w	8012c34 <_strtod_l+0x2ec>
 80134e0:	00000000 	.word	0x00000000
 80134e4:	bff00000 	.word	0xbff00000
 80134e8:	00000000 	.word	0x00000000
 80134ec:	3ff00000 	.word	0x3ff00000
 80134f0:	94a03595 	.word	0x94a03595
 80134f4:	3fdfffff 	.word	0x3fdfffff
 80134f8:	35afe535 	.word	0x35afe535
 80134fc:	3fe00000 	.word	0x3fe00000
 8013500:	ffc00000 	.word	0xffc00000
 8013504:	41dfffff 	.word	0x41dfffff
 8013508:	94a03595 	.word	0x94a03595
 801350c:	3fcfffff 	.word	0x3fcfffff
 8013510:	3ff00000 	.word	0x3ff00000
 8013514:	3fe00000 	.word	0x3fe00000
 8013518:	7ff00000 	.word	0x7ff00000
 801351c:	7fe00000 	.word	0x7fe00000
 8013520:	7c9fffff 	.word	0x7c9fffff
 8013524:	7fefffff 	.word	0x7fefffff

08013528 <strtod>:
 8013528:	460a      	mov	r2, r1
 801352a:	4601      	mov	r1, r0
 801352c:	4802      	ldr	r0, [pc, #8]	; (8013538 <strtod+0x10>)
 801352e:	4b03      	ldr	r3, [pc, #12]	; (801353c <strtod+0x14>)
 8013530:	6800      	ldr	r0, [r0, #0]
 8013532:	f7ff ba09 	b.w	8012948 <_strtod_l>
 8013536:	bf00      	nop
 8013538:	20000368 	.word	0x20000368
 801353c:	200001b0 	.word	0x200001b0

08013540 <std>:
 8013540:	2300      	movs	r3, #0
 8013542:	b510      	push	{r4, lr}
 8013544:	4604      	mov	r4, r0
 8013546:	e9c0 3300 	strd	r3, r3, [r0]
 801354a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801354e:	6083      	str	r3, [r0, #8]
 8013550:	8181      	strh	r1, [r0, #12]
 8013552:	6643      	str	r3, [r0, #100]	; 0x64
 8013554:	81c2      	strh	r2, [r0, #14]
 8013556:	6183      	str	r3, [r0, #24]
 8013558:	4619      	mov	r1, r3
 801355a:	2208      	movs	r2, #8
 801355c:	305c      	adds	r0, #92	; 0x5c
 801355e:	f000 fa1f 	bl	80139a0 <memset>
 8013562:	4b0d      	ldr	r3, [pc, #52]	; (8013598 <std+0x58>)
 8013564:	6263      	str	r3, [r4, #36]	; 0x24
 8013566:	4b0d      	ldr	r3, [pc, #52]	; (801359c <std+0x5c>)
 8013568:	62a3      	str	r3, [r4, #40]	; 0x28
 801356a:	4b0d      	ldr	r3, [pc, #52]	; (80135a0 <std+0x60>)
 801356c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801356e:	4b0d      	ldr	r3, [pc, #52]	; (80135a4 <std+0x64>)
 8013570:	6323      	str	r3, [r4, #48]	; 0x30
 8013572:	4b0d      	ldr	r3, [pc, #52]	; (80135a8 <std+0x68>)
 8013574:	6224      	str	r4, [r4, #32]
 8013576:	429c      	cmp	r4, r3
 8013578:	d006      	beq.n	8013588 <std+0x48>
 801357a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801357e:	4294      	cmp	r4, r2
 8013580:	d002      	beq.n	8013588 <std+0x48>
 8013582:	33d0      	adds	r3, #208	; 0xd0
 8013584:	429c      	cmp	r4, r3
 8013586:	d105      	bne.n	8013594 <std+0x54>
 8013588:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801358c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013590:	f000 ba90 	b.w	8013ab4 <__retarget_lock_init_recursive>
 8013594:	bd10      	pop	{r4, pc}
 8013596:	bf00      	nop
 8013598:	0801377d 	.word	0x0801377d
 801359c:	0801379f 	.word	0x0801379f
 80135a0:	080137d7 	.word	0x080137d7
 80135a4:	080137fb 	.word	0x080137fb
 80135a8:	20000d6c 	.word	0x20000d6c

080135ac <stdio_exit_handler>:
 80135ac:	4a02      	ldr	r2, [pc, #8]	; (80135b8 <stdio_exit_handler+0xc>)
 80135ae:	4903      	ldr	r1, [pc, #12]	; (80135bc <stdio_exit_handler+0x10>)
 80135b0:	4803      	ldr	r0, [pc, #12]	; (80135c0 <stdio_exit_handler+0x14>)
 80135b2:	f000 b869 	b.w	8013688 <_fwalk_sglue>
 80135b6:	bf00      	nop
 80135b8:	200001a4 	.word	0x200001a4
 80135bc:	080153fd 	.word	0x080153fd
 80135c0:	2000031c 	.word	0x2000031c

080135c4 <cleanup_stdio>:
 80135c4:	6841      	ldr	r1, [r0, #4]
 80135c6:	4b0c      	ldr	r3, [pc, #48]	; (80135f8 <cleanup_stdio+0x34>)
 80135c8:	4299      	cmp	r1, r3
 80135ca:	b510      	push	{r4, lr}
 80135cc:	4604      	mov	r4, r0
 80135ce:	d001      	beq.n	80135d4 <cleanup_stdio+0x10>
 80135d0:	f001 ff14 	bl	80153fc <_fflush_r>
 80135d4:	68a1      	ldr	r1, [r4, #8]
 80135d6:	4b09      	ldr	r3, [pc, #36]	; (80135fc <cleanup_stdio+0x38>)
 80135d8:	4299      	cmp	r1, r3
 80135da:	d002      	beq.n	80135e2 <cleanup_stdio+0x1e>
 80135dc:	4620      	mov	r0, r4
 80135de:	f001 ff0d 	bl	80153fc <_fflush_r>
 80135e2:	68e1      	ldr	r1, [r4, #12]
 80135e4:	4b06      	ldr	r3, [pc, #24]	; (8013600 <cleanup_stdio+0x3c>)
 80135e6:	4299      	cmp	r1, r3
 80135e8:	d004      	beq.n	80135f4 <cleanup_stdio+0x30>
 80135ea:	4620      	mov	r0, r4
 80135ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135f0:	f001 bf04 	b.w	80153fc <_fflush_r>
 80135f4:	bd10      	pop	{r4, pc}
 80135f6:	bf00      	nop
 80135f8:	20000d6c 	.word	0x20000d6c
 80135fc:	20000dd4 	.word	0x20000dd4
 8013600:	20000e3c 	.word	0x20000e3c

08013604 <global_stdio_init.part.0>:
 8013604:	b510      	push	{r4, lr}
 8013606:	4b0b      	ldr	r3, [pc, #44]	; (8013634 <global_stdio_init.part.0+0x30>)
 8013608:	4c0b      	ldr	r4, [pc, #44]	; (8013638 <global_stdio_init.part.0+0x34>)
 801360a:	4a0c      	ldr	r2, [pc, #48]	; (801363c <global_stdio_init.part.0+0x38>)
 801360c:	601a      	str	r2, [r3, #0]
 801360e:	4620      	mov	r0, r4
 8013610:	2200      	movs	r2, #0
 8013612:	2104      	movs	r1, #4
 8013614:	f7ff ff94 	bl	8013540 <std>
 8013618:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801361c:	2201      	movs	r2, #1
 801361e:	2109      	movs	r1, #9
 8013620:	f7ff ff8e 	bl	8013540 <std>
 8013624:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013628:	2202      	movs	r2, #2
 801362a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801362e:	2112      	movs	r1, #18
 8013630:	f7ff bf86 	b.w	8013540 <std>
 8013634:	20000ea4 	.word	0x20000ea4
 8013638:	20000d6c 	.word	0x20000d6c
 801363c:	080135ad 	.word	0x080135ad

08013640 <__sfp_lock_acquire>:
 8013640:	4801      	ldr	r0, [pc, #4]	; (8013648 <__sfp_lock_acquire+0x8>)
 8013642:	f000 ba38 	b.w	8013ab6 <__retarget_lock_acquire_recursive>
 8013646:	bf00      	nop
 8013648:	20000ead 	.word	0x20000ead

0801364c <__sfp_lock_release>:
 801364c:	4801      	ldr	r0, [pc, #4]	; (8013654 <__sfp_lock_release+0x8>)
 801364e:	f000 ba33 	b.w	8013ab8 <__retarget_lock_release_recursive>
 8013652:	bf00      	nop
 8013654:	20000ead 	.word	0x20000ead

08013658 <__sinit>:
 8013658:	b510      	push	{r4, lr}
 801365a:	4604      	mov	r4, r0
 801365c:	f7ff fff0 	bl	8013640 <__sfp_lock_acquire>
 8013660:	6a23      	ldr	r3, [r4, #32]
 8013662:	b11b      	cbz	r3, 801366c <__sinit+0x14>
 8013664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013668:	f7ff bff0 	b.w	801364c <__sfp_lock_release>
 801366c:	4b04      	ldr	r3, [pc, #16]	; (8013680 <__sinit+0x28>)
 801366e:	6223      	str	r3, [r4, #32]
 8013670:	4b04      	ldr	r3, [pc, #16]	; (8013684 <__sinit+0x2c>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d1f5      	bne.n	8013664 <__sinit+0xc>
 8013678:	f7ff ffc4 	bl	8013604 <global_stdio_init.part.0>
 801367c:	e7f2      	b.n	8013664 <__sinit+0xc>
 801367e:	bf00      	nop
 8013680:	080135c5 	.word	0x080135c5
 8013684:	20000ea4 	.word	0x20000ea4

08013688 <_fwalk_sglue>:
 8013688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801368c:	4607      	mov	r7, r0
 801368e:	4688      	mov	r8, r1
 8013690:	4614      	mov	r4, r2
 8013692:	2600      	movs	r6, #0
 8013694:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013698:	f1b9 0901 	subs.w	r9, r9, #1
 801369c:	d505      	bpl.n	80136aa <_fwalk_sglue+0x22>
 801369e:	6824      	ldr	r4, [r4, #0]
 80136a0:	2c00      	cmp	r4, #0
 80136a2:	d1f7      	bne.n	8013694 <_fwalk_sglue+0xc>
 80136a4:	4630      	mov	r0, r6
 80136a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136aa:	89ab      	ldrh	r3, [r5, #12]
 80136ac:	2b01      	cmp	r3, #1
 80136ae:	d907      	bls.n	80136c0 <_fwalk_sglue+0x38>
 80136b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80136b4:	3301      	adds	r3, #1
 80136b6:	d003      	beq.n	80136c0 <_fwalk_sglue+0x38>
 80136b8:	4629      	mov	r1, r5
 80136ba:	4638      	mov	r0, r7
 80136bc:	47c0      	blx	r8
 80136be:	4306      	orrs	r6, r0
 80136c0:	3568      	adds	r5, #104	; 0x68
 80136c2:	e7e9      	b.n	8013698 <_fwalk_sglue+0x10>

080136c4 <_puts_r>:
 80136c4:	6a03      	ldr	r3, [r0, #32]
 80136c6:	b570      	push	{r4, r5, r6, lr}
 80136c8:	6884      	ldr	r4, [r0, #8]
 80136ca:	4605      	mov	r5, r0
 80136cc:	460e      	mov	r6, r1
 80136ce:	b90b      	cbnz	r3, 80136d4 <_puts_r+0x10>
 80136d0:	f7ff ffc2 	bl	8013658 <__sinit>
 80136d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80136d6:	07db      	lsls	r3, r3, #31
 80136d8:	d405      	bmi.n	80136e6 <_puts_r+0x22>
 80136da:	89a3      	ldrh	r3, [r4, #12]
 80136dc:	0598      	lsls	r0, r3, #22
 80136de:	d402      	bmi.n	80136e6 <_puts_r+0x22>
 80136e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80136e2:	f000 f9e8 	bl	8013ab6 <__retarget_lock_acquire_recursive>
 80136e6:	89a3      	ldrh	r3, [r4, #12]
 80136e8:	0719      	lsls	r1, r3, #28
 80136ea:	d513      	bpl.n	8013714 <_puts_r+0x50>
 80136ec:	6923      	ldr	r3, [r4, #16]
 80136ee:	b18b      	cbz	r3, 8013714 <_puts_r+0x50>
 80136f0:	3e01      	subs	r6, #1
 80136f2:	68a3      	ldr	r3, [r4, #8]
 80136f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80136f8:	3b01      	subs	r3, #1
 80136fa:	60a3      	str	r3, [r4, #8]
 80136fc:	b9e9      	cbnz	r1, 801373a <_puts_r+0x76>
 80136fe:	2b00      	cmp	r3, #0
 8013700:	da2e      	bge.n	8013760 <_puts_r+0x9c>
 8013702:	4622      	mov	r2, r4
 8013704:	210a      	movs	r1, #10
 8013706:	4628      	mov	r0, r5
 8013708:	f000 f8b4 	bl	8013874 <__swbuf_r>
 801370c:	3001      	adds	r0, #1
 801370e:	d007      	beq.n	8013720 <_puts_r+0x5c>
 8013710:	250a      	movs	r5, #10
 8013712:	e007      	b.n	8013724 <_puts_r+0x60>
 8013714:	4621      	mov	r1, r4
 8013716:	4628      	mov	r0, r5
 8013718:	f000 f8ea 	bl	80138f0 <__swsetup_r>
 801371c:	2800      	cmp	r0, #0
 801371e:	d0e7      	beq.n	80136f0 <_puts_r+0x2c>
 8013720:	f04f 35ff 	mov.w	r5, #4294967295
 8013724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013726:	07da      	lsls	r2, r3, #31
 8013728:	d405      	bmi.n	8013736 <_puts_r+0x72>
 801372a:	89a3      	ldrh	r3, [r4, #12]
 801372c:	059b      	lsls	r3, r3, #22
 801372e:	d402      	bmi.n	8013736 <_puts_r+0x72>
 8013730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013732:	f000 f9c1 	bl	8013ab8 <__retarget_lock_release_recursive>
 8013736:	4628      	mov	r0, r5
 8013738:	bd70      	pop	{r4, r5, r6, pc}
 801373a:	2b00      	cmp	r3, #0
 801373c:	da04      	bge.n	8013748 <_puts_r+0x84>
 801373e:	69a2      	ldr	r2, [r4, #24]
 8013740:	429a      	cmp	r2, r3
 8013742:	dc06      	bgt.n	8013752 <_puts_r+0x8e>
 8013744:	290a      	cmp	r1, #10
 8013746:	d004      	beq.n	8013752 <_puts_r+0x8e>
 8013748:	6823      	ldr	r3, [r4, #0]
 801374a:	1c5a      	adds	r2, r3, #1
 801374c:	6022      	str	r2, [r4, #0]
 801374e:	7019      	strb	r1, [r3, #0]
 8013750:	e7cf      	b.n	80136f2 <_puts_r+0x2e>
 8013752:	4622      	mov	r2, r4
 8013754:	4628      	mov	r0, r5
 8013756:	f000 f88d 	bl	8013874 <__swbuf_r>
 801375a:	3001      	adds	r0, #1
 801375c:	d1c9      	bne.n	80136f2 <_puts_r+0x2e>
 801375e:	e7df      	b.n	8013720 <_puts_r+0x5c>
 8013760:	6823      	ldr	r3, [r4, #0]
 8013762:	250a      	movs	r5, #10
 8013764:	1c5a      	adds	r2, r3, #1
 8013766:	6022      	str	r2, [r4, #0]
 8013768:	701d      	strb	r5, [r3, #0]
 801376a:	e7db      	b.n	8013724 <_puts_r+0x60>

0801376c <puts>:
 801376c:	4b02      	ldr	r3, [pc, #8]	; (8013778 <puts+0xc>)
 801376e:	4601      	mov	r1, r0
 8013770:	6818      	ldr	r0, [r3, #0]
 8013772:	f7ff bfa7 	b.w	80136c4 <_puts_r>
 8013776:	bf00      	nop
 8013778:	20000368 	.word	0x20000368

0801377c <__sread>:
 801377c:	b510      	push	{r4, lr}
 801377e:	460c      	mov	r4, r1
 8013780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013784:	f000 f948 	bl	8013a18 <_read_r>
 8013788:	2800      	cmp	r0, #0
 801378a:	bfab      	itete	ge
 801378c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801378e:	89a3      	ldrhlt	r3, [r4, #12]
 8013790:	181b      	addge	r3, r3, r0
 8013792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013796:	bfac      	ite	ge
 8013798:	6563      	strge	r3, [r4, #84]	; 0x54
 801379a:	81a3      	strhlt	r3, [r4, #12]
 801379c:	bd10      	pop	{r4, pc}

0801379e <__swrite>:
 801379e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137a2:	461f      	mov	r7, r3
 80137a4:	898b      	ldrh	r3, [r1, #12]
 80137a6:	05db      	lsls	r3, r3, #23
 80137a8:	4605      	mov	r5, r0
 80137aa:	460c      	mov	r4, r1
 80137ac:	4616      	mov	r6, r2
 80137ae:	d505      	bpl.n	80137bc <__swrite+0x1e>
 80137b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137b4:	2302      	movs	r3, #2
 80137b6:	2200      	movs	r2, #0
 80137b8:	f000 f91c 	bl	80139f4 <_lseek_r>
 80137bc:	89a3      	ldrh	r3, [r4, #12]
 80137be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80137c6:	81a3      	strh	r3, [r4, #12]
 80137c8:	4632      	mov	r2, r6
 80137ca:	463b      	mov	r3, r7
 80137cc:	4628      	mov	r0, r5
 80137ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137d2:	f000 b933 	b.w	8013a3c <_write_r>

080137d6 <__sseek>:
 80137d6:	b510      	push	{r4, lr}
 80137d8:	460c      	mov	r4, r1
 80137da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137de:	f000 f909 	bl	80139f4 <_lseek_r>
 80137e2:	1c43      	adds	r3, r0, #1
 80137e4:	89a3      	ldrh	r3, [r4, #12]
 80137e6:	bf15      	itete	ne
 80137e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80137ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80137ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80137f2:	81a3      	strheq	r3, [r4, #12]
 80137f4:	bf18      	it	ne
 80137f6:	81a3      	strhne	r3, [r4, #12]
 80137f8:	bd10      	pop	{r4, pc}

080137fa <__sclose>:
 80137fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137fe:	f000 b8e9 	b.w	80139d4 <_close_r>

08013802 <_vsniprintf_r>:
 8013802:	b530      	push	{r4, r5, lr}
 8013804:	4614      	mov	r4, r2
 8013806:	2c00      	cmp	r4, #0
 8013808:	b09b      	sub	sp, #108	; 0x6c
 801380a:	4605      	mov	r5, r0
 801380c:	461a      	mov	r2, r3
 801380e:	da05      	bge.n	801381c <_vsniprintf_r+0x1a>
 8013810:	238b      	movs	r3, #139	; 0x8b
 8013812:	6003      	str	r3, [r0, #0]
 8013814:	f04f 30ff 	mov.w	r0, #4294967295
 8013818:	b01b      	add	sp, #108	; 0x6c
 801381a:	bd30      	pop	{r4, r5, pc}
 801381c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013820:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013824:	bf14      	ite	ne
 8013826:	f104 33ff 	addne.w	r3, r4, #4294967295
 801382a:	4623      	moveq	r3, r4
 801382c:	9302      	str	r3, [sp, #8]
 801382e:	9305      	str	r3, [sp, #20]
 8013830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013834:	9100      	str	r1, [sp, #0]
 8013836:	9104      	str	r1, [sp, #16]
 8013838:	f8ad 300e 	strh.w	r3, [sp, #14]
 801383c:	4669      	mov	r1, sp
 801383e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013840:	f001 fac8 	bl	8014dd4 <_svfiprintf_r>
 8013844:	1c43      	adds	r3, r0, #1
 8013846:	bfbc      	itt	lt
 8013848:	238b      	movlt	r3, #139	; 0x8b
 801384a:	602b      	strlt	r3, [r5, #0]
 801384c:	2c00      	cmp	r4, #0
 801384e:	d0e3      	beq.n	8013818 <_vsniprintf_r+0x16>
 8013850:	9b00      	ldr	r3, [sp, #0]
 8013852:	2200      	movs	r2, #0
 8013854:	701a      	strb	r2, [r3, #0]
 8013856:	e7df      	b.n	8013818 <_vsniprintf_r+0x16>

08013858 <vsniprintf>:
 8013858:	b507      	push	{r0, r1, r2, lr}
 801385a:	9300      	str	r3, [sp, #0]
 801385c:	4613      	mov	r3, r2
 801385e:	460a      	mov	r2, r1
 8013860:	4601      	mov	r1, r0
 8013862:	4803      	ldr	r0, [pc, #12]	; (8013870 <vsniprintf+0x18>)
 8013864:	6800      	ldr	r0, [r0, #0]
 8013866:	f7ff ffcc 	bl	8013802 <_vsniprintf_r>
 801386a:	b003      	add	sp, #12
 801386c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013870:	20000368 	.word	0x20000368

08013874 <__swbuf_r>:
 8013874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013876:	460e      	mov	r6, r1
 8013878:	4614      	mov	r4, r2
 801387a:	4605      	mov	r5, r0
 801387c:	b118      	cbz	r0, 8013886 <__swbuf_r+0x12>
 801387e:	6a03      	ldr	r3, [r0, #32]
 8013880:	b90b      	cbnz	r3, 8013886 <__swbuf_r+0x12>
 8013882:	f7ff fee9 	bl	8013658 <__sinit>
 8013886:	69a3      	ldr	r3, [r4, #24]
 8013888:	60a3      	str	r3, [r4, #8]
 801388a:	89a3      	ldrh	r3, [r4, #12]
 801388c:	071a      	lsls	r2, r3, #28
 801388e:	d525      	bpl.n	80138dc <__swbuf_r+0x68>
 8013890:	6923      	ldr	r3, [r4, #16]
 8013892:	b31b      	cbz	r3, 80138dc <__swbuf_r+0x68>
 8013894:	6823      	ldr	r3, [r4, #0]
 8013896:	6922      	ldr	r2, [r4, #16]
 8013898:	1a98      	subs	r0, r3, r2
 801389a:	6963      	ldr	r3, [r4, #20]
 801389c:	b2f6      	uxtb	r6, r6
 801389e:	4283      	cmp	r3, r0
 80138a0:	4637      	mov	r7, r6
 80138a2:	dc04      	bgt.n	80138ae <__swbuf_r+0x3a>
 80138a4:	4621      	mov	r1, r4
 80138a6:	4628      	mov	r0, r5
 80138a8:	f001 fda8 	bl	80153fc <_fflush_r>
 80138ac:	b9e0      	cbnz	r0, 80138e8 <__swbuf_r+0x74>
 80138ae:	68a3      	ldr	r3, [r4, #8]
 80138b0:	3b01      	subs	r3, #1
 80138b2:	60a3      	str	r3, [r4, #8]
 80138b4:	6823      	ldr	r3, [r4, #0]
 80138b6:	1c5a      	adds	r2, r3, #1
 80138b8:	6022      	str	r2, [r4, #0]
 80138ba:	701e      	strb	r6, [r3, #0]
 80138bc:	6962      	ldr	r2, [r4, #20]
 80138be:	1c43      	adds	r3, r0, #1
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d004      	beq.n	80138ce <__swbuf_r+0x5a>
 80138c4:	89a3      	ldrh	r3, [r4, #12]
 80138c6:	07db      	lsls	r3, r3, #31
 80138c8:	d506      	bpl.n	80138d8 <__swbuf_r+0x64>
 80138ca:	2e0a      	cmp	r6, #10
 80138cc:	d104      	bne.n	80138d8 <__swbuf_r+0x64>
 80138ce:	4621      	mov	r1, r4
 80138d0:	4628      	mov	r0, r5
 80138d2:	f001 fd93 	bl	80153fc <_fflush_r>
 80138d6:	b938      	cbnz	r0, 80138e8 <__swbuf_r+0x74>
 80138d8:	4638      	mov	r0, r7
 80138da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138dc:	4621      	mov	r1, r4
 80138de:	4628      	mov	r0, r5
 80138e0:	f000 f806 	bl	80138f0 <__swsetup_r>
 80138e4:	2800      	cmp	r0, #0
 80138e6:	d0d5      	beq.n	8013894 <__swbuf_r+0x20>
 80138e8:	f04f 37ff 	mov.w	r7, #4294967295
 80138ec:	e7f4      	b.n	80138d8 <__swbuf_r+0x64>
	...

080138f0 <__swsetup_r>:
 80138f0:	b538      	push	{r3, r4, r5, lr}
 80138f2:	4b2a      	ldr	r3, [pc, #168]	; (801399c <__swsetup_r+0xac>)
 80138f4:	4605      	mov	r5, r0
 80138f6:	6818      	ldr	r0, [r3, #0]
 80138f8:	460c      	mov	r4, r1
 80138fa:	b118      	cbz	r0, 8013904 <__swsetup_r+0x14>
 80138fc:	6a03      	ldr	r3, [r0, #32]
 80138fe:	b90b      	cbnz	r3, 8013904 <__swsetup_r+0x14>
 8013900:	f7ff feaa 	bl	8013658 <__sinit>
 8013904:	89a3      	ldrh	r3, [r4, #12]
 8013906:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801390a:	0718      	lsls	r0, r3, #28
 801390c:	d422      	bmi.n	8013954 <__swsetup_r+0x64>
 801390e:	06d9      	lsls	r1, r3, #27
 8013910:	d407      	bmi.n	8013922 <__swsetup_r+0x32>
 8013912:	2309      	movs	r3, #9
 8013914:	602b      	str	r3, [r5, #0]
 8013916:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801391a:	81a3      	strh	r3, [r4, #12]
 801391c:	f04f 30ff 	mov.w	r0, #4294967295
 8013920:	e034      	b.n	801398c <__swsetup_r+0x9c>
 8013922:	0758      	lsls	r0, r3, #29
 8013924:	d512      	bpl.n	801394c <__swsetup_r+0x5c>
 8013926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013928:	b141      	cbz	r1, 801393c <__swsetup_r+0x4c>
 801392a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801392e:	4299      	cmp	r1, r3
 8013930:	d002      	beq.n	8013938 <__swsetup_r+0x48>
 8013932:	4628      	mov	r0, r5
 8013934:	f000 f8d8 	bl	8013ae8 <_free_r>
 8013938:	2300      	movs	r3, #0
 801393a:	6363      	str	r3, [r4, #52]	; 0x34
 801393c:	89a3      	ldrh	r3, [r4, #12]
 801393e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013942:	81a3      	strh	r3, [r4, #12]
 8013944:	2300      	movs	r3, #0
 8013946:	6063      	str	r3, [r4, #4]
 8013948:	6923      	ldr	r3, [r4, #16]
 801394a:	6023      	str	r3, [r4, #0]
 801394c:	89a3      	ldrh	r3, [r4, #12]
 801394e:	f043 0308 	orr.w	r3, r3, #8
 8013952:	81a3      	strh	r3, [r4, #12]
 8013954:	6923      	ldr	r3, [r4, #16]
 8013956:	b94b      	cbnz	r3, 801396c <__swsetup_r+0x7c>
 8013958:	89a3      	ldrh	r3, [r4, #12]
 801395a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801395e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013962:	d003      	beq.n	801396c <__swsetup_r+0x7c>
 8013964:	4621      	mov	r1, r4
 8013966:	4628      	mov	r0, r5
 8013968:	f001 fd96 	bl	8015498 <__smakebuf_r>
 801396c:	89a0      	ldrh	r0, [r4, #12]
 801396e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013972:	f010 0301 	ands.w	r3, r0, #1
 8013976:	d00a      	beq.n	801398e <__swsetup_r+0x9e>
 8013978:	2300      	movs	r3, #0
 801397a:	60a3      	str	r3, [r4, #8]
 801397c:	6963      	ldr	r3, [r4, #20]
 801397e:	425b      	negs	r3, r3
 8013980:	61a3      	str	r3, [r4, #24]
 8013982:	6923      	ldr	r3, [r4, #16]
 8013984:	b943      	cbnz	r3, 8013998 <__swsetup_r+0xa8>
 8013986:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801398a:	d1c4      	bne.n	8013916 <__swsetup_r+0x26>
 801398c:	bd38      	pop	{r3, r4, r5, pc}
 801398e:	0781      	lsls	r1, r0, #30
 8013990:	bf58      	it	pl
 8013992:	6963      	ldrpl	r3, [r4, #20]
 8013994:	60a3      	str	r3, [r4, #8]
 8013996:	e7f4      	b.n	8013982 <__swsetup_r+0x92>
 8013998:	2000      	movs	r0, #0
 801399a:	e7f7      	b.n	801398c <__swsetup_r+0x9c>
 801399c:	20000368 	.word	0x20000368

080139a0 <memset>:
 80139a0:	4402      	add	r2, r0
 80139a2:	4603      	mov	r3, r0
 80139a4:	4293      	cmp	r3, r2
 80139a6:	d100      	bne.n	80139aa <memset+0xa>
 80139a8:	4770      	bx	lr
 80139aa:	f803 1b01 	strb.w	r1, [r3], #1
 80139ae:	e7f9      	b.n	80139a4 <memset+0x4>

080139b0 <strncmp>:
 80139b0:	b510      	push	{r4, lr}
 80139b2:	b16a      	cbz	r2, 80139d0 <strncmp+0x20>
 80139b4:	3901      	subs	r1, #1
 80139b6:	1884      	adds	r4, r0, r2
 80139b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d103      	bne.n	80139cc <strncmp+0x1c>
 80139c4:	42a0      	cmp	r0, r4
 80139c6:	d001      	beq.n	80139cc <strncmp+0x1c>
 80139c8:	2a00      	cmp	r2, #0
 80139ca:	d1f5      	bne.n	80139b8 <strncmp+0x8>
 80139cc:	1ad0      	subs	r0, r2, r3
 80139ce:	bd10      	pop	{r4, pc}
 80139d0:	4610      	mov	r0, r2
 80139d2:	e7fc      	b.n	80139ce <strncmp+0x1e>

080139d4 <_close_r>:
 80139d4:	b538      	push	{r3, r4, r5, lr}
 80139d6:	4d06      	ldr	r5, [pc, #24]	; (80139f0 <_close_r+0x1c>)
 80139d8:	2300      	movs	r3, #0
 80139da:	4604      	mov	r4, r0
 80139dc:	4608      	mov	r0, r1
 80139de:	602b      	str	r3, [r5, #0]
 80139e0:	f7f1 fe0b 	bl	80055fa <_close>
 80139e4:	1c43      	adds	r3, r0, #1
 80139e6:	d102      	bne.n	80139ee <_close_r+0x1a>
 80139e8:	682b      	ldr	r3, [r5, #0]
 80139ea:	b103      	cbz	r3, 80139ee <_close_r+0x1a>
 80139ec:	6023      	str	r3, [r4, #0]
 80139ee:	bd38      	pop	{r3, r4, r5, pc}
 80139f0:	20000ea8 	.word	0x20000ea8

080139f4 <_lseek_r>:
 80139f4:	b538      	push	{r3, r4, r5, lr}
 80139f6:	4d07      	ldr	r5, [pc, #28]	; (8013a14 <_lseek_r+0x20>)
 80139f8:	4604      	mov	r4, r0
 80139fa:	4608      	mov	r0, r1
 80139fc:	4611      	mov	r1, r2
 80139fe:	2200      	movs	r2, #0
 8013a00:	602a      	str	r2, [r5, #0]
 8013a02:	461a      	mov	r2, r3
 8013a04:	f7f1 fe20 	bl	8005648 <_lseek>
 8013a08:	1c43      	adds	r3, r0, #1
 8013a0a:	d102      	bne.n	8013a12 <_lseek_r+0x1e>
 8013a0c:	682b      	ldr	r3, [r5, #0]
 8013a0e:	b103      	cbz	r3, 8013a12 <_lseek_r+0x1e>
 8013a10:	6023      	str	r3, [r4, #0]
 8013a12:	bd38      	pop	{r3, r4, r5, pc}
 8013a14:	20000ea8 	.word	0x20000ea8

08013a18 <_read_r>:
 8013a18:	b538      	push	{r3, r4, r5, lr}
 8013a1a:	4d07      	ldr	r5, [pc, #28]	; (8013a38 <_read_r+0x20>)
 8013a1c:	4604      	mov	r4, r0
 8013a1e:	4608      	mov	r0, r1
 8013a20:	4611      	mov	r1, r2
 8013a22:	2200      	movs	r2, #0
 8013a24:	602a      	str	r2, [r5, #0]
 8013a26:	461a      	mov	r2, r3
 8013a28:	f7f1 fdae 	bl	8005588 <_read>
 8013a2c:	1c43      	adds	r3, r0, #1
 8013a2e:	d102      	bne.n	8013a36 <_read_r+0x1e>
 8013a30:	682b      	ldr	r3, [r5, #0]
 8013a32:	b103      	cbz	r3, 8013a36 <_read_r+0x1e>
 8013a34:	6023      	str	r3, [r4, #0]
 8013a36:	bd38      	pop	{r3, r4, r5, pc}
 8013a38:	20000ea8 	.word	0x20000ea8

08013a3c <_write_r>:
 8013a3c:	b538      	push	{r3, r4, r5, lr}
 8013a3e:	4d07      	ldr	r5, [pc, #28]	; (8013a5c <_write_r+0x20>)
 8013a40:	4604      	mov	r4, r0
 8013a42:	4608      	mov	r0, r1
 8013a44:	4611      	mov	r1, r2
 8013a46:	2200      	movs	r2, #0
 8013a48:	602a      	str	r2, [r5, #0]
 8013a4a:	461a      	mov	r2, r3
 8013a4c:	f7f1 fdb9 	bl	80055c2 <_write>
 8013a50:	1c43      	adds	r3, r0, #1
 8013a52:	d102      	bne.n	8013a5a <_write_r+0x1e>
 8013a54:	682b      	ldr	r3, [r5, #0]
 8013a56:	b103      	cbz	r3, 8013a5a <_write_r+0x1e>
 8013a58:	6023      	str	r3, [r4, #0]
 8013a5a:	bd38      	pop	{r3, r4, r5, pc}
 8013a5c:	20000ea8 	.word	0x20000ea8

08013a60 <__errno>:
 8013a60:	4b01      	ldr	r3, [pc, #4]	; (8013a68 <__errno+0x8>)
 8013a62:	6818      	ldr	r0, [r3, #0]
 8013a64:	4770      	bx	lr
 8013a66:	bf00      	nop
 8013a68:	20000368 	.word	0x20000368

08013a6c <__libc_init_array>:
 8013a6c:	b570      	push	{r4, r5, r6, lr}
 8013a6e:	4d0d      	ldr	r5, [pc, #52]	; (8013aa4 <__libc_init_array+0x38>)
 8013a70:	4c0d      	ldr	r4, [pc, #52]	; (8013aa8 <__libc_init_array+0x3c>)
 8013a72:	1b64      	subs	r4, r4, r5
 8013a74:	10a4      	asrs	r4, r4, #2
 8013a76:	2600      	movs	r6, #0
 8013a78:	42a6      	cmp	r6, r4
 8013a7a:	d109      	bne.n	8013a90 <__libc_init_array+0x24>
 8013a7c:	4d0b      	ldr	r5, [pc, #44]	; (8013aac <__libc_init_array+0x40>)
 8013a7e:	4c0c      	ldr	r4, [pc, #48]	; (8013ab0 <__libc_init_array+0x44>)
 8013a80:	f004 fb0a 	bl	8018098 <_init>
 8013a84:	1b64      	subs	r4, r4, r5
 8013a86:	10a4      	asrs	r4, r4, #2
 8013a88:	2600      	movs	r6, #0
 8013a8a:	42a6      	cmp	r6, r4
 8013a8c:	d105      	bne.n	8013a9a <__libc_init_array+0x2e>
 8013a8e:	bd70      	pop	{r4, r5, r6, pc}
 8013a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a94:	4798      	blx	r3
 8013a96:	3601      	adds	r6, #1
 8013a98:	e7ee      	b.n	8013a78 <__libc_init_array+0xc>
 8013a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a9e:	4798      	blx	r3
 8013aa0:	3601      	adds	r6, #1
 8013aa2:	e7f2      	b.n	8013a8a <__libc_init_array+0x1e>
 8013aa4:	08019f28 	.word	0x08019f28
 8013aa8:	08019f28 	.word	0x08019f28
 8013aac:	08019f28 	.word	0x08019f28
 8013ab0:	08019f2c 	.word	0x08019f2c

08013ab4 <__retarget_lock_init_recursive>:
 8013ab4:	4770      	bx	lr

08013ab6 <__retarget_lock_acquire_recursive>:
 8013ab6:	4770      	bx	lr

08013ab8 <__retarget_lock_release_recursive>:
 8013ab8:	4770      	bx	lr

08013aba <memcpy>:
 8013aba:	440a      	add	r2, r1
 8013abc:	4291      	cmp	r1, r2
 8013abe:	f100 33ff 	add.w	r3, r0, #4294967295
 8013ac2:	d100      	bne.n	8013ac6 <memcpy+0xc>
 8013ac4:	4770      	bx	lr
 8013ac6:	b510      	push	{r4, lr}
 8013ac8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013acc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ad0:	4291      	cmp	r1, r2
 8013ad2:	d1f9      	bne.n	8013ac8 <memcpy+0xe>
 8013ad4:	bd10      	pop	{r4, pc}
	...

08013ad8 <nan>:
 8013ad8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013ae0 <nan+0x8>
 8013adc:	4770      	bx	lr
 8013ade:	bf00      	nop
 8013ae0:	00000000 	.word	0x00000000
 8013ae4:	7ff80000 	.word	0x7ff80000

08013ae8 <_free_r>:
 8013ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013aea:	2900      	cmp	r1, #0
 8013aec:	d044      	beq.n	8013b78 <_free_r+0x90>
 8013aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013af2:	9001      	str	r0, [sp, #4]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	f1a1 0404 	sub.w	r4, r1, #4
 8013afa:	bfb8      	it	lt
 8013afc:	18e4      	addlt	r4, r4, r3
 8013afe:	f000 fc49 	bl	8014394 <__malloc_lock>
 8013b02:	4a1e      	ldr	r2, [pc, #120]	; (8013b7c <_free_r+0x94>)
 8013b04:	9801      	ldr	r0, [sp, #4]
 8013b06:	6813      	ldr	r3, [r2, #0]
 8013b08:	b933      	cbnz	r3, 8013b18 <_free_r+0x30>
 8013b0a:	6063      	str	r3, [r4, #4]
 8013b0c:	6014      	str	r4, [r2, #0]
 8013b0e:	b003      	add	sp, #12
 8013b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b14:	f000 bc44 	b.w	80143a0 <__malloc_unlock>
 8013b18:	42a3      	cmp	r3, r4
 8013b1a:	d908      	bls.n	8013b2e <_free_r+0x46>
 8013b1c:	6825      	ldr	r5, [r4, #0]
 8013b1e:	1961      	adds	r1, r4, r5
 8013b20:	428b      	cmp	r3, r1
 8013b22:	bf01      	itttt	eq
 8013b24:	6819      	ldreq	r1, [r3, #0]
 8013b26:	685b      	ldreq	r3, [r3, #4]
 8013b28:	1949      	addeq	r1, r1, r5
 8013b2a:	6021      	streq	r1, [r4, #0]
 8013b2c:	e7ed      	b.n	8013b0a <_free_r+0x22>
 8013b2e:	461a      	mov	r2, r3
 8013b30:	685b      	ldr	r3, [r3, #4]
 8013b32:	b10b      	cbz	r3, 8013b38 <_free_r+0x50>
 8013b34:	42a3      	cmp	r3, r4
 8013b36:	d9fa      	bls.n	8013b2e <_free_r+0x46>
 8013b38:	6811      	ldr	r1, [r2, #0]
 8013b3a:	1855      	adds	r5, r2, r1
 8013b3c:	42a5      	cmp	r5, r4
 8013b3e:	d10b      	bne.n	8013b58 <_free_r+0x70>
 8013b40:	6824      	ldr	r4, [r4, #0]
 8013b42:	4421      	add	r1, r4
 8013b44:	1854      	adds	r4, r2, r1
 8013b46:	42a3      	cmp	r3, r4
 8013b48:	6011      	str	r1, [r2, #0]
 8013b4a:	d1e0      	bne.n	8013b0e <_free_r+0x26>
 8013b4c:	681c      	ldr	r4, [r3, #0]
 8013b4e:	685b      	ldr	r3, [r3, #4]
 8013b50:	6053      	str	r3, [r2, #4]
 8013b52:	440c      	add	r4, r1
 8013b54:	6014      	str	r4, [r2, #0]
 8013b56:	e7da      	b.n	8013b0e <_free_r+0x26>
 8013b58:	d902      	bls.n	8013b60 <_free_r+0x78>
 8013b5a:	230c      	movs	r3, #12
 8013b5c:	6003      	str	r3, [r0, #0]
 8013b5e:	e7d6      	b.n	8013b0e <_free_r+0x26>
 8013b60:	6825      	ldr	r5, [r4, #0]
 8013b62:	1961      	adds	r1, r4, r5
 8013b64:	428b      	cmp	r3, r1
 8013b66:	bf04      	itt	eq
 8013b68:	6819      	ldreq	r1, [r3, #0]
 8013b6a:	685b      	ldreq	r3, [r3, #4]
 8013b6c:	6063      	str	r3, [r4, #4]
 8013b6e:	bf04      	itt	eq
 8013b70:	1949      	addeq	r1, r1, r5
 8013b72:	6021      	streq	r1, [r4, #0]
 8013b74:	6054      	str	r4, [r2, #4]
 8013b76:	e7ca      	b.n	8013b0e <_free_r+0x26>
 8013b78:	b003      	add	sp, #12
 8013b7a:	bd30      	pop	{r4, r5, pc}
 8013b7c:	20000eb0 	.word	0x20000eb0

08013b80 <rshift>:
 8013b80:	6903      	ldr	r3, [r0, #16]
 8013b82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013b86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013b8e:	f100 0414 	add.w	r4, r0, #20
 8013b92:	dd45      	ble.n	8013c20 <rshift+0xa0>
 8013b94:	f011 011f 	ands.w	r1, r1, #31
 8013b98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013b9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013ba0:	d10c      	bne.n	8013bbc <rshift+0x3c>
 8013ba2:	f100 0710 	add.w	r7, r0, #16
 8013ba6:	4629      	mov	r1, r5
 8013ba8:	42b1      	cmp	r1, r6
 8013baa:	d334      	bcc.n	8013c16 <rshift+0x96>
 8013bac:	1a9b      	subs	r3, r3, r2
 8013bae:	009b      	lsls	r3, r3, #2
 8013bb0:	1eea      	subs	r2, r5, #3
 8013bb2:	4296      	cmp	r6, r2
 8013bb4:	bf38      	it	cc
 8013bb6:	2300      	movcc	r3, #0
 8013bb8:	4423      	add	r3, r4
 8013bba:	e015      	b.n	8013be8 <rshift+0x68>
 8013bbc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013bc0:	f1c1 0820 	rsb	r8, r1, #32
 8013bc4:	40cf      	lsrs	r7, r1
 8013bc6:	f105 0e04 	add.w	lr, r5, #4
 8013bca:	46a1      	mov	r9, r4
 8013bcc:	4576      	cmp	r6, lr
 8013bce:	46f4      	mov	ip, lr
 8013bd0:	d815      	bhi.n	8013bfe <rshift+0x7e>
 8013bd2:	1a9a      	subs	r2, r3, r2
 8013bd4:	0092      	lsls	r2, r2, #2
 8013bd6:	3a04      	subs	r2, #4
 8013bd8:	3501      	adds	r5, #1
 8013bda:	42ae      	cmp	r6, r5
 8013bdc:	bf38      	it	cc
 8013bde:	2200      	movcc	r2, #0
 8013be0:	18a3      	adds	r3, r4, r2
 8013be2:	50a7      	str	r7, [r4, r2]
 8013be4:	b107      	cbz	r7, 8013be8 <rshift+0x68>
 8013be6:	3304      	adds	r3, #4
 8013be8:	1b1a      	subs	r2, r3, r4
 8013bea:	42a3      	cmp	r3, r4
 8013bec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013bf0:	bf08      	it	eq
 8013bf2:	2300      	moveq	r3, #0
 8013bf4:	6102      	str	r2, [r0, #16]
 8013bf6:	bf08      	it	eq
 8013bf8:	6143      	streq	r3, [r0, #20]
 8013bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bfe:	f8dc c000 	ldr.w	ip, [ip]
 8013c02:	fa0c fc08 	lsl.w	ip, ip, r8
 8013c06:	ea4c 0707 	orr.w	r7, ip, r7
 8013c0a:	f849 7b04 	str.w	r7, [r9], #4
 8013c0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013c12:	40cf      	lsrs	r7, r1
 8013c14:	e7da      	b.n	8013bcc <rshift+0x4c>
 8013c16:	f851 cb04 	ldr.w	ip, [r1], #4
 8013c1a:	f847 cf04 	str.w	ip, [r7, #4]!
 8013c1e:	e7c3      	b.n	8013ba8 <rshift+0x28>
 8013c20:	4623      	mov	r3, r4
 8013c22:	e7e1      	b.n	8013be8 <rshift+0x68>

08013c24 <__hexdig_fun>:
 8013c24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013c28:	2b09      	cmp	r3, #9
 8013c2a:	d802      	bhi.n	8013c32 <__hexdig_fun+0xe>
 8013c2c:	3820      	subs	r0, #32
 8013c2e:	b2c0      	uxtb	r0, r0
 8013c30:	4770      	bx	lr
 8013c32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013c36:	2b05      	cmp	r3, #5
 8013c38:	d801      	bhi.n	8013c3e <__hexdig_fun+0x1a>
 8013c3a:	3847      	subs	r0, #71	; 0x47
 8013c3c:	e7f7      	b.n	8013c2e <__hexdig_fun+0xa>
 8013c3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013c42:	2b05      	cmp	r3, #5
 8013c44:	d801      	bhi.n	8013c4a <__hexdig_fun+0x26>
 8013c46:	3827      	subs	r0, #39	; 0x27
 8013c48:	e7f1      	b.n	8013c2e <__hexdig_fun+0xa>
 8013c4a:	2000      	movs	r0, #0
 8013c4c:	4770      	bx	lr
	...

08013c50 <__gethex>:
 8013c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c54:	4617      	mov	r7, r2
 8013c56:	680a      	ldr	r2, [r1, #0]
 8013c58:	b085      	sub	sp, #20
 8013c5a:	f102 0b02 	add.w	fp, r2, #2
 8013c5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013c62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013c66:	4681      	mov	r9, r0
 8013c68:	468a      	mov	sl, r1
 8013c6a:	9302      	str	r3, [sp, #8]
 8013c6c:	32fe      	adds	r2, #254	; 0xfe
 8013c6e:	eb02 030b 	add.w	r3, r2, fp
 8013c72:	46d8      	mov	r8, fp
 8013c74:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013c78:	9301      	str	r3, [sp, #4]
 8013c7a:	2830      	cmp	r0, #48	; 0x30
 8013c7c:	d0f7      	beq.n	8013c6e <__gethex+0x1e>
 8013c7e:	f7ff ffd1 	bl	8013c24 <__hexdig_fun>
 8013c82:	4604      	mov	r4, r0
 8013c84:	2800      	cmp	r0, #0
 8013c86:	d138      	bne.n	8013cfa <__gethex+0xaa>
 8013c88:	49a7      	ldr	r1, [pc, #668]	; (8013f28 <__gethex+0x2d8>)
 8013c8a:	2201      	movs	r2, #1
 8013c8c:	4640      	mov	r0, r8
 8013c8e:	f7ff fe8f 	bl	80139b0 <strncmp>
 8013c92:	4606      	mov	r6, r0
 8013c94:	2800      	cmp	r0, #0
 8013c96:	d169      	bne.n	8013d6c <__gethex+0x11c>
 8013c98:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013c9c:	465d      	mov	r5, fp
 8013c9e:	f7ff ffc1 	bl	8013c24 <__hexdig_fun>
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	d064      	beq.n	8013d70 <__gethex+0x120>
 8013ca6:	465a      	mov	r2, fp
 8013ca8:	7810      	ldrb	r0, [r2, #0]
 8013caa:	2830      	cmp	r0, #48	; 0x30
 8013cac:	4690      	mov	r8, r2
 8013cae:	f102 0201 	add.w	r2, r2, #1
 8013cb2:	d0f9      	beq.n	8013ca8 <__gethex+0x58>
 8013cb4:	f7ff ffb6 	bl	8013c24 <__hexdig_fun>
 8013cb8:	2301      	movs	r3, #1
 8013cba:	fab0 f480 	clz	r4, r0
 8013cbe:	0964      	lsrs	r4, r4, #5
 8013cc0:	465e      	mov	r6, fp
 8013cc2:	9301      	str	r3, [sp, #4]
 8013cc4:	4642      	mov	r2, r8
 8013cc6:	4615      	mov	r5, r2
 8013cc8:	3201      	adds	r2, #1
 8013cca:	7828      	ldrb	r0, [r5, #0]
 8013ccc:	f7ff ffaa 	bl	8013c24 <__hexdig_fun>
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d1f8      	bne.n	8013cc6 <__gethex+0x76>
 8013cd4:	4994      	ldr	r1, [pc, #592]	; (8013f28 <__gethex+0x2d8>)
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	4628      	mov	r0, r5
 8013cda:	f7ff fe69 	bl	80139b0 <strncmp>
 8013cde:	b978      	cbnz	r0, 8013d00 <__gethex+0xb0>
 8013ce0:	b946      	cbnz	r6, 8013cf4 <__gethex+0xa4>
 8013ce2:	1c6e      	adds	r6, r5, #1
 8013ce4:	4632      	mov	r2, r6
 8013ce6:	4615      	mov	r5, r2
 8013ce8:	3201      	adds	r2, #1
 8013cea:	7828      	ldrb	r0, [r5, #0]
 8013cec:	f7ff ff9a 	bl	8013c24 <__hexdig_fun>
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	d1f8      	bne.n	8013ce6 <__gethex+0x96>
 8013cf4:	1b73      	subs	r3, r6, r5
 8013cf6:	009e      	lsls	r6, r3, #2
 8013cf8:	e004      	b.n	8013d04 <__gethex+0xb4>
 8013cfa:	2400      	movs	r4, #0
 8013cfc:	4626      	mov	r6, r4
 8013cfe:	e7e1      	b.n	8013cc4 <__gethex+0x74>
 8013d00:	2e00      	cmp	r6, #0
 8013d02:	d1f7      	bne.n	8013cf4 <__gethex+0xa4>
 8013d04:	782b      	ldrb	r3, [r5, #0]
 8013d06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013d0a:	2b50      	cmp	r3, #80	; 0x50
 8013d0c:	d13d      	bne.n	8013d8a <__gethex+0x13a>
 8013d0e:	786b      	ldrb	r3, [r5, #1]
 8013d10:	2b2b      	cmp	r3, #43	; 0x2b
 8013d12:	d02f      	beq.n	8013d74 <__gethex+0x124>
 8013d14:	2b2d      	cmp	r3, #45	; 0x2d
 8013d16:	d031      	beq.n	8013d7c <__gethex+0x12c>
 8013d18:	1c69      	adds	r1, r5, #1
 8013d1a:	f04f 0b00 	mov.w	fp, #0
 8013d1e:	7808      	ldrb	r0, [r1, #0]
 8013d20:	f7ff ff80 	bl	8013c24 <__hexdig_fun>
 8013d24:	1e42      	subs	r2, r0, #1
 8013d26:	b2d2      	uxtb	r2, r2
 8013d28:	2a18      	cmp	r2, #24
 8013d2a:	d82e      	bhi.n	8013d8a <__gethex+0x13a>
 8013d2c:	f1a0 0210 	sub.w	r2, r0, #16
 8013d30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013d34:	f7ff ff76 	bl	8013c24 <__hexdig_fun>
 8013d38:	f100 3cff 	add.w	ip, r0, #4294967295
 8013d3c:	fa5f fc8c 	uxtb.w	ip, ip
 8013d40:	f1bc 0f18 	cmp.w	ip, #24
 8013d44:	d91d      	bls.n	8013d82 <__gethex+0x132>
 8013d46:	f1bb 0f00 	cmp.w	fp, #0
 8013d4a:	d000      	beq.n	8013d4e <__gethex+0xfe>
 8013d4c:	4252      	negs	r2, r2
 8013d4e:	4416      	add	r6, r2
 8013d50:	f8ca 1000 	str.w	r1, [sl]
 8013d54:	b1dc      	cbz	r4, 8013d8e <__gethex+0x13e>
 8013d56:	9b01      	ldr	r3, [sp, #4]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	bf14      	ite	ne
 8013d5c:	f04f 0800 	movne.w	r8, #0
 8013d60:	f04f 0806 	moveq.w	r8, #6
 8013d64:	4640      	mov	r0, r8
 8013d66:	b005      	add	sp, #20
 8013d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d6c:	4645      	mov	r5, r8
 8013d6e:	4626      	mov	r6, r4
 8013d70:	2401      	movs	r4, #1
 8013d72:	e7c7      	b.n	8013d04 <__gethex+0xb4>
 8013d74:	f04f 0b00 	mov.w	fp, #0
 8013d78:	1ca9      	adds	r1, r5, #2
 8013d7a:	e7d0      	b.n	8013d1e <__gethex+0xce>
 8013d7c:	f04f 0b01 	mov.w	fp, #1
 8013d80:	e7fa      	b.n	8013d78 <__gethex+0x128>
 8013d82:	230a      	movs	r3, #10
 8013d84:	fb03 0002 	mla	r0, r3, r2, r0
 8013d88:	e7d0      	b.n	8013d2c <__gethex+0xdc>
 8013d8a:	4629      	mov	r1, r5
 8013d8c:	e7e0      	b.n	8013d50 <__gethex+0x100>
 8013d8e:	eba5 0308 	sub.w	r3, r5, r8
 8013d92:	3b01      	subs	r3, #1
 8013d94:	4621      	mov	r1, r4
 8013d96:	2b07      	cmp	r3, #7
 8013d98:	dc0a      	bgt.n	8013db0 <__gethex+0x160>
 8013d9a:	4648      	mov	r0, r9
 8013d9c:	f000 fb06 	bl	80143ac <_Balloc>
 8013da0:	4604      	mov	r4, r0
 8013da2:	b940      	cbnz	r0, 8013db6 <__gethex+0x166>
 8013da4:	4b61      	ldr	r3, [pc, #388]	; (8013f2c <__gethex+0x2dc>)
 8013da6:	4602      	mov	r2, r0
 8013da8:	21e4      	movs	r1, #228	; 0xe4
 8013daa:	4861      	ldr	r0, [pc, #388]	; (8013f30 <__gethex+0x2e0>)
 8013dac:	f001 fbfc 	bl	80155a8 <__assert_func>
 8013db0:	3101      	adds	r1, #1
 8013db2:	105b      	asrs	r3, r3, #1
 8013db4:	e7ef      	b.n	8013d96 <__gethex+0x146>
 8013db6:	f100 0a14 	add.w	sl, r0, #20
 8013dba:	2300      	movs	r3, #0
 8013dbc:	495a      	ldr	r1, [pc, #360]	; (8013f28 <__gethex+0x2d8>)
 8013dbe:	f8cd a004 	str.w	sl, [sp, #4]
 8013dc2:	469b      	mov	fp, r3
 8013dc4:	45a8      	cmp	r8, r5
 8013dc6:	d342      	bcc.n	8013e4e <__gethex+0x1fe>
 8013dc8:	9801      	ldr	r0, [sp, #4]
 8013dca:	f840 bb04 	str.w	fp, [r0], #4
 8013dce:	eba0 000a 	sub.w	r0, r0, sl
 8013dd2:	1080      	asrs	r0, r0, #2
 8013dd4:	6120      	str	r0, [r4, #16]
 8013dd6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013dda:	4658      	mov	r0, fp
 8013ddc:	f000 fbd8 	bl	8014590 <__hi0bits>
 8013de0:	683d      	ldr	r5, [r7, #0]
 8013de2:	eba8 0000 	sub.w	r0, r8, r0
 8013de6:	42a8      	cmp	r0, r5
 8013de8:	dd59      	ble.n	8013e9e <__gethex+0x24e>
 8013dea:	eba0 0805 	sub.w	r8, r0, r5
 8013dee:	4641      	mov	r1, r8
 8013df0:	4620      	mov	r0, r4
 8013df2:	f000 ff67 	bl	8014cc4 <__any_on>
 8013df6:	4683      	mov	fp, r0
 8013df8:	b1b8      	cbz	r0, 8013e2a <__gethex+0x1da>
 8013dfa:	f108 33ff 	add.w	r3, r8, #4294967295
 8013dfe:	1159      	asrs	r1, r3, #5
 8013e00:	f003 021f 	and.w	r2, r3, #31
 8013e04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013e08:	f04f 0b01 	mov.w	fp, #1
 8013e0c:	fa0b f202 	lsl.w	r2, fp, r2
 8013e10:	420a      	tst	r2, r1
 8013e12:	d00a      	beq.n	8013e2a <__gethex+0x1da>
 8013e14:	455b      	cmp	r3, fp
 8013e16:	dd06      	ble.n	8013e26 <__gethex+0x1d6>
 8013e18:	f1a8 0102 	sub.w	r1, r8, #2
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	f000 ff51 	bl	8014cc4 <__any_on>
 8013e22:	2800      	cmp	r0, #0
 8013e24:	d138      	bne.n	8013e98 <__gethex+0x248>
 8013e26:	f04f 0b02 	mov.w	fp, #2
 8013e2a:	4641      	mov	r1, r8
 8013e2c:	4620      	mov	r0, r4
 8013e2e:	f7ff fea7 	bl	8013b80 <rshift>
 8013e32:	4446      	add	r6, r8
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	42b3      	cmp	r3, r6
 8013e38:	da41      	bge.n	8013ebe <__gethex+0x26e>
 8013e3a:	4621      	mov	r1, r4
 8013e3c:	4648      	mov	r0, r9
 8013e3e:	f000 faf5 	bl	801442c <_Bfree>
 8013e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013e44:	2300      	movs	r3, #0
 8013e46:	6013      	str	r3, [r2, #0]
 8013e48:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013e4c:	e78a      	b.n	8013d64 <__gethex+0x114>
 8013e4e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8013e52:	2a2e      	cmp	r2, #46	; 0x2e
 8013e54:	d014      	beq.n	8013e80 <__gethex+0x230>
 8013e56:	2b20      	cmp	r3, #32
 8013e58:	d106      	bne.n	8013e68 <__gethex+0x218>
 8013e5a:	9b01      	ldr	r3, [sp, #4]
 8013e5c:	f843 bb04 	str.w	fp, [r3], #4
 8013e60:	f04f 0b00 	mov.w	fp, #0
 8013e64:	9301      	str	r3, [sp, #4]
 8013e66:	465b      	mov	r3, fp
 8013e68:	7828      	ldrb	r0, [r5, #0]
 8013e6a:	9303      	str	r3, [sp, #12]
 8013e6c:	f7ff feda 	bl	8013c24 <__hexdig_fun>
 8013e70:	9b03      	ldr	r3, [sp, #12]
 8013e72:	f000 000f 	and.w	r0, r0, #15
 8013e76:	4098      	lsls	r0, r3
 8013e78:	ea4b 0b00 	orr.w	fp, fp, r0
 8013e7c:	3304      	adds	r3, #4
 8013e7e:	e7a1      	b.n	8013dc4 <__gethex+0x174>
 8013e80:	45a8      	cmp	r8, r5
 8013e82:	d8e8      	bhi.n	8013e56 <__gethex+0x206>
 8013e84:	2201      	movs	r2, #1
 8013e86:	4628      	mov	r0, r5
 8013e88:	9303      	str	r3, [sp, #12]
 8013e8a:	f7ff fd91 	bl	80139b0 <strncmp>
 8013e8e:	4926      	ldr	r1, [pc, #152]	; (8013f28 <__gethex+0x2d8>)
 8013e90:	9b03      	ldr	r3, [sp, #12]
 8013e92:	2800      	cmp	r0, #0
 8013e94:	d1df      	bne.n	8013e56 <__gethex+0x206>
 8013e96:	e795      	b.n	8013dc4 <__gethex+0x174>
 8013e98:	f04f 0b03 	mov.w	fp, #3
 8013e9c:	e7c5      	b.n	8013e2a <__gethex+0x1da>
 8013e9e:	da0b      	bge.n	8013eb8 <__gethex+0x268>
 8013ea0:	eba5 0800 	sub.w	r8, r5, r0
 8013ea4:	4621      	mov	r1, r4
 8013ea6:	4642      	mov	r2, r8
 8013ea8:	4648      	mov	r0, r9
 8013eaa:	f000 fcd9 	bl	8014860 <__lshift>
 8013eae:	eba6 0608 	sub.w	r6, r6, r8
 8013eb2:	4604      	mov	r4, r0
 8013eb4:	f100 0a14 	add.w	sl, r0, #20
 8013eb8:	f04f 0b00 	mov.w	fp, #0
 8013ebc:	e7ba      	b.n	8013e34 <__gethex+0x1e4>
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	42b3      	cmp	r3, r6
 8013ec2:	dd73      	ble.n	8013fac <__gethex+0x35c>
 8013ec4:	1b9e      	subs	r6, r3, r6
 8013ec6:	42b5      	cmp	r5, r6
 8013ec8:	dc34      	bgt.n	8013f34 <__gethex+0x2e4>
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	2b02      	cmp	r3, #2
 8013ece:	d023      	beq.n	8013f18 <__gethex+0x2c8>
 8013ed0:	2b03      	cmp	r3, #3
 8013ed2:	d025      	beq.n	8013f20 <__gethex+0x2d0>
 8013ed4:	2b01      	cmp	r3, #1
 8013ed6:	d115      	bne.n	8013f04 <__gethex+0x2b4>
 8013ed8:	42b5      	cmp	r5, r6
 8013eda:	d113      	bne.n	8013f04 <__gethex+0x2b4>
 8013edc:	2d01      	cmp	r5, #1
 8013ede:	d10b      	bne.n	8013ef8 <__gethex+0x2a8>
 8013ee0:	9a02      	ldr	r2, [sp, #8]
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6013      	str	r3, [r2, #0]
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	6123      	str	r3, [r4, #16]
 8013eea:	f8ca 3000 	str.w	r3, [sl]
 8013eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ef0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8013ef4:	601c      	str	r4, [r3, #0]
 8013ef6:	e735      	b.n	8013d64 <__gethex+0x114>
 8013ef8:	1e69      	subs	r1, r5, #1
 8013efa:	4620      	mov	r0, r4
 8013efc:	f000 fee2 	bl	8014cc4 <__any_on>
 8013f00:	2800      	cmp	r0, #0
 8013f02:	d1ed      	bne.n	8013ee0 <__gethex+0x290>
 8013f04:	4621      	mov	r1, r4
 8013f06:	4648      	mov	r0, r9
 8013f08:	f000 fa90 	bl	801442c <_Bfree>
 8013f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f0e:	2300      	movs	r3, #0
 8013f10:	6013      	str	r3, [r2, #0]
 8013f12:	f04f 0850 	mov.w	r8, #80	; 0x50
 8013f16:	e725      	b.n	8013d64 <__gethex+0x114>
 8013f18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d1f2      	bne.n	8013f04 <__gethex+0x2b4>
 8013f1e:	e7df      	b.n	8013ee0 <__gethex+0x290>
 8013f20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d1dc      	bne.n	8013ee0 <__gethex+0x290>
 8013f26:	e7ed      	b.n	8013f04 <__gethex+0x2b4>
 8013f28:	080198d6 	.word	0x080198d6
 8013f2c:	08019940 	.word	0x08019940
 8013f30:	08019951 	.word	0x08019951
 8013f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8013f38:	f1bb 0f00 	cmp.w	fp, #0
 8013f3c:	d133      	bne.n	8013fa6 <__gethex+0x356>
 8013f3e:	f1b8 0f00 	cmp.w	r8, #0
 8013f42:	d004      	beq.n	8013f4e <__gethex+0x2fe>
 8013f44:	4641      	mov	r1, r8
 8013f46:	4620      	mov	r0, r4
 8013f48:	f000 febc 	bl	8014cc4 <__any_on>
 8013f4c:	4683      	mov	fp, r0
 8013f4e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8013f52:	2301      	movs	r3, #1
 8013f54:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013f58:	f008 081f 	and.w	r8, r8, #31
 8013f5c:	fa03 f308 	lsl.w	r3, r3, r8
 8013f60:	4213      	tst	r3, r2
 8013f62:	4631      	mov	r1, r6
 8013f64:	4620      	mov	r0, r4
 8013f66:	bf18      	it	ne
 8013f68:	f04b 0b02 	orrne.w	fp, fp, #2
 8013f6c:	1bad      	subs	r5, r5, r6
 8013f6e:	f7ff fe07 	bl	8013b80 <rshift>
 8013f72:	687e      	ldr	r6, [r7, #4]
 8013f74:	f04f 0802 	mov.w	r8, #2
 8013f78:	f1bb 0f00 	cmp.w	fp, #0
 8013f7c:	d04a      	beq.n	8014014 <__gethex+0x3c4>
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	2b02      	cmp	r3, #2
 8013f82:	d016      	beq.n	8013fb2 <__gethex+0x362>
 8013f84:	2b03      	cmp	r3, #3
 8013f86:	d018      	beq.n	8013fba <__gethex+0x36a>
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d109      	bne.n	8013fa0 <__gethex+0x350>
 8013f8c:	f01b 0f02 	tst.w	fp, #2
 8013f90:	d006      	beq.n	8013fa0 <__gethex+0x350>
 8013f92:	f8da 3000 	ldr.w	r3, [sl]
 8013f96:	ea4b 0b03 	orr.w	fp, fp, r3
 8013f9a:	f01b 0f01 	tst.w	fp, #1
 8013f9e:	d10f      	bne.n	8013fc0 <__gethex+0x370>
 8013fa0:	f048 0810 	orr.w	r8, r8, #16
 8013fa4:	e036      	b.n	8014014 <__gethex+0x3c4>
 8013fa6:	f04f 0b01 	mov.w	fp, #1
 8013faa:	e7d0      	b.n	8013f4e <__gethex+0x2fe>
 8013fac:	f04f 0801 	mov.w	r8, #1
 8013fb0:	e7e2      	b.n	8013f78 <__gethex+0x328>
 8013fb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fb4:	f1c3 0301 	rsb	r3, r3, #1
 8013fb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8013fba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d0ef      	beq.n	8013fa0 <__gethex+0x350>
 8013fc0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013fc4:	f104 0214 	add.w	r2, r4, #20
 8013fc8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8013fcc:	9301      	str	r3, [sp, #4]
 8013fce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	4694      	mov	ip, r2
 8013fd6:	f852 1b04 	ldr.w	r1, [r2], #4
 8013fda:	f1b1 3fff 	cmp.w	r1, #4294967295
 8013fde:	d01e      	beq.n	801401e <__gethex+0x3ce>
 8013fe0:	3101      	adds	r1, #1
 8013fe2:	f8cc 1000 	str.w	r1, [ip]
 8013fe6:	f1b8 0f02 	cmp.w	r8, #2
 8013fea:	f104 0214 	add.w	r2, r4, #20
 8013fee:	d13d      	bne.n	801406c <__gethex+0x41c>
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	3b01      	subs	r3, #1
 8013ff4:	42ab      	cmp	r3, r5
 8013ff6:	d10b      	bne.n	8014010 <__gethex+0x3c0>
 8013ff8:	1169      	asrs	r1, r5, #5
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	f005 051f 	and.w	r5, r5, #31
 8014000:	fa03 f505 	lsl.w	r5, r3, r5
 8014004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014008:	421d      	tst	r5, r3
 801400a:	bf18      	it	ne
 801400c:	f04f 0801 	movne.w	r8, #1
 8014010:	f048 0820 	orr.w	r8, r8, #32
 8014014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014016:	601c      	str	r4, [r3, #0]
 8014018:	9b02      	ldr	r3, [sp, #8]
 801401a:	601e      	str	r6, [r3, #0]
 801401c:	e6a2      	b.n	8013d64 <__gethex+0x114>
 801401e:	4290      	cmp	r0, r2
 8014020:	f842 3c04 	str.w	r3, [r2, #-4]
 8014024:	d8d6      	bhi.n	8013fd4 <__gethex+0x384>
 8014026:	68a2      	ldr	r2, [r4, #8]
 8014028:	4593      	cmp	fp, r2
 801402a:	db17      	blt.n	801405c <__gethex+0x40c>
 801402c:	6861      	ldr	r1, [r4, #4]
 801402e:	4648      	mov	r0, r9
 8014030:	3101      	adds	r1, #1
 8014032:	f000 f9bb 	bl	80143ac <_Balloc>
 8014036:	4682      	mov	sl, r0
 8014038:	b918      	cbnz	r0, 8014042 <__gethex+0x3f2>
 801403a:	4b1b      	ldr	r3, [pc, #108]	; (80140a8 <__gethex+0x458>)
 801403c:	4602      	mov	r2, r0
 801403e:	2184      	movs	r1, #132	; 0x84
 8014040:	e6b3      	b.n	8013daa <__gethex+0x15a>
 8014042:	6922      	ldr	r2, [r4, #16]
 8014044:	3202      	adds	r2, #2
 8014046:	f104 010c 	add.w	r1, r4, #12
 801404a:	0092      	lsls	r2, r2, #2
 801404c:	300c      	adds	r0, #12
 801404e:	f7ff fd34 	bl	8013aba <memcpy>
 8014052:	4621      	mov	r1, r4
 8014054:	4648      	mov	r0, r9
 8014056:	f000 f9e9 	bl	801442c <_Bfree>
 801405a:	4654      	mov	r4, sl
 801405c:	6922      	ldr	r2, [r4, #16]
 801405e:	1c51      	adds	r1, r2, #1
 8014060:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014064:	6121      	str	r1, [r4, #16]
 8014066:	2101      	movs	r1, #1
 8014068:	6151      	str	r1, [r2, #20]
 801406a:	e7bc      	b.n	8013fe6 <__gethex+0x396>
 801406c:	6921      	ldr	r1, [r4, #16]
 801406e:	4559      	cmp	r1, fp
 8014070:	dd0b      	ble.n	801408a <__gethex+0x43a>
 8014072:	2101      	movs	r1, #1
 8014074:	4620      	mov	r0, r4
 8014076:	f7ff fd83 	bl	8013b80 <rshift>
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	3601      	adds	r6, #1
 801407e:	42b3      	cmp	r3, r6
 8014080:	f6ff aedb 	blt.w	8013e3a <__gethex+0x1ea>
 8014084:	f04f 0801 	mov.w	r8, #1
 8014088:	e7c2      	b.n	8014010 <__gethex+0x3c0>
 801408a:	f015 051f 	ands.w	r5, r5, #31
 801408e:	d0f9      	beq.n	8014084 <__gethex+0x434>
 8014090:	9b01      	ldr	r3, [sp, #4]
 8014092:	441a      	add	r2, r3
 8014094:	f1c5 0520 	rsb	r5, r5, #32
 8014098:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801409c:	f000 fa78 	bl	8014590 <__hi0bits>
 80140a0:	42a8      	cmp	r0, r5
 80140a2:	dbe6      	blt.n	8014072 <__gethex+0x422>
 80140a4:	e7ee      	b.n	8014084 <__gethex+0x434>
 80140a6:	bf00      	nop
 80140a8:	08019940 	.word	0x08019940

080140ac <L_shift>:
 80140ac:	f1c2 0208 	rsb	r2, r2, #8
 80140b0:	0092      	lsls	r2, r2, #2
 80140b2:	b570      	push	{r4, r5, r6, lr}
 80140b4:	f1c2 0620 	rsb	r6, r2, #32
 80140b8:	6843      	ldr	r3, [r0, #4]
 80140ba:	6804      	ldr	r4, [r0, #0]
 80140bc:	fa03 f506 	lsl.w	r5, r3, r6
 80140c0:	432c      	orrs	r4, r5
 80140c2:	40d3      	lsrs	r3, r2
 80140c4:	6004      	str	r4, [r0, #0]
 80140c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80140ca:	4288      	cmp	r0, r1
 80140cc:	d3f4      	bcc.n	80140b8 <L_shift+0xc>
 80140ce:	bd70      	pop	{r4, r5, r6, pc}

080140d0 <__match>:
 80140d0:	b530      	push	{r4, r5, lr}
 80140d2:	6803      	ldr	r3, [r0, #0]
 80140d4:	3301      	adds	r3, #1
 80140d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140da:	b914      	cbnz	r4, 80140e2 <__match+0x12>
 80140dc:	6003      	str	r3, [r0, #0]
 80140de:	2001      	movs	r0, #1
 80140e0:	bd30      	pop	{r4, r5, pc}
 80140e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80140ea:	2d19      	cmp	r5, #25
 80140ec:	bf98      	it	ls
 80140ee:	3220      	addls	r2, #32
 80140f0:	42a2      	cmp	r2, r4
 80140f2:	d0f0      	beq.n	80140d6 <__match+0x6>
 80140f4:	2000      	movs	r0, #0
 80140f6:	e7f3      	b.n	80140e0 <__match+0x10>

080140f8 <__hexnan>:
 80140f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140fc:	680b      	ldr	r3, [r1, #0]
 80140fe:	6801      	ldr	r1, [r0, #0]
 8014100:	115e      	asrs	r6, r3, #5
 8014102:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014106:	f013 031f 	ands.w	r3, r3, #31
 801410a:	b087      	sub	sp, #28
 801410c:	bf18      	it	ne
 801410e:	3604      	addne	r6, #4
 8014110:	2500      	movs	r5, #0
 8014112:	1f37      	subs	r7, r6, #4
 8014114:	4682      	mov	sl, r0
 8014116:	4690      	mov	r8, r2
 8014118:	9301      	str	r3, [sp, #4]
 801411a:	f846 5c04 	str.w	r5, [r6, #-4]
 801411e:	46b9      	mov	r9, r7
 8014120:	463c      	mov	r4, r7
 8014122:	9502      	str	r5, [sp, #8]
 8014124:	46ab      	mov	fp, r5
 8014126:	784a      	ldrb	r2, [r1, #1]
 8014128:	1c4b      	adds	r3, r1, #1
 801412a:	9303      	str	r3, [sp, #12]
 801412c:	b342      	cbz	r2, 8014180 <__hexnan+0x88>
 801412e:	4610      	mov	r0, r2
 8014130:	9105      	str	r1, [sp, #20]
 8014132:	9204      	str	r2, [sp, #16]
 8014134:	f7ff fd76 	bl	8013c24 <__hexdig_fun>
 8014138:	2800      	cmp	r0, #0
 801413a:	d14f      	bne.n	80141dc <__hexnan+0xe4>
 801413c:	9a04      	ldr	r2, [sp, #16]
 801413e:	9905      	ldr	r1, [sp, #20]
 8014140:	2a20      	cmp	r2, #32
 8014142:	d818      	bhi.n	8014176 <__hexnan+0x7e>
 8014144:	9b02      	ldr	r3, [sp, #8]
 8014146:	459b      	cmp	fp, r3
 8014148:	dd13      	ble.n	8014172 <__hexnan+0x7a>
 801414a:	454c      	cmp	r4, r9
 801414c:	d206      	bcs.n	801415c <__hexnan+0x64>
 801414e:	2d07      	cmp	r5, #7
 8014150:	dc04      	bgt.n	801415c <__hexnan+0x64>
 8014152:	462a      	mov	r2, r5
 8014154:	4649      	mov	r1, r9
 8014156:	4620      	mov	r0, r4
 8014158:	f7ff ffa8 	bl	80140ac <L_shift>
 801415c:	4544      	cmp	r4, r8
 801415e:	d950      	bls.n	8014202 <__hexnan+0x10a>
 8014160:	2300      	movs	r3, #0
 8014162:	f1a4 0904 	sub.w	r9, r4, #4
 8014166:	f844 3c04 	str.w	r3, [r4, #-4]
 801416a:	f8cd b008 	str.w	fp, [sp, #8]
 801416e:	464c      	mov	r4, r9
 8014170:	461d      	mov	r5, r3
 8014172:	9903      	ldr	r1, [sp, #12]
 8014174:	e7d7      	b.n	8014126 <__hexnan+0x2e>
 8014176:	2a29      	cmp	r2, #41	; 0x29
 8014178:	d155      	bne.n	8014226 <__hexnan+0x12e>
 801417a:	3102      	adds	r1, #2
 801417c:	f8ca 1000 	str.w	r1, [sl]
 8014180:	f1bb 0f00 	cmp.w	fp, #0
 8014184:	d04f      	beq.n	8014226 <__hexnan+0x12e>
 8014186:	454c      	cmp	r4, r9
 8014188:	d206      	bcs.n	8014198 <__hexnan+0xa0>
 801418a:	2d07      	cmp	r5, #7
 801418c:	dc04      	bgt.n	8014198 <__hexnan+0xa0>
 801418e:	462a      	mov	r2, r5
 8014190:	4649      	mov	r1, r9
 8014192:	4620      	mov	r0, r4
 8014194:	f7ff ff8a 	bl	80140ac <L_shift>
 8014198:	4544      	cmp	r4, r8
 801419a:	d934      	bls.n	8014206 <__hexnan+0x10e>
 801419c:	f1a8 0204 	sub.w	r2, r8, #4
 80141a0:	4623      	mov	r3, r4
 80141a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80141a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80141aa:	429f      	cmp	r7, r3
 80141ac:	d2f9      	bcs.n	80141a2 <__hexnan+0xaa>
 80141ae:	1b3b      	subs	r3, r7, r4
 80141b0:	f023 0303 	bic.w	r3, r3, #3
 80141b4:	3304      	adds	r3, #4
 80141b6:	3e03      	subs	r6, #3
 80141b8:	3401      	adds	r4, #1
 80141ba:	42a6      	cmp	r6, r4
 80141bc:	bf38      	it	cc
 80141be:	2304      	movcc	r3, #4
 80141c0:	4443      	add	r3, r8
 80141c2:	2200      	movs	r2, #0
 80141c4:	f843 2b04 	str.w	r2, [r3], #4
 80141c8:	429f      	cmp	r7, r3
 80141ca:	d2fb      	bcs.n	80141c4 <__hexnan+0xcc>
 80141cc:	683b      	ldr	r3, [r7, #0]
 80141ce:	b91b      	cbnz	r3, 80141d8 <__hexnan+0xe0>
 80141d0:	4547      	cmp	r7, r8
 80141d2:	d126      	bne.n	8014222 <__hexnan+0x12a>
 80141d4:	2301      	movs	r3, #1
 80141d6:	603b      	str	r3, [r7, #0]
 80141d8:	2005      	movs	r0, #5
 80141da:	e025      	b.n	8014228 <__hexnan+0x130>
 80141dc:	3501      	adds	r5, #1
 80141de:	2d08      	cmp	r5, #8
 80141e0:	f10b 0b01 	add.w	fp, fp, #1
 80141e4:	dd06      	ble.n	80141f4 <__hexnan+0xfc>
 80141e6:	4544      	cmp	r4, r8
 80141e8:	d9c3      	bls.n	8014172 <__hexnan+0x7a>
 80141ea:	2300      	movs	r3, #0
 80141ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80141f0:	2501      	movs	r5, #1
 80141f2:	3c04      	subs	r4, #4
 80141f4:	6822      	ldr	r2, [r4, #0]
 80141f6:	f000 000f 	and.w	r0, r0, #15
 80141fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80141fe:	6020      	str	r0, [r4, #0]
 8014200:	e7b7      	b.n	8014172 <__hexnan+0x7a>
 8014202:	2508      	movs	r5, #8
 8014204:	e7b5      	b.n	8014172 <__hexnan+0x7a>
 8014206:	9b01      	ldr	r3, [sp, #4]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d0df      	beq.n	80141cc <__hexnan+0xd4>
 801420c:	f1c3 0320 	rsb	r3, r3, #32
 8014210:	f04f 32ff 	mov.w	r2, #4294967295
 8014214:	40da      	lsrs	r2, r3
 8014216:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801421a:	4013      	ands	r3, r2
 801421c:	f846 3c04 	str.w	r3, [r6, #-4]
 8014220:	e7d4      	b.n	80141cc <__hexnan+0xd4>
 8014222:	3f04      	subs	r7, #4
 8014224:	e7d2      	b.n	80141cc <__hexnan+0xd4>
 8014226:	2004      	movs	r0, #4
 8014228:	b007      	add	sp, #28
 801422a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014230 <sbrk_aligned>:
 8014230:	b570      	push	{r4, r5, r6, lr}
 8014232:	4e0e      	ldr	r6, [pc, #56]	; (801426c <sbrk_aligned+0x3c>)
 8014234:	460c      	mov	r4, r1
 8014236:	6831      	ldr	r1, [r6, #0]
 8014238:	4605      	mov	r5, r0
 801423a:	b911      	cbnz	r1, 8014242 <sbrk_aligned+0x12>
 801423c:	f001 f9a4 	bl	8015588 <_sbrk_r>
 8014240:	6030      	str	r0, [r6, #0]
 8014242:	4621      	mov	r1, r4
 8014244:	4628      	mov	r0, r5
 8014246:	f001 f99f 	bl	8015588 <_sbrk_r>
 801424a:	1c43      	adds	r3, r0, #1
 801424c:	d00a      	beq.n	8014264 <sbrk_aligned+0x34>
 801424e:	1cc4      	adds	r4, r0, #3
 8014250:	f024 0403 	bic.w	r4, r4, #3
 8014254:	42a0      	cmp	r0, r4
 8014256:	d007      	beq.n	8014268 <sbrk_aligned+0x38>
 8014258:	1a21      	subs	r1, r4, r0
 801425a:	4628      	mov	r0, r5
 801425c:	f001 f994 	bl	8015588 <_sbrk_r>
 8014260:	3001      	adds	r0, #1
 8014262:	d101      	bne.n	8014268 <sbrk_aligned+0x38>
 8014264:	f04f 34ff 	mov.w	r4, #4294967295
 8014268:	4620      	mov	r0, r4
 801426a:	bd70      	pop	{r4, r5, r6, pc}
 801426c:	20000eb4 	.word	0x20000eb4

08014270 <_malloc_r>:
 8014270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014274:	1ccd      	adds	r5, r1, #3
 8014276:	f025 0503 	bic.w	r5, r5, #3
 801427a:	3508      	adds	r5, #8
 801427c:	2d0c      	cmp	r5, #12
 801427e:	bf38      	it	cc
 8014280:	250c      	movcc	r5, #12
 8014282:	2d00      	cmp	r5, #0
 8014284:	4607      	mov	r7, r0
 8014286:	db01      	blt.n	801428c <_malloc_r+0x1c>
 8014288:	42a9      	cmp	r1, r5
 801428a:	d905      	bls.n	8014298 <_malloc_r+0x28>
 801428c:	230c      	movs	r3, #12
 801428e:	603b      	str	r3, [r7, #0]
 8014290:	2600      	movs	r6, #0
 8014292:	4630      	mov	r0, r6
 8014294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014298:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801436c <_malloc_r+0xfc>
 801429c:	f000 f87a 	bl	8014394 <__malloc_lock>
 80142a0:	f8d8 3000 	ldr.w	r3, [r8]
 80142a4:	461c      	mov	r4, r3
 80142a6:	bb5c      	cbnz	r4, 8014300 <_malloc_r+0x90>
 80142a8:	4629      	mov	r1, r5
 80142aa:	4638      	mov	r0, r7
 80142ac:	f7ff ffc0 	bl	8014230 <sbrk_aligned>
 80142b0:	1c43      	adds	r3, r0, #1
 80142b2:	4604      	mov	r4, r0
 80142b4:	d155      	bne.n	8014362 <_malloc_r+0xf2>
 80142b6:	f8d8 4000 	ldr.w	r4, [r8]
 80142ba:	4626      	mov	r6, r4
 80142bc:	2e00      	cmp	r6, #0
 80142be:	d145      	bne.n	801434c <_malloc_r+0xdc>
 80142c0:	2c00      	cmp	r4, #0
 80142c2:	d048      	beq.n	8014356 <_malloc_r+0xe6>
 80142c4:	6823      	ldr	r3, [r4, #0]
 80142c6:	4631      	mov	r1, r6
 80142c8:	4638      	mov	r0, r7
 80142ca:	eb04 0903 	add.w	r9, r4, r3
 80142ce:	f001 f95b 	bl	8015588 <_sbrk_r>
 80142d2:	4581      	cmp	r9, r0
 80142d4:	d13f      	bne.n	8014356 <_malloc_r+0xe6>
 80142d6:	6821      	ldr	r1, [r4, #0]
 80142d8:	1a6d      	subs	r5, r5, r1
 80142da:	4629      	mov	r1, r5
 80142dc:	4638      	mov	r0, r7
 80142de:	f7ff ffa7 	bl	8014230 <sbrk_aligned>
 80142e2:	3001      	adds	r0, #1
 80142e4:	d037      	beq.n	8014356 <_malloc_r+0xe6>
 80142e6:	6823      	ldr	r3, [r4, #0]
 80142e8:	442b      	add	r3, r5
 80142ea:	6023      	str	r3, [r4, #0]
 80142ec:	f8d8 3000 	ldr.w	r3, [r8]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d038      	beq.n	8014366 <_malloc_r+0xf6>
 80142f4:	685a      	ldr	r2, [r3, #4]
 80142f6:	42a2      	cmp	r2, r4
 80142f8:	d12b      	bne.n	8014352 <_malloc_r+0xe2>
 80142fa:	2200      	movs	r2, #0
 80142fc:	605a      	str	r2, [r3, #4]
 80142fe:	e00f      	b.n	8014320 <_malloc_r+0xb0>
 8014300:	6822      	ldr	r2, [r4, #0]
 8014302:	1b52      	subs	r2, r2, r5
 8014304:	d41f      	bmi.n	8014346 <_malloc_r+0xd6>
 8014306:	2a0b      	cmp	r2, #11
 8014308:	d917      	bls.n	801433a <_malloc_r+0xca>
 801430a:	1961      	adds	r1, r4, r5
 801430c:	42a3      	cmp	r3, r4
 801430e:	6025      	str	r5, [r4, #0]
 8014310:	bf18      	it	ne
 8014312:	6059      	strne	r1, [r3, #4]
 8014314:	6863      	ldr	r3, [r4, #4]
 8014316:	bf08      	it	eq
 8014318:	f8c8 1000 	streq.w	r1, [r8]
 801431c:	5162      	str	r2, [r4, r5]
 801431e:	604b      	str	r3, [r1, #4]
 8014320:	4638      	mov	r0, r7
 8014322:	f104 060b 	add.w	r6, r4, #11
 8014326:	f000 f83b 	bl	80143a0 <__malloc_unlock>
 801432a:	f026 0607 	bic.w	r6, r6, #7
 801432e:	1d23      	adds	r3, r4, #4
 8014330:	1af2      	subs	r2, r6, r3
 8014332:	d0ae      	beq.n	8014292 <_malloc_r+0x22>
 8014334:	1b9b      	subs	r3, r3, r6
 8014336:	50a3      	str	r3, [r4, r2]
 8014338:	e7ab      	b.n	8014292 <_malloc_r+0x22>
 801433a:	42a3      	cmp	r3, r4
 801433c:	6862      	ldr	r2, [r4, #4]
 801433e:	d1dd      	bne.n	80142fc <_malloc_r+0x8c>
 8014340:	f8c8 2000 	str.w	r2, [r8]
 8014344:	e7ec      	b.n	8014320 <_malloc_r+0xb0>
 8014346:	4623      	mov	r3, r4
 8014348:	6864      	ldr	r4, [r4, #4]
 801434a:	e7ac      	b.n	80142a6 <_malloc_r+0x36>
 801434c:	4634      	mov	r4, r6
 801434e:	6876      	ldr	r6, [r6, #4]
 8014350:	e7b4      	b.n	80142bc <_malloc_r+0x4c>
 8014352:	4613      	mov	r3, r2
 8014354:	e7cc      	b.n	80142f0 <_malloc_r+0x80>
 8014356:	230c      	movs	r3, #12
 8014358:	603b      	str	r3, [r7, #0]
 801435a:	4638      	mov	r0, r7
 801435c:	f000 f820 	bl	80143a0 <__malloc_unlock>
 8014360:	e797      	b.n	8014292 <_malloc_r+0x22>
 8014362:	6025      	str	r5, [r4, #0]
 8014364:	e7dc      	b.n	8014320 <_malloc_r+0xb0>
 8014366:	605b      	str	r3, [r3, #4]
 8014368:	deff      	udf	#255	; 0xff
 801436a:	bf00      	nop
 801436c:	20000eb0 	.word	0x20000eb0

08014370 <__ascii_mbtowc>:
 8014370:	b082      	sub	sp, #8
 8014372:	b901      	cbnz	r1, 8014376 <__ascii_mbtowc+0x6>
 8014374:	a901      	add	r1, sp, #4
 8014376:	b142      	cbz	r2, 801438a <__ascii_mbtowc+0x1a>
 8014378:	b14b      	cbz	r3, 801438e <__ascii_mbtowc+0x1e>
 801437a:	7813      	ldrb	r3, [r2, #0]
 801437c:	600b      	str	r3, [r1, #0]
 801437e:	7812      	ldrb	r2, [r2, #0]
 8014380:	1e10      	subs	r0, r2, #0
 8014382:	bf18      	it	ne
 8014384:	2001      	movne	r0, #1
 8014386:	b002      	add	sp, #8
 8014388:	4770      	bx	lr
 801438a:	4610      	mov	r0, r2
 801438c:	e7fb      	b.n	8014386 <__ascii_mbtowc+0x16>
 801438e:	f06f 0001 	mvn.w	r0, #1
 8014392:	e7f8      	b.n	8014386 <__ascii_mbtowc+0x16>

08014394 <__malloc_lock>:
 8014394:	4801      	ldr	r0, [pc, #4]	; (801439c <__malloc_lock+0x8>)
 8014396:	f7ff bb8e 	b.w	8013ab6 <__retarget_lock_acquire_recursive>
 801439a:	bf00      	nop
 801439c:	20000eac 	.word	0x20000eac

080143a0 <__malloc_unlock>:
 80143a0:	4801      	ldr	r0, [pc, #4]	; (80143a8 <__malloc_unlock+0x8>)
 80143a2:	f7ff bb89 	b.w	8013ab8 <__retarget_lock_release_recursive>
 80143a6:	bf00      	nop
 80143a8:	20000eac 	.word	0x20000eac

080143ac <_Balloc>:
 80143ac:	b570      	push	{r4, r5, r6, lr}
 80143ae:	69c6      	ldr	r6, [r0, #28]
 80143b0:	4604      	mov	r4, r0
 80143b2:	460d      	mov	r5, r1
 80143b4:	b976      	cbnz	r6, 80143d4 <_Balloc+0x28>
 80143b6:	2010      	movs	r0, #16
 80143b8:	f001 f92a 	bl	8015610 <malloc>
 80143bc:	4602      	mov	r2, r0
 80143be:	61e0      	str	r0, [r4, #28]
 80143c0:	b920      	cbnz	r0, 80143cc <_Balloc+0x20>
 80143c2:	4b18      	ldr	r3, [pc, #96]	; (8014424 <_Balloc+0x78>)
 80143c4:	4818      	ldr	r0, [pc, #96]	; (8014428 <_Balloc+0x7c>)
 80143c6:	216b      	movs	r1, #107	; 0x6b
 80143c8:	f001 f8ee 	bl	80155a8 <__assert_func>
 80143cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80143d0:	6006      	str	r6, [r0, #0]
 80143d2:	60c6      	str	r6, [r0, #12]
 80143d4:	69e6      	ldr	r6, [r4, #28]
 80143d6:	68f3      	ldr	r3, [r6, #12]
 80143d8:	b183      	cbz	r3, 80143fc <_Balloc+0x50>
 80143da:	69e3      	ldr	r3, [r4, #28]
 80143dc:	68db      	ldr	r3, [r3, #12]
 80143de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80143e2:	b9b8      	cbnz	r0, 8014414 <_Balloc+0x68>
 80143e4:	2101      	movs	r1, #1
 80143e6:	fa01 f605 	lsl.w	r6, r1, r5
 80143ea:	1d72      	adds	r2, r6, #5
 80143ec:	0092      	lsls	r2, r2, #2
 80143ee:	4620      	mov	r0, r4
 80143f0:	f001 f8f8 	bl	80155e4 <_calloc_r>
 80143f4:	b160      	cbz	r0, 8014410 <_Balloc+0x64>
 80143f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80143fa:	e00e      	b.n	801441a <_Balloc+0x6e>
 80143fc:	2221      	movs	r2, #33	; 0x21
 80143fe:	2104      	movs	r1, #4
 8014400:	4620      	mov	r0, r4
 8014402:	f001 f8ef 	bl	80155e4 <_calloc_r>
 8014406:	69e3      	ldr	r3, [r4, #28]
 8014408:	60f0      	str	r0, [r6, #12]
 801440a:	68db      	ldr	r3, [r3, #12]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d1e4      	bne.n	80143da <_Balloc+0x2e>
 8014410:	2000      	movs	r0, #0
 8014412:	bd70      	pop	{r4, r5, r6, pc}
 8014414:	6802      	ldr	r2, [r0, #0]
 8014416:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801441a:	2300      	movs	r3, #0
 801441c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014420:	e7f7      	b.n	8014412 <_Balloc+0x66>
 8014422:	bf00      	nop
 8014424:	080199b1 	.word	0x080199b1
 8014428:	080199c8 	.word	0x080199c8

0801442c <_Bfree>:
 801442c:	b570      	push	{r4, r5, r6, lr}
 801442e:	69c6      	ldr	r6, [r0, #28]
 8014430:	4605      	mov	r5, r0
 8014432:	460c      	mov	r4, r1
 8014434:	b976      	cbnz	r6, 8014454 <_Bfree+0x28>
 8014436:	2010      	movs	r0, #16
 8014438:	f001 f8ea 	bl	8015610 <malloc>
 801443c:	4602      	mov	r2, r0
 801443e:	61e8      	str	r0, [r5, #28]
 8014440:	b920      	cbnz	r0, 801444c <_Bfree+0x20>
 8014442:	4b09      	ldr	r3, [pc, #36]	; (8014468 <_Bfree+0x3c>)
 8014444:	4809      	ldr	r0, [pc, #36]	; (801446c <_Bfree+0x40>)
 8014446:	218f      	movs	r1, #143	; 0x8f
 8014448:	f001 f8ae 	bl	80155a8 <__assert_func>
 801444c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014450:	6006      	str	r6, [r0, #0]
 8014452:	60c6      	str	r6, [r0, #12]
 8014454:	b13c      	cbz	r4, 8014466 <_Bfree+0x3a>
 8014456:	69eb      	ldr	r3, [r5, #28]
 8014458:	6862      	ldr	r2, [r4, #4]
 801445a:	68db      	ldr	r3, [r3, #12]
 801445c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014460:	6021      	str	r1, [r4, #0]
 8014462:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014466:	bd70      	pop	{r4, r5, r6, pc}
 8014468:	080199b1 	.word	0x080199b1
 801446c:	080199c8 	.word	0x080199c8

08014470 <__multadd>:
 8014470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014474:	690d      	ldr	r5, [r1, #16]
 8014476:	4607      	mov	r7, r0
 8014478:	460c      	mov	r4, r1
 801447a:	461e      	mov	r6, r3
 801447c:	f101 0c14 	add.w	ip, r1, #20
 8014480:	2000      	movs	r0, #0
 8014482:	f8dc 3000 	ldr.w	r3, [ip]
 8014486:	b299      	uxth	r1, r3
 8014488:	fb02 6101 	mla	r1, r2, r1, r6
 801448c:	0c1e      	lsrs	r6, r3, #16
 801448e:	0c0b      	lsrs	r3, r1, #16
 8014490:	fb02 3306 	mla	r3, r2, r6, r3
 8014494:	b289      	uxth	r1, r1
 8014496:	3001      	adds	r0, #1
 8014498:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801449c:	4285      	cmp	r5, r0
 801449e:	f84c 1b04 	str.w	r1, [ip], #4
 80144a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80144a6:	dcec      	bgt.n	8014482 <__multadd+0x12>
 80144a8:	b30e      	cbz	r6, 80144ee <__multadd+0x7e>
 80144aa:	68a3      	ldr	r3, [r4, #8]
 80144ac:	42ab      	cmp	r3, r5
 80144ae:	dc19      	bgt.n	80144e4 <__multadd+0x74>
 80144b0:	6861      	ldr	r1, [r4, #4]
 80144b2:	4638      	mov	r0, r7
 80144b4:	3101      	adds	r1, #1
 80144b6:	f7ff ff79 	bl	80143ac <_Balloc>
 80144ba:	4680      	mov	r8, r0
 80144bc:	b928      	cbnz	r0, 80144ca <__multadd+0x5a>
 80144be:	4602      	mov	r2, r0
 80144c0:	4b0c      	ldr	r3, [pc, #48]	; (80144f4 <__multadd+0x84>)
 80144c2:	480d      	ldr	r0, [pc, #52]	; (80144f8 <__multadd+0x88>)
 80144c4:	21ba      	movs	r1, #186	; 0xba
 80144c6:	f001 f86f 	bl	80155a8 <__assert_func>
 80144ca:	6922      	ldr	r2, [r4, #16]
 80144cc:	3202      	adds	r2, #2
 80144ce:	f104 010c 	add.w	r1, r4, #12
 80144d2:	0092      	lsls	r2, r2, #2
 80144d4:	300c      	adds	r0, #12
 80144d6:	f7ff faf0 	bl	8013aba <memcpy>
 80144da:	4621      	mov	r1, r4
 80144dc:	4638      	mov	r0, r7
 80144de:	f7ff ffa5 	bl	801442c <_Bfree>
 80144e2:	4644      	mov	r4, r8
 80144e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80144e8:	3501      	adds	r5, #1
 80144ea:	615e      	str	r6, [r3, #20]
 80144ec:	6125      	str	r5, [r4, #16]
 80144ee:	4620      	mov	r0, r4
 80144f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144f4:	08019940 	.word	0x08019940
 80144f8:	080199c8 	.word	0x080199c8

080144fc <__s2b>:
 80144fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014500:	460c      	mov	r4, r1
 8014502:	4615      	mov	r5, r2
 8014504:	461f      	mov	r7, r3
 8014506:	2209      	movs	r2, #9
 8014508:	3308      	adds	r3, #8
 801450a:	4606      	mov	r6, r0
 801450c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014510:	2100      	movs	r1, #0
 8014512:	2201      	movs	r2, #1
 8014514:	429a      	cmp	r2, r3
 8014516:	db09      	blt.n	801452c <__s2b+0x30>
 8014518:	4630      	mov	r0, r6
 801451a:	f7ff ff47 	bl	80143ac <_Balloc>
 801451e:	b940      	cbnz	r0, 8014532 <__s2b+0x36>
 8014520:	4602      	mov	r2, r0
 8014522:	4b19      	ldr	r3, [pc, #100]	; (8014588 <__s2b+0x8c>)
 8014524:	4819      	ldr	r0, [pc, #100]	; (801458c <__s2b+0x90>)
 8014526:	21d3      	movs	r1, #211	; 0xd3
 8014528:	f001 f83e 	bl	80155a8 <__assert_func>
 801452c:	0052      	lsls	r2, r2, #1
 801452e:	3101      	adds	r1, #1
 8014530:	e7f0      	b.n	8014514 <__s2b+0x18>
 8014532:	9b08      	ldr	r3, [sp, #32]
 8014534:	6143      	str	r3, [r0, #20]
 8014536:	2d09      	cmp	r5, #9
 8014538:	f04f 0301 	mov.w	r3, #1
 801453c:	6103      	str	r3, [r0, #16]
 801453e:	dd16      	ble.n	801456e <__s2b+0x72>
 8014540:	f104 0909 	add.w	r9, r4, #9
 8014544:	46c8      	mov	r8, r9
 8014546:	442c      	add	r4, r5
 8014548:	f818 3b01 	ldrb.w	r3, [r8], #1
 801454c:	4601      	mov	r1, r0
 801454e:	3b30      	subs	r3, #48	; 0x30
 8014550:	220a      	movs	r2, #10
 8014552:	4630      	mov	r0, r6
 8014554:	f7ff ff8c 	bl	8014470 <__multadd>
 8014558:	45a0      	cmp	r8, r4
 801455a:	d1f5      	bne.n	8014548 <__s2b+0x4c>
 801455c:	f1a5 0408 	sub.w	r4, r5, #8
 8014560:	444c      	add	r4, r9
 8014562:	1b2d      	subs	r5, r5, r4
 8014564:	1963      	adds	r3, r4, r5
 8014566:	42bb      	cmp	r3, r7
 8014568:	db04      	blt.n	8014574 <__s2b+0x78>
 801456a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801456e:	340a      	adds	r4, #10
 8014570:	2509      	movs	r5, #9
 8014572:	e7f6      	b.n	8014562 <__s2b+0x66>
 8014574:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014578:	4601      	mov	r1, r0
 801457a:	3b30      	subs	r3, #48	; 0x30
 801457c:	220a      	movs	r2, #10
 801457e:	4630      	mov	r0, r6
 8014580:	f7ff ff76 	bl	8014470 <__multadd>
 8014584:	e7ee      	b.n	8014564 <__s2b+0x68>
 8014586:	bf00      	nop
 8014588:	08019940 	.word	0x08019940
 801458c:	080199c8 	.word	0x080199c8

08014590 <__hi0bits>:
 8014590:	0c03      	lsrs	r3, r0, #16
 8014592:	041b      	lsls	r3, r3, #16
 8014594:	b9d3      	cbnz	r3, 80145cc <__hi0bits+0x3c>
 8014596:	0400      	lsls	r0, r0, #16
 8014598:	2310      	movs	r3, #16
 801459a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801459e:	bf04      	itt	eq
 80145a0:	0200      	lsleq	r0, r0, #8
 80145a2:	3308      	addeq	r3, #8
 80145a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80145a8:	bf04      	itt	eq
 80145aa:	0100      	lsleq	r0, r0, #4
 80145ac:	3304      	addeq	r3, #4
 80145ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80145b2:	bf04      	itt	eq
 80145b4:	0080      	lsleq	r0, r0, #2
 80145b6:	3302      	addeq	r3, #2
 80145b8:	2800      	cmp	r0, #0
 80145ba:	db05      	blt.n	80145c8 <__hi0bits+0x38>
 80145bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80145c0:	f103 0301 	add.w	r3, r3, #1
 80145c4:	bf08      	it	eq
 80145c6:	2320      	moveq	r3, #32
 80145c8:	4618      	mov	r0, r3
 80145ca:	4770      	bx	lr
 80145cc:	2300      	movs	r3, #0
 80145ce:	e7e4      	b.n	801459a <__hi0bits+0xa>

080145d0 <__lo0bits>:
 80145d0:	6803      	ldr	r3, [r0, #0]
 80145d2:	f013 0207 	ands.w	r2, r3, #7
 80145d6:	d00c      	beq.n	80145f2 <__lo0bits+0x22>
 80145d8:	07d9      	lsls	r1, r3, #31
 80145da:	d422      	bmi.n	8014622 <__lo0bits+0x52>
 80145dc:	079a      	lsls	r2, r3, #30
 80145de:	bf49      	itett	mi
 80145e0:	085b      	lsrmi	r3, r3, #1
 80145e2:	089b      	lsrpl	r3, r3, #2
 80145e4:	6003      	strmi	r3, [r0, #0]
 80145e6:	2201      	movmi	r2, #1
 80145e8:	bf5c      	itt	pl
 80145ea:	6003      	strpl	r3, [r0, #0]
 80145ec:	2202      	movpl	r2, #2
 80145ee:	4610      	mov	r0, r2
 80145f0:	4770      	bx	lr
 80145f2:	b299      	uxth	r1, r3
 80145f4:	b909      	cbnz	r1, 80145fa <__lo0bits+0x2a>
 80145f6:	0c1b      	lsrs	r3, r3, #16
 80145f8:	2210      	movs	r2, #16
 80145fa:	b2d9      	uxtb	r1, r3
 80145fc:	b909      	cbnz	r1, 8014602 <__lo0bits+0x32>
 80145fe:	3208      	adds	r2, #8
 8014600:	0a1b      	lsrs	r3, r3, #8
 8014602:	0719      	lsls	r1, r3, #28
 8014604:	bf04      	itt	eq
 8014606:	091b      	lsreq	r3, r3, #4
 8014608:	3204      	addeq	r2, #4
 801460a:	0799      	lsls	r1, r3, #30
 801460c:	bf04      	itt	eq
 801460e:	089b      	lsreq	r3, r3, #2
 8014610:	3202      	addeq	r2, #2
 8014612:	07d9      	lsls	r1, r3, #31
 8014614:	d403      	bmi.n	801461e <__lo0bits+0x4e>
 8014616:	085b      	lsrs	r3, r3, #1
 8014618:	f102 0201 	add.w	r2, r2, #1
 801461c:	d003      	beq.n	8014626 <__lo0bits+0x56>
 801461e:	6003      	str	r3, [r0, #0]
 8014620:	e7e5      	b.n	80145ee <__lo0bits+0x1e>
 8014622:	2200      	movs	r2, #0
 8014624:	e7e3      	b.n	80145ee <__lo0bits+0x1e>
 8014626:	2220      	movs	r2, #32
 8014628:	e7e1      	b.n	80145ee <__lo0bits+0x1e>
	...

0801462c <__i2b>:
 801462c:	b510      	push	{r4, lr}
 801462e:	460c      	mov	r4, r1
 8014630:	2101      	movs	r1, #1
 8014632:	f7ff febb 	bl	80143ac <_Balloc>
 8014636:	4602      	mov	r2, r0
 8014638:	b928      	cbnz	r0, 8014646 <__i2b+0x1a>
 801463a:	4b05      	ldr	r3, [pc, #20]	; (8014650 <__i2b+0x24>)
 801463c:	4805      	ldr	r0, [pc, #20]	; (8014654 <__i2b+0x28>)
 801463e:	f240 1145 	movw	r1, #325	; 0x145
 8014642:	f000 ffb1 	bl	80155a8 <__assert_func>
 8014646:	2301      	movs	r3, #1
 8014648:	6144      	str	r4, [r0, #20]
 801464a:	6103      	str	r3, [r0, #16]
 801464c:	bd10      	pop	{r4, pc}
 801464e:	bf00      	nop
 8014650:	08019940 	.word	0x08019940
 8014654:	080199c8 	.word	0x080199c8

08014658 <__multiply>:
 8014658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801465c:	4691      	mov	r9, r2
 801465e:	690a      	ldr	r2, [r1, #16]
 8014660:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014664:	429a      	cmp	r2, r3
 8014666:	bfb8      	it	lt
 8014668:	460b      	movlt	r3, r1
 801466a:	460c      	mov	r4, r1
 801466c:	bfbc      	itt	lt
 801466e:	464c      	movlt	r4, r9
 8014670:	4699      	movlt	r9, r3
 8014672:	6927      	ldr	r7, [r4, #16]
 8014674:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014678:	68a3      	ldr	r3, [r4, #8]
 801467a:	6861      	ldr	r1, [r4, #4]
 801467c:	eb07 060a 	add.w	r6, r7, sl
 8014680:	42b3      	cmp	r3, r6
 8014682:	b085      	sub	sp, #20
 8014684:	bfb8      	it	lt
 8014686:	3101      	addlt	r1, #1
 8014688:	f7ff fe90 	bl	80143ac <_Balloc>
 801468c:	b930      	cbnz	r0, 801469c <__multiply+0x44>
 801468e:	4602      	mov	r2, r0
 8014690:	4b44      	ldr	r3, [pc, #272]	; (80147a4 <__multiply+0x14c>)
 8014692:	4845      	ldr	r0, [pc, #276]	; (80147a8 <__multiply+0x150>)
 8014694:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014698:	f000 ff86 	bl	80155a8 <__assert_func>
 801469c:	f100 0514 	add.w	r5, r0, #20
 80146a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80146a4:	462b      	mov	r3, r5
 80146a6:	2200      	movs	r2, #0
 80146a8:	4543      	cmp	r3, r8
 80146aa:	d321      	bcc.n	80146f0 <__multiply+0x98>
 80146ac:	f104 0314 	add.w	r3, r4, #20
 80146b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80146b4:	f109 0314 	add.w	r3, r9, #20
 80146b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80146bc:	9202      	str	r2, [sp, #8]
 80146be:	1b3a      	subs	r2, r7, r4
 80146c0:	3a15      	subs	r2, #21
 80146c2:	f022 0203 	bic.w	r2, r2, #3
 80146c6:	3204      	adds	r2, #4
 80146c8:	f104 0115 	add.w	r1, r4, #21
 80146cc:	428f      	cmp	r7, r1
 80146ce:	bf38      	it	cc
 80146d0:	2204      	movcc	r2, #4
 80146d2:	9201      	str	r2, [sp, #4]
 80146d4:	9a02      	ldr	r2, [sp, #8]
 80146d6:	9303      	str	r3, [sp, #12]
 80146d8:	429a      	cmp	r2, r3
 80146da:	d80c      	bhi.n	80146f6 <__multiply+0x9e>
 80146dc:	2e00      	cmp	r6, #0
 80146de:	dd03      	ble.n	80146e8 <__multiply+0x90>
 80146e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d05b      	beq.n	80147a0 <__multiply+0x148>
 80146e8:	6106      	str	r6, [r0, #16]
 80146ea:	b005      	add	sp, #20
 80146ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146f0:	f843 2b04 	str.w	r2, [r3], #4
 80146f4:	e7d8      	b.n	80146a8 <__multiply+0x50>
 80146f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80146fa:	f1ba 0f00 	cmp.w	sl, #0
 80146fe:	d024      	beq.n	801474a <__multiply+0xf2>
 8014700:	f104 0e14 	add.w	lr, r4, #20
 8014704:	46a9      	mov	r9, r5
 8014706:	f04f 0c00 	mov.w	ip, #0
 801470a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801470e:	f8d9 1000 	ldr.w	r1, [r9]
 8014712:	fa1f fb82 	uxth.w	fp, r2
 8014716:	b289      	uxth	r1, r1
 8014718:	fb0a 110b 	mla	r1, sl, fp, r1
 801471c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014720:	f8d9 2000 	ldr.w	r2, [r9]
 8014724:	4461      	add	r1, ip
 8014726:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801472a:	fb0a c20b 	mla	r2, sl, fp, ip
 801472e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014732:	b289      	uxth	r1, r1
 8014734:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014738:	4577      	cmp	r7, lr
 801473a:	f849 1b04 	str.w	r1, [r9], #4
 801473e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014742:	d8e2      	bhi.n	801470a <__multiply+0xb2>
 8014744:	9a01      	ldr	r2, [sp, #4]
 8014746:	f845 c002 	str.w	ip, [r5, r2]
 801474a:	9a03      	ldr	r2, [sp, #12]
 801474c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014750:	3304      	adds	r3, #4
 8014752:	f1b9 0f00 	cmp.w	r9, #0
 8014756:	d021      	beq.n	801479c <__multiply+0x144>
 8014758:	6829      	ldr	r1, [r5, #0]
 801475a:	f104 0c14 	add.w	ip, r4, #20
 801475e:	46ae      	mov	lr, r5
 8014760:	f04f 0a00 	mov.w	sl, #0
 8014764:	f8bc b000 	ldrh.w	fp, [ip]
 8014768:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801476c:	fb09 220b 	mla	r2, r9, fp, r2
 8014770:	4452      	add	r2, sl
 8014772:	b289      	uxth	r1, r1
 8014774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014778:	f84e 1b04 	str.w	r1, [lr], #4
 801477c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014780:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014784:	f8be 1000 	ldrh.w	r1, [lr]
 8014788:	fb09 110a 	mla	r1, r9, sl, r1
 801478c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014790:	4567      	cmp	r7, ip
 8014792:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014796:	d8e5      	bhi.n	8014764 <__multiply+0x10c>
 8014798:	9a01      	ldr	r2, [sp, #4]
 801479a:	50a9      	str	r1, [r5, r2]
 801479c:	3504      	adds	r5, #4
 801479e:	e799      	b.n	80146d4 <__multiply+0x7c>
 80147a0:	3e01      	subs	r6, #1
 80147a2:	e79b      	b.n	80146dc <__multiply+0x84>
 80147a4:	08019940 	.word	0x08019940
 80147a8:	080199c8 	.word	0x080199c8

080147ac <__pow5mult>:
 80147ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147b0:	4615      	mov	r5, r2
 80147b2:	f012 0203 	ands.w	r2, r2, #3
 80147b6:	4606      	mov	r6, r0
 80147b8:	460f      	mov	r7, r1
 80147ba:	d007      	beq.n	80147cc <__pow5mult+0x20>
 80147bc:	4c25      	ldr	r4, [pc, #148]	; (8014854 <__pow5mult+0xa8>)
 80147be:	3a01      	subs	r2, #1
 80147c0:	2300      	movs	r3, #0
 80147c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80147c6:	f7ff fe53 	bl	8014470 <__multadd>
 80147ca:	4607      	mov	r7, r0
 80147cc:	10ad      	asrs	r5, r5, #2
 80147ce:	d03d      	beq.n	801484c <__pow5mult+0xa0>
 80147d0:	69f4      	ldr	r4, [r6, #28]
 80147d2:	b97c      	cbnz	r4, 80147f4 <__pow5mult+0x48>
 80147d4:	2010      	movs	r0, #16
 80147d6:	f000 ff1b 	bl	8015610 <malloc>
 80147da:	4602      	mov	r2, r0
 80147dc:	61f0      	str	r0, [r6, #28]
 80147de:	b928      	cbnz	r0, 80147ec <__pow5mult+0x40>
 80147e0:	4b1d      	ldr	r3, [pc, #116]	; (8014858 <__pow5mult+0xac>)
 80147e2:	481e      	ldr	r0, [pc, #120]	; (801485c <__pow5mult+0xb0>)
 80147e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80147e8:	f000 fede 	bl	80155a8 <__assert_func>
 80147ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80147f0:	6004      	str	r4, [r0, #0]
 80147f2:	60c4      	str	r4, [r0, #12]
 80147f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80147f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80147fc:	b94c      	cbnz	r4, 8014812 <__pow5mult+0x66>
 80147fe:	f240 2171 	movw	r1, #625	; 0x271
 8014802:	4630      	mov	r0, r6
 8014804:	f7ff ff12 	bl	801462c <__i2b>
 8014808:	2300      	movs	r3, #0
 801480a:	f8c8 0008 	str.w	r0, [r8, #8]
 801480e:	4604      	mov	r4, r0
 8014810:	6003      	str	r3, [r0, #0]
 8014812:	f04f 0900 	mov.w	r9, #0
 8014816:	07eb      	lsls	r3, r5, #31
 8014818:	d50a      	bpl.n	8014830 <__pow5mult+0x84>
 801481a:	4639      	mov	r1, r7
 801481c:	4622      	mov	r2, r4
 801481e:	4630      	mov	r0, r6
 8014820:	f7ff ff1a 	bl	8014658 <__multiply>
 8014824:	4639      	mov	r1, r7
 8014826:	4680      	mov	r8, r0
 8014828:	4630      	mov	r0, r6
 801482a:	f7ff fdff 	bl	801442c <_Bfree>
 801482e:	4647      	mov	r7, r8
 8014830:	106d      	asrs	r5, r5, #1
 8014832:	d00b      	beq.n	801484c <__pow5mult+0xa0>
 8014834:	6820      	ldr	r0, [r4, #0]
 8014836:	b938      	cbnz	r0, 8014848 <__pow5mult+0x9c>
 8014838:	4622      	mov	r2, r4
 801483a:	4621      	mov	r1, r4
 801483c:	4630      	mov	r0, r6
 801483e:	f7ff ff0b 	bl	8014658 <__multiply>
 8014842:	6020      	str	r0, [r4, #0]
 8014844:	f8c0 9000 	str.w	r9, [r0]
 8014848:	4604      	mov	r4, r0
 801484a:	e7e4      	b.n	8014816 <__pow5mult+0x6a>
 801484c:	4638      	mov	r0, r7
 801484e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014852:	bf00      	nop
 8014854:	08019b18 	.word	0x08019b18
 8014858:	080199b1 	.word	0x080199b1
 801485c:	080199c8 	.word	0x080199c8

08014860 <__lshift>:
 8014860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014864:	460c      	mov	r4, r1
 8014866:	6849      	ldr	r1, [r1, #4]
 8014868:	6923      	ldr	r3, [r4, #16]
 801486a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801486e:	68a3      	ldr	r3, [r4, #8]
 8014870:	4607      	mov	r7, r0
 8014872:	4691      	mov	r9, r2
 8014874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014878:	f108 0601 	add.w	r6, r8, #1
 801487c:	42b3      	cmp	r3, r6
 801487e:	db0b      	blt.n	8014898 <__lshift+0x38>
 8014880:	4638      	mov	r0, r7
 8014882:	f7ff fd93 	bl	80143ac <_Balloc>
 8014886:	4605      	mov	r5, r0
 8014888:	b948      	cbnz	r0, 801489e <__lshift+0x3e>
 801488a:	4602      	mov	r2, r0
 801488c:	4b28      	ldr	r3, [pc, #160]	; (8014930 <__lshift+0xd0>)
 801488e:	4829      	ldr	r0, [pc, #164]	; (8014934 <__lshift+0xd4>)
 8014890:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014894:	f000 fe88 	bl	80155a8 <__assert_func>
 8014898:	3101      	adds	r1, #1
 801489a:	005b      	lsls	r3, r3, #1
 801489c:	e7ee      	b.n	801487c <__lshift+0x1c>
 801489e:	2300      	movs	r3, #0
 80148a0:	f100 0114 	add.w	r1, r0, #20
 80148a4:	f100 0210 	add.w	r2, r0, #16
 80148a8:	4618      	mov	r0, r3
 80148aa:	4553      	cmp	r3, sl
 80148ac:	db33      	blt.n	8014916 <__lshift+0xb6>
 80148ae:	6920      	ldr	r0, [r4, #16]
 80148b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80148b4:	f104 0314 	add.w	r3, r4, #20
 80148b8:	f019 091f 	ands.w	r9, r9, #31
 80148bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80148c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80148c4:	d02b      	beq.n	801491e <__lshift+0xbe>
 80148c6:	f1c9 0e20 	rsb	lr, r9, #32
 80148ca:	468a      	mov	sl, r1
 80148cc:	2200      	movs	r2, #0
 80148ce:	6818      	ldr	r0, [r3, #0]
 80148d0:	fa00 f009 	lsl.w	r0, r0, r9
 80148d4:	4310      	orrs	r0, r2
 80148d6:	f84a 0b04 	str.w	r0, [sl], #4
 80148da:	f853 2b04 	ldr.w	r2, [r3], #4
 80148de:	459c      	cmp	ip, r3
 80148e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80148e4:	d8f3      	bhi.n	80148ce <__lshift+0x6e>
 80148e6:	ebac 0304 	sub.w	r3, ip, r4
 80148ea:	3b15      	subs	r3, #21
 80148ec:	f023 0303 	bic.w	r3, r3, #3
 80148f0:	3304      	adds	r3, #4
 80148f2:	f104 0015 	add.w	r0, r4, #21
 80148f6:	4584      	cmp	ip, r0
 80148f8:	bf38      	it	cc
 80148fa:	2304      	movcc	r3, #4
 80148fc:	50ca      	str	r2, [r1, r3]
 80148fe:	b10a      	cbz	r2, 8014904 <__lshift+0xa4>
 8014900:	f108 0602 	add.w	r6, r8, #2
 8014904:	3e01      	subs	r6, #1
 8014906:	4638      	mov	r0, r7
 8014908:	612e      	str	r6, [r5, #16]
 801490a:	4621      	mov	r1, r4
 801490c:	f7ff fd8e 	bl	801442c <_Bfree>
 8014910:	4628      	mov	r0, r5
 8014912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014916:	f842 0f04 	str.w	r0, [r2, #4]!
 801491a:	3301      	adds	r3, #1
 801491c:	e7c5      	b.n	80148aa <__lshift+0x4a>
 801491e:	3904      	subs	r1, #4
 8014920:	f853 2b04 	ldr.w	r2, [r3], #4
 8014924:	f841 2f04 	str.w	r2, [r1, #4]!
 8014928:	459c      	cmp	ip, r3
 801492a:	d8f9      	bhi.n	8014920 <__lshift+0xc0>
 801492c:	e7ea      	b.n	8014904 <__lshift+0xa4>
 801492e:	bf00      	nop
 8014930:	08019940 	.word	0x08019940
 8014934:	080199c8 	.word	0x080199c8

08014938 <__mcmp>:
 8014938:	b530      	push	{r4, r5, lr}
 801493a:	6902      	ldr	r2, [r0, #16]
 801493c:	690c      	ldr	r4, [r1, #16]
 801493e:	1b12      	subs	r2, r2, r4
 8014940:	d10e      	bne.n	8014960 <__mcmp+0x28>
 8014942:	f100 0314 	add.w	r3, r0, #20
 8014946:	3114      	adds	r1, #20
 8014948:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801494c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014950:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014954:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014958:	42a5      	cmp	r5, r4
 801495a:	d003      	beq.n	8014964 <__mcmp+0x2c>
 801495c:	d305      	bcc.n	801496a <__mcmp+0x32>
 801495e:	2201      	movs	r2, #1
 8014960:	4610      	mov	r0, r2
 8014962:	bd30      	pop	{r4, r5, pc}
 8014964:	4283      	cmp	r3, r0
 8014966:	d3f3      	bcc.n	8014950 <__mcmp+0x18>
 8014968:	e7fa      	b.n	8014960 <__mcmp+0x28>
 801496a:	f04f 32ff 	mov.w	r2, #4294967295
 801496e:	e7f7      	b.n	8014960 <__mcmp+0x28>

08014970 <__mdiff>:
 8014970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014974:	460c      	mov	r4, r1
 8014976:	4606      	mov	r6, r0
 8014978:	4611      	mov	r1, r2
 801497a:	4620      	mov	r0, r4
 801497c:	4690      	mov	r8, r2
 801497e:	f7ff ffdb 	bl	8014938 <__mcmp>
 8014982:	1e05      	subs	r5, r0, #0
 8014984:	d110      	bne.n	80149a8 <__mdiff+0x38>
 8014986:	4629      	mov	r1, r5
 8014988:	4630      	mov	r0, r6
 801498a:	f7ff fd0f 	bl	80143ac <_Balloc>
 801498e:	b930      	cbnz	r0, 801499e <__mdiff+0x2e>
 8014990:	4b3a      	ldr	r3, [pc, #232]	; (8014a7c <__mdiff+0x10c>)
 8014992:	4602      	mov	r2, r0
 8014994:	f240 2137 	movw	r1, #567	; 0x237
 8014998:	4839      	ldr	r0, [pc, #228]	; (8014a80 <__mdiff+0x110>)
 801499a:	f000 fe05 	bl	80155a8 <__assert_func>
 801499e:	2301      	movs	r3, #1
 80149a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80149a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149a8:	bfa4      	itt	ge
 80149aa:	4643      	movge	r3, r8
 80149ac:	46a0      	movge	r8, r4
 80149ae:	4630      	mov	r0, r6
 80149b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80149b4:	bfa6      	itte	ge
 80149b6:	461c      	movge	r4, r3
 80149b8:	2500      	movge	r5, #0
 80149ba:	2501      	movlt	r5, #1
 80149bc:	f7ff fcf6 	bl	80143ac <_Balloc>
 80149c0:	b920      	cbnz	r0, 80149cc <__mdiff+0x5c>
 80149c2:	4b2e      	ldr	r3, [pc, #184]	; (8014a7c <__mdiff+0x10c>)
 80149c4:	4602      	mov	r2, r0
 80149c6:	f240 2145 	movw	r1, #581	; 0x245
 80149ca:	e7e5      	b.n	8014998 <__mdiff+0x28>
 80149cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80149d0:	6926      	ldr	r6, [r4, #16]
 80149d2:	60c5      	str	r5, [r0, #12]
 80149d4:	f104 0914 	add.w	r9, r4, #20
 80149d8:	f108 0514 	add.w	r5, r8, #20
 80149dc:	f100 0e14 	add.w	lr, r0, #20
 80149e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80149e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80149e8:	f108 0210 	add.w	r2, r8, #16
 80149ec:	46f2      	mov	sl, lr
 80149ee:	2100      	movs	r1, #0
 80149f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80149f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80149f8:	fa11 f88b 	uxtah	r8, r1, fp
 80149fc:	b299      	uxth	r1, r3
 80149fe:	0c1b      	lsrs	r3, r3, #16
 8014a00:	eba8 0801 	sub.w	r8, r8, r1
 8014a04:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014a08:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014a0c:	fa1f f888 	uxth.w	r8, r8
 8014a10:	1419      	asrs	r1, r3, #16
 8014a12:	454e      	cmp	r6, r9
 8014a14:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014a18:	f84a 3b04 	str.w	r3, [sl], #4
 8014a1c:	d8e8      	bhi.n	80149f0 <__mdiff+0x80>
 8014a1e:	1b33      	subs	r3, r6, r4
 8014a20:	3b15      	subs	r3, #21
 8014a22:	f023 0303 	bic.w	r3, r3, #3
 8014a26:	3304      	adds	r3, #4
 8014a28:	3415      	adds	r4, #21
 8014a2a:	42a6      	cmp	r6, r4
 8014a2c:	bf38      	it	cc
 8014a2e:	2304      	movcc	r3, #4
 8014a30:	441d      	add	r5, r3
 8014a32:	4473      	add	r3, lr
 8014a34:	469e      	mov	lr, r3
 8014a36:	462e      	mov	r6, r5
 8014a38:	4566      	cmp	r6, ip
 8014a3a:	d30e      	bcc.n	8014a5a <__mdiff+0xea>
 8014a3c:	f10c 0203 	add.w	r2, ip, #3
 8014a40:	1b52      	subs	r2, r2, r5
 8014a42:	f022 0203 	bic.w	r2, r2, #3
 8014a46:	3d03      	subs	r5, #3
 8014a48:	45ac      	cmp	ip, r5
 8014a4a:	bf38      	it	cc
 8014a4c:	2200      	movcc	r2, #0
 8014a4e:	4413      	add	r3, r2
 8014a50:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014a54:	b17a      	cbz	r2, 8014a76 <__mdiff+0x106>
 8014a56:	6107      	str	r7, [r0, #16]
 8014a58:	e7a4      	b.n	80149a4 <__mdiff+0x34>
 8014a5a:	f856 8b04 	ldr.w	r8, [r6], #4
 8014a5e:	fa11 f288 	uxtah	r2, r1, r8
 8014a62:	1414      	asrs	r4, r2, #16
 8014a64:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014a68:	b292      	uxth	r2, r2
 8014a6a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014a6e:	f84e 2b04 	str.w	r2, [lr], #4
 8014a72:	1421      	asrs	r1, r4, #16
 8014a74:	e7e0      	b.n	8014a38 <__mdiff+0xc8>
 8014a76:	3f01      	subs	r7, #1
 8014a78:	e7ea      	b.n	8014a50 <__mdiff+0xe0>
 8014a7a:	bf00      	nop
 8014a7c:	08019940 	.word	0x08019940
 8014a80:	080199c8 	.word	0x080199c8

08014a84 <__ulp>:
 8014a84:	b082      	sub	sp, #8
 8014a86:	ed8d 0b00 	vstr	d0, [sp]
 8014a8a:	9a01      	ldr	r2, [sp, #4]
 8014a8c:	4b0f      	ldr	r3, [pc, #60]	; (8014acc <__ulp+0x48>)
 8014a8e:	4013      	ands	r3, r2
 8014a90:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	dc08      	bgt.n	8014aaa <__ulp+0x26>
 8014a98:	425b      	negs	r3, r3
 8014a9a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8014a9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014aa2:	da04      	bge.n	8014aae <__ulp+0x2a>
 8014aa4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014aa8:	4113      	asrs	r3, r2
 8014aaa:	2200      	movs	r2, #0
 8014aac:	e008      	b.n	8014ac0 <__ulp+0x3c>
 8014aae:	f1a2 0314 	sub.w	r3, r2, #20
 8014ab2:	2b1e      	cmp	r3, #30
 8014ab4:	bfda      	itte	le
 8014ab6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014aba:	40da      	lsrle	r2, r3
 8014abc:	2201      	movgt	r2, #1
 8014abe:	2300      	movs	r3, #0
 8014ac0:	4619      	mov	r1, r3
 8014ac2:	4610      	mov	r0, r2
 8014ac4:	ec41 0b10 	vmov	d0, r0, r1
 8014ac8:	b002      	add	sp, #8
 8014aca:	4770      	bx	lr
 8014acc:	7ff00000 	.word	0x7ff00000

08014ad0 <__b2d>:
 8014ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ad4:	6906      	ldr	r6, [r0, #16]
 8014ad6:	f100 0814 	add.w	r8, r0, #20
 8014ada:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014ade:	1f37      	subs	r7, r6, #4
 8014ae0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014ae4:	4610      	mov	r0, r2
 8014ae6:	f7ff fd53 	bl	8014590 <__hi0bits>
 8014aea:	f1c0 0320 	rsb	r3, r0, #32
 8014aee:	280a      	cmp	r0, #10
 8014af0:	600b      	str	r3, [r1, #0]
 8014af2:	491b      	ldr	r1, [pc, #108]	; (8014b60 <__b2d+0x90>)
 8014af4:	dc15      	bgt.n	8014b22 <__b2d+0x52>
 8014af6:	f1c0 0c0b 	rsb	ip, r0, #11
 8014afa:	fa22 f30c 	lsr.w	r3, r2, ip
 8014afe:	45b8      	cmp	r8, r7
 8014b00:	ea43 0501 	orr.w	r5, r3, r1
 8014b04:	bf34      	ite	cc
 8014b06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014b0a:	2300      	movcs	r3, #0
 8014b0c:	3015      	adds	r0, #21
 8014b0e:	fa02 f000 	lsl.w	r0, r2, r0
 8014b12:	fa23 f30c 	lsr.w	r3, r3, ip
 8014b16:	4303      	orrs	r3, r0
 8014b18:	461c      	mov	r4, r3
 8014b1a:	ec45 4b10 	vmov	d0, r4, r5
 8014b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b22:	45b8      	cmp	r8, r7
 8014b24:	bf3a      	itte	cc
 8014b26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014b2a:	f1a6 0708 	subcc.w	r7, r6, #8
 8014b2e:	2300      	movcs	r3, #0
 8014b30:	380b      	subs	r0, #11
 8014b32:	d012      	beq.n	8014b5a <__b2d+0x8a>
 8014b34:	f1c0 0120 	rsb	r1, r0, #32
 8014b38:	fa23 f401 	lsr.w	r4, r3, r1
 8014b3c:	4082      	lsls	r2, r0
 8014b3e:	4322      	orrs	r2, r4
 8014b40:	4547      	cmp	r7, r8
 8014b42:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8014b46:	bf8c      	ite	hi
 8014b48:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014b4c:	2200      	movls	r2, #0
 8014b4e:	4083      	lsls	r3, r0
 8014b50:	40ca      	lsrs	r2, r1
 8014b52:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014b56:	4313      	orrs	r3, r2
 8014b58:	e7de      	b.n	8014b18 <__b2d+0x48>
 8014b5a:	ea42 0501 	orr.w	r5, r2, r1
 8014b5e:	e7db      	b.n	8014b18 <__b2d+0x48>
 8014b60:	3ff00000 	.word	0x3ff00000

08014b64 <__d2b>:
 8014b64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014b68:	460f      	mov	r7, r1
 8014b6a:	2101      	movs	r1, #1
 8014b6c:	ec59 8b10 	vmov	r8, r9, d0
 8014b70:	4616      	mov	r6, r2
 8014b72:	f7ff fc1b 	bl	80143ac <_Balloc>
 8014b76:	4604      	mov	r4, r0
 8014b78:	b930      	cbnz	r0, 8014b88 <__d2b+0x24>
 8014b7a:	4602      	mov	r2, r0
 8014b7c:	4b24      	ldr	r3, [pc, #144]	; (8014c10 <__d2b+0xac>)
 8014b7e:	4825      	ldr	r0, [pc, #148]	; (8014c14 <__d2b+0xb0>)
 8014b80:	f240 310f 	movw	r1, #783	; 0x30f
 8014b84:	f000 fd10 	bl	80155a8 <__assert_func>
 8014b88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014b8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014b90:	bb2d      	cbnz	r5, 8014bde <__d2b+0x7a>
 8014b92:	9301      	str	r3, [sp, #4]
 8014b94:	f1b8 0300 	subs.w	r3, r8, #0
 8014b98:	d026      	beq.n	8014be8 <__d2b+0x84>
 8014b9a:	4668      	mov	r0, sp
 8014b9c:	9300      	str	r3, [sp, #0]
 8014b9e:	f7ff fd17 	bl	80145d0 <__lo0bits>
 8014ba2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014ba6:	b1e8      	cbz	r0, 8014be4 <__d2b+0x80>
 8014ba8:	f1c0 0320 	rsb	r3, r0, #32
 8014bac:	fa02 f303 	lsl.w	r3, r2, r3
 8014bb0:	430b      	orrs	r3, r1
 8014bb2:	40c2      	lsrs	r2, r0
 8014bb4:	6163      	str	r3, [r4, #20]
 8014bb6:	9201      	str	r2, [sp, #4]
 8014bb8:	9b01      	ldr	r3, [sp, #4]
 8014bba:	61a3      	str	r3, [r4, #24]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	bf14      	ite	ne
 8014bc0:	2202      	movne	r2, #2
 8014bc2:	2201      	moveq	r2, #1
 8014bc4:	6122      	str	r2, [r4, #16]
 8014bc6:	b1bd      	cbz	r5, 8014bf8 <__d2b+0x94>
 8014bc8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014bcc:	4405      	add	r5, r0
 8014bce:	603d      	str	r5, [r7, #0]
 8014bd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014bd4:	6030      	str	r0, [r6, #0]
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	b003      	add	sp, #12
 8014bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014be2:	e7d6      	b.n	8014b92 <__d2b+0x2e>
 8014be4:	6161      	str	r1, [r4, #20]
 8014be6:	e7e7      	b.n	8014bb8 <__d2b+0x54>
 8014be8:	a801      	add	r0, sp, #4
 8014bea:	f7ff fcf1 	bl	80145d0 <__lo0bits>
 8014bee:	9b01      	ldr	r3, [sp, #4]
 8014bf0:	6163      	str	r3, [r4, #20]
 8014bf2:	3020      	adds	r0, #32
 8014bf4:	2201      	movs	r2, #1
 8014bf6:	e7e5      	b.n	8014bc4 <__d2b+0x60>
 8014bf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014bfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014c00:	6038      	str	r0, [r7, #0]
 8014c02:	6918      	ldr	r0, [r3, #16]
 8014c04:	f7ff fcc4 	bl	8014590 <__hi0bits>
 8014c08:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014c0c:	e7e2      	b.n	8014bd4 <__d2b+0x70>
 8014c0e:	bf00      	nop
 8014c10:	08019940 	.word	0x08019940
 8014c14:	080199c8 	.word	0x080199c8

08014c18 <__ratio>:
 8014c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1c:	4688      	mov	r8, r1
 8014c1e:	4669      	mov	r1, sp
 8014c20:	4681      	mov	r9, r0
 8014c22:	f7ff ff55 	bl	8014ad0 <__b2d>
 8014c26:	a901      	add	r1, sp, #4
 8014c28:	4640      	mov	r0, r8
 8014c2a:	ec55 4b10 	vmov	r4, r5, d0
 8014c2e:	f7ff ff4f 	bl	8014ad0 <__b2d>
 8014c32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014c36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014c3a:	eba3 0c02 	sub.w	ip, r3, r2
 8014c3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014c42:	1a9b      	subs	r3, r3, r2
 8014c44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014c48:	ec51 0b10 	vmov	r0, r1, d0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	bfd6      	itet	le
 8014c50:	460a      	movle	r2, r1
 8014c52:	462a      	movgt	r2, r5
 8014c54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014c58:	468b      	mov	fp, r1
 8014c5a:	462f      	mov	r7, r5
 8014c5c:	bfd4      	ite	le
 8014c5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014c62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014c66:	4620      	mov	r0, r4
 8014c68:	ee10 2a10 	vmov	r2, s0
 8014c6c:	465b      	mov	r3, fp
 8014c6e:	4639      	mov	r1, r7
 8014c70:	f7eb fdf4 	bl	800085c <__aeabi_ddiv>
 8014c74:	ec41 0b10 	vmov	d0, r0, r1
 8014c78:	b003      	add	sp, #12
 8014c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014c7e <__copybits>:
 8014c7e:	3901      	subs	r1, #1
 8014c80:	b570      	push	{r4, r5, r6, lr}
 8014c82:	1149      	asrs	r1, r1, #5
 8014c84:	6914      	ldr	r4, [r2, #16]
 8014c86:	3101      	adds	r1, #1
 8014c88:	f102 0314 	add.w	r3, r2, #20
 8014c8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014c90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014c94:	1f05      	subs	r5, r0, #4
 8014c96:	42a3      	cmp	r3, r4
 8014c98:	d30c      	bcc.n	8014cb4 <__copybits+0x36>
 8014c9a:	1aa3      	subs	r3, r4, r2
 8014c9c:	3b11      	subs	r3, #17
 8014c9e:	f023 0303 	bic.w	r3, r3, #3
 8014ca2:	3211      	adds	r2, #17
 8014ca4:	42a2      	cmp	r2, r4
 8014ca6:	bf88      	it	hi
 8014ca8:	2300      	movhi	r3, #0
 8014caa:	4418      	add	r0, r3
 8014cac:	2300      	movs	r3, #0
 8014cae:	4288      	cmp	r0, r1
 8014cb0:	d305      	bcc.n	8014cbe <__copybits+0x40>
 8014cb2:	bd70      	pop	{r4, r5, r6, pc}
 8014cb4:	f853 6b04 	ldr.w	r6, [r3], #4
 8014cb8:	f845 6f04 	str.w	r6, [r5, #4]!
 8014cbc:	e7eb      	b.n	8014c96 <__copybits+0x18>
 8014cbe:	f840 3b04 	str.w	r3, [r0], #4
 8014cc2:	e7f4      	b.n	8014cae <__copybits+0x30>

08014cc4 <__any_on>:
 8014cc4:	f100 0214 	add.w	r2, r0, #20
 8014cc8:	6900      	ldr	r0, [r0, #16]
 8014cca:	114b      	asrs	r3, r1, #5
 8014ccc:	4298      	cmp	r0, r3
 8014cce:	b510      	push	{r4, lr}
 8014cd0:	db11      	blt.n	8014cf6 <__any_on+0x32>
 8014cd2:	dd0a      	ble.n	8014cea <__any_on+0x26>
 8014cd4:	f011 011f 	ands.w	r1, r1, #31
 8014cd8:	d007      	beq.n	8014cea <__any_on+0x26>
 8014cda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014cde:	fa24 f001 	lsr.w	r0, r4, r1
 8014ce2:	fa00 f101 	lsl.w	r1, r0, r1
 8014ce6:	428c      	cmp	r4, r1
 8014ce8:	d10b      	bne.n	8014d02 <__any_on+0x3e>
 8014cea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014cee:	4293      	cmp	r3, r2
 8014cf0:	d803      	bhi.n	8014cfa <__any_on+0x36>
 8014cf2:	2000      	movs	r0, #0
 8014cf4:	bd10      	pop	{r4, pc}
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	e7f7      	b.n	8014cea <__any_on+0x26>
 8014cfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014cfe:	2900      	cmp	r1, #0
 8014d00:	d0f5      	beq.n	8014cee <__any_on+0x2a>
 8014d02:	2001      	movs	r0, #1
 8014d04:	e7f6      	b.n	8014cf4 <__any_on+0x30>

08014d06 <__ascii_wctomb>:
 8014d06:	b149      	cbz	r1, 8014d1c <__ascii_wctomb+0x16>
 8014d08:	2aff      	cmp	r2, #255	; 0xff
 8014d0a:	bf85      	ittet	hi
 8014d0c:	238a      	movhi	r3, #138	; 0x8a
 8014d0e:	6003      	strhi	r3, [r0, #0]
 8014d10:	700a      	strbls	r2, [r1, #0]
 8014d12:	f04f 30ff 	movhi.w	r0, #4294967295
 8014d16:	bf98      	it	ls
 8014d18:	2001      	movls	r0, #1
 8014d1a:	4770      	bx	lr
 8014d1c:	4608      	mov	r0, r1
 8014d1e:	4770      	bx	lr

08014d20 <__ssputs_r>:
 8014d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d24:	688e      	ldr	r6, [r1, #8]
 8014d26:	461f      	mov	r7, r3
 8014d28:	42be      	cmp	r6, r7
 8014d2a:	680b      	ldr	r3, [r1, #0]
 8014d2c:	4682      	mov	sl, r0
 8014d2e:	460c      	mov	r4, r1
 8014d30:	4690      	mov	r8, r2
 8014d32:	d82c      	bhi.n	8014d8e <__ssputs_r+0x6e>
 8014d34:	898a      	ldrh	r2, [r1, #12]
 8014d36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014d3a:	d026      	beq.n	8014d8a <__ssputs_r+0x6a>
 8014d3c:	6965      	ldr	r5, [r4, #20]
 8014d3e:	6909      	ldr	r1, [r1, #16]
 8014d40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014d44:	eba3 0901 	sub.w	r9, r3, r1
 8014d48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014d4c:	1c7b      	adds	r3, r7, #1
 8014d4e:	444b      	add	r3, r9
 8014d50:	106d      	asrs	r5, r5, #1
 8014d52:	429d      	cmp	r5, r3
 8014d54:	bf38      	it	cc
 8014d56:	461d      	movcc	r5, r3
 8014d58:	0553      	lsls	r3, r2, #21
 8014d5a:	d527      	bpl.n	8014dac <__ssputs_r+0x8c>
 8014d5c:	4629      	mov	r1, r5
 8014d5e:	f7ff fa87 	bl	8014270 <_malloc_r>
 8014d62:	4606      	mov	r6, r0
 8014d64:	b360      	cbz	r0, 8014dc0 <__ssputs_r+0xa0>
 8014d66:	6921      	ldr	r1, [r4, #16]
 8014d68:	464a      	mov	r2, r9
 8014d6a:	f7fe fea6 	bl	8013aba <memcpy>
 8014d6e:	89a3      	ldrh	r3, [r4, #12]
 8014d70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d78:	81a3      	strh	r3, [r4, #12]
 8014d7a:	6126      	str	r6, [r4, #16]
 8014d7c:	6165      	str	r5, [r4, #20]
 8014d7e:	444e      	add	r6, r9
 8014d80:	eba5 0509 	sub.w	r5, r5, r9
 8014d84:	6026      	str	r6, [r4, #0]
 8014d86:	60a5      	str	r5, [r4, #8]
 8014d88:	463e      	mov	r6, r7
 8014d8a:	42be      	cmp	r6, r7
 8014d8c:	d900      	bls.n	8014d90 <__ssputs_r+0x70>
 8014d8e:	463e      	mov	r6, r7
 8014d90:	6820      	ldr	r0, [r4, #0]
 8014d92:	4632      	mov	r2, r6
 8014d94:	4641      	mov	r1, r8
 8014d96:	f000 fbbb 	bl	8015510 <memmove>
 8014d9a:	68a3      	ldr	r3, [r4, #8]
 8014d9c:	1b9b      	subs	r3, r3, r6
 8014d9e:	60a3      	str	r3, [r4, #8]
 8014da0:	6823      	ldr	r3, [r4, #0]
 8014da2:	4433      	add	r3, r6
 8014da4:	6023      	str	r3, [r4, #0]
 8014da6:	2000      	movs	r0, #0
 8014da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dac:	462a      	mov	r2, r5
 8014dae:	f000 fc37 	bl	8015620 <_realloc_r>
 8014db2:	4606      	mov	r6, r0
 8014db4:	2800      	cmp	r0, #0
 8014db6:	d1e0      	bne.n	8014d7a <__ssputs_r+0x5a>
 8014db8:	6921      	ldr	r1, [r4, #16]
 8014dba:	4650      	mov	r0, sl
 8014dbc:	f7fe fe94 	bl	8013ae8 <_free_r>
 8014dc0:	230c      	movs	r3, #12
 8014dc2:	f8ca 3000 	str.w	r3, [sl]
 8014dc6:	89a3      	ldrh	r3, [r4, #12]
 8014dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014dcc:	81a3      	strh	r3, [r4, #12]
 8014dce:	f04f 30ff 	mov.w	r0, #4294967295
 8014dd2:	e7e9      	b.n	8014da8 <__ssputs_r+0x88>

08014dd4 <_svfiprintf_r>:
 8014dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd8:	4698      	mov	r8, r3
 8014dda:	898b      	ldrh	r3, [r1, #12]
 8014ddc:	061b      	lsls	r3, r3, #24
 8014dde:	b09d      	sub	sp, #116	; 0x74
 8014de0:	4607      	mov	r7, r0
 8014de2:	460d      	mov	r5, r1
 8014de4:	4614      	mov	r4, r2
 8014de6:	d50e      	bpl.n	8014e06 <_svfiprintf_r+0x32>
 8014de8:	690b      	ldr	r3, [r1, #16]
 8014dea:	b963      	cbnz	r3, 8014e06 <_svfiprintf_r+0x32>
 8014dec:	2140      	movs	r1, #64	; 0x40
 8014dee:	f7ff fa3f 	bl	8014270 <_malloc_r>
 8014df2:	6028      	str	r0, [r5, #0]
 8014df4:	6128      	str	r0, [r5, #16]
 8014df6:	b920      	cbnz	r0, 8014e02 <_svfiprintf_r+0x2e>
 8014df8:	230c      	movs	r3, #12
 8014dfa:	603b      	str	r3, [r7, #0]
 8014dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8014e00:	e0d0      	b.n	8014fa4 <_svfiprintf_r+0x1d0>
 8014e02:	2340      	movs	r3, #64	; 0x40
 8014e04:	616b      	str	r3, [r5, #20]
 8014e06:	2300      	movs	r3, #0
 8014e08:	9309      	str	r3, [sp, #36]	; 0x24
 8014e0a:	2320      	movs	r3, #32
 8014e0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e10:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e14:	2330      	movs	r3, #48	; 0x30
 8014e16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014fbc <_svfiprintf_r+0x1e8>
 8014e1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e1e:	f04f 0901 	mov.w	r9, #1
 8014e22:	4623      	mov	r3, r4
 8014e24:	469a      	mov	sl, r3
 8014e26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e2a:	b10a      	cbz	r2, 8014e30 <_svfiprintf_r+0x5c>
 8014e2c:	2a25      	cmp	r2, #37	; 0x25
 8014e2e:	d1f9      	bne.n	8014e24 <_svfiprintf_r+0x50>
 8014e30:	ebba 0b04 	subs.w	fp, sl, r4
 8014e34:	d00b      	beq.n	8014e4e <_svfiprintf_r+0x7a>
 8014e36:	465b      	mov	r3, fp
 8014e38:	4622      	mov	r2, r4
 8014e3a:	4629      	mov	r1, r5
 8014e3c:	4638      	mov	r0, r7
 8014e3e:	f7ff ff6f 	bl	8014d20 <__ssputs_r>
 8014e42:	3001      	adds	r0, #1
 8014e44:	f000 80a9 	beq.w	8014f9a <_svfiprintf_r+0x1c6>
 8014e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e4a:	445a      	add	r2, fp
 8014e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8014e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	f000 80a1 	beq.w	8014f9a <_svfiprintf_r+0x1c6>
 8014e58:	2300      	movs	r3, #0
 8014e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8014e5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e62:	f10a 0a01 	add.w	sl, sl, #1
 8014e66:	9304      	str	r3, [sp, #16]
 8014e68:	9307      	str	r3, [sp, #28]
 8014e6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e6e:	931a      	str	r3, [sp, #104]	; 0x68
 8014e70:	4654      	mov	r4, sl
 8014e72:	2205      	movs	r2, #5
 8014e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e78:	4850      	ldr	r0, [pc, #320]	; (8014fbc <_svfiprintf_r+0x1e8>)
 8014e7a:	f7eb f9b9 	bl	80001f0 <memchr>
 8014e7e:	9a04      	ldr	r2, [sp, #16]
 8014e80:	b9d8      	cbnz	r0, 8014eba <_svfiprintf_r+0xe6>
 8014e82:	06d0      	lsls	r0, r2, #27
 8014e84:	bf44      	itt	mi
 8014e86:	2320      	movmi	r3, #32
 8014e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e8c:	0711      	lsls	r1, r2, #28
 8014e8e:	bf44      	itt	mi
 8014e90:	232b      	movmi	r3, #43	; 0x2b
 8014e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e96:	f89a 3000 	ldrb.w	r3, [sl]
 8014e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8014e9c:	d015      	beq.n	8014eca <_svfiprintf_r+0xf6>
 8014e9e:	9a07      	ldr	r2, [sp, #28]
 8014ea0:	4654      	mov	r4, sl
 8014ea2:	2000      	movs	r0, #0
 8014ea4:	f04f 0c0a 	mov.w	ip, #10
 8014ea8:	4621      	mov	r1, r4
 8014eaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014eae:	3b30      	subs	r3, #48	; 0x30
 8014eb0:	2b09      	cmp	r3, #9
 8014eb2:	d94d      	bls.n	8014f50 <_svfiprintf_r+0x17c>
 8014eb4:	b1b0      	cbz	r0, 8014ee4 <_svfiprintf_r+0x110>
 8014eb6:	9207      	str	r2, [sp, #28]
 8014eb8:	e014      	b.n	8014ee4 <_svfiprintf_r+0x110>
 8014eba:	eba0 0308 	sub.w	r3, r0, r8
 8014ebe:	fa09 f303 	lsl.w	r3, r9, r3
 8014ec2:	4313      	orrs	r3, r2
 8014ec4:	9304      	str	r3, [sp, #16]
 8014ec6:	46a2      	mov	sl, r4
 8014ec8:	e7d2      	b.n	8014e70 <_svfiprintf_r+0x9c>
 8014eca:	9b03      	ldr	r3, [sp, #12]
 8014ecc:	1d19      	adds	r1, r3, #4
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	9103      	str	r1, [sp, #12]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	bfbb      	ittet	lt
 8014ed6:	425b      	neglt	r3, r3
 8014ed8:	f042 0202 	orrlt.w	r2, r2, #2
 8014edc:	9307      	strge	r3, [sp, #28]
 8014ede:	9307      	strlt	r3, [sp, #28]
 8014ee0:	bfb8      	it	lt
 8014ee2:	9204      	strlt	r2, [sp, #16]
 8014ee4:	7823      	ldrb	r3, [r4, #0]
 8014ee6:	2b2e      	cmp	r3, #46	; 0x2e
 8014ee8:	d10c      	bne.n	8014f04 <_svfiprintf_r+0x130>
 8014eea:	7863      	ldrb	r3, [r4, #1]
 8014eec:	2b2a      	cmp	r3, #42	; 0x2a
 8014eee:	d134      	bne.n	8014f5a <_svfiprintf_r+0x186>
 8014ef0:	9b03      	ldr	r3, [sp, #12]
 8014ef2:	1d1a      	adds	r2, r3, #4
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	9203      	str	r2, [sp, #12]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	bfb8      	it	lt
 8014efc:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f00:	3402      	adds	r4, #2
 8014f02:	9305      	str	r3, [sp, #20]
 8014f04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014fcc <_svfiprintf_r+0x1f8>
 8014f08:	7821      	ldrb	r1, [r4, #0]
 8014f0a:	2203      	movs	r2, #3
 8014f0c:	4650      	mov	r0, sl
 8014f0e:	f7eb f96f 	bl	80001f0 <memchr>
 8014f12:	b138      	cbz	r0, 8014f24 <_svfiprintf_r+0x150>
 8014f14:	9b04      	ldr	r3, [sp, #16]
 8014f16:	eba0 000a 	sub.w	r0, r0, sl
 8014f1a:	2240      	movs	r2, #64	; 0x40
 8014f1c:	4082      	lsls	r2, r0
 8014f1e:	4313      	orrs	r3, r2
 8014f20:	3401      	adds	r4, #1
 8014f22:	9304      	str	r3, [sp, #16]
 8014f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f28:	4825      	ldr	r0, [pc, #148]	; (8014fc0 <_svfiprintf_r+0x1ec>)
 8014f2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f2e:	2206      	movs	r2, #6
 8014f30:	f7eb f95e 	bl	80001f0 <memchr>
 8014f34:	2800      	cmp	r0, #0
 8014f36:	d038      	beq.n	8014faa <_svfiprintf_r+0x1d6>
 8014f38:	4b22      	ldr	r3, [pc, #136]	; (8014fc4 <_svfiprintf_r+0x1f0>)
 8014f3a:	bb1b      	cbnz	r3, 8014f84 <_svfiprintf_r+0x1b0>
 8014f3c:	9b03      	ldr	r3, [sp, #12]
 8014f3e:	3307      	adds	r3, #7
 8014f40:	f023 0307 	bic.w	r3, r3, #7
 8014f44:	3308      	adds	r3, #8
 8014f46:	9303      	str	r3, [sp, #12]
 8014f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f4a:	4433      	add	r3, r6
 8014f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8014f4e:	e768      	b.n	8014e22 <_svfiprintf_r+0x4e>
 8014f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f54:	460c      	mov	r4, r1
 8014f56:	2001      	movs	r0, #1
 8014f58:	e7a6      	b.n	8014ea8 <_svfiprintf_r+0xd4>
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	3401      	adds	r4, #1
 8014f5e:	9305      	str	r3, [sp, #20]
 8014f60:	4619      	mov	r1, r3
 8014f62:	f04f 0c0a 	mov.w	ip, #10
 8014f66:	4620      	mov	r0, r4
 8014f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f6c:	3a30      	subs	r2, #48	; 0x30
 8014f6e:	2a09      	cmp	r2, #9
 8014f70:	d903      	bls.n	8014f7a <_svfiprintf_r+0x1a6>
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d0c6      	beq.n	8014f04 <_svfiprintf_r+0x130>
 8014f76:	9105      	str	r1, [sp, #20]
 8014f78:	e7c4      	b.n	8014f04 <_svfiprintf_r+0x130>
 8014f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f7e:	4604      	mov	r4, r0
 8014f80:	2301      	movs	r3, #1
 8014f82:	e7f0      	b.n	8014f66 <_svfiprintf_r+0x192>
 8014f84:	ab03      	add	r3, sp, #12
 8014f86:	9300      	str	r3, [sp, #0]
 8014f88:	462a      	mov	r2, r5
 8014f8a:	4b0f      	ldr	r3, [pc, #60]	; (8014fc8 <_svfiprintf_r+0x1f4>)
 8014f8c:	a904      	add	r1, sp, #16
 8014f8e:	4638      	mov	r0, r7
 8014f90:	f3af 8000 	nop.w
 8014f94:	1c42      	adds	r2, r0, #1
 8014f96:	4606      	mov	r6, r0
 8014f98:	d1d6      	bne.n	8014f48 <_svfiprintf_r+0x174>
 8014f9a:	89ab      	ldrh	r3, [r5, #12]
 8014f9c:	065b      	lsls	r3, r3, #25
 8014f9e:	f53f af2d 	bmi.w	8014dfc <_svfiprintf_r+0x28>
 8014fa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fa4:	b01d      	add	sp, #116	; 0x74
 8014fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014faa:	ab03      	add	r3, sp, #12
 8014fac:	9300      	str	r3, [sp, #0]
 8014fae:	462a      	mov	r2, r5
 8014fb0:	4b05      	ldr	r3, [pc, #20]	; (8014fc8 <_svfiprintf_r+0x1f4>)
 8014fb2:	a904      	add	r1, sp, #16
 8014fb4:	4638      	mov	r0, r7
 8014fb6:	f000 f879 	bl	80150ac <_printf_i>
 8014fba:	e7eb      	b.n	8014f94 <_svfiprintf_r+0x1c0>
 8014fbc:	08019c25 	.word	0x08019c25
 8014fc0:	08019c2f 	.word	0x08019c2f
 8014fc4:	00000000 	.word	0x00000000
 8014fc8:	08014d21 	.word	0x08014d21
 8014fcc:	08019c2b 	.word	0x08019c2b

08014fd0 <_printf_common>:
 8014fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fd4:	4616      	mov	r6, r2
 8014fd6:	4699      	mov	r9, r3
 8014fd8:	688a      	ldr	r2, [r1, #8]
 8014fda:	690b      	ldr	r3, [r1, #16]
 8014fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014fe0:	4293      	cmp	r3, r2
 8014fe2:	bfb8      	it	lt
 8014fe4:	4613      	movlt	r3, r2
 8014fe6:	6033      	str	r3, [r6, #0]
 8014fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014fec:	4607      	mov	r7, r0
 8014fee:	460c      	mov	r4, r1
 8014ff0:	b10a      	cbz	r2, 8014ff6 <_printf_common+0x26>
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	6033      	str	r3, [r6, #0]
 8014ff6:	6823      	ldr	r3, [r4, #0]
 8014ff8:	0699      	lsls	r1, r3, #26
 8014ffa:	bf42      	ittt	mi
 8014ffc:	6833      	ldrmi	r3, [r6, #0]
 8014ffe:	3302      	addmi	r3, #2
 8015000:	6033      	strmi	r3, [r6, #0]
 8015002:	6825      	ldr	r5, [r4, #0]
 8015004:	f015 0506 	ands.w	r5, r5, #6
 8015008:	d106      	bne.n	8015018 <_printf_common+0x48>
 801500a:	f104 0a19 	add.w	sl, r4, #25
 801500e:	68e3      	ldr	r3, [r4, #12]
 8015010:	6832      	ldr	r2, [r6, #0]
 8015012:	1a9b      	subs	r3, r3, r2
 8015014:	42ab      	cmp	r3, r5
 8015016:	dc26      	bgt.n	8015066 <_printf_common+0x96>
 8015018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801501c:	1e13      	subs	r3, r2, #0
 801501e:	6822      	ldr	r2, [r4, #0]
 8015020:	bf18      	it	ne
 8015022:	2301      	movne	r3, #1
 8015024:	0692      	lsls	r2, r2, #26
 8015026:	d42b      	bmi.n	8015080 <_printf_common+0xb0>
 8015028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801502c:	4649      	mov	r1, r9
 801502e:	4638      	mov	r0, r7
 8015030:	47c0      	blx	r8
 8015032:	3001      	adds	r0, #1
 8015034:	d01e      	beq.n	8015074 <_printf_common+0xa4>
 8015036:	6823      	ldr	r3, [r4, #0]
 8015038:	6922      	ldr	r2, [r4, #16]
 801503a:	f003 0306 	and.w	r3, r3, #6
 801503e:	2b04      	cmp	r3, #4
 8015040:	bf02      	ittt	eq
 8015042:	68e5      	ldreq	r5, [r4, #12]
 8015044:	6833      	ldreq	r3, [r6, #0]
 8015046:	1aed      	subeq	r5, r5, r3
 8015048:	68a3      	ldr	r3, [r4, #8]
 801504a:	bf0c      	ite	eq
 801504c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015050:	2500      	movne	r5, #0
 8015052:	4293      	cmp	r3, r2
 8015054:	bfc4      	itt	gt
 8015056:	1a9b      	subgt	r3, r3, r2
 8015058:	18ed      	addgt	r5, r5, r3
 801505a:	2600      	movs	r6, #0
 801505c:	341a      	adds	r4, #26
 801505e:	42b5      	cmp	r5, r6
 8015060:	d11a      	bne.n	8015098 <_printf_common+0xc8>
 8015062:	2000      	movs	r0, #0
 8015064:	e008      	b.n	8015078 <_printf_common+0xa8>
 8015066:	2301      	movs	r3, #1
 8015068:	4652      	mov	r2, sl
 801506a:	4649      	mov	r1, r9
 801506c:	4638      	mov	r0, r7
 801506e:	47c0      	blx	r8
 8015070:	3001      	adds	r0, #1
 8015072:	d103      	bne.n	801507c <_printf_common+0xac>
 8015074:	f04f 30ff 	mov.w	r0, #4294967295
 8015078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801507c:	3501      	adds	r5, #1
 801507e:	e7c6      	b.n	801500e <_printf_common+0x3e>
 8015080:	18e1      	adds	r1, r4, r3
 8015082:	1c5a      	adds	r2, r3, #1
 8015084:	2030      	movs	r0, #48	; 0x30
 8015086:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801508a:	4422      	add	r2, r4
 801508c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015094:	3302      	adds	r3, #2
 8015096:	e7c7      	b.n	8015028 <_printf_common+0x58>
 8015098:	2301      	movs	r3, #1
 801509a:	4622      	mov	r2, r4
 801509c:	4649      	mov	r1, r9
 801509e:	4638      	mov	r0, r7
 80150a0:	47c0      	blx	r8
 80150a2:	3001      	adds	r0, #1
 80150a4:	d0e6      	beq.n	8015074 <_printf_common+0xa4>
 80150a6:	3601      	adds	r6, #1
 80150a8:	e7d9      	b.n	801505e <_printf_common+0x8e>
	...

080150ac <_printf_i>:
 80150ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80150b0:	7e0f      	ldrb	r7, [r1, #24]
 80150b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80150b4:	2f78      	cmp	r7, #120	; 0x78
 80150b6:	4691      	mov	r9, r2
 80150b8:	4680      	mov	r8, r0
 80150ba:	460c      	mov	r4, r1
 80150bc:	469a      	mov	sl, r3
 80150be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80150c2:	d807      	bhi.n	80150d4 <_printf_i+0x28>
 80150c4:	2f62      	cmp	r7, #98	; 0x62
 80150c6:	d80a      	bhi.n	80150de <_printf_i+0x32>
 80150c8:	2f00      	cmp	r7, #0
 80150ca:	f000 80d4 	beq.w	8015276 <_printf_i+0x1ca>
 80150ce:	2f58      	cmp	r7, #88	; 0x58
 80150d0:	f000 80c0 	beq.w	8015254 <_printf_i+0x1a8>
 80150d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80150dc:	e03a      	b.n	8015154 <_printf_i+0xa8>
 80150de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80150e2:	2b15      	cmp	r3, #21
 80150e4:	d8f6      	bhi.n	80150d4 <_printf_i+0x28>
 80150e6:	a101      	add	r1, pc, #4	; (adr r1, 80150ec <_printf_i+0x40>)
 80150e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80150ec:	08015145 	.word	0x08015145
 80150f0:	08015159 	.word	0x08015159
 80150f4:	080150d5 	.word	0x080150d5
 80150f8:	080150d5 	.word	0x080150d5
 80150fc:	080150d5 	.word	0x080150d5
 8015100:	080150d5 	.word	0x080150d5
 8015104:	08015159 	.word	0x08015159
 8015108:	080150d5 	.word	0x080150d5
 801510c:	080150d5 	.word	0x080150d5
 8015110:	080150d5 	.word	0x080150d5
 8015114:	080150d5 	.word	0x080150d5
 8015118:	0801525d 	.word	0x0801525d
 801511c:	08015185 	.word	0x08015185
 8015120:	08015217 	.word	0x08015217
 8015124:	080150d5 	.word	0x080150d5
 8015128:	080150d5 	.word	0x080150d5
 801512c:	0801527f 	.word	0x0801527f
 8015130:	080150d5 	.word	0x080150d5
 8015134:	08015185 	.word	0x08015185
 8015138:	080150d5 	.word	0x080150d5
 801513c:	080150d5 	.word	0x080150d5
 8015140:	0801521f 	.word	0x0801521f
 8015144:	682b      	ldr	r3, [r5, #0]
 8015146:	1d1a      	adds	r2, r3, #4
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	602a      	str	r2, [r5, #0]
 801514c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015154:	2301      	movs	r3, #1
 8015156:	e09f      	b.n	8015298 <_printf_i+0x1ec>
 8015158:	6820      	ldr	r0, [r4, #0]
 801515a:	682b      	ldr	r3, [r5, #0]
 801515c:	0607      	lsls	r7, r0, #24
 801515e:	f103 0104 	add.w	r1, r3, #4
 8015162:	6029      	str	r1, [r5, #0]
 8015164:	d501      	bpl.n	801516a <_printf_i+0xbe>
 8015166:	681e      	ldr	r6, [r3, #0]
 8015168:	e003      	b.n	8015172 <_printf_i+0xc6>
 801516a:	0646      	lsls	r6, r0, #25
 801516c:	d5fb      	bpl.n	8015166 <_printf_i+0xba>
 801516e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015172:	2e00      	cmp	r6, #0
 8015174:	da03      	bge.n	801517e <_printf_i+0xd2>
 8015176:	232d      	movs	r3, #45	; 0x2d
 8015178:	4276      	negs	r6, r6
 801517a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801517e:	485a      	ldr	r0, [pc, #360]	; (80152e8 <_printf_i+0x23c>)
 8015180:	230a      	movs	r3, #10
 8015182:	e012      	b.n	80151aa <_printf_i+0xfe>
 8015184:	682b      	ldr	r3, [r5, #0]
 8015186:	6820      	ldr	r0, [r4, #0]
 8015188:	1d19      	adds	r1, r3, #4
 801518a:	6029      	str	r1, [r5, #0]
 801518c:	0605      	lsls	r5, r0, #24
 801518e:	d501      	bpl.n	8015194 <_printf_i+0xe8>
 8015190:	681e      	ldr	r6, [r3, #0]
 8015192:	e002      	b.n	801519a <_printf_i+0xee>
 8015194:	0641      	lsls	r1, r0, #25
 8015196:	d5fb      	bpl.n	8015190 <_printf_i+0xe4>
 8015198:	881e      	ldrh	r6, [r3, #0]
 801519a:	4853      	ldr	r0, [pc, #332]	; (80152e8 <_printf_i+0x23c>)
 801519c:	2f6f      	cmp	r7, #111	; 0x6f
 801519e:	bf0c      	ite	eq
 80151a0:	2308      	moveq	r3, #8
 80151a2:	230a      	movne	r3, #10
 80151a4:	2100      	movs	r1, #0
 80151a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80151aa:	6865      	ldr	r5, [r4, #4]
 80151ac:	60a5      	str	r5, [r4, #8]
 80151ae:	2d00      	cmp	r5, #0
 80151b0:	bfa2      	ittt	ge
 80151b2:	6821      	ldrge	r1, [r4, #0]
 80151b4:	f021 0104 	bicge.w	r1, r1, #4
 80151b8:	6021      	strge	r1, [r4, #0]
 80151ba:	b90e      	cbnz	r6, 80151c0 <_printf_i+0x114>
 80151bc:	2d00      	cmp	r5, #0
 80151be:	d04b      	beq.n	8015258 <_printf_i+0x1ac>
 80151c0:	4615      	mov	r5, r2
 80151c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80151c6:	fb03 6711 	mls	r7, r3, r1, r6
 80151ca:	5dc7      	ldrb	r7, [r0, r7]
 80151cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80151d0:	4637      	mov	r7, r6
 80151d2:	42bb      	cmp	r3, r7
 80151d4:	460e      	mov	r6, r1
 80151d6:	d9f4      	bls.n	80151c2 <_printf_i+0x116>
 80151d8:	2b08      	cmp	r3, #8
 80151da:	d10b      	bne.n	80151f4 <_printf_i+0x148>
 80151dc:	6823      	ldr	r3, [r4, #0]
 80151de:	07de      	lsls	r6, r3, #31
 80151e0:	d508      	bpl.n	80151f4 <_printf_i+0x148>
 80151e2:	6923      	ldr	r3, [r4, #16]
 80151e4:	6861      	ldr	r1, [r4, #4]
 80151e6:	4299      	cmp	r1, r3
 80151e8:	bfde      	ittt	le
 80151ea:	2330      	movle	r3, #48	; 0x30
 80151ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80151f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80151f4:	1b52      	subs	r2, r2, r5
 80151f6:	6122      	str	r2, [r4, #16]
 80151f8:	f8cd a000 	str.w	sl, [sp]
 80151fc:	464b      	mov	r3, r9
 80151fe:	aa03      	add	r2, sp, #12
 8015200:	4621      	mov	r1, r4
 8015202:	4640      	mov	r0, r8
 8015204:	f7ff fee4 	bl	8014fd0 <_printf_common>
 8015208:	3001      	adds	r0, #1
 801520a:	d14a      	bne.n	80152a2 <_printf_i+0x1f6>
 801520c:	f04f 30ff 	mov.w	r0, #4294967295
 8015210:	b004      	add	sp, #16
 8015212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015216:	6823      	ldr	r3, [r4, #0]
 8015218:	f043 0320 	orr.w	r3, r3, #32
 801521c:	6023      	str	r3, [r4, #0]
 801521e:	4833      	ldr	r0, [pc, #204]	; (80152ec <_printf_i+0x240>)
 8015220:	2778      	movs	r7, #120	; 0x78
 8015222:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015226:	6823      	ldr	r3, [r4, #0]
 8015228:	6829      	ldr	r1, [r5, #0]
 801522a:	061f      	lsls	r7, r3, #24
 801522c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015230:	d402      	bmi.n	8015238 <_printf_i+0x18c>
 8015232:	065f      	lsls	r7, r3, #25
 8015234:	bf48      	it	mi
 8015236:	b2b6      	uxthmi	r6, r6
 8015238:	07df      	lsls	r7, r3, #31
 801523a:	bf48      	it	mi
 801523c:	f043 0320 	orrmi.w	r3, r3, #32
 8015240:	6029      	str	r1, [r5, #0]
 8015242:	bf48      	it	mi
 8015244:	6023      	strmi	r3, [r4, #0]
 8015246:	b91e      	cbnz	r6, 8015250 <_printf_i+0x1a4>
 8015248:	6823      	ldr	r3, [r4, #0]
 801524a:	f023 0320 	bic.w	r3, r3, #32
 801524e:	6023      	str	r3, [r4, #0]
 8015250:	2310      	movs	r3, #16
 8015252:	e7a7      	b.n	80151a4 <_printf_i+0xf8>
 8015254:	4824      	ldr	r0, [pc, #144]	; (80152e8 <_printf_i+0x23c>)
 8015256:	e7e4      	b.n	8015222 <_printf_i+0x176>
 8015258:	4615      	mov	r5, r2
 801525a:	e7bd      	b.n	80151d8 <_printf_i+0x12c>
 801525c:	682b      	ldr	r3, [r5, #0]
 801525e:	6826      	ldr	r6, [r4, #0]
 8015260:	6961      	ldr	r1, [r4, #20]
 8015262:	1d18      	adds	r0, r3, #4
 8015264:	6028      	str	r0, [r5, #0]
 8015266:	0635      	lsls	r5, r6, #24
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	d501      	bpl.n	8015270 <_printf_i+0x1c4>
 801526c:	6019      	str	r1, [r3, #0]
 801526e:	e002      	b.n	8015276 <_printf_i+0x1ca>
 8015270:	0670      	lsls	r0, r6, #25
 8015272:	d5fb      	bpl.n	801526c <_printf_i+0x1c0>
 8015274:	8019      	strh	r1, [r3, #0]
 8015276:	2300      	movs	r3, #0
 8015278:	6123      	str	r3, [r4, #16]
 801527a:	4615      	mov	r5, r2
 801527c:	e7bc      	b.n	80151f8 <_printf_i+0x14c>
 801527e:	682b      	ldr	r3, [r5, #0]
 8015280:	1d1a      	adds	r2, r3, #4
 8015282:	602a      	str	r2, [r5, #0]
 8015284:	681d      	ldr	r5, [r3, #0]
 8015286:	6862      	ldr	r2, [r4, #4]
 8015288:	2100      	movs	r1, #0
 801528a:	4628      	mov	r0, r5
 801528c:	f7ea ffb0 	bl	80001f0 <memchr>
 8015290:	b108      	cbz	r0, 8015296 <_printf_i+0x1ea>
 8015292:	1b40      	subs	r0, r0, r5
 8015294:	6060      	str	r0, [r4, #4]
 8015296:	6863      	ldr	r3, [r4, #4]
 8015298:	6123      	str	r3, [r4, #16]
 801529a:	2300      	movs	r3, #0
 801529c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80152a0:	e7aa      	b.n	80151f8 <_printf_i+0x14c>
 80152a2:	6923      	ldr	r3, [r4, #16]
 80152a4:	462a      	mov	r2, r5
 80152a6:	4649      	mov	r1, r9
 80152a8:	4640      	mov	r0, r8
 80152aa:	47d0      	blx	sl
 80152ac:	3001      	adds	r0, #1
 80152ae:	d0ad      	beq.n	801520c <_printf_i+0x160>
 80152b0:	6823      	ldr	r3, [r4, #0]
 80152b2:	079b      	lsls	r3, r3, #30
 80152b4:	d413      	bmi.n	80152de <_printf_i+0x232>
 80152b6:	68e0      	ldr	r0, [r4, #12]
 80152b8:	9b03      	ldr	r3, [sp, #12]
 80152ba:	4298      	cmp	r0, r3
 80152bc:	bfb8      	it	lt
 80152be:	4618      	movlt	r0, r3
 80152c0:	e7a6      	b.n	8015210 <_printf_i+0x164>
 80152c2:	2301      	movs	r3, #1
 80152c4:	4632      	mov	r2, r6
 80152c6:	4649      	mov	r1, r9
 80152c8:	4640      	mov	r0, r8
 80152ca:	47d0      	blx	sl
 80152cc:	3001      	adds	r0, #1
 80152ce:	d09d      	beq.n	801520c <_printf_i+0x160>
 80152d0:	3501      	adds	r5, #1
 80152d2:	68e3      	ldr	r3, [r4, #12]
 80152d4:	9903      	ldr	r1, [sp, #12]
 80152d6:	1a5b      	subs	r3, r3, r1
 80152d8:	42ab      	cmp	r3, r5
 80152da:	dcf2      	bgt.n	80152c2 <_printf_i+0x216>
 80152dc:	e7eb      	b.n	80152b6 <_printf_i+0x20a>
 80152de:	2500      	movs	r5, #0
 80152e0:	f104 0619 	add.w	r6, r4, #25
 80152e4:	e7f5      	b.n	80152d2 <_printf_i+0x226>
 80152e6:	bf00      	nop
 80152e8:	08019c36 	.word	0x08019c36
 80152ec:	08019c47 	.word	0x08019c47

080152f0 <__sflush_r>:
 80152f0:	898a      	ldrh	r2, [r1, #12]
 80152f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152f6:	4605      	mov	r5, r0
 80152f8:	0710      	lsls	r0, r2, #28
 80152fa:	460c      	mov	r4, r1
 80152fc:	d458      	bmi.n	80153b0 <__sflush_r+0xc0>
 80152fe:	684b      	ldr	r3, [r1, #4]
 8015300:	2b00      	cmp	r3, #0
 8015302:	dc05      	bgt.n	8015310 <__sflush_r+0x20>
 8015304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015306:	2b00      	cmp	r3, #0
 8015308:	dc02      	bgt.n	8015310 <__sflush_r+0x20>
 801530a:	2000      	movs	r0, #0
 801530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015312:	2e00      	cmp	r6, #0
 8015314:	d0f9      	beq.n	801530a <__sflush_r+0x1a>
 8015316:	2300      	movs	r3, #0
 8015318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801531c:	682f      	ldr	r7, [r5, #0]
 801531e:	6a21      	ldr	r1, [r4, #32]
 8015320:	602b      	str	r3, [r5, #0]
 8015322:	d032      	beq.n	801538a <__sflush_r+0x9a>
 8015324:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015326:	89a3      	ldrh	r3, [r4, #12]
 8015328:	075a      	lsls	r2, r3, #29
 801532a:	d505      	bpl.n	8015338 <__sflush_r+0x48>
 801532c:	6863      	ldr	r3, [r4, #4]
 801532e:	1ac0      	subs	r0, r0, r3
 8015330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015332:	b10b      	cbz	r3, 8015338 <__sflush_r+0x48>
 8015334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015336:	1ac0      	subs	r0, r0, r3
 8015338:	2300      	movs	r3, #0
 801533a:	4602      	mov	r2, r0
 801533c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801533e:	6a21      	ldr	r1, [r4, #32]
 8015340:	4628      	mov	r0, r5
 8015342:	47b0      	blx	r6
 8015344:	1c43      	adds	r3, r0, #1
 8015346:	89a3      	ldrh	r3, [r4, #12]
 8015348:	d106      	bne.n	8015358 <__sflush_r+0x68>
 801534a:	6829      	ldr	r1, [r5, #0]
 801534c:	291d      	cmp	r1, #29
 801534e:	d82b      	bhi.n	80153a8 <__sflush_r+0xb8>
 8015350:	4a29      	ldr	r2, [pc, #164]	; (80153f8 <__sflush_r+0x108>)
 8015352:	410a      	asrs	r2, r1
 8015354:	07d6      	lsls	r6, r2, #31
 8015356:	d427      	bmi.n	80153a8 <__sflush_r+0xb8>
 8015358:	2200      	movs	r2, #0
 801535a:	6062      	str	r2, [r4, #4]
 801535c:	04d9      	lsls	r1, r3, #19
 801535e:	6922      	ldr	r2, [r4, #16]
 8015360:	6022      	str	r2, [r4, #0]
 8015362:	d504      	bpl.n	801536e <__sflush_r+0x7e>
 8015364:	1c42      	adds	r2, r0, #1
 8015366:	d101      	bne.n	801536c <__sflush_r+0x7c>
 8015368:	682b      	ldr	r3, [r5, #0]
 801536a:	b903      	cbnz	r3, 801536e <__sflush_r+0x7e>
 801536c:	6560      	str	r0, [r4, #84]	; 0x54
 801536e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015370:	602f      	str	r7, [r5, #0]
 8015372:	2900      	cmp	r1, #0
 8015374:	d0c9      	beq.n	801530a <__sflush_r+0x1a>
 8015376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801537a:	4299      	cmp	r1, r3
 801537c:	d002      	beq.n	8015384 <__sflush_r+0x94>
 801537e:	4628      	mov	r0, r5
 8015380:	f7fe fbb2 	bl	8013ae8 <_free_r>
 8015384:	2000      	movs	r0, #0
 8015386:	6360      	str	r0, [r4, #52]	; 0x34
 8015388:	e7c0      	b.n	801530c <__sflush_r+0x1c>
 801538a:	2301      	movs	r3, #1
 801538c:	4628      	mov	r0, r5
 801538e:	47b0      	blx	r6
 8015390:	1c41      	adds	r1, r0, #1
 8015392:	d1c8      	bne.n	8015326 <__sflush_r+0x36>
 8015394:	682b      	ldr	r3, [r5, #0]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d0c5      	beq.n	8015326 <__sflush_r+0x36>
 801539a:	2b1d      	cmp	r3, #29
 801539c:	d001      	beq.n	80153a2 <__sflush_r+0xb2>
 801539e:	2b16      	cmp	r3, #22
 80153a0:	d101      	bne.n	80153a6 <__sflush_r+0xb6>
 80153a2:	602f      	str	r7, [r5, #0]
 80153a4:	e7b1      	b.n	801530a <__sflush_r+0x1a>
 80153a6:	89a3      	ldrh	r3, [r4, #12]
 80153a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153ac:	81a3      	strh	r3, [r4, #12]
 80153ae:	e7ad      	b.n	801530c <__sflush_r+0x1c>
 80153b0:	690f      	ldr	r7, [r1, #16]
 80153b2:	2f00      	cmp	r7, #0
 80153b4:	d0a9      	beq.n	801530a <__sflush_r+0x1a>
 80153b6:	0793      	lsls	r3, r2, #30
 80153b8:	680e      	ldr	r6, [r1, #0]
 80153ba:	bf08      	it	eq
 80153bc:	694b      	ldreq	r3, [r1, #20]
 80153be:	600f      	str	r7, [r1, #0]
 80153c0:	bf18      	it	ne
 80153c2:	2300      	movne	r3, #0
 80153c4:	eba6 0807 	sub.w	r8, r6, r7
 80153c8:	608b      	str	r3, [r1, #8]
 80153ca:	f1b8 0f00 	cmp.w	r8, #0
 80153ce:	dd9c      	ble.n	801530a <__sflush_r+0x1a>
 80153d0:	6a21      	ldr	r1, [r4, #32]
 80153d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80153d4:	4643      	mov	r3, r8
 80153d6:	463a      	mov	r2, r7
 80153d8:	4628      	mov	r0, r5
 80153da:	47b0      	blx	r6
 80153dc:	2800      	cmp	r0, #0
 80153de:	dc06      	bgt.n	80153ee <__sflush_r+0xfe>
 80153e0:	89a3      	ldrh	r3, [r4, #12]
 80153e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153e6:	81a3      	strh	r3, [r4, #12]
 80153e8:	f04f 30ff 	mov.w	r0, #4294967295
 80153ec:	e78e      	b.n	801530c <__sflush_r+0x1c>
 80153ee:	4407      	add	r7, r0
 80153f0:	eba8 0800 	sub.w	r8, r8, r0
 80153f4:	e7e9      	b.n	80153ca <__sflush_r+0xda>
 80153f6:	bf00      	nop
 80153f8:	dfbffffe 	.word	0xdfbffffe

080153fc <_fflush_r>:
 80153fc:	b538      	push	{r3, r4, r5, lr}
 80153fe:	690b      	ldr	r3, [r1, #16]
 8015400:	4605      	mov	r5, r0
 8015402:	460c      	mov	r4, r1
 8015404:	b913      	cbnz	r3, 801540c <_fflush_r+0x10>
 8015406:	2500      	movs	r5, #0
 8015408:	4628      	mov	r0, r5
 801540a:	bd38      	pop	{r3, r4, r5, pc}
 801540c:	b118      	cbz	r0, 8015416 <_fflush_r+0x1a>
 801540e:	6a03      	ldr	r3, [r0, #32]
 8015410:	b90b      	cbnz	r3, 8015416 <_fflush_r+0x1a>
 8015412:	f7fe f921 	bl	8013658 <__sinit>
 8015416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d0f3      	beq.n	8015406 <_fflush_r+0xa>
 801541e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015420:	07d0      	lsls	r0, r2, #31
 8015422:	d404      	bmi.n	801542e <_fflush_r+0x32>
 8015424:	0599      	lsls	r1, r3, #22
 8015426:	d402      	bmi.n	801542e <_fflush_r+0x32>
 8015428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801542a:	f7fe fb44 	bl	8013ab6 <__retarget_lock_acquire_recursive>
 801542e:	4628      	mov	r0, r5
 8015430:	4621      	mov	r1, r4
 8015432:	f7ff ff5d 	bl	80152f0 <__sflush_r>
 8015436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015438:	07da      	lsls	r2, r3, #31
 801543a:	4605      	mov	r5, r0
 801543c:	d4e4      	bmi.n	8015408 <_fflush_r+0xc>
 801543e:	89a3      	ldrh	r3, [r4, #12]
 8015440:	059b      	lsls	r3, r3, #22
 8015442:	d4e1      	bmi.n	8015408 <_fflush_r+0xc>
 8015444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015446:	f7fe fb37 	bl	8013ab8 <__retarget_lock_release_recursive>
 801544a:	e7dd      	b.n	8015408 <_fflush_r+0xc>

0801544c <__swhatbuf_r>:
 801544c:	b570      	push	{r4, r5, r6, lr}
 801544e:	460c      	mov	r4, r1
 8015450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015454:	2900      	cmp	r1, #0
 8015456:	b096      	sub	sp, #88	; 0x58
 8015458:	4615      	mov	r5, r2
 801545a:	461e      	mov	r6, r3
 801545c:	da0d      	bge.n	801547a <__swhatbuf_r+0x2e>
 801545e:	89a3      	ldrh	r3, [r4, #12]
 8015460:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015464:	f04f 0100 	mov.w	r1, #0
 8015468:	bf0c      	ite	eq
 801546a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801546e:	2340      	movne	r3, #64	; 0x40
 8015470:	2000      	movs	r0, #0
 8015472:	6031      	str	r1, [r6, #0]
 8015474:	602b      	str	r3, [r5, #0]
 8015476:	b016      	add	sp, #88	; 0x58
 8015478:	bd70      	pop	{r4, r5, r6, pc}
 801547a:	466a      	mov	r2, sp
 801547c:	f000 f862 	bl	8015544 <_fstat_r>
 8015480:	2800      	cmp	r0, #0
 8015482:	dbec      	blt.n	801545e <__swhatbuf_r+0x12>
 8015484:	9901      	ldr	r1, [sp, #4]
 8015486:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801548a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801548e:	4259      	negs	r1, r3
 8015490:	4159      	adcs	r1, r3
 8015492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015496:	e7eb      	b.n	8015470 <__swhatbuf_r+0x24>

08015498 <__smakebuf_r>:
 8015498:	898b      	ldrh	r3, [r1, #12]
 801549a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801549c:	079d      	lsls	r5, r3, #30
 801549e:	4606      	mov	r6, r0
 80154a0:	460c      	mov	r4, r1
 80154a2:	d507      	bpl.n	80154b4 <__smakebuf_r+0x1c>
 80154a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80154a8:	6023      	str	r3, [r4, #0]
 80154aa:	6123      	str	r3, [r4, #16]
 80154ac:	2301      	movs	r3, #1
 80154ae:	6163      	str	r3, [r4, #20]
 80154b0:	b002      	add	sp, #8
 80154b2:	bd70      	pop	{r4, r5, r6, pc}
 80154b4:	ab01      	add	r3, sp, #4
 80154b6:	466a      	mov	r2, sp
 80154b8:	f7ff ffc8 	bl	801544c <__swhatbuf_r>
 80154bc:	9900      	ldr	r1, [sp, #0]
 80154be:	4605      	mov	r5, r0
 80154c0:	4630      	mov	r0, r6
 80154c2:	f7fe fed5 	bl	8014270 <_malloc_r>
 80154c6:	b948      	cbnz	r0, 80154dc <__smakebuf_r+0x44>
 80154c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154cc:	059a      	lsls	r2, r3, #22
 80154ce:	d4ef      	bmi.n	80154b0 <__smakebuf_r+0x18>
 80154d0:	f023 0303 	bic.w	r3, r3, #3
 80154d4:	f043 0302 	orr.w	r3, r3, #2
 80154d8:	81a3      	strh	r3, [r4, #12]
 80154da:	e7e3      	b.n	80154a4 <__smakebuf_r+0xc>
 80154dc:	89a3      	ldrh	r3, [r4, #12]
 80154de:	6020      	str	r0, [r4, #0]
 80154e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154e4:	81a3      	strh	r3, [r4, #12]
 80154e6:	9b00      	ldr	r3, [sp, #0]
 80154e8:	6163      	str	r3, [r4, #20]
 80154ea:	9b01      	ldr	r3, [sp, #4]
 80154ec:	6120      	str	r0, [r4, #16]
 80154ee:	b15b      	cbz	r3, 8015508 <__smakebuf_r+0x70>
 80154f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154f4:	4630      	mov	r0, r6
 80154f6:	f000 f837 	bl	8015568 <_isatty_r>
 80154fa:	b128      	cbz	r0, 8015508 <__smakebuf_r+0x70>
 80154fc:	89a3      	ldrh	r3, [r4, #12]
 80154fe:	f023 0303 	bic.w	r3, r3, #3
 8015502:	f043 0301 	orr.w	r3, r3, #1
 8015506:	81a3      	strh	r3, [r4, #12]
 8015508:	89a3      	ldrh	r3, [r4, #12]
 801550a:	431d      	orrs	r5, r3
 801550c:	81a5      	strh	r5, [r4, #12]
 801550e:	e7cf      	b.n	80154b0 <__smakebuf_r+0x18>

08015510 <memmove>:
 8015510:	4288      	cmp	r0, r1
 8015512:	b510      	push	{r4, lr}
 8015514:	eb01 0402 	add.w	r4, r1, r2
 8015518:	d902      	bls.n	8015520 <memmove+0x10>
 801551a:	4284      	cmp	r4, r0
 801551c:	4623      	mov	r3, r4
 801551e:	d807      	bhi.n	8015530 <memmove+0x20>
 8015520:	1e43      	subs	r3, r0, #1
 8015522:	42a1      	cmp	r1, r4
 8015524:	d008      	beq.n	8015538 <memmove+0x28>
 8015526:	f811 2b01 	ldrb.w	r2, [r1], #1
 801552a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801552e:	e7f8      	b.n	8015522 <memmove+0x12>
 8015530:	4402      	add	r2, r0
 8015532:	4601      	mov	r1, r0
 8015534:	428a      	cmp	r2, r1
 8015536:	d100      	bne.n	801553a <memmove+0x2a>
 8015538:	bd10      	pop	{r4, pc}
 801553a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801553e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015542:	e7f7      	b.n	8015534 <memmove+0x24>

08015544 <_fstat_r>:
 8015544:	b538      	push	{r3, r4, r5, lr}
 8015546:	4d07      	ldr	r5, [pc, #28]	; (8015564 <_fstat_r+0x20>)
 8015548:	2300      	movs	r3, #0
 801554a:	4604      	mov	r4, r0
 801554c:	4608      	mov	r0, r1
 801554e:	4611      	mov	r1, r2
 8015550:	602b      	str	r3, [r5, #0]
 8015552:	f7f0 f85e 	bl	8005612 <_fstat>
 8015556:	1c43      	adds	r3, r0, #1
 8015558:	d102      	bne.n	8015560 <_fstat_r+0x1c>
 801555a:	682b      	ldr	r3, [r5, #0]
 801555c:	b103      	cbz	r3, 8015560 <_fstat_r+0x1c>
 801555e:	6023      	str	r3, [r4, #0]
 8015560:	bd38      	pop	{r3, r4, r5, pc}
 8015562:	bf00      	nop
 8015564:	20000ea8 	.word	0x20000ea8

08015568 <_isatty_r>:
 8015568:	b538      	push	{r3, r4, r5, lr}
 801556a:	4d06      	ldr	r5, [pc, #24]	; (8015584 <_isatty_r+0x1c>)
 801556c:	2300      	movs	r3, #0
 801556e:	4604      	mov	r4, r0
 8015570:	4608      	mov	r0, r1
 8015572:	602b      	str	r3, [r5, #0]
 8015574:	f7f0 f85d 	bl	8005632 <_isatty>
 8015578:	1c43      	adds	r3, r0, #1
 801557a:	d102      	bne.n	8015582 <_isatty_r+0x1a>
 801557c:	682b      	ldr	r3, [r5, #0]
 801557e:	b103      	cbz	r3, 8015582 <_isatty_r+0x1a>
 8015580:	6023      	str	r3, [r4, #0]
 8015582:	bd38      	pop	{r3, r4, r5, pc}
 8015584:	20000ea8 	.word	0x20000ea8

08015588 <_sbrk_r>:
 8015588:	b538      	push	{r3, r4, r5, lr}
 801558a:	4d06      	ldr	r5, [pc, #24]	; (80155a4 <_sbrk_r+0x1c>)
 801558c:	2300      	movs	r3, #0
 801558e:	4604      	mov	r4, r0
 8015590:	4608      	mov	r0, r1
 8015592:	602b      	str	r3, [r5, #0]
 8015594:	f7f0 f866 	bl	8005664 <_sbrk>
 8015598:	1c43      	adds	r3, r0, #1
 801559a:	d102      	bne.n	80155a2 <_sbrk_r+0x1a>
 801559c:	682b      	ldr	r3, [r5, #0]
 801559e:	b103      	cbz	r3, 80155a2 <_sbrk_r+0x1a>
 80155a0:	6023      	str	r3, [r4, #0]
 80155a2:	bd38      	pop	{r3, r4, r5, pc}
 80155a4:	20000ea8 	.word	0x20000ea8

080155a8 <__assert_func>:
 80155a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80155aa:	4614      	mov	r4, r2
 80155ac:	461a      	mov	r2, r3
 80155ae:	4b09      	ldr	r3, [pc, #36]	; (80155d4 <__assert_func+0x2c>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	4605      	mov	r5, r0
 80155b4:	68d8      	ldr	r0, [r3, #12]
 80155b6:	b14c      	cbz	r4, 80155cc <__assert_func+0x24>
 80155b8:	4b07      	ldr	r3, [pc, #28]	; (80155d8 <__assert_func+0x30>)
 80155ba:	9100      	str	r1, [sp, #0]
 80155bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80155c0:	4906      	ldr	r1, [pc, #24]	; (80155dc <__assert_func+0x34>)
 80155c2:	462b      	mov	r3, r5
 80155c4:	f000 f85c 	bl	8015680 <fiprintf>
 80155c8:	f000 f86c 	bl	80156a4 <abort>
 80155cc:	4b04      	ldr	r3, [pc, #16]	; (80155e0 <__assert_func+0x38>)
 80155ce:	461c      	mov	r4, r3
 80155d0:	e7f3      	b.n	80155ba <__assert_func+0x12>
 80155d2:	bf00      	nop
 80155d4:	20000368 	.word	0x20000368
 80155d8:	08019c58 	.word	0x08019c58
 80155dc:	08019c65 	.word	0x08019c65
 80155e0:	08019c93 	.word	0x08019c93

080155e4 <_calloc_r>:
 80155e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155e6:	fba1 2402 	umull	r2, r4, r1, r2
 80155ea:	b94c      	cbnz	r4, 8015600 <_calloc_r+0x1c>
 80155ec:	4611      	mov	r1, r2
 80155ee:	9201      	str	r2, [sp, #4]
 80155f0:	f7fe fe3e 	bl	8014270 <_malloc_r>
 80155f4:	9a01      	ldr	r2, [sp, #4]
 80155f6:	4605      	mov	r5, r0
 80155f8:	b930      	cbnz	r0, 8015608 <_calloc_r+0x24>
 80155fa:	4628      	mov	r0, r5
 80155fc:	b003      	add	sp, #12
 80155fe:	bd30      	pop	{r4, r5, pc}
 8015600:	220c      	movs	r2, #12
 8015602:	6002      	str	r2, [r0, #0]
 8015604:	2500      	movs	r5, #0
 8015606:	e7f8      	b.n	80155fa <_calloc_r+0x16>
 8015608:	4621      	mov	r1, r4
 801560a:	f7fe f9c9 	bl	80139a0 <memset>
 801560e:	e7f4      	b.n	80155fa <_calloc_r+0x16>

08015610 <malloc>:
 8015610:	4b02      	ldr	r3, [pc, #8]	; (801561c <malloc+0xc>)
 8015612:	4601      	mov	r1, r0
 8015614:	6818      	ldr	r0, [r3, #0]
 8015616:	f7fe be2b 	b.w	8014270 <_malloc_r>
 801561a:	bf00      	nop
 801561c:	20000368 	.word	0x20000368

08015620 <_realloc_r>:
 8015620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015624:	4680      	mov	r8, r0
 8015626:	4614      	mov	r4, r2
 8015628:	460e      	mov	r6, r1
 801562a:	b921      	cbnz	r1, 8015636 <_realloc_r+0x16>
 801562c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015630:	4611      	mov	r1, r2
 8015632:	f7fe be1d 	b.w	8014270 <_malloc_r>
 8015636:	b92a      	cbnz	r2, 8015644 <_realloc_r+0x24>
 8015638:	f7fe fa56 	bl	8013ae8 <_free_r>
 801563c:	4625      	mov	r5, r4
 801563e:	4628      	mov	r0, r5
 8015640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015644:	f000 f835 	bl	80156b2 <_malloc_usable_size_r>
 8015648:	4284      	cmp	r4, r0
 801564a:	4607      	mov	r7, r0
 801564c:	d802      	bhi.n	8015654 <_realloc_r+0x34>
 801564e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015652:	d812      	bhi.n	801567a <_realloc_r+0x5a>
 8015654:	4621      	mov	r1, r4
 8015656:	4640      	mov	r0, r8
 8015658:	f7fe fe0a 	bl	8014270 <_malloc_r>
 801565c:	4605      	mov	r5, r0
 801565e:	2800      	cmp	r0, #0
 8015660:	d0ed      	beq.n	801563e <_realloc_r+0x1e>
 8015662:	42bc      	cmp	r4, r7
 8015664:	4622      	mov	r2, r4
 8015666:	4631      	mov	r1, r6
 8015668:	bf28      	it	cs
 801566a:	463a      	movcs	r2, r7
 801566c:	f7fe fa25 	bl	8013aba <memcpy>
 8015670:	4631      	mov	r1, r6
 8015672:	4640      	mov	r0, r8
 8015674:	f7fe fa38 	bl	8013ae8 <_free_r>
 8015678:	e7e1      	b.n	801563e <_realloc_r+0x1e>
 801567a:	4635      	mov	r5, r6
 801567c:	e7df      	b.n	801563e <_realloc_r+0x1e>
	...

08015680 <fiprintf>:
 8015680:	b40e      	push	{r1, r2, r3}
 8015682:	b503      	push	{r0, r1, lr}
 8015684:	4601      	mov	r1, r0
 8015686:	ab03      	add	r3, sp, #12
 8015688:	4805      	ldr	r0, [pc, #20]	; (80156a0 <fiprintf+0x20>)
 801568a:	f853 2b04 	ldr.w	r2, [r3], #4
 801568e:	6800      	ldr	r0, [r0, #0]
 8015690:	9301      	str	r3, [sp, #4]
 8015692:	f000 f83f 	bl	8015714 <_vfiprintf_r>
 8015696:	b002      	add	sp, #8
 8015698:	f85d eb04 	ldr.w	lr, [sp], #4
 801569c:	b003      	add	sp, #12
 801569e:	4770      	bx	lr
 80156a0:	20000368 	.word	0x20000368

080156a4 <abort>:
 80156a4:	b508      	push	{r3, lr}
 80156a6:	2006      	movs	r0, #6
 80156a8:	f000 f976 	bl	8015998 <raise>
 80156ac:	2001      	movs	r0, #1
 80156ae:	f7ef ff61 	bl	8005574 <_exit>

080156b2 <_malloc_usable_size_r>:
 80156b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156b6:	1f18      	subs	r0, r3, #4
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	bfbc      	itt	lt
 80156bc:	580b      	ldrlt	r3, [r1, r0]
 80156be:	18c0      	addlt	r0, r0, r3
 80156c0:	4770      	bx	lr

080156c2 <__sfputc_r>:
 80156c2:	6893      	ldr	r3, [r2, #8]
 80156c4:	3b01      	subs	r3, #1
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	b410      	push	{r4}
 80156ca:	6093      	str	r3, [r2, #8]
 80156cc:	da08      	bge.n	80156e0 <__sfputc_r+0x1e>
 80156ce:	6994      	ldr	r4, [r2, #24]
 80156d0:	42a3      	cmp	r3, r4
 80156d2:	db01      	blt.n	80156d8 <__sfputc_r+0x16>
 80156d4:	290a      	cmp	r1, #10
 80156d6:	d103      	bne.n	80156e0 <__sfputc_r+0x1e>
 80156d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156dc:	f7fe b8ca 	b.w	8013874 <__swbuf_r>
 80156e0:	6813      	ldr	r3, [r2, #0]
 80156e2:	1c58      	adds	r0, r3, #1
 80156e4:	6010      	str	r0, [r2, #0]
 80156e6:	7019      	strb	r1, [r3, #0]
 80156e8:	4608      	mov	r0, r1
 80156ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156ee:	4770      	bx	lr

080156f0 <__sfputs_r>:
 80156f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156f2:	4606      	mov	r6, r0
 80156f4:	460f      	mov	r7, r1
 80156f6:	4614      	mov	r4, r2
 80156f8:	18d5      	adds	r5, r2, r3
 80156fa:	42ac      	cmp	r4, r5
 80156fc:	d101      	bne.n	8015702 <__sfputs_r+0x12>
 80156fe:	2000      	movs	r0, #0
 8015700:	e007      	b.n	8015712 <__sfputs_r+0x22>
 8015702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015706:	463a      	mov	r2, r7
 8015708:	4630      	mov	r0, r6
 801570a:	f7ff ffda 	bl	80156c2 <__sfputc_r>
 801570e:	1c43      	adds	r3, r0, #1
 8015710:	d1f3      	bne.n	80156fa <__sfputs_r+0xa>
 8015712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015714 <_vfiprintf_r>:
 8015714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015718:	460d      	mov	r5, r1
 801571a:	b09d      	sub	sp, #116	; 0x74
 801571c:	4614      	mov	r4, r2
 801571e:	4698      	mov	r8, r3
 8015720:	4606      	mov	r6, r0
 8015722:	b118      	cbz	r0, 801572c <_vfiprintf_r+0x18>
 8015724:	6a03      	ldr	r3, [r0, #32]
 8015726:	b90b      	cbnz	r3, 801572c <_vfiprintf_r+0x18>
 8015728:	f7fd ff96 	bl	8013658 <__sinit>
 801572c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801572e:	07d9      	lsls	r1, r3, #31
 8015730:	d405      	bmi.n	801573e <_vfiprintf_r+0x2a>
 8015732:	89ab      	ldrh	r3, [r5, #12]
 8015734:	059a      	lsls	r2, r3, #22
 8015736:	d402      	bmi.n	801573e <_vfiprintf_r+0x2a>
 8015738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801573a:	f7fe f9bc 	bl	8013ab6 <__retarget_lock_acquire_recursive>
 801573e:	89ab      	ldrh	r3, [r5, #12]
 8015740:	071b      	lsls	r3, r3, #28
 8015742:	d501      	bpl.n	8015748 <_vfiprintf_r+0x34>
 8015744:	692b      	ldr	r3, [r5, #16]
 8015746:	b99b      	cbnz	r3, 8015770 <_vfiprintf_r+0x5c>
 8015748:	4629      	mov	r1, r5
 801574a:	4630      	mov	r0, r6
 801574c:	f7fe f8d0 	bl	80138f0 <__swsetup_r>
 8015750:	b170      	cbz	r0, 8015770 <_vfiprintf_r+0x5c>
 8015752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015754:	07dc      	lsls	r4, r3, #31
 8015756:	d504      	bpl.n	8015762 <_vfiprintf_r+0x4e>
 8015758:	f04f 30ff 	mov.w	r0, #4294967295
 801575c:	b01d      	add	sp, #116	; 0x74
 801575e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015762:	89ab      	ldrh	r3, [r5, #12]
 8015764:	0598      	lsls	r0, r3, #22
 8015766:	d4f7      	bmi.n	8015758 <_vfiprintf_r+0x44>
 8015768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801576a:	f7fe f9a5 	bl	8013ab8 <__retarget_lock_release_recursive>
 801576e:	e7f3      	b.n	8015758 <_vfiprintf_r+0x44>
 8015770:	2300      	movs	r3, #0
 8015772:	9309      	str	r3, [sp, #36]	; 0x24
 8015774:	2320      	movs	r3, #32
 8015776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801577a:	f8cd 800c 	str.w	r8, [sp, #12]
 801577e:	2330      	movs	r3, #48	; 0x30
 8015780:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015934 <_vfiprintf_r+0x220>
 8015784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015788:	f04f 0901 	mov.w	r9, #1
 801578c:	4623      	mov	r3, r4
 801578e:	469a      	mov	sl, r3
 8015790:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015794:	b10a      	cbz	r2, 801579a <_vfiprintf_r+0x86>
 8015796:	2a25      	cmp	r2, #37	; 0x25
 8015798:	d1f9      	bne.n	801578e <_vfiprintf_r+0x7a>
 801579a:	ebba 0b04 	subs.w	fp, sl, r4
 801579e:	d00b      	beq.n	80157b8 <_vfiprintf_r+0xa4>
 80157a0:	465b      	mov	r3, fp
 80157a2:	4622      	mov	r2, r4
 80157a4:	4629      	mov	r1, r5
 80157a6:	4630      	mov	r0, r6
 80157a8:	f7ff ffa2 	bl	80156f0 <__sfputs_r>
 80157ac:	3001      	adds	r0, #1
 80157ae:	f000 80a9 	beq.w	8015904 <_vfiprintf_r+0x1f0>
 80157b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157b4:	445a      	add	r2, fp
 80157b6:	9209      	str	r2, [sp, #36]	; 0x24
 80157b8:	f89a 3000 	ldrb.w	r3, [sl]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	f000 80a1 	beq.w	8015904 <_vfiprintf_r+0x1f0>
 80157c2:	2300      	movs	r3, #0
 80157c4:	f04f 32ff 	mov.w	r2, #4294967295
 80157c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80157cc:	f10a 0a01 	add.w	sl, sl, #1
 80157d0:	9304      	str	r3, [sp, #16]
 80157d2:	9307      	str	r3, [sp, #28]
 80157d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80157d8:	931a      	str	r3, [sp, #104]	; 0x68
 80157da:	4654      	mov	r4, sl
 80157dc:	2205      	movs	r2, #5
 80157de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157e2:	4854      	ldr	r0, [pc, #336]	; (8015934 <_vfiprintf_r+0x220>)
 80157e4:	f7ea fd04 	bl	80001f0 <memchr>
 80157e8:	9a04      	ldr	r2, [sp, #16]
 80157ea:	b9d8      	cbnz	r0, 8015824 <_vfiprintf_r+0x110>
 80157ec:	06d1      	lsls	r1, r2, #27
 80157ee:	bf44      	itt	mi
 80157f0:	2320      	movmi	r3, #32
 80157f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157f6:	0713      	lsls	r3, r2, #28
 80157f8:	bf44      	itt	mi
 80157fa:	232b      	movmi	r3, #43	; 0x2b
 80157fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015800:	f89a 3000 	ldrb.w	r3, [sl]
 8015804:	2b2a      	cmp	r3, #42	; 0x2a
 8015806:	d015      	beq.n	8015834 <_vfiprintf_r+0x120>
 8015808:	9a07      	ldr	r2, [sp, #28]
 801580a:	4654      	mov	r4, sl
 801580c:	2000      	movs	r0, #0
 801580e:	f04f 0c0a 	mov.w	ip, #10
 8015812:	4621      	mov	r1, r4
 8015814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015818:	3b30      	subs	r3, #48	; 0x30
 801581a:	2b09      	cmp	r3, #9
 801581c:	d94d      	bls.n	80158ba <_vfiprintf_r+0x1a6>
 801581e:	b1b0      	cbz	r0, 801584e <_vfiprintf_r+0x13a>
 8015820:	9207      	str	r2, [sp, #28]
 8015822:	e014      	b.n	801584e <_vfiprintf_r+0x13a>
 8015824:	eba0 0308 	sub.w	r3, r0, r8
 8015828:	fa09 f303 	lsl.w	r3, r9, r3
 801582c:	4313      	orrs	r3, r2
 801582e:	9304      	str	r3, [sp, #16]
 8015830:	46a2      	mov	sl, r4
 8015832:	e7d2      	b.n	80157da <_vfiprintf_r+0xc6>
 8015834:	9b03      	ldr	r3, [sp, #12]
 8015836:	1d19      	adds	r1, r3, #4
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	9103      	str	r1, [sp, #12]
 801583c:	2b00      	cmp	r3, #0
 801583e:	bfbb      	ittet	lt
 8015840:	425b      	neglt	r3, r3
 8015842:	f042 0202 	orrlt.w	r2, r2, #2
 8015846:	9307      	strge	r3, [sp, #28]
 8015848:	9307      	strlt	r3, [sp, #28]
 801584a:	bfb8      	it	lt
 801584c:	9204      	strlt	r2, [sp, #16]
 801584e:	7823      	ldrb	r3, [r4, #0]
 8015850:	2b2e      	cmp	r3, #46	; 0x2e
 8015852:	d10c      	bne.n	801586e <_vfiprintf_r+0x15a>
 8015854:	7863      	ldrb	r3, [r4, #1]
 8015856:	2b2a      	cmp	r3, #42	; 0x2a
 8015858:	d134      	bne.n	80158c4 <_vfiprintf_r+0x1b0>
 801585a:	9b03      	ldr	r3, [sp, #12]
 801585c:	1d1a      	adds	r2, r3, #4
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	9203      	str	r2, [sp, #12]
 8015862:	2b00      	cmp	r3, #0
 8015864:	bfb8      	it	lt
 8015866:	f04f 33ff 	movlt.w	r3, #4294967295
 801586a:	3402      	adds	r4, #2
 801586c:	9305      	str	r3, [sp, #20]
 801586e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015944 <_vfiprintf_r+0x230>
 8015872:	7821      	ldrb	r1, [r4, #0]
 8015874:	2203      	movs	r2, #3
 8015876:	4650      	mov	r0, sl
 8015878:	f7ea fcba 	bl	80001f0 <memchr>
 801587c:	b138      	cbz	r0, 801588e <_vfiprintf_r+0x17a>
 801587e:	9b04      	ldr	r3, [sp, #16]
 8015880:	eba0 000a 	sub.w	r0, r0, sl
 8015884:	2240      	movs	r2, #64	; 0x40
 8015886:	4082      	lsls	r2, r0
 8015888:	4313      	orrs	r3, r2
 801588a:	3401      	adds	r4, #1
 801588c:	9304      	str	r3, [sp, #16]
 801588e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015892:	4829      	ldr	r0, [pc, #164]	; (8015938 <_vfiprintf_r+0x224>)
 8015894:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015898:	2206      	movs	r2, #6
 801589a:	f7ea fca9 	bl	80001f0 <memchr>
 801589e:	2800      	cmp	r0, #0
 80158a0:	d03f      	beq.n	8015922 <_vfiprintf_r+0x20e>
 80158a2:	4b26      	ldr	r3, [pc, #152]	; (801593c <_vfiprintf_r+0x228>)
 80158a4:	bb1b      	cbnz	r3, 80158ee <_vfiprintf_r+0x1da>
 80158a6:	9b03      	ldr	r3, [sp, #12]
 80158a8:	3307      	adds	r3, #7
 80158aa:	f023 0307 	bic.w	r3, r3, #7
 80158ae:	3308      	adds	r3, #8
 80158b0:	9303      	str	r3, [sp, #12]
 80158b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158b4:	443b      	add	r3, r7
 80158b6:	9309      	str	r3, [sp, #36]	; 0x24
 80158b8:	e768      	b.n	801578c <_vfiprintf_r+0x78>
 80158ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80158be:	460c      	mov	r4, r1
 80158c0:	2001      	movs	r0, #1
 80158c2:	e7a6      	b.n	8015812 <_vfiprintf_r+0xfe>
 80158c4:	2300      	movs	r3, #0
 80158c6:	3401      	adds	r4, #1
 80158c8:	9305      	str	r3, [sp, #20]
 80158ca:	4619      	mov	r1, r3
 80158cc:	f04f 0c0a 	mov.w	ip, #10
 80158d0:	4620      	mov	r0, r4
 80158d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158d6:	3a30      	subs	r2, #48	; 0x30
 80158d8:	2a09      	cmp	r2, #9
 80158da:	d903      	bls.n	80158e4 <_vfiprintf_r+0x1d0>
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d0c6      	beq.n	801586e <_vfiprintf_r+0x15a>
 80158e0:	9105      	str	r1, [sp, #20]
 80158e2:	e7c4      	b.n	801586e <_vfiprintf_r+0x15a>
 80158e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80158e8:	4604      	mov	r4, r0
 80158ea:	2301      	movs	r3, #1
 80158ec:	e7f0      	b.n	80158d0 <_vfiprintf_r+0x1bc>
 80158ee:	ab03      	add	r3, sp, #12
 80158f0:	9300      	str	r3, [sp, #0]
 80158f2:	462a      	mov	r2, r5
 80158f4:	4b12      	ldr	r3, [pc, #72]	; (8015940 <_vfiprintf_r+0x22c>)
 80158f6:	a904      	add	r1, sp, #16
 80158f8:	4630      	mov	r0, r6
 80158fa:	f3af 8000 	nop.w
 80158fe:	4607      	mov	r7, r0
 8015900:	1c78      	adds	r0, r7, #1
 8015902:	d1d6      	bne.n	80158b2 <_vfiprintf_r+0x19e>
 8015904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015906:	07d9      	lsls	r1, r3, #31
 8015908:	d405      	bmi.n	8015916 <_vfiprintf_r+0x202>
 801590a:	89ab      	ldrh	r3, [r5, #12]
 801590c:	059a      	lsls	r2, r3, #22
 801590e:	d402      	bmi.n	8015916 <_vfiprintf_r+0x202>
 8015910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015912:	f7fe f8d1 	bl	8013ab8 <__retarget_lock_release_recursive>
 8015916:	89ab      	ldrh	r3, [r5, #12]
 8015918:	065b      	lsls	r3, r3, #25
 801591a:	f53f af1d 	bmi.w	8015758 <_vfiprintf_r+0x44>
 801591e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015920:	e71c      	b.n	801575c <_vfiprintf_r+0x48>
 8015922:	ab03      	add	r3, sp, #12
 8015924:	9300      	str	r3, [sp, #0]
 8015926:	462a      	mov	r2, r5
 8015928:	4b05      	ldr	r3, [pc, #20]	; (8015940 <_vfiprintf_r+0x22c>)
 801592a:	a904      	add	r1, sp, #16
 801592c:	4630      	mov	r0, r6
 801592e:	f7ff fbbd 	bl	80150ac <_printf_i>
 8015932:	e7e4      	b.n	80158fe <_vfiprintf_r+0x1ea>
 8015934:	08019c25 	.word	0x08019c25
 8015938:	08019c2f 	.word	0x08019c2f
 801593c:	00000000 	.word	0x00000000
 8015940:	080156f1 	.word	0x080156f1
 8015944:	08019c2b 	.word	0x08019c2b

08015948 <_raise_r>:
 8015948:	291f      	cmp	r1, #31
 801594a:	b538      	push	{r3, r4, r5, lr}
 801594c:	4604      	mov	r4, r0
 801594e:	460d      	mov	r5, r1
 8015950:	d904      	bls.n	801595c <_raise_r+0x14>
 8015952:	2316      	movs	r3, #22
 8015954:	6003      	str	r3, [r0, #0]
 8015956:	f04f 30ff 	mov.w	r0, #4294967295
 801595a:	bd38      	pop	{r3, r4, r5, pc}
 801595c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801595e:	b112      	cbz	r2, 8015966 <_raise_r+0x1e>
 8015960:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015964:	b94b      	cbnz	r3, 801597a <_raise_r+0x32>
 8015966:	4620      	mov	r0, r4
 8015968:	f000 f830 	bl	80159cc <_getpid_r>
 801596c:	462a      	mov	r2, r5
 801596e:	4601      	mov	r1, r0
 8015970:	4620      	mov	r0, r4
 8015972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015976:	f000 b817 	b.w	80159a8 <_kill_r>
 801597a:	2b01      	cmp	r3, #1
 801597c:	d00a      	beq.n	8015994 <_raise_r+0x4c>
 801597e:	1c59      	adds	r1, r3, #1
 8015980:	d103      	bne.n	801598a <_raise_r+0x42>
 8015982:	2316      	movs	r3, #22
 8015984:	6003      	str	r3, [r0, #0]
 8015986:	2001      	movs	r0, #1
 8015988:	e7e7      	b.n	801595a <_raise_r+0x12>
 801598a:	2400      	movs	r4, #0
 801598c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015990:	4628      	mov	r0, r5
 8015992:	4798      	blx	r3
 8015994:	2000      	movs	r0, #0
 8015996:	e7e0      	b.n	801595a <_raise_r+0x12>

08015998 <raise>:
 8015998:	4b02      	ldr	r3, [pc, #8]	; (80159a4 <raise+0xc>)
 801599a:	4601      	mov	r1, r0
 801599c:	6818      	ldr	r0, [r3, #0]
 801599e:	f7ff bfd3 	b.w	8015948 <_raise_r>
 80159a2:	bf00      	nop
 80159a4:	20000368 	.word	0x20000368

080159a8 <_kill_r>:
 80159a8:	b538      	push	{r3, r4, r5, lr}
 80159aa:	4d07      	ldr	r5, [pc, #28]	; (80159c8 <_kill_r+0x20>)
 80159ac:	2300      	movs	r3, #0
 80159ae:	4604      	mov	r4, r0
 80159b0:	4608      	mov	r0, r1
 80159b2:	4611      	mov	r1, r2
 80159b4:	602b      	str	r3, [r5, #0]
 80159b6:	f7ef fdcd 	bl	8005554 <_kill>
 80159ba:	1c43      	adds	r3, r0, #1
 80159bc:	d102      	bne.n	80159c4 <_kill_r+0x1c>
 80159be:	682b      	ldr	r3, [r5, #0]
 80159c0:	b103      	cbz	r3, 80159c4 <_kill_r+0x1c>
 80159c2:	6023      	str	r3, [r4, #0]
 80159c4:	bd38      	pop	{r3, r4, r5, pc}
 80159c6:	bf00      	nop
 80159c8:	20000ea8 	.word	0x20000ea8

080159cc <_getpid_r>:
 80159cc:	f7ef bdba 	b.w	8005544 <_getpid>

080159d0 <atan2>:
 80159d0:	f000 bc2e 	b.w	8016230 <__ieee754_atan2>

080159d4 <fmod>:
 80159d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159d6:	ed2d 8b02 	vpush	{d8}
 80159da:	ec57 6b10 	vmov	r6, r7, d0
 80159de:	ec55 4b11 	vmov	r4, r5, d1
 80159e2:	f000 fceb 	bl	80163bc <__ieee754_fmod>
 80159e6:	4622      	mov	r2, r4
 80159e8:	462b      	mov	r3, r5
 80159ea:	4630      	mov	r0, r6
 80159ec:	4639      	mov	r1, r7
 80159ee:	eeb0 8a40 	vmov.f32	s16, s0
 80159f2:	eef0 8a60 	vmov.f32	s17, s1
 80159f6:	f7eb f8a1 	bl	8000b3c <__aeabi_dcmpun>
 80159fa:	b990      	cbnz	r0, 8015a22 <fmod+0x4e>
 80159fc:	2200      	movs	r2, #0
 80159fe:	2300      	movs	r3, #0
 8015a00:	4620      	mov	r0, r4
 8015a02:	4629      	mov	r1, r5
 8015a04:	f7eb f868 	bl	8000ad8 <__aeabi_dcmpeq>
 8015a08:	b158      	cbz	r0, 8015a22 <fmod+0x4e>
 8015a0a:	f7fe f829 	bl	8013a60 <__errno>
 8015a0e:	2321      	movs	r3, #33	; 0x21
 8015a10:	6003      	str	r3, [r0, #0]
 8015a12:	2200      	movs	r2, #0
 8015a14:	2300      	movs	r3, #0
 8015a16:	4610      	mov	r0, r2
 8015a18:	4619      	mov	r1, r3
 8015a1a:	f7ea ff1f 	bl	800085c <__aeabi_ddiv>
 8015a1e:	ec41 0b18 	vmov	d8, r0, r1
 8015a22:	eeb0 0a48 	vmov.f32	s0, s16
 8015a26:	eef0 0a68 	vmov.f32	s1, s17
 8015a2a:	ecbd 8b02 	vpop	{d8}
 8015a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015a30 <pow>:
 8015a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a32:	ed2d 8b02 	vpush	{d8}
 8015a36:	eeb0 8a40 	vmov.f32	s16, s0
 8015a3a:	eef0 8a60 	vmov.f32	s17, s1
 8015a3e:	ec55 4b11 	vmov	r4, r5, d1
 8015a42:	f000 fdc9 	bl	80165d8 <__ieee754_pow>
 8015a46:	4622      	mov	r2, r4
 8015a48:	462b      	mov	r3, r5
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	4629      	mov	r1, r5
 8015a4e:	ec57 6b10 	vmov	r6, r7, d0
 8015a52:	f7eb f873 	bl	8000b3c <__aeabi_dcmpun>
 8015a56:	2800      	cmp	r0, #0
 8015a58:	d13b      	bne.n	8015ad2 <pow+0xa2>
 8015a5a:	ec51 0b18 	vmov	r0, r1, d8
 8015a5e:	2200      	movs	r2, #0
 8015a60:	2300      	movs	r3, #0
 8015a62:	f7eb f839 	bl	8000ad8 <__aeabi_dcmpeq>
 8015a66:	b1b8      	cbz	r0, 8015a98 <pow+0x68>
 8015a68:	2200      	movs	r2, #0
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	4620      	mov	r0, r4
 8015a6e:	4629      	mov	r1, r5
 8015a70:	f7eb f832 	bl	8000ad8 <__aeabi_dcmpeq>
 8015a74:	2800      	cmp	r0, #0
 8015a76:	d146      	bne.n	8015b06 <pow+0xd6>
 8015a78:	ec45 4b10 	vmov	d0, r4, r5
 8015a7c:	f000 f920 	bl	8015cc0 <finite>
 8015a80:	b338      	cbz	r0, 8015ad2 <pow+0xa2>
 8015a82:	2200      	movs	r2, #0
 8015a84:	2300      	movs	r3, #0
 8015a86:	4620      	mov	r0, r4
 8015a88:	4629      	mov	r1, r5
 8015a8a:	f7eb f82f 	bl	8000aec <__aeabi_dcmplt>
 8015a8e:	b300      	cbz	r0, 8015ad2 <pow+0xa2>
 8015a90:	f7fd ffe6 	bl	8013a60 <__errno>
 8015a94:	2322      	movs	r3, #34	; 0x22
 8015a96:	e01b      	b.n	8015ad0 <pow+0xa0>
 8015a98:	ec47 6b10 	vmov	d0, r6, r7
 8015a9c:	f000 f910 	bl	8015cc0 <finite>
 8015aa0:	b9e0      	cbnz	r0, 8015adc <pow+0xac>
 8015aa2:	eeb0 0a48 	vmov.f32	s0, s16
 8015aa6:	eef0 0a68 	vmov.f32	s1, s17
 8015aaa:	f000 f909 	bl	8015cc0 <finite>
 8015aae:	b1a8      	cbz	r0, 8015adc <pow+0xac>
 8015ab0:	ec45 4b10 	vmov	d0, r4, r5
 8015ab4:	f000 f904 	bl	8015cc0 <finite>
 8015ab8:	b180      	cbz	r0, 8015adc <pow+0xac>
 8015aba:	4632      	mov	r2, r6
 8015abc:	463b      	mov	r3, r7
 8015abe:	4630      	mov	r0, r6
 8015ac0:	4639      	mov	r1, r7
 8015ac2:	f7eb f83b 	bl	8000b3c <__aeabi_dcmpun>
 8015ac6:	2800      	cmp	r0, #0
 8015ac8:	d0e2      	beq.n	8015a90 <pow+0x60>
 8015aca:	f7fd ffc9 	bl	8013a60 <__errno>
 8015ace:	2321      	movs	r3, #33	; 0x21
 8015ad0:	6003      	str	r3, [r0, #0]
 8015ad2:	ecbd 8b02 	vpop	{d8}
 8015ad6:	ec47 6b10 	vmov	d0, r6, r7
 8015ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015adc:	2200      	movs	r2, #0
 8015ade:	2300      	movs	r3, #0
 8015ae0:	4630      	mov	r0, r6
 8015ae2:	4639      	mov	r1, r7
 8015ae4:	f7ea fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 8015ae8:	2800      	cmp	r0, #0
 8015aea:	d0f2      	beq.n	8015ad2 <pow+0xa2>
 8015aec:	eeb0 0a48 	vmov.f32	s0, s16
 8015af0:	eef0 0a68 	vmov.f32	s1, s17
 8015af4:	f000 f8e4 	bl	8015cc0 <finite>
 8015af8:	2800      	cmp	r0, #0
 8015afa:	d0ea      	beq.n	8015ad2 <pow+0xa2>
 8015afc:	ec45 4b10 	vmov	d0, r4, r5
 8015b00:	f000 f8de 	bl	8015cc0 <finite>
 8015b04:	e7c3      	b.n	8015a8e <pow+0x5e>
 8015b06:	4f01      	ldr	r7, [pc, #4]	; (8015b0c <pow+0xdc>)
 8015b08:	2600      	movs	r6, #0
 8015b0a:	e7e2      	b.n	8015ad2 <pow+0xa2>
 8015b0c:	3ff00000 	.word	0x3ff00000

08015b10 <sqrt>:
 8015b10:	b538      	push	{r3, r4, r5, lr}
 8015b12:	ed2d 8b02 	vpush	{d8}
 8015b16:	ec55 4b10 	vmov	r4, r5, d0
 8015b1a:	f000 f8dd 	bl	8015cd8 <__ieee754_sqrt>
 8015b1e:	4622      	mov	r2, r4
 8015b20:	462b      	mov	r3, r5
 8015b22:	4620      	mov	r0, r4
 8015b24:	4629      	mov	r1, r5
 8015b26:	eeb0 8a40 	vmov.f32	s16, s0
 8015b2a:	eef0 8a60 	vmov.f32	s17, s1
 8015b2e:	f7eb f805 	bl	8000b3c <__aeabi_dcmpun>
 8015b32:	b990      	cbnz	r0, 8015b5a <sqrt+0x4a>
 8015b34:	2200      	movs	r2, #0
 8015b36:	2300      	movs	r3, #0
 8015b38:	4620      	mov	r0, r4
 8015b3a:	4629      	mov	r1, r5
 8015b3c:	f7ea ffd6 	bl	8000aec <__aeabi_dcmplt>
 8015b40:	b158      	cbz	r0, 8015b5a <sqrt+0x4a>
 8015b42:	f7fd ff8d 	bl	8013a60 <__errno>
 8015b46:	2321      	movs	r3, #33	; 0x21
 8015b48:	6003      	str	r3, [r0, #0]
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	4610      	mov	r0, r2
 8015b50:	4619      	mov	r1, r3
 8015b52:	f7ea fe83 	bl	800085c <__aeabi_ddiv>
 8015b56:	ec41 0b18 	vmov	d8, r0, r1
 8015b5a:	eeb0 0a48 	vmov.f32	s0, s16
 8015b5e:	eef0 0a68 	vmov.f32	s1, s17
 8015b62:	ecbd 8b02 	vpop	{d8}
 8015b66:	bd38      	pop	{r3, r4, r5, pc}

08015b68 <cos>:
 8015b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015b6a:	ec53 2b10 	vmov	r2, r3, d0
 8015b6e:	4826      	ldr	r0, [pc, #152]	; (8015c08 <cos+0xa0>)
 8015b70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015b74:	4281      	cmp	r1, r0
 8015b76:	dc06      	bgt.n	8015b86 <cos+0x1e>
 8015b78:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8015c00 <cos+0x98>
 8015b7c:	b005      	add	sp, #20
 8015b7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b82:	f000 b9cd 	b.w	8015f20 <__kernel_cos>
 8015b86:	4821      	ldr	r0, [pc, #132]	; (8015c0c <cos+0xa4>)
 8015b88:	4281      	cmp	r1, r0
 8015b8a:	dd09      	ble.n	8015ba0 <cos+0x38>
 8015b8c:	ee10 0a10 	vmov	r0, s0
 8015b90:	4619      	mov	r1, r3
 8015b92:	f7ea fb81 	bl	8000298 <__aeabi_dsub>
 8015b96:	ec41 0b10 	vmov	d0, r0, r1
 8015b9a:	b005      	add	sp, #20
 8015b9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ba0:	4668      	mov	r0, sp
 8015ba2:	f001 fa45 	bl	8017030 <__ieee754_rem_pio2>
 8015ba6:	f000 0003 	and.w	r0, r0, #3
 8015baa:	2801      	cmp	r0, #1
 8015bac:	d00b      	beq.n	8015bc6 <cos+0x5e>
 8015bae:	2802      	cmp	r0, #2
 8015bb0:	d016      	beq.n	8015be0 <cos+0x78>
 8015bb2:	b9e0      	cbnz	r0, 8015bee <cos+0x86>
 8015bb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015bb8:	ed9d 0b00 	vldr	d0, [sp]
 8015bbc:	f000 f9b0 	bl	8015f20 <__kernel_cos>
 8015bc0:	ec51 0b10 	vmov	r0, r1, d0
 8015bc4:	e7e7      	b.n	8015b96 <cos+0x2e>
 8015bc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015bca:	ed9d 0b00 	vldr	d0, [sp]
 8015bce:	f000 fa6f 	bl	80160b0 <__kernel_sin>
 8015bd2:	ec53 2b10 	vmov	r2, r3, d0
 8015bd6:	ee10 0a10 	vmov	r0, s0
 8015bda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015bde:	e7da      	b.n	8015b96 <cos+0x2e>
 8015be0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015be4:	ed9d 0b00 	vldr	d0, [sp]
 8015be8:	f000 f99a 	bl	8015f20 <__kernel_cos>
 8015bec:	e7f1      	b.n	8015bd2 <cos+0x6a>
 8015bee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015bf2:	ed9d 0b00 	vldr	d0, [sp]
 8015bf6:	2001      	movs	r0, #1
 8015bf8:	f000 fa5a 	bl	80160b0 <__kernel_sin>
 8015bfc:	e7e0      	b.n	8015bc0 <cos+0x58>
 8015bfe:	bf00      	nop
	...
 8015c08:	3fe921fb 	.word	0x3fe921fb
 8015c0c:	7fefffff 	.word	0x7fefffff

08015c10 <sin>:
 8015c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015c12:	ec53 2b10 	vmov	r2, r3, d0
 8015c16:	4828      	ldr	r0, [pc, #160]	; (8015cb8 <sin+0xa8>)
 8015c18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015c1c:	4281      	cmp	r1, r0
 8015c1e:	dc07      	bgt.n	8015c30 <sin+0x20>
 8015c20:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8015cb0 <sin+0xa0>
 8015c24:	2000      	movs	r0, #0
 8015c26:	b005      	add	sp, #20
 8015c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c2c:	f000 ba40 	b.w	80160b0 <__kernel_sin>
 8015c30:	4822      	ldr	r0, [pc, #136]	; (8015cbc <sin+0xac>)
 8015c32:	4281      	cmp	r1, r0
 8015c34:	dd09      	ble.n	8015c4a <sin+0x3a>
 8015c36:	ee10 0a10 	vmov	r0, s0
 8015c3a:	4619      	mov	r1, r3
 8015c3c:	f7ea fb2c 	bl	8000298 <__aeabi_dsub>
 8015c40:	ec41 0b10 	vmov	d0, r0, r1
 8015c44:	b005      	add	sp, #20
 8015c46:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c4a:	4668      	mov	r0, sp
 8015c4c:	f001 f9f0 	bl	8017030 <__ieee754_rem_pio2>
 8015c50:	f000 0003 	and.w	r0, r0, #3
 8015c54:	2801      	cmp	r0, #1
 8015c56:	d00c      	beq.n	8015c72 <sin+0x62>
 8015c58:	2802      	cmp	r0, #2
 8015c5a:	d011      	beq.n	8015c80 <sin+0x70>
 8015c5c:	b9f0      	cbnz	r0, 8015c9c <sin+0x8c>
 8015c5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c62:	ed9d 0b00 	vldr	d0, [sp]
 8015c66:	2001      	movs	r0, #1
 8015c68:	f000 fa22 	bl	80160b0 <__kernel_sin>
 8015c6c:	ec51 0b10 	vmov	r0, r1, d0
 8015c70:	e7e6      	b.n	8015c40 <sin+0x30>
 8015c72:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c76:	ed9d 0b00 	vldr	d0, [sp]
 8015c7a:	f000 f951 	bl	8015f20 <__kernel_cos>
 8015c7e:	e7f5      	b.n	8015c6c <sin+0x5c>
 8015c80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c84:	ed9d 0b00 	vldr	d0, [sp]
 8015c88:	2001      	movs	r0, #1
 8015c8a:	f000 fa11 	bl	80160b0 <__kernel_sin>
 8015c8e:	ec53 2b10 	vmov	r2, r3, d0
 8015c92:	ee10 0a10 	vmov	r0, s0
 8015c96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015c9a:	e7d1      	b.n	8015c40 <sin+0x30>
 8015c9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015ca0:	ed9d 0b00 	vldr	d0, [sp]
 8015ca4:	f000 f93c 	bl	8015f20 <__kernel_cos>
 8015ca8:	e7f1      	b.n	8015c8e <sin+0x7e>
 8015caa:	bf00      	nop
 8015cac:	f3af 8000 	nop.w
	...
 8015cb8:	3fe921fb 	.word	0x3fe921fb
 8015cbc:	7fefffff 	.word	0x7fefffff

08015cc0 <finite>:
 8015cc0:	b082      	sub	sp, #8
 8015cc2:	ed8d 0b00 	vstr	d0, [sp]
 8015cc6:	9801      	ldr	r0, [sp, #4]
 8015cc8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8015ccc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015cd0:	0fc0      	lsrs	r0, r0, #31
 8015cd2:	b002      	add	sp, #8
 8015cd4:	4770      	bx	lr
	...

08015cd8 <__ieee754_sqrt>:
 8015cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cdc:	ec55 4b10 	vmov	r4, r5, d0
 8015ce0:	4e67      	ldr	r6, [pc, #412]	; (8015e80 <__ieee754_sqrt+0x1a8>)
 8015ce2:	43ae      	bics	r6, r5
 8015ce4:	ee10 0a10 	vmov	r0, s0
 8015ce8:	ee10 2a10 	vmov	r2, s0
 8015cec:	4629      	mov	r1, r5
 8015cee:	462b      	mov	r3, r5
 8015cf0:	d10d      	bne.n	8015d0e <__ieee754_sqrt+0x36>
 8015cf2:	f7ea fc89 	bl	8000608 <__aeabi_dmul>
 8015cf6:	4602      	mov	r2, r0
 8015cf8:	460b      	mov	r3, r1
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	4629      	mov	r1, r5
 8015cfe:	f7ea facd 	bl	800029c <__adddf3>
 8015d02:	4604      	mov	r4, r0
 8015d04:	460d      	mov	r5, r1
 8015d06:	ec45 4b10 	vmov	d0, r4, r5
 8015d0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d0e:	2d00      	cmp	r5, #0
 8015d10:	dc0b      	bgt.n	8015d2a <__ieee754_sqrt+0x52>
 8015d12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015d16:	4326      	orrs	r6, r4
 8015d18:	d0f5      	beq.n	8015d06 <__ieee754_sqrt+0x2e>
 8015d1a:	b135      	cbz	r5, 8015d2a <__ieee754_sqrt+0x52>
 8015d1c:	f7ea fabc 	bl	8000298 <__aeabi_dsub>
 8015d20:	4602      	mov	r2, r0
 8015d22:	460b      	mov	r3, r1
 8015d24:	f7ea fd9a 	bl	800085c <__aeabi_ddiv>
 8015d28:	e7eb      	b.n	8015d02 <__ieee754_sqrt+0x2a>
 8015d2a:	1509      	asrs	r1, r1, #20
 8015d2c:	f000 808d 	beq.w	8015e4a <__ieee754_sqrt+0x172>
 8015d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015d34:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8015d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015d3c:	07c9      	lsls	r1, r1, #31
 8015d3e:	bf5c      	itt	pl
 8015d40:	005b      	lslpl	r3, r3, #1
 8015d42:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8015d46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015d4a:	bf58      	it	pl
 8015d4c:	0052      	lslpl	r2, r2, #1
 8015d4e:	2500      	movs	r5, #0
 8015d50:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015d54:	1076      	asrs	r6, r6, #1
 8015d56:	0052      	lsls	r2, r2, #1
 8015d58:	f04f 0e16 	mov.w	lr, #22
 8015d5c:	46ac      	mov	ip, r5
 8015d5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015d62:	eb0c 0001 	add.w	r0, ip, r1
 8015d66:	4298      	cmp	r0, r3
 8015d68:	bfde      	ittt	le
 8015d6a:	1a1b      	suble	r3, r3, r0
 8015d6c:	eb00 0c01 	addle.w	ip, r0, r1
 8015d70:	186d      	addle	r5, r5, r1
 8015d72:	005b      	lsls	r3, r3, #1
 8015d74:	f1be 0e01 	subs.w	lr, lr, #1
 8015d78:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015d7c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015d80:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015d84:	d1ed      	bne.n	8015d62 <__ieee754_sqrt+0x8a>
 8015d86:	4674      	mov	r4, lr
 8015d88:	2720      	movs	r7, #32
 8015d8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015d8e:	4563      	cmp	r3, ip
 8015d90:	eb01 000e 	add.w	r0, r1, lr
 8015d94:	dc02      	bgt.n	8015d9c <__ieee754_sqrt+0xc4>
 8015d96:	d113      	bne.n	8015dc0 <__ieee754_sqrt+0xe8>
 8015d98:	4290      	cmp	r0, r2
 8015d9a:	d811      	bhi.n	8015dc0 <__ieee754_sqrt+0xe8>
 8015d9c:	2800      	cmp	r0, #0
 8015d9e:	eb00 0e01 	add.w	lr, r0, r1
 8015da2:	da57      	bge.n	8015e54 <__ieee754_sqrt+0x17c>
 8015da4:	f1be 0f00 	cmp.w	lr, #0
 8015da8:	db54      	blt.n	8015e54 <__ieee754_sqrt+0x17c>
 8015daa:	f10c 0801 	add.w	r8, ip, #1
 8015dae:	eba3 030c 	sub.w	r3, r3, ip
 8015db2:	4290      	cmp	r0, r2
 8015db4:	bf88      	it	hi
 8015db6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8015dba:	1a12      	subs	r2, r2, r0
 8015dbc:	440c      	add	r4, r1
 8015dbe:	46c4      	mov	ip, r8
 8015dc0:	005b      	lsls	r3, r3, #1
 8015dc2:	3f01      	subs	r7, #1
 8015dc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015dc8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015dcc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015dd0:	d1dd      	bne.n	8015d8e <__ieee754_sqrt+0xb6>
 8015dd2:	4313      	orrs	r3, r2
 8015dd4:	d01b      	beq.n	8015e0e <__ieee754_sqrt+0x136>
 8015dd6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8015e84 <__ieee754_sqrt+0x1ac>
 8015dda:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8015e88 <__ieee754_sqrt+0x1b0>
 8015dde:	e9da 0100 	ldrd	r0, r1, [sl]
 8015de2:	e9db 2300 	ldrd	r2, r3, [fp]
 8015de6:	f7ea fa57 	bl	8000298 <__aeabi_dsub>
 8015dea:	e9da 8900 	ldrd	r8, r9, [sl]
 8015dee:	4602      	mov	r2, r0
 8015df0:	460b      	mov	r3, r1
 8015df2:	4640      	mov	r0, r8
 8015df4:	4649      	mov	r1, r9
 8015df6:	f7ea fe83 	bl	8000b00 <__aeabi_dcmple>
 8015dfa:	b140      	cbz	r0, 8015e0e <__ieee754_sqrt+0x136>
 8015dfc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015e00:	e9da 0100 	ldrd	r0, r1, [sl]
 8015e04:	e9db 2300 	ldrd	r2, r3, [fp]
 8015e08:	d126      	bne.n	8015e58 <__ieee754_sqrt+0x180>
 8015e0a:	3501      	adds	r5, #1
 8015e0c:	463c      	mov	r4, r7
 8015e0e:	106a      	asrs	r2, r5, #1
 8015e10:	0863      	lsrs	r3, r4, #1
 8015e12:	07e9      	lsls	r1, r5, #31
 8015e14:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015e18:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015e1c:	bf48      	it	mi
 8015e1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015e22:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8015e26:	461c      	mov	r4, r3
 8015e28:	e76d      	b.n	8015d06 <__ieee754_sqrt+0x2e>
 8015e2a:	0ad3      	lsrs	r3, r2, #11
 8015e2c:	3815      	subs	r0, #21
 8015e2e:	0552      	lsls	r2, r2, #21
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d0fa      	beq.n	8015e2a <__ieee754_sqrt+0x152>
 8015e34:	02dc      	lsls	r4, r3, #11
 8015e36:	d50a      	bpl.n	8015e4e <__ieee754_sqrt+0x176>
 8015e38:	f1c1 0420 	rsb	r4, r1, #32
 8015e3c:	fa22 f404 	lsr.w	r4, r2, r4
 8015e40:	1e4d      	subs	r5, r1, #1
 8015e42:	408a      	lsls	r2, r1
 8015e44:	4323      	orrs	r3, r4
 8015e46:	1b41      	subs	r1, r0, r5
 8015e48:	e772      	b.n	8015d30 <__ieee754_sqrt+0x58>
 8015e4a:	4608      	mov	r0, r1
 8015e4c:	e7f0      	b.n	8015e30 <__ieee754_sqrt+0x158>
 8015e4e:	005b      	lsls	r3, r3, #1
 8015e50:	3101      	adds	r1, #1
 8015e52:	e7ef      	b.n	8015e34 <__ieee754_sqrt+0x15c>
 8015e54:	46e0      	mov	r8, ip
 8015e56:	e7aa      	b.n	8015dae <__ieee754_sqrt+0xd6>
 8015e58:	f7ea fa20 	bl	800029c <__adddf3>
 8015e5c:	e9da 8900 	ldrd	r8, r9, [sl]
 8015e60:	4602      	mov	r2, r0
 8015e62:	460b      	mov	r3, r1
 8015e64:	4640      	mov	r0, r8
 8015e66:	4649      	mov	r1, r9
 8015e68:	f7ea fe40 	bl	8000aec <__aeabi_dcmplt>
 8015e6c:	b120      	cbz	r0, 8015e78 <__ieee754_sqrt+0x1a0>
 8015e6e:	1ca0      	adds	r0, r4, #2
 8015e70:	bf08      	it	eq
 8015e72:	3501      	addeq	r5, #1
 8015e74:	3402      	adds	r4, #2
 8015e76:	e7ca      	b.n	8015e0e <__ieee754_sqrt+0x136>
 8015e78:	3401      	adds	r4, #1
 8015e7a:	f024 0401 	bic.w	r4, r4, #1
 8015e7e:	e7c6      	b.n	8015e0e <__ieee754_sqrt+0x136>
 8015e80:	7ff00000 	.word	0x7ff00000
 8015e84:	20000370 	.word	0x20000370
 8015e88:	20000378 	.word	0x20000378

08015e8c <round>:
 8015e8c:	ec53 2b10 	vmov	r2, r3, d0
 8015e90:	b570      	push	{r4, r5, r6, lr}
 8015e92:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8015e96:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8015e9a:	2813      	cmp	r0, #19
 8015e9c:	ee10 5a10 	vmov	r5, s0
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	dc18      	bgt.n	8015ed6 <round+0x4a>
 8015ea4:	2800      	cmp	r0, #0
 8015ea6:	da09      	bge.n	8015ebc <round+0x30>
 8015ea8:	3001      	adds	r0, #1
 8015eaa:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8015eae:	d103      	bne.n	8015eb8 <round+0x2c>
 8015eb0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8015eb4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8015eb8:	2300      	movs	r3, #0
 8015eba:	e02a      	b.n	8015f12 <round+0x86>
 8015ebc:	4c16      	ldr	r4, [pc, #88]	; (8015f18 <round+0x8c>)
 8015ebe:	4104      	asrs	r4, r0
 8015ec0:	ea03 0604 	and.w	r6, r3, r4
 8015ec4:	4316      	orrs	r6, r2
 8015ec6:	d011      	beq.n	8015eec <round+0x60>
 8015ec8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015ecc:	4103      	asrs	r3, r0
 8015ece:	440b      	add	r3, r1
 8015ed0:	ea23 0104 	bic.w	r1, r3, r4
 8015ed4:	e7f0      	b.n	8015eb8 <round+0x2c>
 8015ed6:	2833      	cmp	r0, #51	; 0x33
 8015ed8:	dd0b      	ble.n	8015ef2 <round+0x66>
 8015eda:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015ede:	d105      	bne.n	8015eec <round+0x60>
 8015ee0:	ee10 0a10 	vmov	r0, s0
 8015ee4:	f7ea f9da 	bl	800029c <__adddf3>
 8015ee8:	4602      	mov	r2, r0
 8015eea:	460b      	mov	r3, r1
 8015eec:	ec43 2b10 	vmov	d0, r2, r3
 8015ef0:	bd70      	pop	{r4, r5, r6, pc}
 8015ef2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8015ef6:	f04f 34ff 	mov.w	r4, #4294967295
 8015efa:	40f4      	lsrs	r4, r6
 8015efc:	4214      	tst	r4, r2
 8015efe:	d0f5      	beq.n	8015eec <round+0x60>
 8015f00:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8015f04:	2301      	movs	r3, #1
 8015f06:	4083      	lsls	r3, r0
 8015f08:	195b      	adds	r3, r3, r5
 8015f0a:	bf28      	it	cs
 8015f0c:	3101      	addcs	r1, #1
 8015f0e:	ea23 0304 	bic.w	r3, r3, r4
 8015f12:	461a      	mov	r2, r3
 8015f14:	460b      	mov	r3, r1
 8015f16:	e7e9      	b.n	8015eec <round+0x60>
 8015f18:	000fffff 	.word	0x000fffff
 8015f1c:	00000000 	.word	0x00000000

08015f20 <__kernel_cos>:
 8015f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f24:	ec57 6b10 	vmov	r6, r7, d0
 8015f28:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8015f2c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015f30:	ed8d 1b00 	vstr	d1, [sp]
 8015f34:	da07      	bge.n	8015f46 <__kernel_cos+0x26>
 8015f36:	ee10 0a10 	vmov	r0, s0
 8015f3a:	4639      	mov	r1, r7
 8015f3c:	f7ea fe14 	bl	8000b68 <__aeabi_d2iz>
 8015f40:	2800      	cmp	r0, #0
 8015f42:	f000 8088 	beq.w	8016056 <__kernel_cos+0x136>
 8015f46:	4632      	mov	r2, r6
 8015f48:	463b      	mov	r3, r7
 8015f4a:	4630      	mov	r0, r6
 8015f4c:	4639      	mov	r1, r7
 8015f4e:	f7ea fb5b 	bl	8000608 <__aeabi_dmul>
 8015f52:	4b51      	ldr	r3, [pc, #324]	; (8016098 <__kernel_cos+0x178>)
 8015f54:	2200      	movs	r2, #0
 8015f56:	4604      	mov	r4, r0
 8015f58:	460d      	mov	r5, r1
 8015f5a:	f7ea fb55 	bl	8000608 <__aeabi_dmul>
 8015f5e:	a340      	add	r3, pc, #256	; (adr r3, 8016060 <__kernel_cos+0x140>)
 8015f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f64:	4682      	mov	sl, r0
 8015f66:	468b      	mov	fp, r1
 8015f68:	4620      	mov	r0, r4
 8015f6a:	4629      	mov	r1, r5
 8015f6c:	f7ea fb4c 	bl	8000608 <__aeabi_dmul>
 8015f70:	a33d      	add	r3, pc, #244	; (adr r3, 8016068 <__kernel_cos+0x148>)
 8015f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f76:	f7ea f991 	bl	800029c <__adddf3>
 8015f7a:	4622      	mov	r2, r4
 8015f7c:	462b      	mov	r3, r5
 8015f7e:	f7ea fb43 	bl	8000608 <__aeabi_dmul>
 8015f82:	a33b      	add	r3, pc, #236	; (adr r3, 8016070 <__kernel_cos+0x150>)
 8015f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f88:	f7ea f986 	bl	8000298 <__aeabi_dsub>
 8015f8c:	4622      	mov	r2, r4
 8015f8e:	462b      	mov	r3, r5
 8015f90:	f7ea fb3a 	bl	8000608 <__aeabi_dmul>
 8015f94:	a338      	add	r3, pc, #224	; (adr r3, 8016078 <__kernel_cos+0x158>)
 8015f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f9a:	f7ea f97f 	bl	800029c <__adddf3>
 8015f9e:	4622      	mov	r2, r4
 8015fa0:	462b      	mov	r3, r5
 8015fa2:	f7ea fb31 	bl	8000608 <__aeabi_dmul>
 8015fa6:	a336      	add	r3, pc, #216	; (adr r3, 8016080 <__kernel_cos+0x160>)
 8015fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fac:	f7ea f974 	bl	8000298 <__aeabi_dsub>
 8015fb0:	4622      	mov	r2, r4
 8015fb2:	462b      	mov	r3, r5
 8015fb4:	f7ea fb28 	bl	8000608 <__aeabi_dmul>
 8015fb8:	a333      	add	r3, pc, #204	; (adr r3, 8016088 <__kernel_cos+0x168>)
 8015fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fbe:	f7ea f96d 	bl	800029c <__adddf3>
 8015fc2:	4622      	mov	r2, r4
 8015fc4:	462b      	mov	r3, r5
 8015fc6:	f7ea fb1f 	bl	8000608 <__aeabi_dmul>
 8015fca:	4622      	mov	r2, r4
 8015fcc:	462b      	mov	r3, r5
 8015fce:	f7ea fb1b 	bl	8000608 <__aeabi_dmul>
 8015fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015fd6:	4604      	mov	r4, r0
 8015fd8:	460d      	mov	r5, r1
 8015fda:	4630      	mov	r0, r6
 8015fdc:	4639      	mov	r1, r7
 8015fde:	f7ea fb13 	bl	8000608 <__aeabi_dmul>
 8015fe2:	460b      	mov	r3, r1
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	4629      	mov	r1, r5
 8015fe8:	4620      	mov	r0, r4
 8015fea:	f7ea f955 	bl	8000298 <__aeabi_dsub>
 8015fee:	4b2b      	ldr	r3, [pc, #172]	; (801609c <__kernel_cos+0x17c>)
 8015ff0:	4598      	cmp	r8, r3
 8015ff2:	4606      	mov	r6, r0
 8015ff4:	460f      	mov	r7, r1
 8015ff6:	dc10      	bgt.n	801601a <__kernel_cos+0xfa>
 8015ff8:	4602      	mov	r2, r0
 8015ffa:	460b      	mov	r3, r1
 8015ffc:	4650      	mov	r0, sl
 8015ffe:	4659      	mov	r1, fp
 8016000:	f7ea f94a 	bl	8000298 <__aeabi_dsub>
 8016004:	460b      	mov	r3, r1
 8016006:	4926      	ldr	r1, [pc, #152]	; (80160a0 <__kernel_cos+0x180>)
 8016008:	4602      	mov	r2, r0
 801600a:	2000      	movs	r0, #0
 801600c:	f7ea f944 	bl	8000298 <__aeabi_dsub>
 8016010:	ec41 0b10 	vmov	d0, r0, r1
 8016014:	b003      	add	sp, #12
 8016016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801601a:	4b22      	ldr	r3, [pc, #136]	; (80160a4 <__kernel_cos+0x184>)
 801601c:	4920      	ldr	r1, [pc, #128]	; (80160a0 <__kernel_cos+0x180>)
 801601e:	4598      	cmp	r8, r3
 8016020:	bfcc      	ite	gt
 8016022:	4d21      	ldrgt	r5, [pc, #132]	; (80160a8 <__kernel_cos+0x188>)
 8016024:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8016028:	2400      	movs	r4, #0
 801602a:	4622      	mov	r2, r4
 801602c:	462b      	mov	r3, r5
 801602e:	2000      	movs	r0, #0
 8016030:	f7ea f932 	bl	8000298 <__aeabi_dsub>
 8016034:	4622      	mov	r2, r4
 8016036:	4680      	mov	r8, r0
 8016038:	4689      	mov	r9, r1
 801603a:	462b      	mov	r3, r5
 801603c:	4650      	mov	r0, sl
 801603e:	4659      	mov	r1, fp
 8016040:	f7ea f92a 	bl	8000298 <__aeabi_dsub>
 8016044:	4632      	mov	r2, r6
 8016046:	463b      	mov	r3, r7
 8016048:	f7ea f926 	bl	8000298 <__aeabi_dsub>
 801604c:	4602      	mov	r2, r0
 801604e:	460b      	mov	r3, r1
 8016050:	4640      	mov	r0, r8
 8016052:	4649      	mov	r1, r9
 8016054:	e7da      	b.n	801600c <__kernel_cos+0xec>
 8016056:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8016090 <__kernel_cos+0x170>
 801605a:	e7db      	b.n	8016014 <__kernel_cos+0xf4>
 801605c:	f3af 8000 	nop.w
 8016060:	be8838d4 	.word	0xbe8838d4
 8016064:	bda8fae9 	.word	0xbda8fae9
 8016068:	bdb4b1c4 	.word	0xbdb4b1c4
 801606c:	3e21ee9e 	.word	0x3e21ee9e
 8016070:	809c52ad 	.word	0x809c52ad
 8016074:	3e927e4f 	.word	0x3e927e4f
 8016078:	19cb1590 	.word	0x19cb1590
 801607c:	3efa01a0 	.word	0x3efa01a0
 8016080:	16c15177 	.word	0x16c15177
 8016084:	3f56c16c 	.word	0x3f56c16c
 8016088:	5555554c 	.word	0x5555554c
 801608c:	3fa55555 	.word	0x3fa55555
 8016090:	00000000 	.word	0x00000000
 8016094:	3ff00000 	.word	0x3ff00000
 8016098:	3fe00000 	.word	0x3fe00000
 801609c:	3fd33332 	.word	0x3fd33332
 80160a0:	3ff00000 	.word	0x3ff00000
 80160a4:	3fe90000 	.word	0x3fe90000
 80160a8:	3fd20000 	.word	0x3fd20000
 80160ac:	00000000 	.word	0x00000000

080160b0 <__kernel_sin>:
 80160b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160b4:	ed2d 8b04 	vpush	{d8-d9}
 80160b8:	eeb0 8a41 	vmov.f32	s16, s2
 80160bc:	eef0 8a61 	vmov.f32	s17, s3
 80160c0:	ec55 4b10 	vmov	r4, r5, d0
 80160c4:	b083      	sub	sp, #12
 80160c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80160ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80160ce:	9001      	str	r0, [sp, #4]
 80160d0:	da06      	bge.n	80160e0 <__kernel_sin+0x30>
 80160d2:	ee10 0a10 	vmov	r0, s0
 80160d6:	4629      	mov	r1, r5
 80160d8:	f7ea fd46 	bl	8000b68 <__aeabi_d2iz>
 80160dc:	2800      	cmp	r0, #0
 80160de:	d051      	beq.n	8016184 <__kernel_sin+0xd4>
 80160e0:	4622      	mov	r2, r4
 80160e2:	462b      	mov	r3, r5
 80160e4:	4620      	mov	r0, r4
 80160e6:	4629      	mov	r1, r5
 80160e8:	f7ea fa8e 	bl	8000608 <__aeabi_dmul>
 80160ec:	4682      	mov	sl, r0
 80160ee:	468b      	mov	fp, r1
 80160f0:	4602      	mov	r2, r0
 80160f2:	460b      	mov	r3, r1
 80160f4:	4620      	mov	r0, r4
 80160f6:	4629      	mov	r1, r5
 80160f8:	f7ea fa86 	bl	8000608 <__aeabi_dmul>
 80160fc:	a341      	add	r3, pc, #260	; (adr r3, 8016204 <__kernel_sin+0x154>)
 80160fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016102:	4680      	mov	r8, r0
 8016104:	4689      	mov	r9, r1
 8016106:	4650      	mov	r0, sl
 8016108:	4659      	mov	r1, fp
 801610a:	f7ea fa7d 	bl	8000608 <__aeabi_dmul>
 801610e:	a33f      	add	r3, pc, #252	; (adr r3, 801620c <__kernel_sin+0x15c>)
 8016110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016114:	f7ea f8c0 	bl	8000298 <__aeabi_dsub>
 8016118:	4652      	mov	r2, sl
 801611a:	465b      	mov	r3, fp
 801611c:	f7ea fa74 	bl	8000608 <__aeabi_dmul>
 8016120:	a33c      	add	r3, pc, #240	; (adr r3, 8016214 <__kernel_sin+0x164>)
 8016122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016126:	f7ea f8b9 	bl	800029c <__adddf3>
 801612a:	4652      	mov	r2, sl
 801612c:	465b      	mov	r3, fp
 801612e:	f7ea fa6b 	bl	8000608 <__aeabi_dmul>
 8016132:	a33a      	add	r3, pc, #232	; (adr r3, 801621c <__kernel_sin+0x16c>)
 8016134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016138:	f7ea f8ae 	bl	8000298 <__aeabi_dsub>
 801613c:	4652      	mov	r2, sl
 801613e:	465b      	mov	r3, fp
 8016140:	f7ea fa62 	bl	8000608 <__aeabi_dmul>
 8016144:	a337      	add	r3, pc, #220	; (adr r3, 8016224 <__kernel_sin+0x174>)
 8016146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801614a:	f7ea f8a7 	bl	800029c <__adddf3>
 801614e:	9b01      	ldr	r3, [sp, #4]
 8016150:	4606      	mov	r6, r0
 8016152:	460f      	mov	r7, r1
 8016154:	b9eb      	cbnz	r3, 8016192 <__kernel_sin+0xe2>
 8016156:	4602      	mov	r2, r0
 8016158:	460b      	mov	r3, r1
 801615a:	4650      	mov	r0, sl
 801615c:	4659      	mov	r1, fp
 801615e:	f7ea fa53 	bl	8000608 <__aeabi_dmul>
 8016162:	a325      	add	r3, pc, #148	; (adr r3, 80161f8 <__kernel_sin+0x148>)
 8016164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016168:	f7ea f896 	bl	8000298 <__aeabi_dsub>
 801616c:	4642      	mov	r2, r8
 801616e:	464b      	mov	r3, r9
 8016170:	f7ea fa4a 	bl	8000608 <__aeabi_dmul>
 8016174:	4602      	mov	r2, r0
 8016176:	460b      	mov	r3, r1
 8016178:	4620      	mov	r0, r4
 801617a:	4629      	mov	r1, r5
 801617c:	f7ea f88e 	bl	800029c <__adddf3>
 8016180:	4604      	mov	r4, r0
 8016182:	460d      	mov	r5, r1
 8016184:	ec45 4b10 	vmov	d0, r4, r5
 8016188:	b003      	add	sp, #12
 801618a:	ecbd 8b04 	vpop	{d8-d9}
 801618e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016192:	4b1b      	ldr	r3, [pc, #108]	; (8016200 <__kernel_sin+0x150>)
 8016194:	ec51 0b18 	vmov	r0, r1, d8
 8016198:	2200      	movs	r2, #0
 801619a:	f7ea fa35 	bl	8000608 <__aeabi_dmul>
 801619e:	4632      	mov	r2, r6
 80161a0:	ec41 0b19 	vmov	d9, r0, r1
 80161a4:	463b      	mov	r3, r7
 80161a6:	4640      	mov	r0, r8
 80161a8:	4649      	mov	r1, r9
 80161aa:	f7ea fa2d 	bl	8000608 <__aeabi_dmul>
 80161ae:	4602      	mov	r2, r0
 80161b0:	460b      	mov	r3, r1
 80161b2:	ec51 0b19 	vmov	r0, r1, d9
 80161b6:	f7ea f86f 	bl	8000298 <__aeabi_dsub>
 80161ba:	4652      	mov	r2, sl
 80161bc:	465b      	mov	r3, fp
 80161be:	f7ea fa23 	bl	8000608 <__aeabi_dmul>
 80161c2:	ec53 2b18 	vmov	r2, r3, d8
 80161c6:	f7ea f867 	bl	8000298 <__aeabi_dsub>
 80161ca:	a30b      	add	r3, pc, #44	; (adr r3, 80161f8 <__kernel_sin+0x148>)
 80161cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d0:	4606      	mov	r6, r0
 80161d2:	460f      	mov	r7, r1
 80161d4:	4640      	mov	r0, r8
 80161d6:	4649      	mov	r1, r9
 80161d8:	f7ea fa16 	bl	8000608 <__aeabi_dmul>
 80161dc:	4602      	mov	r2, r0
 80161de:	460b      	mov	r3, r1
 80161e0:	4630      	mov	r0, r6
 80161e2:	4639      	mov	r1, r7
 80161e4:	f7ea f85a 	bl	800029c <__adddf3>
 80161e8:	4602      	mov	r2, r0
 80161ea:	460b      	mov	r3, r1
 80161ec:	4620      	mov	r0, r4
 80161ee:	4629      	mov	r1, r5
 80161f0:	f7ea f852 	bl	8000298 <__aeabi_dsub>
 80161f4:	e7c4      	b.n	8016180 <__kernel_sin+0xd0>
 80161f6:	bf00      	nop
 80161f8:	55555549 	.word	0x55555549
 80161fc:	3fc55555 	.word	0x3fc55555
 8016200:	3fe00000 	.word	0x3fe00000
 8016204:	5acfd57c 	.word	0x5acfd57c
 8016208:	3de5d93a 	.word	0x3de5d93a
 801620c:	8a2b9ceb 	.word	0x8a2b9ceb
 8016210:	3e5ae5e6 	.word	0x3e5ae5e6
 8016214:	57b1fe7d 	.word	0x57b1fe7d
 8016218:	3ec71de3 	.word	0x3ec71de3
 801621c:	19c161d5 	.word	0x19c161d5
 8016220:	3f2a01a0 	.word	0x3f2a01a0
 8016224:	1110f8a6 	.word	0x1110f8a6
 8016228:	3f811111 	.word	0x3f811111
 801622c:	00000000 	.word	0x00000000

08016230 <__ieee754_atan2>:
 8016230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016234:	ec57 6b11 	vmov	r6, r7, d1
 8016238:	4273      	negs	r3, r6
 801623a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80163b8 <__ieee754_atan2+0x188>
 801623e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8016242:	4333      	orrs	r3, r6
 8016244:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8016248:	4543      	cmp	r3, r8
 801624a:	ec51 0b10 	vmov	r0, r1, d0
 801624e:	ee11 5a10 	vmov	r5, s2
 8016252:	d80a      	bhi.n	801626a <__ieee754_atan2+0x3a>
 8016254:	4244      	negs	r4, r0
 8016256:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801625a:	4304      	orrs	r4, r0
 801625c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8016260:	4544      	cmp	r4, r8
 8016262:	ee10 9a10 	vmov	r9, s0
 8016266:	468e      	mov	lr, r1
 8016268:	d907      	bls.n	801627a <__ieee754_atan2+0x4a>
 801626a:	4632      	mov	r2, r6
 801626c:	463b      	mov	r3, r7
 801626e:	f7ea f815 	bl	800029c <__adddf3>
 8016272:	ec41 0b10 	vmov	d0, r0, r1
 8016276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801627a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801627e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016282:	4334      	orrs	r4, r6
 8016284:	d103      	bne.n	801628e <__ieee754_atan2+0x5e>
 8016286:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801628a:	f001 b8d9 	b.w	8017440 <atan>
 801628e:	17bc      	asrs	r4, r7, #30
 8016290:	f004 0402 	and.w	r4, r4, #2
 8016294:	ea53 0909 	orrs.w	r9, r3, r9
 8016298:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801629c:	d107      	bne.n	80162ae <__ieee754_atan2+0x7e>
 801629e:	2c02      	cmp	r4, #2
 80162a0:	d05f      	beq.n	8016362 <__ieee754_atan2+0x132>
 80162a2:	2c03      	cmp	r4, #3
 80162a4:	d1e5      	bne.n	8016272 <__ieee754_atan2+0x42>
 80162a6:	a140      	add	r1, pc, #256	; (adr r1, 80163a8 <__ieee754_atan2+0x178>)
 80162a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162ac:	e7e1      	b.n	8016272 <__ieee754_atan2+0x42>
 80162ae:	4315      	orrs	r5, r2
 80162b0:	d106      	bne.n	80162c0 <__ieee754_atan2+0x90>
 80162b2:	f1be 0f00 	cmp.w	lr, #0
 80162b6:	da5f      	bge.n	8016378 <__ieee754_atan2+0x148>
 80162b8:	a13d      	add	r1, pc, #244	; (adr r1, 80163b0 <__ieee754_atan2+0x180>)
 80162ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162be:	e7d8      	b.n	8016272 <__ieee754_atan2+0x42>
 80162c0:	4542      	cmp	r2, r8
 80162c2:	d10f      	bne.n	80162e4 <__ieee754_atan2+0xb4>
 80162c4:	4293      	cmp	r3, r2
 80162c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80162ca:	d107      	bne.n	80162dc <__ieee754_atan2+0xac>
 80162cc:	2c02      	cmp	r4, #2
 80162ce:	d84c      	bhi.n	801636a <__ieee754_atan2+0x13a>
 80162d0:	4b33      	ldr	r3, [pc, #204]	; (80163a0 <__ieee754_atan2+0x170>)
 80162d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80162d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80162da:	e7ca      	b.n	8016272 <__ieee754_atan2+0x42>
 80162dc:	2c02      	cmp	r4, #2
 80162de:	d848      	bhi.n	8016372 <__ieee754_atan2+0x142>
 80162e0:	4b30      	ldr	r3, [pc, #192]	; (80163a4 <__ieee754_atan2+0x174>)
 80162e2:	e7f6      	b.n	80162d2 <__ieee754_atan2+0xa2>
 80162e4:	4543      	cmp	r3, r8
 80162e6:	d0e4      	beq.n	80162b2 <__ieee754_atan2+0x82>
 80162e8:	1a9b      	subs	r3, r3, r2
 80162ea:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80162ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 80162f2:	da1e      	bge.n	8016332 <__ieee754_atan2+0x102>
 80162f4:	2f00      	cmp	r7, #0
 80162f6:	da01      	bge.n	80162fc <__ieee754_atan2+0xcc>
 80162f8:	323c      	adds	r2, #60	; 0x3c
 80162fa:	db1e      	blt.n	801633a <__ieee754_atan2+0x10a>
 80162fc:	4632      	mov	r2, r6
 80162fe:	463b      	mov	r3, r7
 8016300:	f7ea faac 	bl	800085c <__aeabi_ddiv>
 8016304:	ec41 0b10 	vmov	d0, r0, r1
 8016308:	f001 fa3a 	bl	8017780 <fabs>
 801630c:	f001 f898 	bl	8017440 <atan>
 8016310:	ec51 0b10 	vmov	r0, r1, d0
 8016314:	2c01      	cmp	r4, #1
 8016316:	d013      	beq.n	8016340 <__ieee754_atan2+0x110>
 8016318:	2c02      	cmp	r4, #2
 801631a:	d015      	beq.n	8016348 <__ieee754_atan2+0x118>
 801631c:	2c00      	cmp	r4, #0
 801631e:	d0a8      	beq.n	8016272 <__ieee754_atan2+0x42>
 8016320:	a317      	add	r3, pc, #92	; (adr r3, 8016380 <__ieee754_atan2+0x150>)
 8016322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016326:	f7e9 ffb7 	bl	8000298 <__aeabi_dsub>
 801632a:	a317      	add	r3, pc, #92	; (adr r3, 8016388 <__ieee754_atan2+0x158>)
 801632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016330:	e014      	b.n	801635c <__ieee754_atan2+0x12c>
 8016332:	a117      	add	r1, pc, #92	; (adr r1, 8016390 <__ieee754_atan2+0x160>)
 8016334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016338:	e7ec      	b.n	8016314 <__ieee754_atan2+0xe4>
 801633a:	2000      	movs	r0, #0
 801633c:	2100      	movs	r1, #0
 801633e:	e7e9      	b.n	8016314 <__ieee754_atan2+0xe4>
 8016340:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016344:	4619      	mov	r1, r3
 8016346:	e794      	b.n	8016272 <__ieee754_atan2+0x42>
 8016348:	a30d      	add	r3, pc, #52	; (adr r3, 8016380 <__ieee754_atan2+0x150>)
 801634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801634e:	f7e9 ffa3 	bl	8000298 <__aeabi_dsub>
 8016352:	4602      	mov	r2, r0
 8016354:	460b      	mov	r3, r1
 8016356:	a10c      	add	r1, pc, #48	; (adr r1, 8016388 <__ieee754_atan2+0x158>)
 8016358:	e9d1 0100 	ldrd	r0, r1, [r1]
 801635c:	f7e9 ff9c 	bl	8000298 <__aeabi_dsub>
 8016360:	e787      	b.n	8016272 <__ieee754_atan2+0x42>
 8016362:	a109      	add	r1, pc, #36	; (adr r1, 8016388 <__ieee754_atan2+0x158>)
 8016364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016368:	e783      	b.n	8016272 <__ieee754_atan2+0x42>
 801636a:	a10b      	add	r1, pc, #44	; (adr r1, 8016398 <__ieee754_atan2+0x168>)
 801636c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016370:	e77f      	b.n	8016272 <__ieee754_atan2+0x42>
 8016372:	2000      	movs	r0, #0
 8016374:	2100      	movs	r1, #0
 8016376:	e77c      	b.n	8016272 <__ieee754_atan2+0x42>
 8016378:	a105      	add	r1, pc, #20	; (adr r1, 8016390 <__ieee754_atan2+0x160>)
 801637a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801637e:	e778      	b.n	8016272 <__ieee754_atan2+0x42>
 8016380:	33145c07 	.word	0x33145c07
 8016384:	3ca1a626 	.word	0x3ca1a626
 8016388:	54442d18 	.word	0x54442d18
 801638c:	400921fb 	.word	0x400921fb
 8016390:	54442d18 	.word	0x54442d18
 8016394:	3ff921fb 	.word	0x3ff921fb
 8016398:	54442d18 	.word	0x54442d18
 801639c:	3fe921fb 	.word	0x3fe921fb
 80163a0:	08019c98 	.word	0x08019c98
 80163a4:	08019cb0 	.word	0x08019cb0
 80163a8:	54442d18 	.word	0x54442d18
 80163ac:	c00921fb 	.word	0xc00921fb
 80163b0:	54442d18 	.word	0x54442d18
 80163b4:	bff921fb 	.word	0xbff921fb
 80163b8:	7ff00000 	.word	0x7ff00000

080163bc <__ieee754_fmod>:
 80163bc:	ec53 2b11 	vmov	r2, r3, d1
 80163c0:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80163c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163c8:	ea5c 0402 	orrs.w	r4, ip, r2
 80163cc:	ec51 0b10 	vmov	r0, r1, d0
 80163d0:	ee11 7a10 	vmov	r7, s2
 80163d4:	ee11 ea10 	vmov	lr, s2
 80163d8:	461e      	mov	r6, r3
 80163da:	d00c      	beq.n	80163f6 <__ieee754_fmod+0x3a>
 80163dc:	4c78      	ldr	r4, [pc, #480]	; (80165c0 <__ieee754_fmod+0x204>)
 80163de:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80163e2:	45a0      	cmp	r8, r4
 80163e4:	4689      	mov	r9, r1
 80163e6:	dc06      	bgt.n	80163f6 <__ieee754_fmod+0x3a>
 80163e8:	4254      	negs	r4, r2
 80163ea:	4d76      	ldr	r5, [pc, #472]	; (80165c4 <__ieee754_fmod+0x208>)
 80163ec:	4314      	orrs	r4, r2
 80163ee:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80163f2:	42ac      	cmp	r4, r5
 80163f4:	d909      	bls.n	801640a <__ieee754_fmod+0x4e>
 80163f6:	f7ea f907 	bl	8000608 <__aeabi_dmul>
 80163fa:	4602      	mov	r2, r0
 80163fc:	460b      	mov	r3, r1
 80163fe:	f7ea fa2d 	bl	800085c <__aeabi_ddiv>
 8016402:	ec41 0b10 	vmov	d0, r0, r1
 8016406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801640a:	45e0      	cmp	r8, ip
 801640c:	ee10 aa10 	vmov	sl, s0
 8016410:	ee10 4a10 	vmov	r4, s0
 8016414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8016418:	dc09      	bgt.n	801642e <__ieee754_fmod+0x72>
 801641a:	dbf2      	blt.n	8016402 <__ieee754_fmod+0x46>
 801641c:	4290      	cmp	r0, r2
 801641e:	d3f0      	bcc.n	8016402 <__ieee754_fmod+0x46>
 8016420:	d105      	bne.n	801642e <__ieee754_fmod+0x72>
 8016422:	4b69      	ldr	r3, [pc, #420]	; (80165c8 <__ieee754_fmod+0x20c>)
 8016424:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8016428:	e9d3 0100 	ldrd	r0, r1, [r3]
 801642c:	e7e9      	b.n	8016402 <__ieee754_fmod+0x46>
 801642e:	4a65      	ldr	r2, [pc, #404]	; (80165c4 <__ieee754_fmod+0x208>)
 8016430:	ea19 0f02 	tst.w	r9, r2
 8016434:	d148      	bne.n	80164c8 <__ieee754_fmod+0x10c>
 8016436:	f1b8 0f00 	cmp.w	r8, #0
 801643a:	d13d      	bne.n	80164b8 <__ieee754_fmod+0xfc>
 801643c:	4963      	ldr	r1, [pc, #396]	; (80165cc <__ieee754_fmod+0x210>)
 801643e:	4653      	mov	r3, sl
 8016440:	2b00      	cmp	r3, #0
 8016442:	dc36      	bgt.n	80164b2 <__ieee754_fmod+0xf6>
 8016444:	4216      	tst	r6, r2
 8016446:	d14f      	bne.n	80164e8 <__ieee754_fmod+0x12c>
 8016448:	f1bc 0f00 	cmp.w	ip, #0
 801644c:	d144      	bne.n	80164d8 <__ieee754_fmod+0x11c>
 801644e:	4a5f      	ldr	r2, [pc, #380]	; (80165cc <__ieee754_fmod+0x210>)
 8016450:	463b      	mov	r3, r7
 8016452:	2b00      	cmp	r3, #0
 8016454:	dc3d      	bgt.n	80164d2 <__ieee754_fmod+0x116>
 8016456:	485e      	ldr	r0, [pc, #376]	; (80165d0 <__ieee754_fmod+0x214>)
 8016458:	4281      	cmp	r1, r0
 801645a:	db4a      	blt.n	80164f2 <__ieee754_fmod+0x136>
 801645c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016464:	485a      	ldr	r0, [pc, #360]	; (80165d0 <__ieee754_fmod+0x214>)
 8016466:	4282      	cmp	r2, r0
 8016468:	db57      	blt.n	801651a <__ieee754_fmod+0x15e>
 801646a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801646e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8016472:	1a89      	subs	r1, r1, r2
 8016474:	1b98      	subs	r0, r3, r6
 8016476:	eba4 070e 	sub.w	r7, r4, lr
 801647a:	2900      	cmp	r1, #0
 801647c:	d162      	bne.n	8016544 <__ieee754_fmod+0x188>
 801647e:	4574      	cmp	r4, lr
 8016480:	bf38      	it	cc
 8016482:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8016486:	2800      	cmp	r0, #0
 8016488:	bfa4      	itt	ge
 801648a:	463c      	movge	r4, r7
 801648c:	4603      	movge	r3, r0
 801648e:	ea53 0104 	orrs.w	r1, r3, r4
 8016492:	d0c6      	beq.n	8016422 <__ieee754_fmod+0x66>
 8016494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016498:	db69      	blt.n	801656e <__ieee754_fmod+0x1b2>
 801649a:	494d      	ldr	r1, [pc, #308]	; (80165d0 <__ieee754_fmod+0x214>)
 801649c:	428a      	cmp	r2, r1
 801649e:	db6c      	blt.n	801657a <__ieee754_fmod+0x1be>
 80164a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80164a4:	432b      	orrs	r3, r5
 80164a6:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80164aa:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80164ae:	4620      	mov	r0, r4
 80164b0:	e7a7      	b.n	8016402 <__ieee754_fmod+0x46>
 80164b2:	3901      	subs	r1, #1
 80164b4:	005b      	lsls	r3, r3, #1
 80164b6:	e7c3      	b.n	8016440 <__ieee754_fmod+0x84>
 80164b8:	4945      	ldr	r1, [pc, #276]	; (80165d0 <__ieee754_fmod+0x214>)
 80164ba:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80164be:	2b00      	cmp	r3, #0
 80164c0:	ddc0      	ble.n	8016444 <__ieee754_fmod+0x88>
 80164c2:	3901      	subs	r1, #1
 80164c4:	005b      	lsls	r3, r3, #1
 80164c6:	e7fa      	b.n	80164be <__ieee754_fmod+0x102>
 80164c8:	ea4f 5128 	mov.w	r1, r8, asr #20
 80164cc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80164d0:	e7b8      	b.n	8016444 <__ieee754_fmod+0x88>
 80164d2:	3a01      	subs	r2, #1
 80164d4:	005b      	lsls	r3, r3, #1
 80164d6:	e7bc      	b.n	8016452 <__ieee754_fmod+0x96>
 80164d8:	4a3d      	ldr	r2, [pc, #244]	; (80165d0 <__ieee754_fmod+0x214>)
 80164da:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80164de:	2b00      	cmp	r3, #0
 80164e0:	ddb9      	ble.n	8016456 <__ieee754_fmod+0x9a>
 80164e2:	3a01      	subs	r2, #1
 80164e4:	005b      	lsls	r3, r3, #1
 80164e6:	e7fa      	b.n	80164de <__ieee754_fmod+0x122>
 80164e8:	ea4f 522c 	mov.w	r2, ip, asr #20
 80164ec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80164f0:	e7b1      	b.n	8016456 <__ieee754_fmod+0x9a>
 80164f2:	1a40      	subs	r0, r0, r1
 80164f4:	281f      	cmp	r0, #31
 80164f6:	dc0a      	bgt.n	801650e <__ieee754_fmod+0x152>
 80164f8:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80164fc:	fa08 f800 	lsl.w	r8, r8, r0
 8016500:	fa2a f303 	lsr.w	r3, sl, r3
 8016504:	ea43 0308 	orr.w	r3, r3, r8
 8016508:	fa0a f400 	lsl.w	r4, sl, r0
 801650c:	e7aa      	b.n	8016464 <__ieee754_fmod+0xa8>
 801650e:	4b31      	ldr	r3, [pc, #196]	; (80165d4 <__ieee754_fmod+0x218>)
 8016510:	1a5b      	subs	r3, r3, r1
 8016512:	fa0a f303 	lsl.w	r3, sl, r3
 8016516:	2400      	movs	r4, #0
 8016518:	e7a4      	b.n	8016464 <__ieee754_fmod+0xa8>
 801651a:	1a80      	subs	r0, r0, r2
 801651c:	281f      	cmp	r0, #31
 801651e:	dc0a      	bgt.n	8016536 <__ieee754_fmod+0x17a>
 8016520:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8016524:	fa0c fc00 	lsl.w	ip, ip, r0
 8016528:	fa27 f606 	lsr.w	r6, r7, r6
 801652c:	ea46 060c 	orr.w	r6, r6, ip
 8016530:	fa07 fe00 	lsl.w	lr, r7, r0
 8016534:	e79d      	b.n	8016472 <__ieee754_fmod+0xb6>
 8016536:	4e27      	ldr	r6, [pc, #156]	; (80165d4 <__ieee754_fmod+0x218>)
 8016538:	1ab6      	subs	r6, r6, r2
 801653a:	fa07 f606 	lsl.w	r6, r7, r6
 801653e:	f04f 0e00 	mov.w	lr, #0
 8016542:	e796      	b.n	8016472 <__ieee754_fmod+0xb6>
 8016544:	4574      	cmp	r4, lr
 8016546:	bf38      	it	cc
 8016548:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801654c:	2800      	cmp	r0, #0
 801654e:	da05      	bge.n	801655c <__ieee754_fmod+0x1a0>
 8016550:	0fe0      	lsrs	r0, r4, #31
 8016552:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016556:	0064      	lsls	r4, r4, #1
 8016558:	3901      	subs	r1, #1
 801655a:	e78b      	b.n	8016474 <__ieee754_fmod+0xb8>
 801655c:	ea50 0307 	orrs.w	r3, r0, r7
 8016560:	f43f af5f 	beq.w	8016422 <__ieee754_fmod+0x66>
 8016564:	0ffb      	lsrs	r3, r7, #31
 8016566:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801656a:	007c      	lsls	r4, r7, #1
 801656c:	e7f4      	b.n	8016558 <__ieee754_fmod+0x19c>
 801656e:	0fe1      	lsrs	r1, r4, #31
 8016570:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8016574:	0064      	lsls	r4, r4, #1
 8016576:	3a01      	subs	r2, #1
 8016578:	e78c      	b.n	8016494 <__ieee754_fmod+0xd8>
 801657a:	1a89      	subs	r1, r1, r2
 801657c:	2914      	cmp	r1, #20
 801657e:	dc0a      	bgt.n	8016596 <__ieee754_fmod+0x1da>
 8016580:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8016584:	fa03 f202 	lsl.w	r2, r3, r2
 8016588:	40cc      	lsrs	r4, r1
 801658a:	4322      	orrs	r2, r4
 801658c:	410b      	asrs	r3, r1
 801658e:	ea43 0105 	orr.w	r1, r3, r5
 8016592:	4610      	mov	r0, r2
 8016594:	e735      	b.n	8016402 <__ieee754_fmod+0x46>
 8016596:	291f      	cmp	r1, #31
 8016598:	dc07      	bgt.n	80165aa <__ieee754_fmod+0x1ee>
 801659a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801659e:	40cc      	lsrs	r4, r1
 80165a0:	fa03 f202 	lsl.w	r2, r3, r2
 80165a4:	4322      	orrs	r2, r4
 80165a6:	462b      	mov	r3, r5
 80165a8:	e7f1      	b.n	801658e <__ieee754_fmod+0x1d2>
 80165aa:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80165ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80165b2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80165b6:	32e2      	adds	r2, #226	; 0xe2
 80165b8:	fa43 f202 	asr.w	r2, r3, r2
 80165bc:	e7f3      	b.n	80165a6 <__ieee754_fmod+0x1ea>
 80165be:	bf00      	nop
 80165c0:	7fefffff 	.word	0x7fefffff
 80165c4:	7ff00000 	.word	0x7ff00000
 80165c8:	08019cc8 	.word	0x08019cc8
 80165cc:	fffffbed 	.word	0xfffffbed
 80165d0:	fffffc02 	.word	0xfffffc02
 80165d4:	fffffbe2 	.word	0xfffffbe2

080165d8 <__ieee754_pow>:
 80165d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165dc:	ed2d 8b06 	vpush	{d8-d10}
 80165e0:	b089      	sub	sp, #36	; 0x24
 80165e2:	ed8d 1b00 	vstr	d1, [sp]
 80165e6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80165ea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80165ee:	ea58 0102 	orrs.w	r1, r8, r2
 80165f2:	ec57 6b10 	vmov	r6, r7, d0
 80165f6:	d115      	bne.n	8016624 <__ieee754_pow+0x4c>
 80165f8:	19b3      	adds	r3, r6, r6
 80165fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80165fe:	4152      	adcs	r2, r2
 8016600:	4299      	cmp	r1, r3
 8016602:	4b89      	ldr	r3, [pc, #548]	; (8016828 <__ieee754_pow+0x250>)
 8016604:	4193      	sbcs	r3, r2
 8016606:	f080 84d1 	bcs.w	8016fac <__ieee754_pow+0x9d4>
 801660a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801660e:	4630      	mov	r0, r6
 8016610:	4639      	mov	r1, r7
 8016612:	f7e9 fe43 	bl	800029c <__adddf3>
 8016616:	ec41 0b10 	vmov	d0, r0, r1
 801661a:	b009      	add	sp, #36	; 0x24
 801661c:	ecbd 8b06 	vpop	{d8-d10}
 8016620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016624:	4b81      	ldr	r3, [pc, #516]	; (801682c <__ieee754_pow+0x254>)
 8016626:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801662a:	429c      	cmp	r4, r3
 801662c:	ee10 aa10 	vmov	sl, s0
 8016630:	463d      	mov	r5, r7
 8016632:	dc06      	bgt.n	8016642 <__ieee754_pow+0x6a>
 8016634:	d101      	bne.n	801663a <__ieee754_pow+0x62>
 8016636:	2e00      	cmp	r6, #0
 8016638:	d1e7      	bne.n	801660a <__ieee754_pow+0x32>
 801663a:	4598      	cmp	r8, r3
 801663c:	dc01      	bgt.n	8016642 <__ieee754_pow+0x6a>
 801663e:	d10f      	bne.n	8016660 <__ieee754_pow+0x88>
 8016640:	b172      	cbz	r2, 8016660 <__ieee754_pow+0x88>
 8016642:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8016646:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801664a:	ea55 050a 	orrs.w	r5, r5, sl
 801664e:	d1dc      	bne.n	801660a <__ieee754_pow+0x32>
 8016650:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016654:	18db      	adds	r3, r3, r3
 8016656:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801665a:	4152      	adcs	r2, r2
 801665c:	429d      	cmp	r5, r3
 801665e:	e7d0      	b.n	8016602 <__ieee754_pow+0x2a>
 8016660:	2d00      	cmp	r5, #0
 8016662:	da3b      	bge.n	80166dc <__ieee754_pow+0x104>
 8016664:	4b72      	ldr	r3, [pc, #456]	; (8016830 <__ieee754_pow+0x258>)
 8016666:	4598      	cmp	r8, r3
 8016668:	dc51      	bgt.n	801670e <__ieee754_pow+0x136>
 801666a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801666e:	4598      	cmp	r8, r3
 8016670:	f340 84ab 	ble.w	8016fca <__ieee754_pow+0x9f2>
 8016674:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016678:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801667c:	2b14      	cmp	r3, #20
 801667e:	dd0f      	ble.n	80166a0 <__ieee754_pow+0xc8>
 8016680:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016684:	fa22 f103 	lsr.w	r1, r2, r3
 8016688:	fa01 f303 	lsl.w	r3, r1, r3
 801668c:	4293      	cmp	r3, r2
 801668e:	f040 849c 	bne.w	8016fca <__ieee754_pow+0x9f2>
 8016692:	f001 0101 	and.w	r1, r1, #1
 8016696:	f1c1 0302 	rsb	r3, r1, #2
 801669a:	9304      	str	r3, [sp, #16]
 801669c:	b182      	cbz	r2, 80166c0 <__ieee754_pow+0xe8>
 801669e:	e05f      	b.n	8016760 <__ieee754_pow+0x188>
 80166a0:	2a00      	cmp	r2, #0
 80166a2:	d15b      	bne.n	801675c <__ieee754_pow+0x184>
 80166a4:	f1c3 0314 	rsb	r3, r3, #20
 80166a8:	fa48 f103 	asr.w	r1, r8, r3
 80166ac:	fa01 f303 	lsl.w	r3, r1, r3
 80166b0:	4543      	cmp	r3, r8
 80166b2:	f040 8487 	bne.w	8016fc4 <__ieee754_pow+0x9ec>
 80166b6:	f001 0101 	and.w	r1, r1, #1
 80166ba:	f1c1 0302 	rsb	r3, r1, #2
 80166be:	9304      	str	r3, [sp, #16]
 80166c0:	4b5c      	ldr	r3, [pc, #368]	; (8016834 <__ieee754_pow+0x25c>)
 80166c2:	4598      	cmp	r8, r3
 80166c4:	d132      	bne.n	801672c <__ieee754_pow+0x154>
 80166c6:	f1b9 0f00 	cmp.w	r9, #0
 80166ca:	f280 8477 	bge.w	8016fbc <__ieee754_pow+0x9e4>
 80166ce:	4959      	ldr	r1, [pc, #356]	; (8016834 <__ieee754_pow+0x25c>)
 80166d0:	4632      	mov	r2, r6
 80166d2:	463b      	mov	r3, r7
 80166d4:	2000      	movs	r0, #0
 80166d6:	f7ea f8c1 	bl	800085c <__aeabi_ddiv>
 80166da:	e79c      	b.n	8016616 <__ieee754_pow+0x3e>
 80166dc:	2300      	movs	r3, #0
 80166de:	9304      	str	r3, [sp, #16]
 80166e0:	2a00      	cmp	r2, #0
 80166e2:	d13d      	bne.n	8016760 <__ieee754_pow+0x188>
 80166e4:	4b51      	ldr	r3, [pc, #324]	; (801682c <__ieee754_pow+0x254>)
 80166e6:	4598      	cmp	r8, r3
 80166e8:	d1ea      	bne.n	80166c0 <__ieee754_pow+0xe8>
 80166ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80166ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80166f2:	ea53 030a 	orrs.w	r3, r3, sl
 80166f6:	f000 8459 	beq.w	8016fac <__ieee754_pow+0x9d4>
 80166fa:	4b4f      	ldr	r3, [pc, #316]	; (8016838 <__ieee754_pow+0x260>)
 80166fc:	429c      	cmp	r4, r3
 80166fe:	dd08      	ble.n	8016712 <__ieee754_pow+0x13a>
 8016700:	f1b9 0f00 	cmp.w	r9, #0
 8016704:	f2c0 8456 	blt.w	8016fb4 <__ieee754_pow+0x9dc>
 8016708:	e9dd 0100 	ldrd	r0, r1, [sp]
 801670c:	e783      	b.n	8016616 <__ieee754_pow+0x3e>
 801670e:	2302      	movs	r3, #2
 8016710:	e7e5      	b.n	80166de <__ieee754_pow+0x106>
 8016712:	f1b9 0f00 	cmp.w	r9, #0
 8016716:	f04f 0000 	mov.w	r0, #0
 801671a:	f04f 0100 	mov.w	r1, #0
 801671e:	f6bf af7a 	bge.w	8016616 <__ieee754_pow+0x3e>
 8016722:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016726:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801672a:	e774      	b.n	8016616 <__ieee754_pow+0x3e>
 801672c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016730:	d106      	bne.n	8016740 <__ieee754_pow+0x168>
 8016732:	4632      	mov	r2, r6
 8016734:	463b      	mov	r3, r7
 8016736:	4630      	mov	r0, r6
 8016738:	4639      	mov	r1, r7
 801673a:	f7e9 ff65 	bl	8000608 <__aeabi_dmul>
 801673e:	e76a      	b.n	8016616 <__ieee754_pow+0x3e>
 8016740:	4b3e      	ldr	r3, [pc, #248]	; (801683c <__ieee754_pow+0x264>)
 8016742:	4599      	cmp	r9, r3
 8016744:	d10c      	bne.n	8016760 <__ieee754_pow+0x188>
 8016746:	2d00      	cmp	r5, #0
 8016748:	db0a      	blt.n	8016760 <__ieee754_pow+0x188>
 801674a:	ec47 6b10 	vmov	d0, r6, r7
 801674e:	b009      	add	sp, #36	; 0x24
 8016750:	ecbd 8b06 	vpop	{d8-d10}
 8016754:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016758:	f7ff babe 	b.w	8015cd8 <__ieee754_sqrt>
 801675c:	2300      	movs	r3, #0
 801675e:	9304      	str	r3, [sp, #16]
 8016760:	ec47 6b10 	vmov	d0, r6, r7
 8016764:	f001 f80c 	bl	8017780 <fabs>
 8016768:	ec51 0b10 	vmov	r0, r1, d0
 801676c:	f1ba 0f00 	cmp.w	sl, #0
 8016770:	d129      	bne.n	80167c6 <__ieee754_pow+0x1ee>
 8016772:	b124      	cbz	r4, 801677e <__ieee754_pow+0x1a6>
 8016774:	4b2f      	ldr	r3, [pc, #188]	; (8016834 <__ieee754_pow+0x25c>)
 8016776:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801677a:	429a      	cmp	r2, r3
 801677c:	d123      	bne.n	80167c6 <__ieee754_pow+0x1ee>
 801677e:	f1b9 0f00 	cmp.w	r9, #0
 8016782:	da05      	bge.n	8016790 <__ieee754_pow+0x1b8>
 8016784:	4602      	mov	r2, r0
 8016786:	460b      	mov	r3, r1
 8016788:	2000      	movs	r0, #0
 801678a:	492a      	ldr	r1, [pc, #168]	; (8016834 <__ieee754_pow+0x25c>)
 801678c:	f7ea f866 	bl	800085c <__aeabi_ddiv>
 8016790:	2d00      	cmp	r5, #0
 8016792:	f6bf af40 	bge.w	8016616 <__ieee754_pow+0x3e>
 8016796:	9b04      	ldr	r3, [sp, #16]
 8016798:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801679c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80167a0:	431c      	orrs	r4, r3
 80167a2:	d108      	bne.n	80167b6 <__ieee754_pow+0x1de>
 80167a4:	4602      	mov	r2, r0
 80167a6:	460b      	mov	r3, r1
 80167a8:	4610      	mov	r0, r2
 80167aa:	4619      	mov	r1, r3
 80167ac:	f7e9 fd74 	bl	8000298 <__aeabi_dsub>
 80167b0:	4602      	mov	r2, r0
 80167b2:	460b      	mov	r3, r1
 80167b4:	e78f      	b.n	80166d6 <__ieee754_pow+0xfe>
 80167b6:	9b04      	ldr	r3, [sp, #16]
 80167b8:	2b01      	cmp	r3, #1
 80167ba:	f47f af2c 	bne.w	8016616 <__ieee754_pow+0x3e>
 80167be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80167c2:	4619      	mov	r1, r3
 80167c4:	e727      	b.n	8016616 <__ieee754_pow+0x3e>
 80167c6:	0feb      	lsrs	r3, r5, #31
 80167c8:	3b01      	subs	r3, #1
 80167ca:	9306      	str	r3, [sp, #24]
 80167cc:	9a06      	ldr	r2, [sp, #24]
 80167ce:	9b04      	ldr	r3, [sp, #16]
 80167d0:	4313      	orrs	r3, r2
 80167d2:	d102      	bne.n	80167da <__ieee754_pow+0x202>
 80167d4:	4632      	mov	r2, r6
 80167d6:	463b      	mov	r3, r7
 80167d8:	e7e6      	b.n	80167a8 <__ieee754_pow+0x1d0>
 80167da:	4b19      	ldr	r3, [pc, #100]	; (8016840 <__ieee754_pow+0x268>)
 80167dc:	4598      	cmp	r8, r3
 80167de:	f340 80fb 	ble.w	80169d8 <__ieee754_pow+0x400>
 80167e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80167e6:	4598      	cmp	r8, r3
 80167e8:	4b13      	ldr	r3, [pc, #76]	; (8016838 <__ieee754_pow+0x260>)
 80167ea:	dd0c      	ble.n	8016806 <__ieee754_pow+0x22e>
 80167ec:	429c      	cmp	r4, r3
 80167ee:	dc0f      	bgt.n	8016810 <__ieee754_pow+0x238>
 80167f0:	f1b9 0f00 	cmp.w	r9, #0
 80167f4:	da0f      	bge.n	8016816 <__ieee754_pow+0x23e>
 80167f6:	2000      	movs	r0, #0
 80167f8:	b009      	add	sp, #36	; 0x24
 80167fa:	ecbd 8b06 	vpop	{d8-d10}
 80167fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016802:	f001 b86e 	b.w	80178e2 <__math_oflow>
 8016806:	429c      	cmp	r4, r3
 8016808:	dbf2      	blt.n	80167f0 <__ieee754_pow+0x218>
 801680a:	4b0a      	ldr	r3, [pc, #40]	; (8016834 <__ieee754_pow+0x25c>)
 801680c:	429c      	cmp	r4, r3
 801680e:	dd19      	ble.n	8016844 <__ieee754_pow+0x26c>
 8016810:	f1b9 0f00 	cmp.w	r9, #0
 8016814:	dcef      	bgt.n	80167f6 <__ieee754_pow+0x21e>
 8016816:	2000      	movs	r0, #0
 8016818:	b009      	add	sp, #36	; 0x24
 801681a:	ecbd 8b06 	vpop	{d8-d10}
 801681e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016822:	f001 b855 	b.w	80178d0 <__math_uflow>
 8016826:	bf00      	nop
 8016828:	fff00000 	.word	0xfff00000
 801682c:	7ff00000 	.word	0x7ff00000
 8016830:	433fffff 	.word	0x433fffff
 8016834:	3ff00000 	.word	0x3ff00000
 8016838:	3fefffff 	.word	0x3fefffff
 801683c:	3fe00000 	.word	0x3fe00000
 8016840:	41e00000 	.word	0x41e00000
 8016844:	4b60      	ldr	r3, [pc, #384]	; (80169c8 <__ieee754_pow+0x3f0>)
 8016846:	2200      	movs	r2, #0
 8016848:	f7e9 fd26 	bl	8000298 <__aeabi_dsub>
 801684c:	a354      	add	r3, pc, #336	; (adr r3, 80169a0 <__ieee754_pow+0x3c8>)
 801684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016852:	4604      	mov	r4, r0
 8016854:	460d      	mov	r5, r1
 8016856:	f7e9 fed7 	bl	8000608 <__aeabi_dmul>
 801685a:	a353      	add	r3, pc, #332	; (adr r3, 80169a8 <__ieee754_pow+0x3d0>)
 801685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016860:	4606      	mov	r6, r0
 8016862:	460f      	mov	r7, r1
 8016864:	4620      	mov	r0, r4
 8016866:	4629      	mov	r1, r5
 8016868:	f7e9 fece 	bl	8000608 <__aeabi_dmul>
 801686c:	4b57      	ldr	r3, [pc, #348]	; (80169cc <__ieee754_pow+0x3f4>)
 801686e:	4682      	mov	sl, r0
 8016870:	468b      	mov	fp, r1
 8016872:	2200      	movs	r2, #0
 8016874:	4620      	mov	r0, r4
 8016876:	4629      	mov	r1, r5
 8016878:	f7e9 fec6 	bl	8000608 <__aeabi_dmul>
 801687c:	4602      	mov	r2, r0
 801687e:	460b      	mov	r3, r1
 8016880:	a14b      	add	r1, pc, #300	; (adr r1, 80169b0 <__ieee754_pow+0x3d8>)
 8016882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016886:	f7e9 fd07 	bl	8000298 <__aeabi_dsub>
 801688a:	4622      	mov	r2, r4
 801688c:	462b      	mov	r3, r5
 801688e:	f7e9 febb 	bl	8000608 <__aeabi_dmul>
 8016892:	4602      	mov	r2, r0
 8016894:	460b      	mov	r3, r1
 8016896:	2000      	movs	r0, #0
 8016898:	494d      	ldr	r1, [pc, #308]	; (80169d0 <__ieee754_pow+0x3f8>)
 801689a:	f7e9 fcfd 	bl	8000298 <__aeabi_dsub>
 801689e:	4622      	mov	r2, r4
 80168a0:	4680      	mov	r8, r0
 80168a2:	4689      	mov	r9, r1
 80168a4:	462b      	mov	r3, r5
 80168a6:	4620      	mov	r0, r4
 80168a8:	4629      	mov	r1, r5
 80168aa:	f7e9 fead 	bl	8000608 <__aeabi_dmul>
 80168ae:	4602      	mov	r2, r0
 80168b0:	460b      	mov	r3, r1
 80168b2:	4640      	mov	r0, r8
 80168b4:	4649      	mov	r1, r9
 80168b6:	f7e9 fea7 	bl	8000608 <__aeabi_dmul>
 80168ba:	a33f      	add	r3, pc, #252	; (adr r3, 80169b8 <__ieee754_pow+0x3e0>)
 80168bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168c0:	f7e9 fea2 	bl	8000608 <__aeabi_dmul>
 80168c4:	4602      	mov	r2, r0
 80168c6:	460b      	mov	r3, r1
 80168c8:	4650      	mov	r0, sl
 80168ca:	4659      	mov	r1, fp
 80168cc:	f7e9 fce4 	bl	8000298 <__aeabi_dsub>
 80168d0:	4602      	mov	r2, r0
 80168d2:	460b      	mov	r3, r1
 80168d4:	4680      	mov	r8, r0
 80168d6:	4689      	mov	r9, r1
 80168d8:	4630      	mov	r0, r6
 80168da:	4639      	mov	r1, r7
 80168dc:	f7e9 fcde 	bl	800029c <__adddf3>
 80168e0:	2000      	movs	r0, #0
 80168e2:	4632      	mov	r2, r6
 80168e4:	463b      	mov	r3, r7
 80168e6:	4604      	mov	r4, r0
 80168e8:	460d      	mov	r5, r1
 80168ea:	f7e9 fcd5 	bl	8000298 <__aeabi_dsub>
 80168ee:	4602      	mov	r2, r0
 80168f0:	460b      	mov	r3, r1
 80168f2:	4640      	mov	r0, r8
 80168f4:	4649      	mov	r1, r9
 80168f6:	f7e9 fccf 	bl	8000298 <__aeabi_dsub>
 80168fa:	9b04      	ldr	r3, [sp, #16]
 80168fc:	9a06      	ldr	r2, [sp, #24]
 80168fe:	3b01      	subs	r3, #1
 8016900:	4313      	orrs	r3, r2
 8016902:	4682      	mov	sl, r0
 8016904:	468b      	mov	fp, r1
 8016906:	f040 81e7 	bne.w	8016cd8 <__ieee754_pow+0x700>
 801690a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80169c0 <__ieee754_pow+0x3e8>
 801690e:	eeb0 8a47 	vmov.f32	s16, s14
 8016912:	eef0 8a67 	vmov.f32	s17, s15
 8016916:	e9dd 6700 	ldrd	r6, r7, [sp]
 801691a:	2600      	movs	r6, #0
 801691c:	4632      	mov	r2, r6
 801691e:	463b      	mov	r3, r7
 8016920:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016924:	f7e9 fcb8 	bl	8000298 <__aeabi_dsub>
 8016928:	4622      	mov	r2, r4
 801692a:	462b      	mov	r3, r5
 801692c:	f7e9 fe6c 	bl	8000608 <__aeabi_dmul>
 8016930:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016934:	4680      	mov	r8, r0
 8016936:	4689      	mov	r9, r1
 8016938:	4650      	mov	r0, sl
 801693a:	4659      	mov	r1, fp
 801693c:	f7e9 fe64 	bl	8000608 <__aeabi_dmul>
 8016940:	4602      	mov	r2, r0
 8016942:	460b      	mov	r3, r1
 8016944:	4640      	mov	r0, r8
 8016946:	4649      	mov	r1, r9
 8016948:	f7e9 fca8 	bl	800029c <__adddf3>
 801694c:	4632      	mov	r2, r6
 801694e:	463b      	mov	r3, r7
 8016950:	4680      	mov	r8, r0
 8016952:	4689      	mov	r9, r1
 8016954:	4620      	mov	r0, r4
 8016956:	4629      	mov	r1, r5
 8016958:	f7e9 fe56 	bl	8000608 <__aeabi_dmul>
 801695c:	460b      	mov	r3, r1
 801695e:	4604      	mov	r4, r0
 8016960:	460d      	mov	r5, r1
 8016962:	4602      	mov	r2, r0
 8016964:	4649      	mov	r1, r9
 8016966:	4640      	mov	r0, r8
 8016968:	f7e9 fc98 	bl	800029c <__adddf3>
 801696c:	4b19      	ldr	r3, [pc, #100]	; (80169d4 <__ieee754_pow+0x3fc>)
 801696e:	4299      	cmp	r1, r3
 8016970:	ec45 4b19 	vmov	d9, r4, r5
 8016974:	4606      	mov	r6, r0
 8016976:	460f      	mov	r7, r1
 8016978:	468b      	mov	fp, r1
 801697a:	f340 82f0 	ble.w	8016f5e <__ieee754_pow+0x986>
 801697e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016982:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016986:	4303      	orrs	r3, r0
 8016988:	f000 81e4 	beq.w	8016d54 <__ieee754_pow+0x77c>
 801698c:	ec51 0b18 	vmov	r0, r1, d8
 8016990:	2200      	movs	r2, #0
 8016992:	2300      	movs	r3, #0
 8016994:	f7ea f8aa 	bl	8000aec <__aeabi_dcmplt>
 8016998:	3800      	subs	r0, #0
 801699a:	bf18      	it	ne
 801699c:	2001      	movne	r0, #1
 801699e:	e72b      	b.n	80167f8 <__ieee754_pow+0x220>
 80169a0:	60000000 	.word	0x60000000
 80169a4:	3ff71547 	.word	0x3ff71547
 80169a8:	f85ddf44 	.word	0xf85ddf44
 80169ac:	3e54ae0b 	.word	0x3e54ae0b
 80169b0:	55555555 	.word	0x55555555
 80169b4:	3fd55555 	.word	0x3fd55555
 80169b8:	652b82fe 	.word	0x652b82fe
 80169bc:	3ff71547 	.word	0x3ff71547
 80169c0:	00000000 	.word	0x00000000
 80169c4:	bff00000 	.word	0xbff00000
 80169c8:	3ff00000 	.word	0x3ff00000
 80169cc:	3fd00000 	.word	0x3fd00000
 80169d0:	3fe00000 	.word	0x3fe00000
 80169d4:	408fffff 	.word	0x408fffff
 80169d8:	4bd5      	ldr	r3, [pc, #852]	; (8016d30 <__ieee754_pow+0x758>)
 80169da:	402b      	ands	r3, r5
 80169dc:	2200      	movs	r2, #0
 80169de:	b92b      	cbnz	r3, 80169ec <__ieee754_pow+0x414>
 80169e0:	4bd4      	ldr	r3, [pc, #848]	; (8016d34 <__ieee754_pow+0x75c>)
 80169e2:	f7e9 fe11 	bl	8000608 <__aeabi_dmul>
 80169e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80169ea:	460c      	mov	r4, r1
 80169ec:	1523      	asrs	r3, r4, #20
 80169ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80169f2:	4413      	add	r3, r2
 80169f4:	9305      	str	r3, [sp, #20]
 80169f6:	4bd0      	ldr	r3, [pc, #832]	; (8016d38 <__ieee754_pow+0x760>)
 80169f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80169fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016a00:	429c      	cmp	r4, r3
 8016a02:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016a06:	dd08      	ble.n	8016a1a <__ieee754_pow+0x442>
 8016a08:	4bcc      	ldr	r3, [pc, #816]	; (8016d3c <__ieee754_pow+0x764>)
 8016a0a:	429c      	cmp	r4, r3
 8016a0c:	f340 8162 	ble.w	8016cd4 <__ieee754_pow+0x6fc>
 8016a10:	9b05      	ldr	r3, [sp, #20]
 8016a12:	3301      	adds	r3, #1
 8016a14:	9305      	str	r3, [sp, #20]
 8016a16:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016a1a:	2400      	movs	r4, #0
 8016a1c:	00e3      	lsls	r3, r4, #3
 8016a1e:	9307      	str	r3, [sp, #28]
 8016a20:	4bc7      	ldr	r3, [pc, #796]	; (8016d40 <__ieee754_pow+0x768>)
 8016a22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016a26:	ed93 7b00 	vldr	d7, [r3]
 8016a2a:	4629      	mov	r1, r5
 8016a2c:	ec53 2b17 	vmov	r2, r3, d7
 8016a30:	eeb0 9a47 	vmov.f32	s18, s14
 8016a34:	eef0 9a67 	vmov.f32	s19, s15
 8016a38:	4682      	mov	sl, r0
 8016a3a:	f7e9 fc2d 	bl	8000298 <__aeabi_dsub>
 8016a3e:	4652      	mov	r2, sl
 8016a40:	4606      	mov	r6, r0
 8016a42:	460f      	mov	r7, r1
 8016a44:	462b      	mov	r3, r5
 8016a46:	ec51 0b19 	vmov	r0, r1, d9
 8016a4a:	f7e9 fc27 	bl	800029c <__adddf3>
 8016a4e:	4602      	mov	r2, r0
 8016a50:	460b      	mov	r3, r1
 8016a52:	2000      	movs	r0, #0
 8016a54:	49bb      	ldr	r1, [pc, #748]	; (8016d44 <__ieee754_pow+0x76c>)
 8016a56:	f7e9 ff01 	bl	800085c <__aeabi_ddiv>
 8016a5a:	ec41 0b1a 	vmov	d10, r0, r1
 8016a5e:	4602      	mov	r2, r0
 8016a60:	460b      	mov	r3, r1
 8016a62:	4630      	mov	r0, r6
 8016a64:	4639      	mov	r1, r7
 8016a66:	f7e9 fdcf 	bl	8000608 <__aeabi_dmul>
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a70:	9302      	str	r3, [sp, #8]
 8016a72:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016a76:	46ab      	mov	fp, r5
 8016a78:	106d      	asrs	r5, r5, #1
 8016a7a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016a7e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016a82:	ec41 0b18 	vmov	d8, r0, r1
 8016a86:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	4640      	mov	r0, r8
 8016a8e:	4649      	mov	r1, r9
 8016a90:	4614      	mov	r4, r2
 8016a92:	461d      	mov	r5, r3
 8016a94:	f7e9 fdb8 	bl	8000608 <__aeabi_dmul>
 8016a98:	4602      	mov	r2, r0
 8016a9a:	460b      	mov	r3, r1
 8016a9c:	4630      	mov	r0, r6
 8016a9e:	4639      	mov	r1, r7
 8016aa0:	f7e9 fbfa 	bl	8000298 <__aeabi_dsub>
 8016aa4:	ec53 2b19 	vmov	r2, r3, d9
 8016aa8:	4606      	mov	r6, r0
 8016aaa:	460f      	mov	r7, r1
 8016aac:	4620      	mov	r0, r4
 8016aae:	4629      	mov	r1, r5
 8016ab0:	f7e9 fbf2 	bl	8000298 <__aeabi_dsub>
 8016ab4:	4602      	mov	r2, r0
 8016ab6:	460b      	mov	r3, r1
 8016ab8:	4650      	mov	r0, sl
 8016aba:	4659      	mov	r1, fp
 8016abc:	f7e9 fbec 	bl	8000298 <__aeabi_dsub>
 8016ac0:	4642      	mov	r2, r8
 8016ac2:	464b      	mov	r3, r9
 8016ac4:	f7e9 fda0 	bl	8000608 <__aeabi_dmul>
 8016ac8:	4602      	mov	r2, r0
 8016aca:	460b      	mov	r3, r1
 8016acc:	4630      	mov	r0, r6
 8016ace:	4639      	mov	r1, r7
 8016ad0:	f7e9 fbe2 	bl	8000298 <__aeabi_dsub>
 8016ad4:	ec53 2b1a 	vmov	r2, r3, d10
 8016ad8:	f7e9 fd96 	bl	8000608 <__aeabi_dmul>
 8016adc:	ec53 2b18 	vmov	r2, r3, d8
 8016ae0:	ec41 0b19 	vmov	d9, r0, r1
 8016ae4:	ec51 0b18 	vmov	r0, r1, d8
 8016ae8:	f7e9 fd8e 	bl	8000608 <__aeabi_dmul>
 8016aec:	a37c      	add	r3, pc, #496	; (adr r3, 8016ce0 <__ieee754_pow+0x708>)
 8016aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016af2:	4604      	mov	r4, r0
 8016af4:	460d      	mov	r5, r1
 8016af6:	f7e9 fd87 	bl	8000608 <__aeabi_dmul>
 8016afa:	a37b      	add	r3, pc, #492	; (adr r3, 8016ce8 <__ieee754_pow+0x710>)
 8016afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b00:	f7e9 fbcc 	bl	800029c <__adddf3>
 8016b04:	4622      	mov	r2, r4
 8016b06:	462b      	mov	r3, r5
 8016b08:	f7e9 fd7e 	bl	8000608 <__aeabi_dmul>
 8016b0c:	a378      	add	r3, pc, #480	; (adr r3, 8016cf0 <__ieee754_pow+0x718>)
 8016b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b12:	f7e9 fbc3 	bl	800029c <__adddf3>
 8016b16:	4622      	mov	r2, r4
 8016b18:	462b      	mov	r3, r5
 8016b1a:	f7e9 fd75 	bl	8000608 <__aeabi_dmul>
 8016b1e:	a376      	add	r3, pc, #472	; (adr r3, 8016cf8 <__ieee754_pow+0x720>)
 8016b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b24:	f7e9 fbba 	bl	800029c <__adddf3>
 8016b28:	4622      	mov	r2, r4
 8016b2a:	462b      	mov	r3, r5
 8016b2c:	f7e9 fd6c 	bl	8000608 <__aeabi_dmul>
 8016b30:	a373      	add	r3, pc, #460	; (adr r3, 8016d00 <__ieee754_pow+0x728>)
 8016b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b36:	f7e9 fbb1 	bl	800029c <__adddf3>
 8016b3a:	4622      	mov	r2, r4
 8016b3c:	462b      	mov	r3, r5
 8016b3e:	f7e9 fd63 	bl	8000608 <__aeabi_dmul>
 8016b42:	a371      	add	r3, pc, #452	; (adr r3, 8016d08 <__ieee754_pow+0x730>)
 8016b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b48:	f7e9 fba8 	bl	800029c <__adddf3>
 8016b4c:	4622      	mov	r2, r4
 8016b4e:	4606      	mov	r6, r0
 8016b50:	460f      	mov	r7, r1
 8016b52:	462b      	mov	r3, r5
 8016b54:	4620      	mov	r0, r4
 8016b56:	4629      	mov	r1, r5
 8016b58:	f7e9 fd56 	bl	8000608 <__aeabi_dmul>
 8016b5c:	4602      	mov	r2, r0
 8016b5e:	460b      	mov	r3, r1
 8016b60:	4630      	mov	r0, r6
 8016b62:	4639      	mov	r1, r7
 8016b64:	f7e9 fd50 	bl	8000608 <__aeabi_dmul>
 8016b68:	4642      	mov	r2, r8
 8016b6a:	4604      	mov	r4, r0
 8016b6c:	460d      	mov	r5, r1
 8016b6e:	464b      	mov	r3, r9
 8016b70:	ec51 0b18 	vmov	r0, r1, d8
 8016b74:	f7e9 fb92 	bl	800029c <__adddf3>
 8016b78:	ec53 2b19 	vmov	r2, r3, d9
 8016b7c:	f7e9 fd44 	bl	8000608 <__aeabi_dmul>
 8016b80:	4622      	mov	r2, r4
 8016b82:	462b      	mov	r3, r5
 8016b84:	f7e9 fb8a 	bl	800029c <__adddf3>
 8016b88:	4642      	mov	r2, r8
 8016b8a:	4682      	mov	sl, r0
 8016b8c:	468b      	mov	fp, r1
 8016b8e:	464b      	mov	r3, r9
 8016b90:	4640      	mov	r0, r8
 8016b92:	4649      	mov	r1, r9
 8016b94:	f7e9 fd38 	bl	8000608 <__aeabi_dmul>
 8016b98:	4b6b      	ldr	r3, [pc, #428]	; (8016d48 <__ieee754_pow+0x770>)
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	4606      	mov	r6, r0
 8016b9e:	460f      	mov	r7, r1
 8016ba0:	f7e9 fb7c 	bl	800029c <__adddf3>
 8016ba4:	4652      	mov	r2, sl
 8016ba6:	465b      	mov	r3, fp
 8016ba8:	f7e9 fb78 	bl	800029c <__adddf3>
 8016bac:	2000      	movs	r0, #0
 8016bae:	4604      	mov	r4, r0
 8016bb0:	460d      	mov	r5, r1
 8016bb2:	4602      	mov	r2, r0
 8016bb4:	460b      	mov	r3, r1
 8016bb6:	4640      	mov	r0, r8
 8016bb8:	4649      	mov	r1, r9
 8016bba:	f7e9 fd25 	bl	8000608 <__aeabi_dmul>
 8016bbe:	4b62      	ldr	r3, [pc, #392]	; (8016d48 <__ieee754_pow+0x770>)
 8016bc0:	4680      	mov	r8, r0
 8016bc2:	4689      	mov	r9, r1
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	4629      	mov	r1, r5
 8016bca:	f7e9 fb65 	bl	8000298 <__aeabi_dsub>
 8016bce:	4632      	mov	r2, r6
 8016bd0:	463b      	mov	r3, r7
 8016bd2:	f7e9 fb61 	bl	8000298 <__aeabi_dsub>
 8016bd6:	4602      	mov	r2, r0
 8016bd8:	460b      	mov	r3, r1
 8016bda:	4650      	mov	r0, sl
 8016bdc:	4659      	mov	r1, fp
 8016bde:	f7e9 fb5b 	bl	8000298 <__aeabi_dsub>
 8016be2:	ec53 2b18 	vmov	r2, r3, d8
 8016be6:	f7e9 fd0f 	bl	8000608 <__aeabi_dmul>
 8016bea:	4622      	mov	r2, r4
 8016bec:	4606      	mov	r6, r0
 8016bee:	460f      	mov	r7, r1
 8016bf0:	462b      	mov	r3, r5
 8016bf2:	ec51 0b19 	vmov	r0, r1, d9
 8016bf6:	f7e9 fd07 	bl	8000608 <__aeabi_dmul>
 8016bfa:	4602      	mov	r2, r0
 8016bfc:	460b      	mov	r3, r1
 8016bfe:	4630      	mov	r0, r6
 8016c00:	4639      	mov	r1, r7
 8016c02:	f7e9 fb4b 	bl	800029c <__adddf3>
 8016c06:	4606      	mov	r6, r0
 8016c08:	460f      	mov	r7, r1
 8016c0a:	4602      	mov	r2, r0
 8016c0c:	460b      	mov	r3, r1
 8016c0e:	4640      	mov	r0, r8
 8016c10:	4649      	mov	r1, r9
 8016c12:	f7e9 fb43 	bl	800029c <__adddf3>
 8016c16:	a33e      	add	r3, pc, #248	; (adr r3, 8016d10 <__ieee754_pow+0x738>)
 8016c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c1c:	2000      	movs	r0, #0
 8016c1e:	4604      	mov	r4, r0
 8016c20:	460d      	mov	r5, r1
 8016c22:	f7e9 fcf1 	bl	8000608 <__aeabi_dmul>
 8016c26:	4642      	mov	r2, r8
 8016c28:	ec41 0b18 	vmov	d8, r0, r1
 8016c2c:	464b      	mov	r3, r9
 8016c2e:	4620      	mov	r0, r4
 8016c30:	4629      	mov	r1, r5
 8016c32:	f7e9 fb31 	bl	8000298 <__aeabi_dsub>
 8016c36:	4602      	mov	r2, r0
 8016c38:	460b      	mov	r3, r1
 8016c3a:	4630      	mov	r0, r6
 8016c3c:	4639      	mov	r1, r7
 8016c3e:	f7e9 fb2b 	bl	8000298 <__aeabi_dsub>
 8016c42:	a335      	add	r3, pc, #212	; (adr r3, 8016d18 <__ieee754_pow+0x740>)
 8016c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c48:	f7e9 fcde 	bl	8000608 <__aeabi_dmul>
 8016c4c:	a334      	add	r3, pc, #208	; (adr r3, 8016d20 <__ieee754_pow+0x748>)
 8016c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c52:	4606      	mov	r6, r0
 8016c54:	460f      	mov	r7, r1
 8016c56:	4620      	mov	r0, r4
 8016c58:	4629      	mov	r1, r5
 8016c5a:	f7e9 fcd5 	bl	8000608 <__aeabi_dmul>
 8016c5e:	4602      	mov	r2, r0
 8016c60:	460b      	mov	r3, r1
 8016c62:	4630      	mov	r0, r6
 8016c64:	4639      	mov	r1, r7
 8016c66:	f7e9 fb19 	bl	800029c <__adddf3>
 8016c6a:	9a07      	ldr	r2, [sp, #28]
 8016c6c:	4b37      	ldr	r3, [pc, #220]	; (8016d4c <__ieee754_pow+0x774>)
 8016c6e:	4413      	add	r3, r2
 8016c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c74:	f7e9 fb12 	bl	800029c <__adddf3>
 8016c78:	4682      	mov	sl, r0
 8016c7a:	9805      	ldr	r0, [sp, #20]
 8016c7c:	468b      	mov	fp, r1
 8016c7e:	f7e9 fc59 	bl	8000534 <__aeabi_i2d>
 8016c82:	9a07      	ldr	r2, [sp, #28]
 8016c84:	4b32      	ldr	r3, [pc, #200]	; (8016d50 <__ieee754_pow+0x778>)
 8016c86:	4413      	add	r3, r2
 8016c88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016c8c:	4606      	mov	r6, r0
 8016c8e:	460f      	mov	r7, r1
 8016c90:	4652      	mov	r2, sl
 8016c92:	465b      	mov	r3, fp
 8016c94:	ec51 0b18 	vmov	r0, r1, d8
 8016c98:	f7e9 fb00 	bl	800029c <__adddf3>
 8016c9c:	4642      	mov	r2, r8
 8016c9e:	464b      	mov	r3, r9
 8016ca0:	f7e9 fafc 	bl	800029c <__adddf3>
 8016ca4:	4632      	mov	r2, r6
 8016ca6:	463b      	mov	r3, r7
 8016ca8:	f7e9 faf8 	bl	800029c <__adddf3>
 8016cac:	2000      	movs	r0, #0
 8016cae:	4632      	mov	r2, r6
 8016cb0:	463b      	mov	r3, r7
 8016cb2:	4604      	mov	r4, r0
 8016cb4:	460d      	mov	r5, r1
 8016cb6:	f7e9 faef 	bl	8000298 <__aeabi_dsub>
 8016cba:	4642      	mov	r2, r8
 8016cbc:	464b      	mov	r3, r9
 8016cbe:	f7e9 faeb 	bl	8000298 <__aeabi_dsub>
 8016cc2:	ec53 2b18 	vmov	r2, r3, d8
 8016cc6:	f7e9 fae7 	bl	8000298 <__aeabi_dsub>
 8016cca:	4602      	mov	r2, r0
 8016ccc:	460b      	mov	r3, r1
 8016cce:	4650      	mov	r0, sl
 8016cd0:	4659      	mov	r1, fp
 8016cd2:	e610      	b.n	80168f6 <__ieee754_pow+0x31e>
 8016cd4:	2401      	movs	r4, #1
 8016cd6:	e6a1      	b.n	8016a1c <__ieee754_pow+0x444>
 8016cd8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8016d28 <__ieee754_pow+0x750>
 8016cdc:	e617      	b.n	801690e <__ieee754_pow+0x336>
 8016cde:	bf00      	nop
 8016ce0:	4a454eef 	.word	0x4a454eef
 8016ce4:	3fca7e28 	.word	0x3fca7e28
 8016ce8:	93c9db65 	.word	0x93c9db65
 8016cec:	3fcd864a 	.word	0x3fcd864a
 8016cf0:	a91d4101 	.word	0xa91d4101
 8016cf4:	3fd17460 	.word	0x3fd17460
 8016cf8:	518f264d 	.word	0x518f264d
 8016cfc:	3fd55555 	.word	0x3fd55555
 8016d00:	db6fabff 	.word	0xdb6fabff
 8016d04:	3fdb6db6 	.word	0x3fdb6db6
 8016d08:	33333303 	.word	0x33333303
 8016d0c:	3fe33333 	.word	0x3fe33333
 8016d10:	e0000000 	.word	0xe0000000
 8016d14:	3feec709 	.word	0x3feec709
 8016d18:	dc3a03fd 	.word	0xdc3a03fd
 8016d1c:	3feec709 	.word	0x3feec709
 8016d20:	145b01f5 	.word	0x145b01f5
 8016d24:	be3e2fe0 	.word	0xbe3e2fe0
 8016d28:	00000000 	.word	0x00000000
 8016d2c:	3ff00000 	.word	0x3ff00000
 8016d30:	7ff00000 	.word	0x7ff00000
 8016d34:	43400000 	.word	0x43400000
 8016d38:	0003988e 	.word	0x0003988e
 8016d3c:	000bb679 	.word	0x000bb679
 8016d40:	08019cd8 	.word	0x08019cd8
 8016d44:	3ff00000 	.word	0x3ff00000
 8016d48:	40080000 	.word	0x40080000
 8016d4c:	08019cf8 	.word	0x08019cf8
 8016d50:	08019ce8 	.word	0x08019ce8
 8016d54:	a3b3      	add	r3, pc, #716	; (adr r3, 8017024 <__ieee754_pow+0xa4c>)
 8016d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d5a:	4640      	mov	r0, r8
 8016d5c:	4649      	mov	r1, r9
 8016d5e:	f7e9 fa9d 	bl	800029c <__adddf3>
 8016d62:	4622      	mov	r2, r4
 8016d64:	ec41 0b1a 	vmov	d10, r0, r1
 8016d68:	462b      	mov	r3, r5
 8016d6a:	4630      	mov	r0, r6
 8016d6c:	4639      	mov	r1, r7
 8016d6e:	f7e9 fa93 	bl	8000298 <__aeabi_dsub>
 8016d72:	4602      	mov	r2, r0
 8016d74:	460b      	mov	r3, r1
 8016d76:	ec51 0b1a 	vmov	r0, r1, d10
 8016d7a:	f7e9 fed5 	bl	8000b28 <__aeabi_dcmpgt>
 8016d7e:	2800      	cmp	r0, #0
 8016d80:	f47f ae04 	bne.w	801698c <__ieee754_pow+0x3b4>
 8016d84:	4aa2      	ldr	r2, [pc, #648]	; (8017010 <__ieee754_pow+0xa38>)
 8016d86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016d8a:	4293      	cmp	r3, r2
 8016d8c:	f340 8107 	ble.w	8016f9e <__ieee754_pow+0x9c6>
 8016d90:	151b      	asrs	r3, r3, #20
 8016d92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016d96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016d9a:	fa4a fa03 	asr.w	sl, sl, r3
 8016d9e:	44da      	add	sl, fp
 8016da0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016da4:	489b      	ldr	r0, [pc, #620]	; (8017014 <__ieee754_pow+0xa3c>)
 8016da6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8016daa:	4108      	asrs	r0, r1
 8016dac:	ea00 030a 	and.w	r3, r0, sl
 8016db0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8016db4:	f1c1 0114 	rsb	r1, r1, #20
 8016db8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016dbc:	fa4a fa01 	asr.w	sl, sl, r1
 8016dc0:	f1bb 0f00 	cmp.w	fp, #0
 8016dc4:	f04f 0200 	mov.w	r2, #0
 8016dc8:	4620      	mov	r0, r4
 8016dca:	4629      	mov	r1, r5
 8016dcc:	bfb8      	it	lt
 8016dce:	f1ca 0a00 	rsblt	sl, sl, #0
 8016dd2:	f7e9 fa61 	bl	8000298 <__aeabi_dsub>
 8016dd6:	ec41 0b19 	vmov	d9, r0, r1
 8016dda:	4642      	mov	r2, r8
 8016ddc:	464b      	mov	r3, r9
 8016dde:	ec51 0b19 	vmov	r0, r1, d9
 8016de2:	f7e9 fa5b 	bl	800029c <__adddf3>
 8016de6:	a37a      	add	r3, pc, #488	; (adr r3, 8016fd0 <__ieee754_pow+0x9f8>)
 8016de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dec:	2000      	movs	r0, #0
 8016dee:	4604      	mov	r4, r0
 8016df0:	460d      	mov	r5, r1
 8016df2:	f7e9 fc09 	bl	8000608 <__aeabi_dmul>
 8016df6:	ec53 2b19 	vmov	r2, r3, d9
 8016dfa:	4606      	mov	r6, r0
 8016dfc:	460f      	mov	r7, r1
 8016dfe:	4620      	mov	r0, r4
 8016e00:	4629      	mov	r1, r5
 8016e02:	f7e9 fa49 	bl	8000298 <__aeabi_dsub>
 8016e06:	4602      	mov	r2, r0
 8016e08:	460b      	mov	r3, r1
 8016e0a:	4640      	mov	r0, r8
 8016e0c:	4649      	mov	r1, r9
 8016e0e:	f7e9 fa43 	bl	8000298 <__aeabi_dsub>
 8016e12:	a371      	add	r3, pc, #452	; (adr r3, 8016fd8 <__ieee754_pow+0xa00>)
 8016e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e18:	f7e9 fbf6 	bl	8000608 <__aeabi_dmul>
 8016e1c:	a370      	add	r3, pc, #448	; (adr r3, 8016fe0 <__ieee754_pow+0xa08>)
 8016e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e22:	4680      	mov	r8, r0
 8016e24:	4689      	mov	r9, r1
 8016e26:	4620      	mov	r0, r4
 8016e28:	4629      	mov	r1, r5
 8016e2a:	f7e9 fbed 	bl	8000608 <__aeabi_dmul>
 8016e2e:	4602      	mov	r2, r0
 8016e30:	460b      	mov	r3, r1
 8016e32:	4640      	mov	r0, r8
 8016e34:	4649      	mov	r1, r9
 8016e36:	f7e9 fa31 	bl	800029c <__adddf3>
 8016e3a:	4604      	mov	r4, r0
 8016e3c:	460d      	mov	r5, r1
 8016e3e:	4602      	mov	r2, r0
 8016e40:	460b      	mov	r3, r1
 8016e42:	4630      	mov	r0, r6
 8016e44:	4639      	mov	r1, r7
 8016e46:	f7e9 fa29 	bl	800029c <__adddf3>
 8016e4a:	4632      	mov	r2, r6
 8016e4c:	463b      	mov	r3, r7
 8016e4e:	4680      	mov	r8, r0
 8016e50:	4689      	mov	r9, r1
 8016e52:	f7e9 fa21 	bl	8000298 <__aeabi_dsub>
 8016e56:	4602      	mov	r2, r0
 8016e58:	460b      	mov	r3, r1
 8016e5a:	4620      	mov	r0, r4
 8016e5c:	4629      	mov	r1, r5
 8016e5e:	f7e9 fa1b 	bl	8000298 <__aeabi_dsub>
 8016e62:	4642      	mov	r2, r8
 8016e64:	4606      	mov	r6, r0
 8016e66:	460f      	mov	r7, r1
 8016e68:	464b      	mov	r3, r9
 8016e6a:	4640      	mov	r0, r8
 8016e6c:	4649      	mov	r1, r9
 8016e6e:	f7e9 fbcb 	bl	8000608 <__aeabi_dmul>
 8016e72:	a35d      	add	r3, pc, #372	; (adr r3, 8016fe8 <__ieee754_pow+0xa10>)
 8016e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e78:	4604      	mov	r4, r0
 8016e7a:	460d      	mov	r5, r1
 8016e7c:	f7e9 fbc4 	bl	8000608 <__aeabi_dmul>
 8016e80:	a35b      	add	r3, pc, #364	; (adr r3, 8016ff0 <__ieee754_pow+0xa18>)
 8016e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e86:	f7e9 fa07 	bl	8000298 <__aeabi_dsub>
 8016e8a:	4622      	mov	r2, r4
 8016e8c:	462b      	mov	r3, r5
 8016e8e:	f7e9 fbbb 	bl	8000608 <__aeabi_dmul>
 8016e92:	a359      	add	r3, pc, #356	; (adr r3, 8016ff8 <__ieee754_pow+0xa20>)
 8016e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e98:	f7e9 fa00 	bl	800029c <__adddf3>
 8016e9c:	4622      	mov	r2, r4
 8016e9e:	462b      	mov	r3, r5
 8016ea0:	f7e9 fbb2 	bl	8000608 <__aeabi_dmul>
 8016ea4:	a356      	add	r3, pc, #344	; (adr r3, 8017000 <__ieee754_pow+0xa28>)
 8016ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eaa:	f7e9 f9f5 	bl	8000298 <__aeabi_dsub>
 8016eae:	4622      	mov	r2, r4
 8016eb0:	462b      	mov	r3, r5
 8016eb2:	f7e9 fba9 	bl	8000608 <__aeabi_dmul>
 8016eb6:	a354      	add	r3, pc, #336	; (adr r3, 8017008 <__ieee754_pow+0xa30>)
 8016eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ebc:	f7e9 f9ee 	bl	800029c <__adddf3>
 8016ec0:	4622      	mov	r2, r4
 8016ec2:	462b      	mov	r3, r5
 8016ec4:	f7e9 fba0 	bl	8000608 <__aeabi_dmul>
 8016ec8:	4602      	mov	r2, r0
 8016eca:	460b      	mov	r3, r1
 8016ecc:	4640      	mov	r0, r8
 8016ece:	4649      	mov	r1, r9
 8016ed0:	f7e9 f9e2 	bl	8000298 <__aeabi_dsub>
 8016ed4:	4604      	mov	r4, r0
 8016ed6:	460d      	mov	r5, r1
 8016ed8:	4602      	mov	r2, r0
 8016eda:	460b      	mov	r3, r1
 8016edc:	4640      	mov	r0, r8
 8016ede:	4649      	mov	r1, r9
 8016ee0:	f7e9 fb92 	bl	8000608 <__aeabi_dmul>
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	ec41 0b19 	vmov	d9, r0, r1
 8016eea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016eee:	4620      	mov	r0, r4
 8016ef0:	4629      	mov	r1, r5
 8016ef2:	f7e9 f9d1 	bl	8000298 <__aeabi_dsub>
 8016ef6:	4602      	mov	r2, r0
 8016ef8:	460b      	mov	r3, r1
 8016efa:	ec51 0b19 	vmov	r0, r1, d9
 8016efe:	f7e9 fcad 	bl	800085c <__aeabi_ddiv>
 8016f02:	4632      	mov	r2, r6
 8016f04:	4604      	mov	r4, r0
 8016f06:	460d      	mov	r5, r1
 8016f08:	463b      	mov	r3, r7
 8016f0a:	4640      	mov	r0, r8
 8016f0c:	4649      	mov	r1, r9
 8016f0e:	f7e9 fb7b 	bl	8000608 <__aeabi_dmul>
 8016f12:	4632      	mov	r2, r6
 8016f14:	463b      	mov	r3, r7
 8016f16:	f7e9 f9c1 	bl	800029c <__adddf3>
 8016f1a:	4602      	mov	r2, r0
 8016f1c:	460b      	mov	r3, r1
 8016f1e:	4620      	mov	r0, r4
 8016f20:	4629      	mov	r1, r5
 8016f22:	f7e9 f9b9 	bl	8000298 <__aeabi_dsub>
 8016f26:	4642      	mov	r2, r8
 8016f28:	464b      	mov	r3, r9
 8016f2a:	f7e9 f9b5 	bl	8000298 <__aeabi_dsub>
 8016f2e:	460b      	mov	r3, r1
 8016f30:	4602      	mov	r2, r0
 8016f32:	4939      	ldr	r1, [pc, #228]	; (8017018 <__ieee754_pow+0xa40>)
 8016f34:	2000      	movs	r0, #0
 8016f36:	f7e9 f9af 	bl	8000298 <__aeabi_dsub>
 8016f3a:	ec41 0b10 	vmov	d0, r0, r1
 8016f3e:	ee10 3a90 	vmov	r3, s1
 8016f42:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016f4a:	da2b      	bge.n	8016fa4 <__ieee754_pow+0x9cc>
 8016f4c:	4650      	mov	r0, sl
 8016f4e:	f000 fc23 	bl	8017798 <scalbn>
 8016f52:	ec51 0b10 	vmov	r0, r1, d0
 8016f56:	ec53 2b18 	vmov	r2, r3, d8
 8016f5a:	f7ff bbee 	b.w	801673a <__ieee754_pow+0x162>
 8016f5e:	4b2f      	ldr	r3, [pc, #188]	; (801701c <__ieee754_pow+0xa44>)
 8016f60:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016f64:	429e      	cmp	r6, r3
 8016f66:	f77f af0d 	ble.w	8016d84 <__ieee754_pow+0x7ac>
 8016f6a:	4b2d      	ldr	r3, [pc, #180]	; (8017020 <__ieee754_pow+0xa48>)
 8016f6c:	440b      	add	r3, r1
 8016f6e:	4303      	orrs	r3, r0
 8016f70:	d009      	beq.n	8016f86 <__ieee754_pow+0x9ae>
 8016f72:	ec51 0b18 	vmov	r0, r1, d8
 8016f76:	2200      	movs	r2, #0
 8016f78:	2300      	movs	r3, #0
 8016f7a:	f7e9 fdb7 	bl	8000aec <__aeabi_dcmplt>
 8016f7e:	3800      	subs	r0, #0
 8016f80:	bf18      	it	ne
 8016f82:	2001      	movne	r0, #1
 8016f84:	e448      	b.n	8016818 <__ieee754_pow+0x240>
 8016f86:	4622      	mov	r2, r4
 8016f88:	462b      	mov	r3, r5
 8016f8a:	f7e9 f985 	bl	8000298 <__aeabi_dsub>
 8016f8e:	4642      	mov	r2, r8
 8016f90:	464b      	mov	r3, r9
 8016f92:	f7e9 fdbf 	bl	8000b14 <__aeabi_dcmpge>
 8016f96:	2800      	cmp	r0, #0
 8016f98:	f43f aef4 	beq.w	8016d84 <__ieee754_pow+0x7ac>
 8016f9c:	e7e9      	b.n	8016f72 <__ieee754_pow+0x99a>
 8016f9e:	f04f 0a00 	mov.w	sl, #0
 8016fa2:	e71a      	b.n	8016dda <__ieee754_pow+0x802>
 8016fa4:	ec51 0b10 	vmov	r0, r1, d0
 8016fa8:	4619      	mov	r1, r3
 8016faa:	e7d4      	b.n	8016f56 <__ieee754_pow+0x97e>
 8016fac:	491a      	ldr	r1, [pc, #104]	; (8017018 <__ieee754_pow+0xa40>)
 8016fae:	2000      	movs	r0, #0
 8016fb0:	f7ff bb31 	b.w	8016616 <__ieee754_pow+0x3e>
 8016fb4:	2000      	movs	r0, #0
 8016fb6:	2100      	movs	r1, #0
 8016fb8:	f7ff bb2d 	b.w	8016616 <__ieee754_pow+0x3e>
 8016fbc:	4630      	mov	r0, r6
 8016fbe:	4639      	mov	r1, r7
 8016fc0:	f7ff bb29 	b.w	8016616 <__ieee754_pow+0x3e>
 8016fc4:	9204      	str	r2, [sp, #16]
 8016fc6:	f7ff bb7b 	b.w	80166c0 <__ieee754_pow+0xe8>
 8016fca:	2300      	movs	r3, #0
 8016fcc:	f7ff bb65 	b.w	801669a <__ieee754_pow+0xc2>
 8016fd0:	00000000 	.word	0x00000000
 8016fd4:	3fe62e43 	.word	0x3fe62e43
 8016fd8:	fefa39ef 	.word	0xfefa39ef
 8016fdc:	3fe62e42 	.word	0x3fe62e42
 8016fe0:	0ca86c39 	.word	0x0ca86c39
 8016fe4:	be205c61 	.word	0xbe205c61
 8016fe8:	72bea4d0 	.word	0x72bea4d0
 8016fec:	3e663769 	.word	0x3e663769
 8016ff0:	c5d26bf1 	.word	0xc5d26bf1
 8016ff4:	3ebbbd41 	.word	0x3ebbbd41
 8016ff8:	af25de2c 	.word	0xaf25de2c
 8016ffc:	3f11566a 	.word	0x3f11566a
 8017000:	16bebd93 	.word	0x16bebd93
 8017004:	3f66c16c 	.word	0x3f66c16c
 8017008:	5555553e 	.word	0x5555553e
 801700c:	3fc55555 	.word	0x3fc55555
 8017010:	3fe00000 	.word	0x3fe00000
 8017014:	fff00000 	.word	0xfff00000
 8017018:	3ff00000 	.word	0x3ff00000
 801701c:	4090cbff 	.word	0x4090cbff
 8017020:	3f6f3400 	.word	0x3f6f3400
 8017024:	652b82fe 	.word	0x652b82fe
 8017028:	3c971547 	.word	0x3c971547
 801702c:	00000000 	.word	0x00000000

08017030 <__ieee754_rem_pio2>:
 8017030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017034:	ed2d 8b02 	vpush	{d8}
 8017038:	ec55 4b10 	vmov	r4, r5, d0
 801703c:	4bca      	ldr	r3, [pc, #808]	; (8017368 <__ieee754_rem_pio2+0x338>)
 801703e:	b08b      	sub	sp, #44	; 0x2c
 8017040:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8017044:	4598      	cmp	r8, r3
 8017046:	4682      	mov	sl, r0
 8017048:	9502      	str	r5, [sp, #8]
 801704a:	dc08      	bgt.n	801705e <__ieee754_rem_pio2+0x2e>
 801704c:	2200      	movs	r2, #0
 801704e:	2300      	movs	r3, #0
 8017050:	ed80 0b00 	vstr	d0, [r0]
 8017054:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017058:	f04f 0b00 	mov.w	fp, #0
 801705c:	e028      	b.n	80170b0 <__ieee754_rem_pio2+0x80>
 801705e:	4bc3      	ldr	r3, [pc, #780]	; (801736c <__ieee754_rem_pio2+0x33c>)
 8017060:	4598      	cmp	r8, r3
 8017062:	dc78      	bgt.n	8017156 <__ieee754_rem_pio2+0x126>
 8017064:	9b02      	ldr	r3, [sp, #8]
 8017066:	4ec2      	ldr	r6, [pc, #776]	; (8017370 <__ieee754_rem_pio2+0x340>)
 8017068:	2b00      	cmp	r3, #0
 801706a:	ee10 0a10 	vmov	r0, s0
 801706e:	a3b0      	add	r3, pc, #704	; (adr r3, 8017330 <__ieee754_rem_pio2+0x300>)
 8017070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017074:	4629      	mov	r1, r5
 8017076:	dd39      	ble.n	80170ec <__ieee754_rem_pio2+0xbc>
 8017078:	f7e9 f90e 	bl	8000298 <__aeabi_dsub>
 801707c:	45b0      	cmp	r8, r6
 801707e:	4604      	mov	r4, r0
 8017080:	460d      	mov	r5, r1
 8017082:	d01b      	beq.n	80170bc <__ieee754_rem_pio2+0x8c>
 8017084:	a3ac      	add	r3, pc, #688	; (adr r3, 8017338 <__ieee754_rem_pio2+0x308>)
 8017086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801708a:	f7e9 f905 	bl	8000298 <__aeabi_dsub>
 801708e:	4602      	mov	r2, r0
 8017090:	460b      	mov	r3, r1
 8017092:	e9ca 2300 	strd	r2, r3, [sl]
 8017096:	4620      	mov	r0, r4
 8017098:	4629      	mov	r1, r5
 801709a:	f7e9 f8fd 	bl	8000298 <__aeabi_dsub>
 801709e:	a3a6      	add	r3, pc, #664	; (adr r3, 8017338 <__ieee754_rem_pio2+0x308>)
 80170a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170a4:	f7e9 f8f8 	bl	8000298 <__aeabi_dsub>
 80170a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80170ac:	f04f 0b01 	mov.w	fp, #1
 80170b0:	4658      	mov	r0, fp
 80170b2:	b00b      	add	sp, #44	; 0x2c
 80170b4:	ecbd 8b02 	vpop	{d8}
 80170b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8017340 <__ieee754_rem_pio2+0x310>)
 80170be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170c2:	f7e9 f8e9 	bl	8000298 <__aeabi_dsub>
 80170c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8017348 <__ieee754_rem_pio2+0x318>)
 80170c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170cc:	4604      	mov	r4, r0
 80170ce:	460d      	mov	r5, r1
 80170d0:	f7e9 f8e2 	bl	8000298 <__aeabi_dsub>
 80170d4:	4602      	mov	r2, r0
 80170d6:	460b      	mov	r3, r1
 80170d8:	e9ca 2300 	strd	r2, r3, [sl]
 80170dc:	4620      	mov	r0, r4
 80170de:	4629      	mov	r1, r5
 80170e0:	f7e9 f8da 	bl	8000298 <__aeabi_dsub>
 80170e4:	a398      	add	r3, pc, #608	; (adr r3, 8017348 <__ieee754_rem_pio2+0x318>)
 80170e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ea:	e7db      	b.n	80170a4 <__ieee754_rem_pio2+0x74>
 80170ec:	f7e9 f8d6 	bl	800029c <__adddf3>
 80170f0:	45b0      	cmp	r8, r6
 80170f2:	4604      	mov	r4, r0
 80170f4:	460d      	mov	r5, r1
 80170f6:	d016      	beq.n	8017126 <__ieee754_rem_pio2+0xf6>
 80170f8:	a38f      	add	r3, pc, #572	; (adr r3, 8017338 <__ieee754_rem_pio2+0x308>)
 80170fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170fe:	f7e9 f8cd 	bl	800029c <__adddf3>
 8017102:	4602      	mov	r2, r0
 8017104:	460b      	mov	r3, r1
 8017106:	e9ca 2300 	strd	r2, r3, [sl]
 801710a:	4620      	mov	r0, r4
 801710c:	4629      	mov	r1, r5
 801710e:	f7e9 f8c3 	bl	8000298 <__aeabi_dsub>
 8017112:	a389      	add	r3, pc, #548	; (adr r3, 8017338 <__ieee754_rem_pio2+0x308>)
 8017114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017118:	f7e9 f8c0 	bl	800029c <__adddf3>
 801711c:	f04f 3bff 	mov.w	fp, #4294967295
 8017120:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8017124:	e7c4      	b.n	80170b0 <__ieee754_rem_pio2+0x80>
 8017126:	a386      	add	r3, pc, #536	; (adr r3, 8017340 <__ieee754_rem_pio2+0x310>)
 8017128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801712c:	f7e9 f8b6 	bl	800029c <__adddf3>
 8017130:	a385      	add	r3, pc, #532	; (adr r3, 8017348 <__ieee754_rem_pio2+0x318>)
 8017132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017136:	4604      	mov	r4, r0
 8017138:	460d      	mov	r5, r1
 801713a:	f7e9 f8af 	bl	800029c <__adddf3>
 801713e:	4602      	mov	r2, r0
 8017140:	460b      	mov	r3, r1
 8017142:	e9ca 2300 	strd	r2, r3, [sl]
 8017146:	4620      	mov	r0, r4
 8017148:	4629      	mov	r1, r5
 801714a:	f7e9 f8a5 	bl	8000298 <__aeabi_dsub>
 801714e:	a37e      	add	r3, pc, #504	; (adr r3, 8017348 <__ieee754_rem_pio2+0x318>)
 8017150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017154:	e7e0      	b.n	8017118 <__ieee754_rem_pio2+0xe8>
 8017156:	4b87      	ldr	r3, [pc, #540]	; (8017374 <__ieee754_rem_pio2+0x344>)
 8017158:	4598      	cmp	r8, r3
 801715a:	f300 80d8 	bgt.w	801730e <__ieee754_rem_pio2+0x2de>
 801715e:	f000 fb0f 	bl	8017780 <fabs>
 8017162:	ec55 4b10 	vmov	r4, r5, d0
 8017166:	ee10 0a10 	vmov	r0, s0
 801716a:	a379      	add	r3, pc, #484	; (adr r3, 8017350 <__ieee754_rem_pio2+0x320>)
 801716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017170:	4629      	mov	r1, r5
 8017172:	f7e9 fa49 	bl	8000608 <__aeabi_dmul>
 8017176:	4b80      	ldr	r3, [pc, #512]	; (8017378 <__ieee754_rem_pio2+0x348>)
 8017178:	2200      	movs	r2, #0
 801717a:	f7e9 f88f 	bl	800029c <__adddf3>
 801717e:	f7e9 fcf3 	bl	8000b68 <__aeabi_d2iz>
 8017182:	4683      	mov	fp, r0
 8017184:	f7e9 f9d6 	bl	8000534 <__aeabi_i2d>
 8017188:	4602      	mov	r2, r0
 801718a:	460b      	mov	r3, r1
 801718c:	ec43 2b18 	vmov	d8, r2, r3
 8017190:	a367      	add	r3, pc, #412	; (adr r3, 8017330 <__ieee754_rem_pio2+0x300>)
 8017192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017196:	f7e9 fa37 	bl	8000608 <__aeabi_dmul>
 801719a:	4602      	mov	r2, r0
 801719c:	460b      	mov	r3, r1
 801719e:	4620      	mov	r0, r4
 80171a0:	4629      	mov	r1, r5
 80171a2:	f7e9 f879 	bl	8000298 <__aeabi_dsub>
 80171a6:	a364      	add	r3, pc, #400	; (adr r3, 8017338 <__ieee754_rem_pio2+0x308>)
 80171a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ac:	4606      	mov	r6, r0
 80171ae:	460f      	mov	r7, r1
 80171b0:	ec51 0b18 	vmov	r0, r1, d8
 80171b4:	f7e9 fa28 	bl	8000608 <__aeabi_dmul>
 80171b8:	f1bb 0f1f 	cmp.w	fp, #31
 80171bc:	4604      	mov	r4, r0
 80171be:	460d      	mov	r5, r1
 80171c0:	dc0d      	bgt.n	80171de <__ieee754_rem_pio2+0x1ae>
 80171c2:	4b6e      	ldr	r3, [pc, #440]	; (801737c <__ieee754_rem_pio2+0x34c>)
 80171c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80171c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171cc:	4543      	cmp	r3, r8
 80171ce:	d006      	beq.n	80171de <__ieee754_rem_pio2+0x1ae>
 80171d0:	4622      	mov	r2, r4
 80171d2:	462b      	mov	r3, r5
 80171d4:	4630      	mov	r0, r6
 80171d6:	4639      	mov	r1, r7
 80171d8:	f7e9 f85e 	bl	8000298 <__aeabi_dsub>
 80171dc:	e00e      	b.n	80171fc <__ieee754_rem_pio2+0x1cc>
 80171de:	462b      	mov	r3, r5
 80171e0:	4622      	mov	r2, r4
 80171e2:	4630      	mov	r0, r6
 80171e4:	4639      	mov	r1, r7
 80171e6:	f7e9 f857 	bl	8000298 <__aeabi_dsub>
 80171ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80171ee:	9303      	str	r3, [sp, #12]
 80171f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80171f4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80171f8:	2b10      	cmp	r3, #16
 80171fa:	dc02      	bgt.n	8017202 <__ieee754_rem_pio2+0x1d2>
 80171fc:	e9ca 0100 	strd	r0, r1, [sl]
 8017200:	e039      	b.n	8017276 <__ieee754_rem_pio2+0x246>
 8017202:	a34f      	add	r3, pc, #316	; (adr r3, 8017340 <__ieee754_rem_pio2+0x310>)
 8017204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017208:	ec51 0b18 	vmov	r0, r1, d8
 801720c:	f7e9 f9fc 	bl	8000608 <__aeabi_dmul>
 8017210:	4604      	mov	r4, r0
 8017212:	460d      	mov	r5, r1
 8017214:	4602      	mov	r2, r0
 8017216:	460b      	mov	r3, r1
 8017218:	4630      	mov	r0, r6
 801721a:	4639      	mov	r1, r7
 801721c:	f7e9 f83c 	bl	8000298 <__aeabi_dsub>
 8017220:	4602      	mov	r2, r0
 8017222:	460b      	mov	r3, r1
 8017224:	4680      	mov	r8, r0
 8017226:	4689      	mov	r9, r1
 8017228:	4630      	mov	r0, r6
 801722a:	4639      	mov	r1, r7
 801722c:	f7e9 f834 	bl	8000298 <__aeabi_dsub>
 8017230:	4622      	mov	r2, r4
 8017232:	462b      	mov	r3, r5
 8017234:	f7e9 f830 	bl	8000298 <__aeabi_dsub>
 8017238:	a343      	add	r3, pc, #268	; (adr r3, 8017348 <__ieee754_rem_pio2+0x318>)
 801723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801723e:	4604      	mov	r4, r0
 8017240:	460d      	mov	r5, r1
 8017242:	ec51 0b18 	vmov	r0, r1, d8
 8017246:	f7e9 f9df 	bl	8000608 <__aeabi_dmul>
 801724a:	4622      	mov	r2, r4
 801724c:	462b      	mov	r3, r5
 801724e:	f7e9 f823 	bl	8000298 <__aeabi_dsub>
 8017252:	4602      	mov	r2, r0
 8017254:	460b      	mov	r3, r1
 8017256:	4604      	mov	r4, r0
 8017258:	460d      	mov	r5, r1
 801725a:	4640      	mov	r0, r8
 801725c:	4649      	mov	r1, r9
 801725e:	f7e9 f81b 	bl	8000298 <__aeabi_dsub>
 8017262:	9a03      	ldr	r2, [sp, #12]
 8017264:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017268:	1ad3      	subs	r3, r2, r3
 801726a:	2b31      	cmp	r3, #49	; 0x31
 801726c:	dc24      	bgt.n	80172b8 <__ieee754_rem_pio2+0x288>
 801726e:	e9ca 0100 	strd	r0, r1, [sl]
 8017272:	4646      	mov	r6, r8
 8017274:	464f      	mov	r7, r9
 8017276:	e9da 8900 	ldrd	r8, r9, [sl]
 801727a:	4630      	mov	r0, r6
 801727c:	4642      	mov	r2, r8
 801727e:	464b      	mov	r3, r9
 8017280:	4639      	mov	r1, r7
 8017282:	f7e9 f809 	bl	8000298 <__aeabi_dsub>
 8017286:	462b      	mov	r3, r5
 8017288:	4622      	mov	r2, r4
 801728a:	f7e9 f805 	bl	8000298 <__aeabi_dsub>
 801728e:	9b02      	ldr	r3, [sp, #8]
 8017290:	2b00      	cmp	r3, #0
 8017292:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8017296:	f6bf af0b 	bge.w	80170b0 <__ieee754_rem_pio2+0x80>
 801729a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801729e:	f8ca 3004 	str.w	r3, [sl, #4]
 80172a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80172a6:	f8ca 8000 	str.w	r8, [sl]
 80172aa:	f8ca 0008 	str.w	r0, [sl, #8]
 80172ae:	f8ca 300c 	str.w	r3, [sl, #12]
 80172b2:	f1cb 0b00 	rsb	fp, fp, #0
 80172b6:	e6fb      	b.n	80170b0 <__ieee754_rem_pio2+0x80>
 80172b8:	a327      	add	r3, pc, #156	; (adr r3, 8017358 <__ieee754_rem_pio2+0x328>)
 80172ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172be:	ec51 0b18 	vmov	r0, r1, d8
 80172c2:	f7e9 f9a1 	bl	8000608 <__aeabi_dmul>
 80172c6:	4604      	mov	r4, r0
 80172c8:	460d      	mov	r5, r1
 80172ca:	4602      	mov	r2, r0
 80172cc:	460b      	mov	r3, r1
 80172ce:	4640      	mov	r0, r8
 80172d0:	4649      	mov	r1, r9
 80172d2:	f7e8 ffe1 	bl	8000298 <__aeabi_dsub>
 80172d6:	4602      	mov	r2, r0
 80172d8:	460b      	mov	r3, r1
 80172da:	4606      	mov	r6, r0
 80172dc:	460f      	mov	r7, r1
 80172de:	4640      	mov	r0, r8
 80172e0:	4649      	mov	r1, r9
 80172e2:	f7e8 ffd9 	bl	8000298 <__aeabi_dsub>
 80172e6:	4622      	mov	r2, r4
 80172e8:	462b      	mov	r3, r5
 80172ea:	f7e8 ffd5 	bl	8000298 <__aeabi_dsub>
 80172ee:	a31c      	add	r3, pc, #112	; (adr r3, 8017360 <__ieee754_rem_pio2+0x330>)
 80172f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172f4:	4604      	mov	r4, r0
 80172f6:	460d      	mov	r5, r1
 80172f8:	ec51 0b18 	vmov	r0, r1, d8
 80172fc:	f7e9 f984 	bl	8000608 <__aeabi_dmul>
 8017300:	4622      	mov	r2, r4
 8017302:	462b      	mov	r3, r5
 8017304:	f7e8 ffc8 	bl	8000298 <__aeabi_dsub>
 8017308:	4604      	mov	r4, r0
 801730a:	460d      	mov	r5, r1
 801730c:	e760      	b.n	80171d0 <__ieee754_rem_pio2+0x1a0>
 801730e:	4b1c      	ldr	r3, [pc, #112]	; (8017380 <__ieee754_rem_pio2+0x350>)
 8017310:	4598      	cmp	r8, r3
 8017312:	dd37      	ble.n	8017384 <__ieee754_rem_pio2+0x354>
 8017314:	ee10 2a10 	vmov	r2, s0
 8017318:	462b      	mov	r3, r5
 801731a:	4620      	mov	r0, r4
 801731c:	4629      	mov	r1, r5
 801731e:	f7e8 ffbb 	bl	8000298 <__aeabi_dsub>
 8017322:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8017326:	e9ca 0100 	strd	r0, r1, [sl]
 801732a:	e695      	b.n	8017058 <__ieee754_rem_pio2+0x28>
 801732c:	f3af 8000 	nop.w
 8017330:	54400000 	.word	0x54400000
 8017334:	3ff921fb 	.word	0x3ff921fb
 8017338:	1a626331 	.word	0x1a626331
 801733c:	3dd0b461 	.word	0x3dd0b461
 8017340:	1a600000 	.word	0x1a600000
 8017344:	3dd0b461 	.word	0x3dd0b461
 8017348:	2e037073 	.word	0x2e037073
 801734c:	3ba3198a 	.word	0x3ba3198a
 8017350:	6dc9c883 	.word	0x6dc9c883
 8017354:	3fe45f30 	.word	0x3fe45f30
 8017358:	2e000000 	.word	0x2e000000
 801735c:	3ba3198a 	.word	0x3ba3198a
 8017360:	252049c1 	.word	0x252049c1
 8017364:	397b839a 	.word	0x397b839a
 8017368:	3fe921fb 	.word	0x3fe921fb
 801736c:	4002d97b 	.word	0x4002d97b
 8017370:	3ff921fb 	.word	0x3ff921fb
 8017374:	413921fb 	.word	0x413921fb
 8017378:	3fe00000 	.word	0x3fe00000
 801737c:	08019d08 	.word	0x08019d08
 8017380:	7fefffff 	.word	0x7fefffff
 8017384:	ea4f 5628 	mov.w	r6, r8, asr #20
 8017388:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801738c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8017390:	4620      	mov	r0, r4
 8017392:	460d      	mov	r5, r1
 8017394:	f7e9 fbe8 	bl	8000b68 <__aeabi_d2iz>
 8017398:	f7e9 f8cc 	bl	8000534 <__aeabi_i2d>
 801739c:	4602      	mov	r2, r0
 801739e:	460b      	mov	r3, r1
 80173a0:	4620      	mov	r0, r4
 80173a2:	4629      	mov	r1, r5
 80173a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80173a8:	f7e8 ff76 	bl	8000298 <__aeabi_dsub>
 80173ac:	4b21      	ldr	r3, [pc, #132]	; (8017434 <__ieee754_rem_pio2+0x404>)
 80173ae:	2200      	movs	r2, #0
 80173b0:	f7e9 f92a 	bl	8000608 <__aeabi_dmul>
 80173b4:	460d      	mov	r5, r1
 80173b6:	4604      	mov	r4, r0
 80173b8:	f7e9 fbd6 	bl	8000b68 <__aeabi_d2iz>
 80173bc:	f7e9 f8ba 	bl	8000534 <__aeabi_i2d>
 80173c0:	4602      	mov	r2, r0
 80173c2:	460b      	mov	r3, r1
 80173c4:	4620      	mov	r0, r4
 80173c6:	4629      	mov	r1, r5
 80173c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80173cc:	f7e8 ff64 	bl	8000298 <__aeabi_dsub>
 80173d0:	4b18      	ldr	r3, [pc, #96]	; (8017434 <__ieee754_rem_pio2+0x404>)
 80173d2:	2200      	movs	r2, #0
 80173d4:	f7e9 f918 	bl	8000608 <__aeabi_dmul>
 80173d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80173dc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80173e0:	2703      	movs	r7, #3
 80173e2:	2400      	movs	r4, #0
 80173e4:	2500      	movs	r5, #0
 80173e6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80173ea:	4622      	mov	r2, r4
 80173ec:	462b      	mov	r3, r5
 80173ee:	46b9      	mov	r9, r7
 80173f0:	3f01      	subs	r7, #1
 80173f2:	f7e9 fb71 	bl	8000ad8 <__aeabi_dcmpeq>
 80173f6:	2800      	cmp	r0, #0
 80173f8:	d1f5      	bne.n	80173e6 <__ieee754_rem_pio2+0x3b6>
 80173fa:	4b0f      	ldr	r3, [pc, #60]	; (8017438 <__ieee754_rem_pio2+0x408>)
 80173fc:	9301      	str	r3, [sp, #4]
 80173fe:	2302      	movs	r3, #2
 8017400:	9300      	str	r3, [sp, #0]
 8017402:	4632      	mov	r2, r6
 8017404:	464b      	mov	r3, r9
 8017406:	4651      	mov	r1, sl
 8017408:	a804      	add	r0, sp, #16
 801740a:	f000 fa75 	bl	80178f8 <__kernel_rem_pio2>
 801740e:	9b02      	ldr	r3, [sp, #8]
 8017410:	2b00      	cmp	r3, #0
 8017412:	4683      	mov	fp, r0
 8017414:	f6bf ae4c 	bge.w	80170b0 <__ieee754_rem_pio2+0x80>
 8017418:	e9da 2100 	ldrd	r2, r1, [sl]
 801741c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017420:	e9ca 2300 	strd	r2, r3, [sl]
 8017424:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8017428:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801742c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8017430:	e73f      	b.n	80172b2 <__ieee754_rem_pio2+0x282>
 8017432:	bf00      	nop
 8017434:	41700000 	.word	0x41700000
 8017438:	08019d88 	.word	0x08019d88
 801743c:	00000000 	.word	0x00000000

08017440 <atan>:
 8017440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017444:	ec55 4b10 	vmov	r4, r5, d0
 8017448:	4bc3      	ldr	r3, [pc, #780]	; (8017758 <atan+0x318>)
 801744a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801744e:	429e      	cmp	r6, r3
 8017450:	46ab      	mov	fp, r5
 8017452:	dd18      	ble.n	8017486 <atan+0x46>
 8017454:	4bc1      	ldr	r3, [pc, #772]	; (801775c <atan+0x31c>)
 8017456:	429e      	cmp	r6, r3
 8017458:	dc01      	bgt.n	801745e <atan+0x1e>
 801745a:	d109      	bne.n	8017470 <atan+0x30>
 801745c:	b144      	cbz	r4, 8017470 <atan+0x30>
 801745e:	4622      	mov	r2, r4
 8017460:	462b      	mov	r3, r5
 8017462:	4620      	mov	r0, r4
 8017464:	4629      	mov	r1, r5
 8017466:	f7e8 ff19 	bl	800029c <__adddf3>
 801746a:	4604      	mov	r4, r0
 801746c:	460d      	mov	r5, r1
 801746e:	e006      	b.n	801747e <atan+0x3e>
 8017470:	f1bb 0f00 	cmp.w	fp, #0
 8017474:	f300 8131 	bgt.w	80176da <atan+0x29a>
 8017478:	a59b      	add	r5, pc, #620	; (adr r5, 80176e8 <atan+0x2a8>)
 801747a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801747e:	ec45 4b10 	vmov	d0, r4, r5
 8017482:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017486:	4bb6      	ldr	r3, [pc, #728]	; (8017760 <atan+0x320>)
 8017488:	429e      	cmp	r6, r3
 801748a:	dc14      	bgt.n	80174b6 <atan+0x76>
 801748c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017490:	429e      	cmp	r6, r3
 8017492:	dc0d      	bgt.n	80174b0 <atan+0x70>
 8017494:	a396      	add	r3, pc, #600	; (adr r3, 80176f0 <atan+0x2b0>)
 8017496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801749a:	ee10 0a10 	vmov	r0, s0
 801749e:	4629      	mov	r1, r5
 80174a0:	f7e8 fefc 	bl	800029c <__adddf3>
 80174a4:	4baf      	ldr	r3, [pc, #700]	; (8017764 <atan+0x324>)
 80174a6:	2200      	movs	r2, #0
 80174a8:	f7e9 fb3e 	bl	8000b28 <__aeabi_dcmpgt>
 80174ac:	2800      	cmp	r0, #0
 80174ae:	d1e6      	bne.n	801747e <atan+0x3e>
 80174b0:	f04f 3aff 	mov.w	sl, #4294967295
 80174b4:	e02b      	b.n	801750e <atan+0xce>
 80174b6:	f000 f963 	bl	8017780 <fabs>
 80174ba:	4bab      	ldr	r3, [pc, #684]	; (8017768 <atan+0x328>)
 80174bc:	429e      	cmp	r6, r3
 80174be:	ec55 4b10 	vmov	r4, r5, d0
 80174c2:	f300 80bf 	bgt.w	8017644 <atan+0x204>
 80174c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80174ca:	429e      	cmp	r6, r3
 80174cc:	f300 80a0 	bgt.w	8017610 <atan+0x1d0>
 80174d0:	ee10 2a10 	vmov	r2, s0
 80174d4:	ee10 0a10 	vmov	r0, s0
 80174d8:	462b      	mov	r3, r5
 80174da:	4629      	mov	r1, r5
 80174dc:	f7e8 fede 	bl	800029c <__adddf3>
 80174e0:	4ba0      	ldr	r3, [pc, #640]	; (8017764 <atan+0x324>)
 80174e2:	2200      	movs	r2, #0
 80174e4:	f7e8 fed8 	bl	8000298 <__aeabi_dsub>
 80174e8:	2200      	movs	r2, #0
 80174ea:	4606      	mov	r6, r0
 80174ec:	460f      	mov	r7, r1
 80174ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80174f2:	4620      	mov	r0, r4
 80174f4:	4629      	mov	r1, r5
 80174f6:	f7e8 fed1 	bl	800029c <__adddf3>
 80174fa:	4602      	mov	r2, r0
 80174fc:	460b      	mov	r3, r1
 80174fe:	4630      	mov	r0, r6
 8017500:	4639      	mov	r1, r7
 8017502:	f7e9 f9ab 	bl	800085c <__aeabi_ddiv>
 8017506:	f04f 0a00 	mov.w	sl, #0
 801750a:	4604      	mov	r4, r0
 801750c:	460d      	mov	r5, r1
 801750e:	4622      	mov	r2, r4
 8017510:	462b      	mov	r3, r5
 8017512:	4620      	mov	r0, r4
 8017514:	4629      	mov	r1, r5
 8017516:	f7e9 f877 	bl	8000608 <__aeabi_dmul>
 801751a:	4602      	mov	r2, r0
 801751c:	460b      	mov	r3, r1
 801751e:	4680      	mov	r8, r0
 8017520:	4689      	mov	r9, r1
 8017522:	f7e9 f871 	bl	8000608 <__aeabi_dmul>
 8017526:	a374      	add	r3, pc, #464	; (adr r3, 80176f8 <atan+0x2b8>)
 8017528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801752c:	4606      	mov	r6, r0
 801752e:	460f      	mov	r7, r1
 8017530:	f7e9 f86a 	bl	8000608 <__aeabi_dmul>
 8017534:	a372      	add	r3, pc, #456	; (adr r3, 8017700 <atan+0x2c0>)
 8017536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801753a:	f7e8 feaf 	bl	800029c <__adddf3>
 801753e:	4632      	mov	r2, r6
 8017540:	463b      	mov	r3, r7
 8017542:	f7e9 f861 	bl	8000608 <__aeabi_dmul>
 8017546:	a370      	add	r3, pc, #448	; (adr r3, 8017708 <atan+0x2c8>)
 8017548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801754c:	f7e8 fea6 	bl	800029c <__adddf3>
 8017550:	4632      	mov	r2, r6
 8017552:	463b      	mov	r3, r7
 8017554:	f7e9 f858 	bl	8000608 <__aeabi_dmul>
 8017558:	a36d      	add	r3, pc, #436	; (adr r3, 8017710 <atan+0x2d0>)
 801755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801755e:	f7e8 fe9d 	bl	800029c <__adddf3>
 8017562:	4632      	mov	r2, r6
 8017564:	463b      	mov	r3, r7
 8017566:	f7e9 f84f 	bl	8000608 <__aeabi_dmul>
 801756a:	a36b      	add	r3, pc, #428	; (adr r3, 8017718 <atan+0x2d8>)
 801756c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017570:	f7e8 fe94 	bl	800029c <__adddf3>
 8017574:	4632      	mov	r2, r6
 8017576:	463b      	mov	r3, r7
 8017578:	f7e9 f846 	bl	8000608 <__aeabi_dmul>
 801757c:	a368      	add	r3, pc, #416	; (adr r3, 8017720 <atan+0x2e0>)
 801757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017582:	f7e8 fe8b 	bl	800029c <__adddf3>
 8017586:	4642      	mov	r2, r8
 8017588:	464b      	mov	r3, r9
 801758a:	f7e9 f83d 	bl	8000608 <__aeabi_dmul>
 801758e:	a366      	add	r3, pc, #408	; (adr r3, 8017728 <atan+0x2e8>)
 8017590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017594:	4680      	mov	r8, r0
 8017596:	4689      	mov	r9, r1
 8017598:	4630      	mov	r0, r6
 801759a:	4639      	mov	r1, r7
 801759c:	f7e9 f834 	bl	8000608 <__aeabi_dmul>
 80175a0:	a363      	add	r3, pc, #396	; (adr r3, 8017730 <atan+0x2f0>)
 80175a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175a6:	f7e8 fe77 	bl	8000298 <__aeabi_dsub>
 80175aa:	4632      	mov	r2, r6
 80175ac:	463b      	mov	r3, r7
 80175ae:	f7e9 f82b 	bl	8000608 <__aeabi_dmul>
 80175b2:	a361      	add	r3, pc, #388	; (adr r3, 8017738 <atan+0x2f8>)
 80175b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b8:	f7e8 fe6e 	bl	8000298 <__aeabi_dsub>
 80175bc:	4632      	mov	r2, r6
 80175be:	463b      	mov	r3, r7
 80175c0:	f7e9 f822 	bl	8000608 <__aeabi_dmul>
 80175c4:	a35e      	add	r3, pc, #376	; (adr r3, 8017740 <atan+0x300>)
 80175c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ca:	f7e8 fe65 	bl	8000298 <__aeabi_dsub>
 80175ce:	4632      	mov	r2, r6
 80175d0:	463b      	mov	r3, r7
 80175d2:	f7e9 f819 	bl	8000608 <__aeabi_dmul>
 80175d6:	a35c      	add	r3, pc, #368	; (adr r3, 8017748 <atan+0x308>)
 80175d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175dc:	f7e8 fe5c 	bl	8000298 <__aeabi_dsub>
 80175e0:	4632      	mov	r2, r6
 80175e2:	463b      	mov	r3, r7
 80175e4:	f7e9 f810 	bl	8000608 <__aeabi_dmul>
 80175e8:	4602      	mov	r2, r0
 80175ea:	460b      	mov	r3, r1
 80175ec:	4640      	mov	r0, r8
 80175ee:	4649      	mov	r1, r9
 80175f0:	f7e8 fe54 	bl	800029c <__adddf3>
 80175f4:	4622      	mov	r2, r4
 80175f6:	462b      	mov	r3, r5
 80175f8:	f7e9 f806 	bl	8000608 <__aeabi_dmul>
 80175fc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8017600:	4602      	mov	r2, r0
 8017602:	460b      	mov	r3, r1
 8017604:	d14b      	bne.n	801769e <atan+0x25e>
 8017606:	4620      	mov	r0, r4
 8017608:	4629      	mov	r1, r5
 801760a:	f7e8 fe45 	bl	8000298 <__aeabi_dsub>
 801760e:	e72c      	b.n	801746a <atan+0x2a>
 8017610:	ee10 0a10 	vmov	r0, s0
 8017614:	4b53      	ldr	r3, [pc, #332]	; (8017764 <atan+0x324>)
 8017616:	2200      	movs	r2, #0
 8017618:	4629      	mov	r1, r5
 801761a:	f7e8 fe3d 	bl	8000298 <__aeabi_dsub>
 801761e:	4b51      	ldr	r3, [pc, #324]	; (8017764 <atan+0x324>)
 8017620:	4606      	mov	r6, r0
 8017622:	460f      	mov	r7, r1
 8017624:	2200      	movs	r2, #0
 8017626:	4620      	mov	r0, r4
 8017628:	4629      	mov	r1, r5
 801762a:	f7e8 fe37 	bl	800029c <__adddf3>
 801762e:	4602      	mov	r2, r0
 8017630:	460b      	mov	r3, r1
 8017632:	4630      	mov	r0, r6
 8017634:	4639      	mov	r1, r7
 8017636:	f7e9 f911 	bl	800085c <__aeabi_ddiv>
 801763a:	f04f 0a01 	mov.w	sl, #1
 801763e:	4604      	mov	r4, r0
 8017640:	460d      	mov	r5, r1
 8017642:	e764      	b.n	801750e <atan+0xce>
 8017644:	4b49      	ldr	r3, [pc, #292]	; (801776c <atan+0x32c>)
 8017646:	429e      	cmp	r6, r3
 8017648:	da1d      	bge.n	8017686 <atan+0x246>
 801764a:	ee10 0a10 	vmov	r0, s0
 801764e:	4b48      	ldr	r3, [pc, #288]	; (8017770 <atan+0x330>)
 8017650:	2200      	movs	r2, #0
 8017652:	4629      	mov	r1, r5
 8017654:	f7e8 fe20 	bl	8000298 <__aeabi_dsub>
 8017658:	4b45      	ldr	r3, [pc, #276]	; (8017770 <atan+0x330>)
 801765a:	4606      	mov	r6, r0
 801765c:	460f      	mov	r7, r1
 801765e:	2200      	movs	r2, #0
 8017660:	4620      	mov	r0, r4
 8017662:	4629      	mov	r1, r5
 8017664:	f7e8 ffd0 	bl	8000608 <__aeabi_dmul>
 8017668:	4b3e      	ldr	r3, [pc, #248]	; (8017764 <atan+0x324>)
 801766a:	2200      	movs	r2, #0
 801766c:	f7e8 fe16 	bl	800029c <__adddf3>
 8017670:	4602      	mov	r2, r0
 8017672:	460b      	mov	r3, r1
 8017674:	4630      	mov	r0, r6
 8017676:	4639      	mov	r1, r7
 8017678:	f7e9 f8f0 	bl	800085c <__aeabi_ddiv>
 801767c:	f04f 0a02 	mov.w	sl, #2
 8017680:	4604      	mov	r4, r0
 8017682:	460d      	mov	r5, r1
 8017684:	e743      	b.n	801750e <atan+0xce>
 8017686:	462b      	mov	r3, r5
 8017688:	ee10 2a10 	vmov	r2, s0
 801768c:	4939      	ldr	r1, [pc, #228]	; (8017774 <atan+0x334>)
 801768e:	2000      	movs	r0, #0
 8017690:	f7e9 f8e4 	bl	800085c <__aeabi_ddiv>
 8017694:	f04f 0a03 	mov.w	sl, #3
 8017698:	4604      	mov	r4, r0
 801769a:	460d      	mov	r5, r1
 801769c:	e737      	b.n	801750e <atan+0xce>
 801769e:	4b36      	ldr	r3, [pc, #216]	; (8017778 <atan+0x338>)
 80176a0:	4e36      	ldr	r6, [pc, #216]	; (801777c <atan+0x33c>)
 80176a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80176a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176aa:	f7e8 fdf5 	bl	8000298 <__aeabi_dsub>
 80176ae:	4622      	mov	r2, r4
 80176b0:	462b      	mov	r3, r5
 80176b2:	f7e8 fdf1 	bl	8000298 <__aeabi_dsub>
 80176b6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80176ba:	4602      	mov	r2, r0
 80176bc:	460b      	mov	r3, r1
 80176be:	e9d6 0100 	ldrd	r0, r1, [r6]
 80176c2:	f7e8 fde9 	bl	8000298 <__aeabi_dsub>
 80176c6:	f1bb 0f00 	cmp.w	fp, #0
 80176ca:	4604      	mov	r4, r0
 80176cc:	460d      	mov	r5, r1
 80176ce:	f6bf aed6 	bge.w	801747e <atan+0x3e>
 80176d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80176d6:	461d      	mov	r5, r3
 80176d8:	e6d1      	b.n	801747e <atan+0x3e>
 80176da:	a51d      	add	r5, pc, #116	; (adr r5, 8017750 <atan+0x310>)
 80176dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80176e0:	e6cd      	b.n	801747e <atan+0x3e>
 80176e2:	bf00      	nop
 80176e4:	f3af 8000 	nop.w
 80176e8:	54442d18 	.word	0x54442d18
 80176ec:	bff921fb 	.word	0xbff921fb
 80176f0:	8800759c 	.word	0x8800759c
 80176f4:	7e37e43c 	.word	0x7e37e43c
 80176f8:	e322da11 	.word	0xe322da11
 80176fc:	3f90ad3a 	.word	0x3f90ad3a
 8017700:	24760deb 	.word	0x24760deb
 8017704:	3fa97b4b 	.word	0x3fa97b4b
 8017708:	a0d03d51 	.word	0xa0d03d51
 801770c:	3fb10d66 	.word	0x3fb10d66
 8017710:	c54c206e 	.word	0xc54c206e
 8017714:	3fb745cd 	.word	0x3fb745cd
 8017718:	920083ff 	.word	0x920083ff
 801771c:	3fc24924 	.word	0x3fc24924
 8017720:	5555550d 	.word	0x5555550d
 8017724:	3fd55555 	.word	0x3fd55555
 8017728:	2c6a6c2f 	.word	0x2c6a6c2f
 801772c:	bfa2b444 	.word	0xbfa2b444
 8017730:	52defd9a 	.word	0x52defd9a
 8017734:	3fadde2d 	.word	0x3fadde2d
 8017738:	af749a6d 	.word	0xaf749a6d
 801773c:	3fb3b0f2 	.word	0x3fb3b0f2
 8017740:	fe231671 	.word	0xfe231671
 8017744:	3fbc71c6 	.word	0x3fbc71c6
 8017748:	9998ebc4 	.word	0x9998ebc4
 801774c:	3fc99999 	.word	0x3fc99999
 8017750:	54442d18 	.word	0x54442d18
 8017754:	3ff921fb 	.word	0x3ff921fb
 8017758:	440fffff 	.word	0x440fffff
 801775c:	7ff00000 	.word	0x7ff00000
 8017760:	3fdbffff 	.word	0x3fdbffff
 8017764:	3ff00000 	.word	0x3ff00000
 8017768:	3ff2ffff 	.word	0x3ff2ffff
 801776c:	40038000 	.word	0x40038000
 8017770:	3ff80000 	.word	0x3ff80000
 8017774:	bff00000 	.word	0xbff00000
 8017778:	08019eb0 	.word	0x08019eb0
 801777c:	08019e90 	.word	0x08019e90

08017780 <fabs>:
 8017780:	ec51 0b10 	vmov	r0, r1, d0
 8017784:	ee10 2a10 	vmov	r2, s0
 8017788:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801778c:	ec43 2b10 	vmov	d0, r2, r3
 8017790:	4770      	bx	lr
 8017792:	0000      	movs	r0, r0
 8017794:	0000      	movs	r0, r0
	...

08017798 <scalbn>:
 8017798:	b570      	push	{r4, r5, r6, lr}
 801779a:	ec55 4b10 	vmov	r4, r5, d0
 801779e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80177a2:	4606      	mov	r6, r0
 80177a4:	462b      	mov	r3, r5
 80177a6:	b999      	cbnz	r1, 80177d0 <scalbn+0x38>
 80177a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80177ac:	4323      	orrs	r3, r4
 80177ae:	d03f      	beq.n	8017830 <scalbn+0x98>
 80177b0:	4b35      	ldr	r3, [pc, #212]	; (8017888 <scalbn+0xf0>)
 80177b2:	4629      	mov	r1, r5
 80177b4:	ee10 0a10 	vmov	r0, s0
 80177b8:	2200      	movs	r2, #0
 80177ba:	f7e8 ff25 	bl	8000608 <__aeabi_dmul>
 80177be:	4b33      	ldr	r3, [pc, #204]	; (801788c <scalbn+0xf4>)
 80177c0:	429e      	cmp	r6, r3
 80177c2:	4604      	mov	r4, r0
 80177c4:	460d      	mov	r5, r1
 80177c6:	da10      	bge.n	80177ea <scalbn+0x52>
 80177c8:	a327      	add	r3, pc, #156	; (adr r3, 8017868 <scalbn+0xd0>)
 80177ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ce:	e01f      	b.n	8017810 <scalbn+0x78>
 80177d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80177d4:	4291      	cmp	r1, r2
 80177d6:	d10c      	bne.n	80177f2 <scalbn+0x5a>
 80177d8:	ee10 2a10 	vmov	r2, s0
 80177dc:	4620      	mov	r0, r4
 80177de:	4629      	mov	r1, r5
 80177e0:	f7e8 fd5c 	bl	800029c <__adddf3>
 80177e4:	4604      	mov	r4, r0
 80177e6:	460d      	mov	r5, r1
 80177e8:	e022      	b.n	8017830 <scalbn+0x98>
 80177ea:	460b      	mov	r3, r1
 80177ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80177f0:	3936      	subs	r1, #54	; 0x36
 80177f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80177f6:	4296      	cmp	r6, r2
 80177f8:	dd0d      	ble.n	8017816 <scalbn+0x7e>
 80177fa:	2d00      	cmp	r5, #0
 80177fc:	a11c      	add	r1, pc, #112	; (adr r1, 8017870 <scalbn+0xd8>)
 80177fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017802:	da02      	bge.n	801780a <scalbn+0x72>
 8017804:	a11c      	add	r1, pc, #112	; (adr r1, 8017878 <scalbn+0xe0>)
 8017806:	e9d1 0100 	ldrd	r0, r1, [r1]
 801780a:	a319      	add	r3, pc, #100	; (adr r3, 8017870 <scalbn+0xd8>)
 801780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017810:	f7e8 fefa 	bl	8000608 <__aeabi_dmul>
 8017814:	e7e6      	b.n	80177e4 <scalbn+0x4c>
 8017816:	1872      	adds	r2, r6, r1
 8017818:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801781c:	428a      	cmp	r2, r1
 801781e:	dcec      	bgt.n	80177fa <scalbn+0x62>
 8017820:	2a00      	cmp	r2, #0
 8017822:	dd08      	ble.n	8017836 <scalbn+0x9e>
 8017824:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017828:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801782c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017830:	ec45 4b10 	vmov	d0, r4, r5
 8017834:	bd70      	pop	{r4, r5, r6, pc}
 8017836:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801783a:	da08      	bge.n	801784e <scalbn+0xb6>
 801783c:	2d00      	cmp	r5, #0
 801783e:	a10a      	add	r1, pc, #40	; (adr r1, 8017868 <scalbn+0xd0>)
 8017840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017844:	dac0      	bge.n	80177c8 <scalbn+0x30>
 8017846:	a10e      	add	r1, pc, #56	; (adr r1, 8017880 <scalbn+0xe8>)
 8017848:	e9d1 0100 	ldrd	r0, r1, [r1]
 801784c:	e7bc      	b.n	80177c8 <scalbn+0x30>
 801784e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017852:	3236      	adds	r2, #54	; 0x36
 8017854:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017858:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801785c:	4620      	mov	r0, r4
 801785e:	4b0c      	ldr	r3, [pc, #48]	; (8017890 <scalbn+0xf8>)
 8017860:	2200      	movs	r2, #0
 8017862:	e7d5      	b.n	8017810 <scalbn+0x78>
 8017864:	f3af 8000 	nop.w
 8017868:	c2f8f359 	.word	0xc2f8f359
 801786c:	01a56e1f 	.word	0x01a56e1f
 8017870:	8800759c 	.word	0x8800759c
 8017874:	7e37e43c 	.word	0x7e37e43c
 8017878:	8800759c 	.word	0x8800759c
 801787c:	fe37e43c 	.word	0xfe37e43c
 8017880:	c2f8f359 	.word	0xc2f8f359
 8017884:	81a56e1f 	.word	0x81a56e1f
 8017888:	43500000 	.word	0x43500000
 801788c:	ffff3cb0 	.word	0xffff3cb0
 8017890:	3c900000 	.word	0x3c900000

08017894 <with_errno>:
 8017894:	b570      	push	{r4, r5, r6, lr}
 8017896:	4604      	mov	r4, r0
 8017898:	460d      	mov	r5, r1
 801789a:	4616      	mov	r6, r2
 801789c:	f7fc f8e0 	bl	8013a60 <__errno>
 80178a0:	4629      	mov	r1, r5
 80178a2:	6006      	str	r6, [r0, #0]
 80178a4:	4620      	mov	r0, r4
 80178a6:	bd70      	pop	{r4, r5, r6, pc}

080178a8 <xflow>:
 80178a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80178aa:	4614      	mov	r4, r2
 80178ac:	461d      	mov	r5, r3
 80178ae:	b108      	cbz	r0, 80178b4 <xflow+0xc>
 80178b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80178b4:	e9cd 2300 	strd	r2, r3, [sp]
 80178b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178bc:	4620      	mov	r0, r4
 80178be:	4629      	mov	r1, r5
 80178c0:	f7e8 fea2 	bl	8000608 <__aeabi_dmul>
 80178c4:	2222      	movs	r2, #34	; 0x22
 80178c6:	b003      	add	sp, #12
 80178c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178cc:	f7ff bfe2 	b.w	8017894 <with_errno>

080178d0 <__math_uflow>:
 80178d0:	b508      	push	{r3, lr}
 80178d2:	2200      	movs	r2, #0
 80178d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80178d8:	f7ff ffe6 	bl	80178a8 <xflow>
 80178dc:	ec41 0b10 	vmov	d0, r0, r1
 80178e0:	bd08      	pop	{r3, pc}

080178e2 <__math_oflow>:
 80178e2:	b508      	push	{r3, lr}
 80178e4:	2200      	movs	r2, #0
 80178e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80178ea:	f7ff ffdd 	bl	80178a8 <xflow>
 80178ee:	ec41 0b10 	vmov	d0, r0, r1
 80178f2:	bd08      	pop	{r3, pc}
 80178f4:	0000      	movs	r0, r0
	...

080178f8 <__kernel_rem_pio2>:
 80178f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178fc:	ed2d 8b02 	vpush	{d8}
 8017900:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8017904:	f112 0f14 	cmn.w	r2, #20
 8017908:	9306      	str	r3, [sp, #24]
 801790a:	9104      	str	r1, [sp, #16]
 801790c:	4bc2      	ldr	r3, [pc, #776]	; (8017c18 <__kernel_rem_pio2+0x320>)
 801790e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8017910:	9009      	str	r0, [sp, #36]	; 0x24
 8017912:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017916:	9300      	str	r3, [sp, #0]
 8017918:	9b06      	ldr	r3, [sp, #24]
 801791a:	f103 33ff 	add.w	r3, r3, #4294967295
 801791e:	bfa8      	it	ge
 8017920:	1ed4      	subge	r4, r2, #3
 8017922:	9305      	str	r3, [sp, #20]
 8017924:	bfb2      	itee	lt
 8017926:	2400      	movlt	r4, #0
 8017928:	2318      	movge	r3, #24
 801792a:	fb94 f4f3 	sdivge	r4, r4, r3
 801792e:	f06f 0317 	mvn.w	r3, #23
 8017932:	fb04 3303 	mla	r3, r4, r3, r3
 8017936:	eb03 0a02 	add.w	sl, r3, r2
 801793a:	9b00      	ldr	r3, [sp, #0]
 801793c:	9a05      	ldr	r2, [sp, #20]
 801793e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8017c08 <__kernel_rem_pio2+0x310>
 8017942:	eb03 0802 	add.w	r8, r3, r2
 8017946:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8017948:	1aa7      	subs	r7, r4, r2
 801794a:	ae20      	add	r6, sp, #128	; 0x80
 801794c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8017950:	2500      	movs	r5, #0
 8017952:	4545      	cmp	r5, r8
 8017954:	dd13      	ble.n	801797e <__kernel_rem_pio2+0x86>
 8017956:	9b06      	ldr	r3, [sp, #24]
 8017958:	aa20      	add	r2, sp, #128	; 0x80
 801795a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801795e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8017962:	f04f 0800 	mov.w	r8, #0
 8017966:	9b00      	ldr	r3, [sp, #0]
 8017968:	4598      	cmp	r8, r3
 801796a:	dc31      	bgt.n	80179d0 <__kernel_rem_pio2+0xd8>
 801796c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8017c08 <__kernel_rem_pio2+0x310>
 8017970:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017974:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017978:	462f      	mov	r7, r5
 801797a:	2600      	movs	r6, #0
 801797c:	e01b      	b.n	80179b6 <__kernel_rem_pio2+0xbe>
 801797e:	42ef      	cmn	r7, r5
 8017980:	d407      	bmi.n	8017992 <__kernel_rem_pio2+0x9a>
 8017982:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8017986:	f7e8 fdd5 	bl	8000534 <__aeabi_i2d>
 801798a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801798e:	3501      	adds	r5, #1
 8017990:	e7df      	b.n	8017952 <__kernel_rem_pio2+0x5a>
 8017992:	ec51 0b18 	vmov	r0, r1, d8
 8017996:	e7f8      	b.n	801798a <__kernel_rem_pio2+0x92>
 8017998:	e9d7 2300 	ldrd	r2, r3, [r7]
 801799c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80179a0:	f7e8 fe32 	bl	8000608 <__aeabi_dmul>
 80179a4:	4602      	mov	r2, r0
 80179a6:	460b      	mov	r3, r1
 80179a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80179ac:	f7e8 fc76 	bl	800029c <__adddf3>
 80179b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80179b4:	3601      	adds	r6, #1
 80179b6:	9b05      	ldr	r3, [sp, #20]
 80179b8:	429e      	cmp	r6, r3
 80179ba:	f1a7 0708 	sub.w	r7, r7, #8
 80179be:	ddeb      	ble.n	8017998 <__kernel_rem_pio2+0xa0>
 80179c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80179c4:	f108 0801 	add.w	r8, r8, #1
 80179c8:	ecab 7b02 	vstmia	fp!, {d7}
 80179cc:	3508      	adds	r5, #8
 80179ce:	e7ca      	b.n	8017966 <__kernel_rem_pio2+0x6e>
 80179d0:	9b00      	ldr	r3, [sp, #0]
 80179d2:	aa0c      	add	r2, sp, #48	; 0x30
 80179d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80179d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80179da:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80179dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80179e0:	9c00      	ldr	r4, [sp, #0]
 80179e2:	930a      	str	r3, [sp, #40]	; 0x28
 80179e4:	00e3      	lsls	r3, r4, #3
 80179e6:	9308      	str	r3, [sp, #32]
 80179e8:	ab98      	add	r3, sp, #608	; 0x260
 80179ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80179ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80179f2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80179f6:	ab70      	add	r3, sp, #448	; 0x1c0
 80179f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80179fc:	46c3      	mov	fp, r8
 80179fe:	46a1      	mov	r9, r4
 8017a00:	f1b9 0f00 	cmp.w	r9, #0
 8017a04:	f1a5 0508 	sub.w	r5, r5, #8
 8017a08:	dc77      	bgt.n	8017afa <__kernel_rem_pio2+0x202>
 8017a0a:	ec47 6b10 	vmov	d0, r6, r7
 8017a0e:	4650      	mov	r0, sl
 8017a10:	f7ff fec2 	bl	8017798 <scalbn>
 8017a14:	ec57 6b10 	vmov	r6, r7, d0
 8017a18:	2200      	movs	r2, #0
 8017a1a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8017a1e:	ee10 0a10 	vmov	r0, s0
 8017a22:	4639      	mov	r1, r7
 8017a24:	f7e8 fdf0 	bl	8000608 <__aeabi_dmul>
 8017a28:	ec41 0b10 	vmov	d0, r0, r1
 8017a2c:	f000 fab4 	bl	8017f98 <floor>
 8017a30:	4b7a      	ldr	r3, [pc, #488]	; (8017c1c <__kernel_rem_pio2+0x324>)
 8017a32:	ec51 0b10 	vmov	r0, r1, d0
 8017a36:	2200      	movs	r2, #0
 8017a38:	f7e8 fde6 	bl	8000608 <__aeabi_dmul>
 8017a3c:	4602      	mov	r2, r0
 8017a3e:	460b      	mov	r3, r1
 8017a40:	4630      	mov	r0, r6
 8017a42:	4639      	mov	r1, r7
 8017a44:	f7e8 fc28 	bl	8000298 <__aeabi_dsub>
 8017a48:	460f      	mov	r7, r1
 8017a4a:	4606      	mov	r6, r0
 8017a4c:	f7e9 f88c 	bl	8000b68 <__aeabi_d2iz>
 8017a50:	9002      	str	r0, [sp, #8]
 8017a52:	f7e8 fd6f 	bl	8000534 <__aeabi_i2d>
 8017a56:	4602      	mov	r2, r0
 8017a58:	460b      	mov	r3, r1
 8017a5a:	4630      	mov	r0, r6
 8017a5c:	4639      	mov	r1, r7
 8017a5e:	f7e8 fc1b 	bl	8000298 <__aeabi_dsub>
 8017a62:	f1ba 0f00 	cmp.w	sl, #0
 8017a66:	4606      	mov	r6, r0
 8017a68:	460f      	mov	r7, r1
 8017a6a:	dd6d      	ble.n	8017b48 <__kernel_rem_pio2+0x250>
 8017a6c:	1e61      	subs	r1, r4, #1
 8017a6e:	ab0c      	add	r3, sp, #48	; 0x30
 8017a70:	9d02      	ldr	r5, [sp, #8]
 8017a72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017a76:	f1ca 0018 	rsb	r0, sl, #24
 8017a7a:	fa43 f200 	asr.w	r2, r3, r0
 8017a7e:	4415      	add	r5, r2
 8017a80:	4082      	lsls	r2, r0
 8017a82:	1a9b      	subs	r3, r3, r2
 8017a84:	aa0c      	add	r2, sp, #48	; 0x30
 8017a86:	9502      	str	r5, [sp, #8]
 8017a88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8017a8c:	f1ca 0217 	rsb	r2, sl, #23
 8017a90:	fa43 fb02 	asr.w	fp, r3, r2
 8017a94:	f1bb 0f00 	cmp.w	fp, #0
 8017a98:	dd65      	ble.n	8017b66 <__kernel_rem_pio2+0x26e>
 8017a9a:	9b02      	ldr	r3, [sp, #8]
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	3301      	adds	r3, #1
 8017aa0:	9302      	str	r3, [sp, #8]
 8017aa2:	4615      	mov	r5, r2
 8017aa4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8017aa8:	4294      	cmp	r4, r2
 8017aaa:	f300 809f 	bgt.w	8017bec <__kernel_rem_pio2+0x2f4>
 8017aae:	f1ba 0f00 	cmp.w	sl, #0
 8017ab2:	dd07      	ble.n	8017ac4 <__kernel_rem_pio2+0x1cc>
 8017ab4:	f1ba 0f01 	cmp.w	sl, #1
 8017ab8:	f000 80c1 	beq.w	8017c3e <__kernel_rem_pio2+0x346>
 8017abc:	f1ba 0f02 	cmp.w	sl, #2
 8017ac0:	f000 80c7 	beq.w	8017c52 <__kernel_rem_pio2+0x35a>
 8017ac4:	f1bb 0f02 	cmp.w	fp, #2
 8017ac8:	d14d      	bne.n	8017b66 <__kernel_rem_pio2+0x26e>
 8017aca:	4632      	mov	r2, r6
 8017acc:	463b      	mov	r3, r7
 8017ace:	4954      	ldr	r1, [pc, #336]	; (8017c20 <__kernel_rem_pio2+0x328>)
 8017ad0:	2000      	movs	r0, #0
 8017ad2:	f7e8 fbe1 	bl	8000298 <__aeabi_dsub>
 8017ad6:	4606      	mov	r6, r0
 8017ad8:	460f      	mov	r7, r1
 8017ada:	2d00      	cmp	r5, #0
 8017adc:	d043      	beq.n	8017b66 <__kernel_rem_pio2+0x26e>
 8017ade:	4650      	mov	r0, sl
 8017ae0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8017c10 <__kernel_rem_pio2+0x318>
 8017ae4:	f7ff fe58 	bl	8017798 <scalbn>
 8017ae8:	4630      	mov	r0, r6
 8017aea:	4639      	mov	r1, r7
 8017aec:	ec53 2b10 	vmov	r2, r3, d0
 8017af0:	f7e8 fbd2 	bl	8000298 <__aeabi_dsub>
 8017af4:	4606      	mov	r6, r0
 8017af6:	460f      	mov	r7, r1
 8017af8:	e035      	b.n	8017b66 <__kernel_rem_pio2+0x26e>
 8017afa:	4b4a      	ldr	r3, [pc, #296]	; (8017c24 <__kernel_rem_pio2+0x32c>)
 8017afc:	2200      	movs	r2, #0
 8017afe:	4630      	mov	r0, r6
 8017b00:	4639      	mov	r1, r7
 8017b02:	f7e8 fd81 	bl	8000608 <__aeabi_dmul>
 8017b06:	f7e9 f82f 	bl	8000b68 <__aeabi_d2iz>
 8017b0a:	f7e8 fd13 	bl	8000534 <__aeabi_i2d>
 8017b0e:	4602      	mov	r2, r0
 8017b10:	460b      	mov	r3, r1
 8017b12:	ec43 2b18 	vmov	d8, r2, r3
 8017b16:	4b44      	ldr	r3, [pc, #272]	; (8017c28 <__kernel_rem_pio2+0x330>)
 8017b18:	2200      	movs	r2, #0
 8017b1a:	f7e8 fd75 	bl	8000608 <__aeabi_dmul>
 8017b1e:	4602      	mov	r2, r0
 8017b20:	460b      	mov	r3, r1
 8017b22:	4630      	mov	r0, r6
 8017b24:	4639      	mov	r1, r7
 8017b26:	f7e8 fbb7 	bl	8000298 <__aeabi_dsub>
 8017b2a:	f7e9 f81d 	bl	8000b68 <__aeabi_d2iz>
 8017b2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017b32:	f84b 0b04 	str.w	r0, [fp], #4
 8017b36:	ec51 0b18 	vmov	r0, r1, d8
 8017b3a:	f7e8 fbaf 	bl	800029c <__adddf3>
 8017b3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8017b42:	4606      	mov	r6, r0
 8017b44:	460f      	mov	r7, r1
 8017b46:	e75b      	b.n	8017a00 <__kernel_rem_pio2+0x108>
 8017b48:	d106      	bne.n	8017b58 <__kernel_rem_pio2+0x260>
 8017b4a:	1e63      	subs	r3, r4, #1
 8017b4c:	aa0c      	add	r2, sp, #48	; 0x30
 8017b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b52:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8017b56:	e79d      	b.n	8017a94 <__kernel_rem_pio2+0x19c>
 8017b58:	4b34      	ldr	r3, [pc, #208]	; (8017c2c <__kernel_rem_pio2+0x334>)
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	f7e8 ffda 	bl	8000b14 <__aeabi_dcmpge>
 8017b60:	2800      	cmp	r0, #0
 8017b62:	d140      	bne.n	8017be6 <__kernel_rem_pio2+0x2ee>
 8017b64:	4683      	mov	fp, r0
 8017b66:	2200      	movs	r2, #0
 8017b68:	2300      	movs	r3, #0
 8017b6a:	4630      	mov	r0, r6
 8017b6c:	4639      	mov	r1, r7
 8017b6e:	f7e8 ffb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8017b72:	2800      	cmp	r0, #0
 8017b74:	f000 80c1 	beq.w	8017cfa <__kernel_rem_pio2+0x402>
 8017b78:	1e65      	subs	r5, r4, #1
 8017b7a:	462b      	mov	r3, r5
 8017b7c:	2200      	movs	r2, #0
 8017b7e:	9900      	ldr	r1, [sp, #0]
 8017b80:	428b      	cmp	r3, r1
 8017b82:	da6d      	bge.n	8017c60 <__kernel_rem_pio2+0x368>
 8017b84:	2a00      	cmp	r2, #0
 8017b86:	f000 808a 	beq.w	8017c9e <__kernel_rem_pio2+0x3a6>
 8017b8a:	ab0c      	add	r3, sp, #48	; 0x30
 8017b8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8017b90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	f000 80ae 	beq.w	8017cf6 <__kernel_rem_pio2+0x3fe>
 8017b9a:	4650      	mov	r0, sl
 8017b9c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8017c10 <__kernel_rem_pio2+0x318>
 8017ba0:	f7ff fdfa 	bl	8017798 <scalbn>
 8017ba4:	1c6b      	adds	r3, r5, #1
 8017ba6:	00da      	lsls	r2, r3, #3
 8017ba8:	9205      	str	r2, [sp, #20]
 8017baa:	ec57 6b10 	vmov	r6, r7, d0
 8017bae:	aa70      	add	r2, sp, #448	; 0x1c0
 8017bb0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8017c24 <__kernel_rem_pio2+0x32c>
 8017bb4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8017bb8:	462c      	mov	r4, r5
 8017bba:	f04f 0800 	mov.w	r8, #0
 8017bbe:	2c00      	cmp	r4, #0
 8017bc0:	f280 80d4 	bge.w	8017d6c <__kernel_rem_pio2+0x474>
 8017bc4:	462c      	mov	r4, r5
 8017bc6:	2c00      	cmp	r4, #0
 8017bc8:	f2c0 8102 	blt.w	8017dd0 <__kernel_rem_pio2+0x4d8>
 8017bcc:	4b18      	ldr	r3, [pc, #96]	; (8017c30 <__kernel_rem_pio2+0x338>)
 8017bce:	461e      	mov	r6, r3
 8017bd0:	ab70      	add	r3, sp, #448	; 0x1c0
 8017bd2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8017bd6:	1b2b      	subs	r3, r5, r4
 8017bd8:	f04f 0900 	mov.w	r9, #0
 8017bdc:	f04f 0a00 	mov.w	sl, #0
 8017be0:	2700      	movs	r7, #0
 8017be2:	9306      	str	r3, [sp, #24]
 8017be4:	e0e6      	b.n	8017db4 <__kernel_rem_pio2+0x4bc>
 8017be6:	f04f 0b02 	mov.w	fp, #2
 8017bea:	e756      	b.n	8017a9a <__kernel_rem_pio2+0x1a2>
 8017bec:	f8d8 3000 	ldr.w	r3, [r8]
 8017bf0:	bb05      	cbnz	r5, 8017c34 <__kernel_rem_pio2+0x33c>
 8017bf2:	b123      	cbz	r3, 8017bfe <__kernel_rem_pio2+0x306>
 8017bf4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8017bf8:	f8c8 3000 	str.w	r3, [r8]
 8017bfc:	2301      	movs	r3, #1
 8017bfe:	3201      	adds	r2, #1
 8017c00:	f108 0804 	add.w	r8, r8, #4
 8017c04:	461d      	mov	r5, r3
 8017c06:	e74f      	b.n	8017aa8 <__kernel_rem_pio2+0x1b0>
	...
 8017c14:	3ff00000 	.word	0x3ff00000
 8017c18:	08019f10 	.word	0x08019f10
 8017c1c:	40200000 	.word	0x40200000
 8017c20:	3ff00000 	.word	0x3ff00000
 8017c24:	3e700000 	.word	0x3e700000
 8017c28:	41700000 	.word	0x41700000
 8017c2c:	3fe00000 	.word	0x3fe00000
 8017c30:	08019ed0 	.word	0x08019ed0
 8017c34:	1acb      	subs	r3, r1, r3
 8017c36:	f8c8 3000 	str.w	r3, [r8]
 8017c3a:	462b      	mov	r3, r5
 8017c3c:	e7df      	b.n	8017bfe <__kernel_rem_pio2+0x306>
 8017c3e:	1e62      	subs	r2, r4, #1
 8017c40:	ab0c      	add	r3, sp, #48	; 0x30
 8017c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c46:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017c4a:	a90c      	add	r1, sp, #48	; 0x30
 8017c4c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017c50:	e738      	b.n	8017ac4 <__kernel_rem_pio2+0x1cc>
 8017c52:	1e62      	subs	r2, r4, #1
 8017c54:	ab0c      	add	r3, sp, #48	; 0x30
 8017c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c5a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017c5e:	e7f4      	b.n	8017c4a <__kernel_rem_pio2+0x352>
 8017c60:	a90c      	add	r1, sp, #48	; 0x30
 8017c62:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017c66:	3b01      	subs	r3, #1
 8017c68:	430a      	orrs	r2, r1
 8017c6a:	e788      	b.n	8017b7e <__kernel_rem_pio2+0x286>
 8017c6c:	3301      	adds	r3, #1
 8017c6e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8017c72:	2900      	cmp	r1, #0
 8017c74:	d0fa      	beq.n	8017c6c <__kernel_rem_pio2+0x374>
 8017c76:	9a08      	ldr	r2, [sp, #32]
 8017c78:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8017c7c:	446a      	add	r2, sp
 8017c7e:	3a98      	subs	r2, #152	; 0x98
 8017c80:	9208      	str	r2, [sp, #32]
 8017c82:	9a06      	ldr	r2, [sp, #24]
 8017c84:	a920      	add	r1, sp, #128	; 0x80
 8017c86:	18a2      	adds	r2, r4, r2
 8017c88:	18e3      	adds	r3, r4, r3
 8017c8a:	f104 0801 	add.w	r8, r4, #1
 8017c8e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8017c92:	9302      	str	r3, [sp, #8]
 8017c94:	9b02      	ldr	r3, [sp, #8]
 8017c96:	4543      	cmp	r3, r8
 8017c98:	da04      	bge.n	8017ca4 <__kernel_rem_pio2+0x3ac>
 8017c9a:	461c      	mov	r4, r3
 8017c9c:	e6a2      	b.n	80179e4 <__kernel_rem_pio2+0xec>
 8017c9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017ca0:	2301      	movs	r3, #1
 8017ca2:	e7e4      	b.n	8017c6e <__kernel_rem_pio2+0x376>
 8017ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ca6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017caa:	f7e8 fc43 	bl	8000534 <__aeabi_i2d>
 8017cae:	e8e5 0102 	strd	r0, r1, [r5], #8
 8017cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cb4:	46ab      	mov	fp, r5
 8017cb6:	461c      	mov	r4, r3
 8017cb8:	f04f 0900 	mov.w	r9, #0
 8017cbc:	2600      	movs	r6, #0
 8017cbe:	2700      	movs	r7, #0
 8017cc0:	9b05      	ldr	r3, [sp, #20]
 8017cc2:	4599      	cmp	r9, r3
 8017cc4:	dd06      	ble.n	8017cd4 <__kernel_rem_pio2+0x3dc>
 8017cc6:	9b08      	ldr	r3, [sp, #32]
 8017cc8:	e8e3 6702 	strd	r6, r7, [r3], #8
 8017ccc:	f108 0801 	add.w	r8, r8, #1
 8017cd0:	9308      	str	r3, [sp, #32]
 8017cd2:	e7df      	b.n	8017c94 <__kernel_rem_pio2+0x39c>
 8017cd4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8017cd8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8017cdc:	f7e8 fc94 	bl	8000608 <__aeabi_dmul>
 8017ce0:	4602      	mov	r2, r0
 8017ce2:	460b      	mov	r3, r1
 8017ce4:	4630      	mov	r0, r6
 8017ce6:	4639      	mov	r1, r7
 8017ce8:	f7e8 fad8 	bl	800029c <__adddf3>
 8017cec:	f109 0901 	add.w	r9, r9, #1
 8017cf0:	4606      	mov	r6, r0
 8017cf2:	460f      	mov	r7, r1
 8017cf4:	e7e4      	b.n	8017cc0 <__kernel_rem_pio2+0x3c8>
 8017cf6:	3d01      	subs	r5, #1
 8017cf8:	e747      	b.n	8017b8a <__kernel_rem_pio2+0x292>
 8017cfa:	ec47 6b10 	vmov	d0, r6, r7
 8017cfe:	f1ca 0000 	rsb	r0, sl, #0
 8017d02:	f7ff fd49 	bl	8017798 <scalbn>
 8017d06:	ec57 6b10 	vmov	r6, r7, d0
 8017d0a:	4ba0      	ldr	r3, [pc, #640]	; (8017f8c <__kernel_rem_pio2+0x694>)
 8017d0c:	ee10 0a10 	vmov	r0, s0
 8017d10:	2200      	movs	r2, #0
 8017d12:	4639      	mov	r1, r7
 8017d14:	f7e8 fefe 	bl	8000b14 <__aeabi_dcmpge>
 8017d18:	b1f8      	cbz	r0, 8017d5a <__kernel_rem_pio2+0x462>
 8017d1a:	4b9d      	ldr	r3, [pc, #628]	; (8017f90 <__kernel_rem_pio2+0x698>)
 8017d1c:	2200      	movs	r2, #0
 8017d1e:	4630      	mov	r0, r6
 8017d20:	4639      	mov	r1, r7
 8017d22:	f7e8 fc71 	bl	8000608 <__aeabi_dmul>
 8017d26:	f7e8 ff1f 	bl	8000b68 <__aeabi_d2iz>
 8017d2a:	4680      	mov	r8, r0
 8017d2c:	f7e8 fc02 	bl	8000534 <__aeabi_i2d>
 8017d30:	4b96      	ldr	r3, [pc, #600]	; (8017f8c <__kernel_rem_pio2+0x694>)
 8017d32:	2200      	movs	r2, #0
 8017d34:	f7e8 fc68 	bl	8000608 <__aeabi_dmul>
 8017d38:	460b      	mov	r3, r1
 8017d3a:	4602      	mov	r2, r0
 8017d3c:	4639      	mov	r1, r7
 8017d3e:	4630      	mov	r0, r6
 8017d40:	f7e8 faaa 	bl	8000298 <__aeabi_dsub>
 8017d44:	f7e8 ff10 	bl	8000b68 <__aeabi_d2iz>
 8017d48:	1c65      	adds	r5, r4, #1
 8017d4a:	ab0c      	add	r3, sp, #48	; 0x30
 8017d4c:	f10a 0a18 	add.w	sl, sl, #24
 8017d50:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017d54:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8017d58:	e71f      	b.n	8017b9a <__kernel_rem_pio2+0x2a2>
 8017d5a:	4630      	mov	r0, r6
 8017d5c:	4639      	mov	r1, r7
 8017d5e:	f7e8 ff03 	bl	8000b68 <__aeabi_d2iz>
 8017d62:	ab0c      	add	r3, sp, #48	; 0x30
 8017d64:	4625      	mov	r5, r4
 8017d66:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017d6a:	e716      	b.n	8017b9a <__kernel_rem_pio2+0x2a2>
 8017d6c:	ab0c      	add	r3, sp, #48	; 0x30
 8017d6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017d72:	f7e8 fbdf 	bl	8000534 <__aeabi_i2d>
 8017d76:	4632      	mov	r2, r6
 8017d78:	463b      	mov	r3, r7
 8017d7a:	f7e8 fc45 	bl	8000608 <__aeabi_dmul>
 8017d7e:	4642      	mov	r2, r8
 8017d80:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8017d84:	464b      	mov	r3, r9
 8017d86:	4630      	mov	r0, r6
 8017d88:	4639      	mov	r1, r7
 8017d8a:	f7e8 fc3d 	bl	8000608 <__aeabi_dmul>
 8017d8e:	3c01      	subs	r4, #1
 8017d90:	4606      	mov	r6, r0
 8017d92:	460f      	mov	r7, r1
 8017d94:	e713      	b.n	8017bbe <__kernel_rem_pio2+0x2c6>
 8017d96:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8017d9a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8017d9e:	f7e8 fc33 	bl	8000608 <__aeabi_dmul>
 8017da2:	4602      	mov	r2, r0
 8017da4:	460b      	mov	r3, r1
 8017da6:	4648      	mov	r0, r9
 8017da8:	4651      	mov	r1, sl
 8017daa:	f7e8 fa77 	bl	800029c <__adddf3>
 8017dae:	3701      	adds	r7, #1
 8017db0:	4681      	mov	r9, r0
 8017db2:	468a      	mov	sl, r1
 8017db4:	9b00      	ldr	r3, [sp, #0]
 8017db6:	429f      	cmp	r7, r3
 8017db8:	dc02      	bgt.n	8017dc0 <__kernel_rem_pio2+0x4c8>
 8017dba:	9b06      	ldr	r3, [sp, #24]
 8017dbc:	429f      	cmp	r7, r3
 8017dbe:	ddea      	ble.n	8017d96 <__kernel_rem_pio2+0x49e>
 8017dc0:	9a06      	ldr	r2, [sp, #24]
 8017dc2:	ab48      	add	r3, sp, #288	; 0x120
 8017dc4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8017dc8:	e9c6 9a00 	strd	r9, sl, [r6]
 8017dcc:	3c01      	subs	r4, #1
 8017dce:	e6fa      	b.n	8017bc6 <__kernel_rem_pio2+0x2ce>
 8017dd0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8017dd2:	2b02      	cmp	r3, #2
 8017dd4:	dc0b      	bgt.n	8017dee <__kernel_rem_pio2+0x4f6>
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	dc39      	bgt.n	8017e4e <__kernel_rem_pio2+0x556>
 8017dda:	d05d      	beq.n	8017e98 <__kernel_rem_pio2+0x5a0>
 8017ddc:	9b02      	ldr	r3, [sp, #8]
 8017dde:	f003 0007 	and.w	r0, r3, #7
 8017de2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8017de6:	ecbd 8b02 	vpop	{d8}
 8017dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8017df0:	2b03      	cmp	r3, #3
 8017df2:	d1f3      	bne.n	8017ddc <__kernel_rem_pio2+0x4e4>
 8017df4:	9b05      	ldr	r3, [sp, #20]
 8017df6:	9500      	str	r5, [sp, #0]
 8017df8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8017dfc:	eb0d 0403 	add.w	r4, sp, r3
 8017e00:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8017e04:	46a2      	mov	sl, r4
 8017e06:	9b00      	ldr	r3, [sp, #0]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	f1aa 0a08 	sub.w	sl, sl, #8
 8017e0e:	dc69      	bgt.n	8017ee4 <__kernel_rem_pio2+0x5ec>
 8017e10:	46aa      	mov	sl, r5
 8017e12:	f1ba 0f01 	cmp.w	sl, #1
 8017e16:	f1a4 0408 	sub.w	r4, r4, #8
 8017e1a:	f300 8083 	bgt.w	8017f24 <__kernel_rem_pio2+0x62c>
 8017e1e:	9c05      	ldr	r4, [sp, #20]
 8017e20:	ab48      	add	r3, sp, #288	; 0x120
 8017e22:	441c      	add	r4, r3
 8017e24:	2000      	movs	r0, #0
 8017e26:	2100      	movs	r1, #0
 8017e28:	2d01      	cmp	r5, #1
 8017e2a:	f300 809a 	bgt.w	8017f62 <__kernel_rem_pio2+0x66a>
 8017e2e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8017e32:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8017e36:	f1bb 0f00 	cmp.w	fp, #0
 8017e3a:	f040 8098 	bne.w	8017f6e <__kernel_rem_pio2+0x676>
 8017e3e:	9b04      	ldr	r3, [sp, #16]
 8017e40:	e9c3 7800 	strd	r7, r8, [r3]
 8017e44:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8017e48:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8017e4c:	e7c6      	b.n	8017ddc <__kernel_rem_pio2+0x4e4>
 8017e4e:	9e05      	ldr	r6, [sp, #20]
 8017e50:	ab48      	add	r3, sp, #288	; 0x120
 8017e52:	441e      	add	r6, r3
 8017e54:	462c      	mov	r4, r5
 8017e56:	2000      	movs	r0, #0
 8017e58:	2100      	movs	r1, #0
 8017e5a:	2c00      	cmp	r4, #0
 8017e5c:	da33      	bge.n	8017ec6 <__kernel_rem_pio2+0x5ce>
 8017e5e:	f1bb 0f00 	cmp.w	fp, #0
 8017e62:	d036      	beq.n	8017ed2 <__kernel_rem_pio2+0x5da>
 8017e64:	4602      	mov	r2, r0
 8017e66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017e6a:	9c04      	ldr	r4, [sp, #16]
 8017e6c:	e9c4 2300 	strd	r2, r3, [r4]
 8017e70:	4602      	mov	r2, r0
 8017e72:	460b      	mov	r3, r1
 8017e74:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8017e78:	f7e8 fa0e 	bl	8000298 <__aeabi_dsub>
 8017e7c:	ae4a      	add	r6, sp, #296	; 0x128
 8017e7e:	2401      	movs	r4, #1
 8017e80:	42a5      	cmp	r5, r4
 8017e82:	da29      	bge.n	8017ed8 <__kernel_rem_pio2+0x5e0>
 8017e84:	f1bb 0f00 	cmp.w	fp, #0
 8017e88:	d002      	beq.n	8017e90 <__kernel_rem_pio2+0x598>
 8017e8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017e8e:	4619      	mov	r1, r3
 8017e90:	9b04      	ldr	r3, [sp, #16]
 8017e92:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8017e96:	e7a1      	b.n	8017ddc <__kernel_rem_pio2+0x4e4>
 8017e98:	9c05      	ldr	r4, [sp, #20]
 8017e9a:	ab48      	add	r3, sp, #288	; 0x120
 8017e9c:	441c      	add	r4, r3
 8017e9e:	2000      	movs	r0, #0
 8017ea0:	2100      	movs	r1, #0
 8017ea2:	2d00      	cmp	r5, #0
 8017ea4:	da09      	bge.n	8017eba <__kernel_rem_pio2+0x5c2>
 8017ea6:	f1bb 0f00 	cmp.w	fp, #0
 8017eaa:	d002      	beq.n	8017eb2 <__kernel_rem_pio2+0x5ba>
 8017eac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017eb0:	4619      	mov	r1, r3
 8017eb2:	9b04      	ldr	r3, [sp, #16]
 8017eb4:	e9c3 0100 	strd	r0, r1, [r3]
 8017eb8:	e790      	b.n	8017ddc <__kernel_rem_pio2+0x4e4>
 8017eba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017ebe:	f7e8 f9ed 	bl	800029c <__adddf3>
 8017ec2:	3d01      	subs	r5, #1
 8017ec4:	e7ed      	b.n	8017ea2 <__kernel_rem_pio2+0x5aa>
 8017ec6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8017eca:	f7e8 f9e7 	bl	800029c <__adddf3>
 8017ece:	3c01      	subs	r4, #1
 8017ed0:	e7c3      	b.n	8017e5a <__kernel_rem_pio2+0x562>
 8017ed2:	4602      	mov	r2, r0
 8017ed4:	460b      	mov	r3, r1
 8017ed6:	e7c8      	b.n	8017e6a <__kernel_rem_pio2+0x572>
 8017ed8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8017edc:	f7e8 f9de 	bl	800029c <__adddf3>
 8017ee0:	3401      	adds	r4, #1
 8017ee2:	e7cd      	b.n	8017e80 <__kernel_rem_pio2+0x588>
 8017ee4:	e9da 8900 	ldrd	r8, r9, [sl]
 8017ee8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8017eec:	9b00      	ldr	r3, [sp, #0]
 8017eee:	3b01      	subs	r3, #1
 8017ef0:	9300      	str	r3, [sp, #0]
 8017ef2:	4632      	mov	r2, r6
 8017ef4:	463b      	mov	r3, r7
 8017ef6:	4640      	mov	r0, r8
 8017ef8:	4649      	mov	r1, r9
 8017efa:	f7e8 f9cf 	bl	800029c <__adddf3>
 8017efe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017f02:	4602      	mov	r2, r0
 8017f04:	460b      	mov	r3, r1
 8017f06:	4640      	mov	r0, r8
 8017f08:	4649      	mov	r1, r9
 8017f0a:	f7e8 f9c5 	bl	8000298 <__aeabi_dsub>
 8017f0e:	4632      	mov	r2, r6
 8017f10:	463b      	mov	r3, r7
 8017f12:	f7e8 f9c3 	bl	800029c <__adddf3>
 8017f16:	ed9d 7b06 	vldr	d7, [sp, #24]
 8017f1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8017f1e:	ed8a 7b00 	vstr	d7, [sl]
 8017f22:	e770      	b.n	8017e06 <__kernel_rem_pio2+0x50e>
 8017f24:	e9d4 8900 	ldrd	r8, r9, [r4]
 8017f28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8017f2c:	4640      	mov	r0, r8
 8017f2e:	4632      	mov	r2, r6
 8017f30:	463b      	mov	r3, r7
 8017f32:	4649      	mov	r1, r9
 8017f34:	f7e8 f9b2 	bl	800029c <__adddf3>
 8017f38:	e9cd 0100 	strd	r0, r1, [sp]
 8017f3c:	4602      	mov	r2, r0
 8017f3e:	460b      	mov	r3, r1
 8017f40:	4640      	mov	r0, r8
 8017f42:	4649      	mov	r1, r9
 8017f44:	f7e8 f9a8 	bl	8000298 <__aeabi_dsub>
 8017f48:	4632      	mov	r2, r6
 8017f4a:	463b      	mov	r3, r7
 8017f4c:	f7e8 f9a6 	bl	800029c <__adddf3>
 8017f50:	ed9d 7b00 	vldr	d7, [sp]
 8017f54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017f58:	ed84 7b00 	vstr	d7, [r4]
 8017f5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017f60:	e757      	b.n	8017e12 <__kernel_rem_pio2+0x51a>
 8017f62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017f66:	f7e8 f999 	bl	800029c <__adddf3>
 8017f6a:	3d01      	subs	r5, #1
 8017f6c:	e75c      	b.n	8017e28 <__kernel_rem_pio2+0x530>
 8017f6e:	9b04      	ldr	r3, [sp, #16]
 8017f70:	9a04      	ldr	r2, [sp, #16]
 8017f72:	601f      	str	r7, [r3, #0]
 8017f74:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8017f78:	605c      	str	r4, [r3, #4]
 8017f7a:	609d      	str	r5, [r3, #8]
 8017f7c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017f80:	60d3      	str	r3, [r2, #12]
 8017f82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017f86:	6110      	str	r0, [r2, #16]
 8017f88:	6153      	str	r3, [r2, #20]
 8017f8a:	e727      	b.n	8017ddc <__kernel_rem_pio2+0x4e4>
 8017f8c:	41700000 	.word	0x41700000
 8017f90:	3e700000 	.word	0x3e700000
 8017f94:	00000000 	.word	0x00000000

08017f98 <floor>:
 8017f98:	ec51 0b10 	vmov	r0, r1, d0
 8017f9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fa4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8017fa8:	2e13      	cmp	r6, #19
 8017faa:	ee10 5a10 	vmov	r5, s0
 8017fae:	ee10 8a10 	vmov	r8, s0
 8017fb2:	460c      	mov	r4, r1
 8017fb4:	dc31      	bgt.n	801801a <floor+0x82>
 8017fb6:	2e00      	cmp	r6, #0
 8017fb8:	da14      	bge.n	8017fe4 <floor+0x4c>
 8017fba:	a333      	add	r3, pc, #204	; (adr r3, 8018088 <floor+0xf0>)
 8017fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fc0:	f7e8 f96c 	bl	800029c <__adddf3>
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	f7e8 fdae 	bl	8000b28 <__aeabi_dcmpgt>
 8017fcc:	b138      	cbz	r0, 8017fde <floor+0x46>
 8017fce:	2c00      	cmp	r4, #0
 8017fd0:	da53      	bge.n	801807a <floor+0xe2>
 8017fd2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8017fd6:	4325      	orrs	r5, r4
 8017fd8:	d052      	beq.n	8018080 <floor+0xe8>
 8017fda:	4c2d      	ldr	r4, [pc, #180]	; (8018090 <floor+0xf8>)
 8017fdc:	2500      	movs	r5, #0
 8017fde:	4621      	mov	r1, r4
 8017fe0:	4628      	mov	r0, r5
 8017fe2:	e024      	b.n	801802e <floor+0x96>
 8017fe4:	4f2b      	ldr	r7, [pc, #172]	; (8018094 <floor+0xfc>)
 8017fe6:	4137      	asrs	r7, r6
 8017fe8:	ea01 0307 	and.w	r3, r1, r7
 8017fec:	4303      	orrs	r3, r0
 8017fee:	d01e      	beq.n	801802e <floor+0x96>
 8017ff0:	a325      	add	r3, pc, #148	; (adr r3, 8018088 <floor+0xf0>)
 8017ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ff6:	f7e8 f951 	bl	800029c <__adddf3>
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	f7e8 fd93 	bl	8000b28 <__aeabi_dcmpgt>
 8018002:	2800      	cmp	r0, #0
 8018004:	d0eb      	beq.n	8017fde <floor+0x46>
 8018006:	2c00      	cmp	r4, #0
 8018008:	bfbe      	ittt	lt
 801800a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801800e:	4133      	asrlt	r3, r6
 8018010:	18e4      	addlt	r4, r4, r3
 8018012:	ea24 0407 	bic.w	r4, r4, r7
 8018016:	2500      	movs	r5, #0
 8018018:	e7e1      	b.n	8017fde <floor+0x46>
 801801a:	2e33      	cmp	r6, #51	; 0x33
 801801c:	dd0b      	ble.n	8018036 <floor+0x9e>
 801801e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018022:	d104      	bne.n	801802e <floor+0x96>
 8018024:	ee10 2a10 	vmov	r2, s0
 8018028:	460b      	mov	r3, r1
 801802a:	f7e8 f937 	bl	800029c <__adddf3>
 801802e:	ec41 0b10 	vmov	d0, r0, r1
 8018032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018036:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801803a:	f04f 37ff 	mov.w	r7, #4294967295
 801803e:	40df      	lsrs	r7, r3
 8018040:	4238      	tst	r0, r7
 8018042:	d0f4      	beq.n	801802e <floor+0x96>
 8018044:	a310      	add	r3, pc, #64	; (adr r3, 8018088 <floor+0xf0>)
 8018046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801804a:	f7e8 f927 	bl	800029c <__adddf3>
 801804e:	2200      	movs	r2, #0
 8018050:	2300      	movs	r3, #0
 8018052:	f7e8 fd69 	bl	8000b28 <__aeabi_dcmpgt>
 8018056:	2800      	cmp	r0, #0
 8018058:	d0c1      	beq.n	8017fde <floor+0x46>
 801805a:	2c00      	cmp	r4, #0
 801805c:	da0a      	bge.n	8018074 <floor+0xdc>
 801805e:	2e14      	cmp	r6, #20
 8018060:	d101      	bne.n	8018066 <floor+0xce>
 8018062:	3401      	adds	r4, #1
 8018064:	e006      	b.n	8018074 <floor+0xdc>
 8018066:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801806a:	2301      	movs	r3, #1
 801806c:	40b3      	lsls	r3, r6
 801806e:	441d      	add	r5, r3
 8018070:	45a8      	cmp	r8, r5
 8018072:	d8f6      	bhi.n	8018062 <floor+0xca>
 8018074:	ea25 0507 	bic.w	r5, r5, r7
 8018078:	e7b1      	b.n	8017fde <floor+0x46>
 801807a:	2500      	movs	r5, #0
 801807c:	462c      	mov	r4, r5
 801807e:	e7ae      	b.n	8017fde <floor+0x46>
 8018080:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8018084:	e7ab      	b.n	8017fde <floor+0x46>
 8018086:	bf00      	nop
 8018088:	8800759c 	.word	0x8800759c
 801808c:	7e37e43c 	.word	0x7e37e43c
 8018090:	bff00000 	.word	0xbff00000
 8018094:	000fffff 	.word	0x000fffff

08018098 <_init>:
 8018098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801809a:	bf00      	nop
 801809c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801809e:	bc08      	pop	{r3}
 80180a0:	469e      	mov	lr, r3
 80180a2:	4770      	bx	lr

080180a4 <_fini>:
 80180a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180a6:	bf00      	nop
 80180a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80180aa:	bc08      	pop	{r3}
 80180ac:	469e      	mov	lr, r3
 80180ae:	4770      	bx	lr
